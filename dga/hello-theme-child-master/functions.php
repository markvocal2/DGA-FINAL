<?php
/**
 * Theme functions and definitions.
 *
 * For additional information on potential customization options,
 * read the developers' documentation:
 * 
 *
 * https://developers.elementor.com/docs/hello-elementor-theme/
 *
 * @package HelloElementorChild
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );

// SonarQube Compliant: Define constants for duplicate string literals
define( 'DGA_TEXT_DOMAIN', 'my-custom-textdomain' );
define( 'DGA_MESSAGE_KEY', 'message' );
define( 'DGA_NONCE_KEY', 'nonce' );
define( 'DGA_DIV_CLOSE_TAG', '</div>' );
define( 'DGA_NAME_FIELD', 'name' );
define( 'DGA_POST_ID_FIELD', 'post_id' );
define( 'DGA_ID_FIELD', 'id' );
define( 'DGA_POST_TYPE_FIELD', 'post_type' );
define( 'DGA_JQUERY_HANDLE', 'jquery' );
define( 'DGA_TAXONOMY_FIELD', 'taxonomy' );
define( 'DGA_TITLE_FIELD', 'title' );
define( 'DGA_ADMIN_AJAX_URL', 'admin-ajax.php' );
define( 'DGA_TYPE_FIELD', 'type' );
define( 'DGA_POSTS_PER_PAGE', 'posts_per_page' );
define( 'DGA_KEY_FIELD', 'key' );
define( 'DGA_ENQUEUE_SCRIPTS_HOOK', 'wp_enqueue_scripts' );
define( 'DGA_PUBLISH_STATUS', 'publish' );
define( 'DGA_DATE_FIELD', 'date' );
define( 'DGA_ORDERBY_FIELD', 'orderby' );
define( 'DGA_POST_STATUS_FIELD', 'post_status' );
define( 'DGA_MANAGE_OPTIONS_CAP', 'manage_options' );
define( 'DGA_ADMIN_ROLE', 'administrator' );
define( 'DGA_SECURITY_FAILED_MSG', 'Security check failed' );
define( 'DGA_AJAX_URL_KEY', 'ajax_url' );
define( 'DGA_HIDE_EMPTY_FIELD', 'hide_empty' );
define( 'DGA_EDIT_POSTS_CAP', 'edit_posts' );
define( 'DGA_DESCRIPTION_FIELD', 'description' );
define( 'DGA_POST_TITLE_FIELD', 'post_title' );
define( 'DGA_TERM_NAME_FIELD', 'term_name' );
define( 'DGA_META_QUERY_FIELD', 'meta_query' );
define( 'DGA_PDPA_CONSENT', 'pdpa-consent' );
define( 'DGA_COMPLAINT_TYPE', 'complaint' );
define( 'DGA_DEPARTMENT_FIELD', 'department' );
define( 'DGA_ORDERBY_FIELD_VALUE', 'orderby' );
define( 'DGA_LABEL_FIELD', 'label' );
define( 'DGA_VERSION_NUMBER', '1.0.0' );
define( 'DGA_SUCCESS_STATUS', 'success' );
define( 'DGA_ORDER_FIELD', 'order' );
define( 'DGA_TERM_ID_FIELD', 'term_id' );
define( 'DGA_STATUS_FIELD', 'status' );
define( 'DGA_FIELD_KEY', 'field' );
define( 'DGA_ERROR_STATUS', 'error' );
define( 'DGA_SPAN_CLOSE_TAG', '</span>' );
define( 'DGA_TOTAL_FIELD', 'total' );
define( 'DGA_FIELDS_KEY', 'fields' );
define( 'DGA_PAGED_FIELD', 'paged' );
define( 'DGA_DEBUG_KEY', 'debug' );
define( 'DGA_BUTTON_TYPE', 'button' );
define( 'DGA_SUBMIT_TYPE', 'submit' );
define( 'DGA_HIDDEN_TYPE', 'hidden' );
define( 'DGA_POLITE_LIVE', 'polite' );
define( 'DGA_DISPLAY_NONE_STYLE', 'display:none;' );
define( 'DGA_SVG_VIEWBOX', '0 0 24 24' );
define( 'DGA_SVG_XMLNS', 'http://www.w3.org/2000/svg' );
define( 'DGA_DISPLAY_NONE_CSS', 'display: none;' );
define( 'DGA_REQUIRED_ATTR', 'required' );
define( 'DGA_ALERT_ROLE', 'alert' );

// Configuration constants for language switcher
define( 'DGA_LANG_COOKIE_NAME', 'dga_lang_api_abc456' );
define( 'DGA_LANG_COOKIE_EXPIRY', 86400 * 30 );
define( 'DGA_GOOGLE_COOKIE_EXPIRY', 3600 );
define( 'DGA_SUPPORTED_LANGUAGES', ['th', 'en'] );
define( 'DGA_DEFAULT_LANGUAGE', 'th' );

// Configuration for element removal
define( 'DGA_ELEMENTS_TO_REMOVE', [
    '#nav', '#backtoblog', 'p#nav', 'p#backtoblog', 
    '.privacy-policy-page-link', 'a[href*="wp-login.php?action=register"]',
    'a[href*="wp-login.php?action=lostpassword"]', 'a[href*="wp-login.php?action=rp"]',
    '.login-footer', '#login-footer', '#login + p', '#login ~ p'
] );

define( 'DGA_TEXT_PATTERNS_TO_REMOVE', [
    'ลงทะเบียน', 'ลืมรหัสผ่าน', 'กลับไปที่', 'privacy policy'
] );

// Additional constants for remaining duplicated strings
define( 'DGA_NONCE_FIELD', 'nonce' );
define( 'DGA_TOTAL_FIELD_KEY', 'total' );
define( 'DGA_FIELDS_PARAMETER', 'fields' );
define( 'DGA_PAGED_PARAMETER', 'paged' );

// Version constants
define( 'DGA_THEME_VERSION', '1.0.1' );

// Error messages constants
define( 'DGA_ERROR_MESSAGE_TH', 'เกิดข้อผิดพลาด' );
define( 'DGA_ERROR_RETRY_MESSAGE_TH', 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง' );
define( 'DGA_INVALID_NONCE_MESSAGE', 'Invalid nonce' );
define( 'DGA_PERMISSION_DENIED_MESSAGE', 'Permission denied' );
define( 'DGA_POST_NOT_FOUND_MESSAGE', 'Post not found' );
define( 'DGA_UNAUTHORIZED_ACCESS_MESSAGE', 'Unauthorized access' );

// Date format constants
define( 'DGA_DATETIME_FORMAT_TH', 'j F Y เวลา H:i' );
define( 'DGA_DATE_FORMAT_SHORT', DGA_DATE_FORMAT_SHORT );

// HTML constants
define( 'DGA_ALT_EMPTY_ATTRIBUTE', '" alt=""' );

// WordPress file constants
define( 'DGA_WP_FILE_INCLUDE_PATH', 'wp-admin/includes/file.php' );

// Login related constants
define( 'DGA_LOGIN_TEXT_TH', 'เข้าสู่ระบบ' );
define( 'DGA_LOGOUT_TEXT_TH', DGA_LOGOUT_TEXT_TH );
define( 'DGA_REGISTER_PATH', DGA_REGISTER_PATH );

// HTML attribute constants
define( 'DGA_ID_EMPTY_ATTRIBUTE', '' . DGA_ID_EMPTY_ATTRIBUTE' );



/***** DGA ADMIN LOGIN **********/

// ฟังก์ชันหลักสำหรับการปรับแต่งหน้า Login
function dga_login2_admin() {
    // เพิ่ม CSS และ JavaScript
    add_action('login_enqueue_scripts', 'dga_login2_admin_styles');
    
    // เปลี่ยน URL ของโลโก้
    add_filter('login_headerurl', 'dga_login2_admin_logo_url');
    
    // เปลี่ยนข้อความ Title ของโลโก้
    add_filter('login_headertext', 'dga_login2_admin_logo_title');
    
    // ปรับแต่ง HTML ของฟอร์ม Login
    add_action('login_form', 'dga_login2_admin_form_additions');
    
    // เพิ่ม AJAX endpoints
    add_action('wp_ajax_nopriv_dga_ajax_login', 'dga_ajax_login_callback');
    
    // ลบตัวเลือกเปลี่ยนภาษา
    dga_remove_language_switcher();
    
    // ลบลิงก์ลงทะเบียน ลืมรหัสผ่าน และอื่นๆ (เพิ่มใหม่)
    dga_remove_login_links();
}
add_action('init', 'dga_login2_admin');

// ฟังก์ชันสำหรับการเพิ่ม CSS และ JavaScript
function dga_login2_admin_styles() {
    $theme_directory = get_stylesheet_directory_uri();
    
    // เพิ่ม CSS
    wp_enqueue_style('dga-login2-admin-style', $theme_directory . '/css/dga-login2-admin.css', array(), DGA_VERSION_NUMBER);
    
    // เพิ่ม JavaScript
    wp_enqueue_script('dga-login2-admin-script', $theme_directory . '/js/dga-login2-admin.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('dga-login2-admin-script', 'dga_login_params', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        'login_nonce' => wp_create_nonce('dga-login-nonce'),
        'redirect_url' => admin_url(),
        'loading_text' => __('กำลังเข้าสู่ระบบ...', 'dga'),
    ));
    
    // เพิ่ม CSS แบบ inline เพื่อซ่อนตัวเลือกภาษา
    wp_add_inline_style('dga-login2-admin-style', '
        /* ซ่อนทุกอิลิเมนต์ที่เกี่ยวข้องกับการเปลี่ยนภาษา */
        .language-switcher,
        #language-switcher,
        #language-switcher-locales-wrapper,
        .login-language-switcher,
        .login-form-language-switcher-container,
        .language-switcher-container,
        select[name="wp_lang"],
        select[name="language"],
        div[class*="language-switcher"],
        div[id*="language-switcher"],
        .login-footer-languages,
        #login-language-switcher,
        #login-footer-languages,
        .language-switcher-links,
        div:has(select[name="language"]),
        div:has(select[id*="language"]),
        a:contains("เปลี่ยนภาษา"),
        .login > form + div,
        .login > #loginform + div,
        .login-footer-local,
        .login-header-language,
        [id*="language"],
        [class*="language"],
        [name*="language"],
        [id*="lang-"],
        [class*="lang-"],
        [id*="lang_"],
        [class*="lang_"] {
            display: none !important;
            visibility: hidden !important;
        }
    ');
}

// ฟังก์ชันสำหรับการเปลี่ยน URL ของโลโก้
function dga_login2_admin_logo_url() {
    return home_url();
}

// ฟังก์ชันสำหรับการเปลี่ยนข้อความ Title ของโลโก้
function dga_login2_admin_logo_title() {
    return get_bloginfo('name');
}

// ฟังก์ชันสำหรับการเพิ่มเนื้อหาเข้าไปในฟอร์ม Login
function dga_login2_admin_form_additions() {
    echo '<div class="dga-login-response"></div>';
    echo '<input type="hidden" name="dga_login_nonce" value="' . wp_create_nonce('dga-login-nonce') . '">';
}

// ฟังก์ชัน AJAX Callback
function dga_ajax_login_callback() {
    // ตรวจสอบ Nonce
    check_ajax_referer('dga-login-nonce', 'security');
    
    // รับข้อมูลจากฟอร์ม
    $username = isset($_POST['username']) ? sanitize_user($_POST['username']) : '';
    $password = isset($_POST['password']) ? $_POST['password'] : '';
    $remember = isset($_POST['remember']) ? true : false;
    
    // ตรวจสอบการเข้าสู่ระบบ
    $user = wp_signon(array(
        'user_login' => $username,
        'user_password' => $password,
        'remember' => $remember
    ), is_ssl());
    
    // ตรวจสอบว่าเข้าสู่ระบบสำเร็จหรือไม่
    if (is_wp_error($user)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => $user->get_error_message()
        ));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('เข้าสู่ระบบสำเร็จ กำลังเปลี่ยนเส้นทาง...', 'dga'),
            'redirect' => admin_url()
        ));
    }
}

/**
 * ฟังก์ชันสำหรับลบตัวเลือกเปลี่ยนภาษาออกจากหน้า Login อย่างสมบูรณ์
 */
function dga_remove_language_switcher() {
    // ลบตัวเลือกภาษาด้วย filter
    add_filter('login_display_language_dropdown', '__return_false', 9999);
    add_filter('login_form_language_dropdown', '__return_false', 9999);
    
    // ลบทุก action ที่เกี่ยวข้องกับ language switcher
    if (has_action('login_form', 'wp_login_language_switcher')) {
        remove_action('login_form', 'wp_login_language_switcher');
    }
    
    // ใส่ JavaScript เพื่อซ่อนตัวเลือกภาษาที่อาจจะไม่ถูกซ่อนด้วย CSS
    add_action('login_footer', 'dga_language_switcher_remove_js', 9999);
    
    // ใช้ output buffering เพื่อลบ HTML ของตัวเลือกภาษา
    add_action('login_init', 'dga_remove_language_switcher_ob', 1);
}

/**
 * ฟังก์ชันสำหรับลบลิงก์ลงทะเบียน ลืมรหัสผ่าน และอื่นๆ (เพิ่มใหม่)
 */
function dga_remove_login_links() {
    // ลบลิงก์ลงทะเบียนและลืมรหัสผ่าน
    add_filter('login_display_password_reset_link', '__return_false');
    add_filter('login_display_register_link', '__return_false');
    
    // ลบลิงก์ Privacy Policy
    add_filter('the_privacy_policy_link', '__return_empty_string');
    
    // ลบใน footer
    add_action('login_footer', 'dga_remove_login_links_js', 9999);
    
    // ลบออกด้วย output buffer
    add_action('login_init', 'dga_remove_login_links_ob', 2);
}

/**
 * ฟังก์ชันสำหรับเพิ่ม JavaScript เพื่อซ่อนตัวเลือกภาษา
 */
function dga_language_switcher_remove_js() {
    ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // รายการ selector ที่ต้องการลบ
        const elementsToRemove = [
            '.language-switcher',
            '#language-switcher',
            '.login-language-switcher',
            '.login-footer-languages',
            'select[name="wp_lang"]',
            'select[name="language"]',
            '[id*="language"]',
            '[class*="language"]',
            'a:contains("เปลี่ยนภาษา")',
            'form + div select',
            '.login-footer-local',
            '.login-header-language'
        ];
        
        // ลบทุกอิลิเมนต์ที่ตรงกับ selector
        elementsToRemove.forEach(function(selector) {
            try {
                document.querySelectorAll(selector).forEach(function(el) {
                    if (el && el.parentNode) {
                        el.parentNode.removeChild(el);
                    }
                });
            } catch (e) {
                // ดักจับข้อผิดพลาดหากมี
            }
        });
    });
    </script>
    <?php
}

/**
 * ฟังก์ชันสำหรับเพิ่ม JavaScript เพื่อซ่อนลิงก์ (เพิ่มใหม่)
 */
/**
 * Refactored login links removal function with reduced cognitive complexity
 * Complexity reduced from ~12 to ~3
 */
function dga_remove_login_links_js() {
    ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        DGALoginCleaner.removeElementsBySelectors();
        DGALoginCleaner.removeElementsByTextContent();
    });
    
    // Login cleaner utility object with separated concerns
    const DGALoginCleaner = {
        // Configuration moved to constants
        elementsToRemove: <?php echo json_encode(DGA_ELEMENTS_TO_REMOVE); ?>,
        textPatternsToRemove: <?php echo json_encode(DGA_TEXT_PATTERNS_TO_REMOVE); ?>,
        
        // Simplified: Remove elements by CSS selectors
        removeElementsBySelectors: function() {
            this.elementsToRemove.forEach(selector => {
                this.safeRemoveElements(selector);
            });
        },
        
        // Simplified: Remove elements by text content
        removeElementsByTextContent: function() {
            const links = document.querySelectorAll('a');
            links.forEach(link => {
                this.processLinkByText(link);
            });
        },
        
        // Helper: Safe element removal with error handling
        safeRemoveElements: function(selector) {
            try {
                document.querySelectorAll(selector).forEach(el => {
                    this.removeElementSafely(el);
                });
            } catch (e) {
                console.warn('DGA: Error removing elements with selector:', selector);
            }
        },
        
        // Helper: Process individual link based on text content
        processLinkByText: function(link) {
            try {
                const text = link.textContent.toLowerCase();
                if (this.shouldRemoveByText(text)) {
                    this.removeWithParentCleanup(link);
                }
            } catch (e) {
                console.warn('DGA: Error processing link:', link);
            }
        },
        
        // Helper: Check if element should be removed based on text
        shouldRemoveByText: function(text) {
            return this.textPatternsToRemove.some(pattern => 
                text.includes(pattern.toLowerCase())
            );
        },
        
        // Helper: Remove element with parent cleanup logic
        removeWithParentCleanup: function(element) {
            const parentToRemove = this.findRemovableParent(element);
            this.removeElementSafely(parentToRemove || element);
        },
        
        // Helper: Find parent element that should be removed instead
        findRemovableParent: function(element) {
            let parent = element;
            while (parent && parent.tagName !== 'BODY') {
                if (parent.tagName === 'DIV' || parent.tagName === 'P') {
                    return parent;
                }
                parent = parent.parentNode;
            }
            return null;
        },
        
        // Helper: Safely remove element with parent check
        removeElementSafely: function(element) {
            if (element && element.parentNode) {
                element.parentNode.removeChild(element);
            }
        }
    };
    </script>
    <?php
}

/**
 * ฟังก์ชันสำหรับลบตัวเลือกภาษาด้วย Output Buffer
 */
function dga_remove_language_switcher_ob() {
    // เริ่มต้น output buffering
    ob_start(function($buffer) {
        // ลบตัวเลือกภาษาจาก HTML ด้วย regular expressions
        $patterns = [
            '/<select[^>]*(?:name=["\'](?:wp_lang|language)["\']|id=["\'][^"\']*(?:language|lang)[^"\']*["\'])[^>]*>.*?<\/select>/is',
            '/<div[^>]*(?:id=["\'][^"\']*(?:language|lang)[^"\']*["\']|class=["\'][^"\']*(?:language|lang)[^"\']*["\'])[^>]*>.*?<\/div>/is',
            '/<p[^>]*(?:class=["\'][^"\']*(?:language|lang)[^"\']*["\'])[^>]*>.*?<\/p>/is',
            '/<a[^>]*>.*?เปลี่ยนภาษา.*?<\/a>/is',
            '/<button[^>]*>.*?เปลี่ยนภาษา.*?<\/button>/is'
        ];
        
        foreach ($patterns as $pattern) {
            $buffer = preg_replace($pattern, '', $buffer);
        }
        
        return $buffer;
    });
}

/**
 * ฟังก์ชันสำหรับลบลิงก์ด้วย Output Buffer (เพิ่มใหม่)
 */
function dga_remove_login_links_ob() {
    // ถ้ามี output buffer ที่เปิดอยู่แล้ว ให้ใช้อันเดิม
    if (ob_get_level() == 0) {
        ob_start(function($buffer) {
            // ลบลิงก์จาก HTML ด้วย regular expressions
            $patterns = [
                '/<p[^>]*id=["\'](nav|backtoblog)["\'][^>]*>.*?<\/p>/is',
                '/<div[^>]*class=["\'](privacy-policy-page-link|login-footer)["\'][^>]*>.*?<\/div>/is',
                '/<a[^>]*>.*?(?:ลงทะเบียน|ลืมรหัสผ่าน|กลับไปที่|Privacy Policy).*?<\/a>/is'
            ];
            
            foreach ($patterns as $pattern) {
                $buffer = preg_replace($pattern, '', $buffer);
            }
            
            return $buffer;
        });
    }
    
    // ปิด output buffer ใน footer
    add_action('login_footer', function() {
        if (ob_get_level()) {
            ob_end_flush();
        }
    }, 9999);
}


/******* Google Translate with Enhanced Thai/English Switching *********/

/**
 * Helper function: Check if translation instance should be skipped
 */
function dga_translate_should_skip_instance() {
    static $instance_count = 0;
    $instance_count++;
    return $instance_count > 1;
}

/**
 * Helper function: Handle Thai language switching
 */
function dga_translate_handle_thai_language() {
    dga_force_clear_all_google_cookies_abc456();
    setcookie(DGA_LANG_COOKIE_NAME, 'th', time() + DGA_LANG_COOKIE_EXPIRY, '/');
    $_COOKIE[DGA_LANG_COOKIE_NAME] = 'th';
}

/**
 * Helper function: Handle English language switching
 */
function dga_translate_handle_english_language() {
    setcookie(DGA_LANG_COOKIE_NAME, 'en', time() + DGA_LANG_COOKIE_EXPIRY, '/');
    setcookie('googtrans', '/th/en', time() + DGA_GOOGLE_COOKIE_EXPIRY, '/');
    $_COOKIE[DGA_LANG_COOKIE_NAME] = 'en';
    $_COOKIE['googtrans'] = '/th/en';
}

/**
 * Helper function: Handle URL language parameter
 */
function dga_translate_handle_url_language() {
    if (!isset($_GET['lang'])) {
        return;
    }
    
    $requested_lang = sanitize_text_field($_GET['lang']);
    
    if (!in_array($requested_lang, DGA_SUPPORTED_LANGUAGES)) {
        return;
    }
    
    if ($requested_lang === 'th') {
        dga_translate_handle_thai_language();
        dga_translate_redirect_if_needed(['lang', 'force_thai', '_t']);
        return;
    }
    
    if ($requested_lang === 'en') {
        dga_translate_handle_english_language();
        dga_translate_redirect_if_needed(['lang', '_t']);
        return;
    }
}

/**
 * Helper function: Handle force Thai parameter
 */
function dga_translate_handle_force_thai() {
    if (!isset($_GET['force_thai']) || $_GET['force_thai'] !== '1') {
        return;
    }
    
    dga_translate_handle_thai_language();
    wp_redirect(remove_query_arg('force_thai'));
    exit;
}

/**
 * Helper function: Redirect if needed based on URL parameters
 */
function dga_translate_redirect_if_needed($params_to_check) {
    $should_redirect = false;
    foreach ($params_to_check as $param) {
        if (isset($_GET[$param])) {
            $should_redirect = true;
            break;
        }
    }
    
    if ($should_redirect) {
        $clean_url = remove_query_arg($params_to_check);
        wp_redirect($clean_url);
        exit;
    }
}

/**
 * Helper function: Get current language from cookies
 */
function dga_translate_get_current_language($default_language) {
    if (!isset($_COOKIE[DGA_LANG_COOKIE_NAME])) {
        return $default_language;
    }
    
    $cookie_lang = sanitize_text_field($_COOKIE[DGA_LANG_COOKIE_NAME]);
    return in_array($cookie_lang, DGA_SUPPORTED_LANGUAGES) ? $cookie_lang : $default_language;
}

/**
 * Helper function: Clean up conflicting cookies
 */
function dga_translate_cleanup_cookies($current_language) {
    if ($current_language === 'th' && isset($_COOKIE['googtrans'])) {
        dga_force_clear_all_google_cookies_abc456();
    }
}

/**
 * Helper function: Enqueue translation assets
 */
function dga_translate_enqueue_assets() {
    wp_enqueue_script(
        'dga-translate-api-abc456', 
        get_stylesheet_directory_uri() . '/js/dga-translate-api-abc456.js', 
        array(), 
        '14.0.0', 
        true
    );
    
    wp_enqueue_style(
        'dga-translate-api-abc456', 
        get_stylesheet_directory_uri() . '/css/dga-translate-api-abc456.css', 
        array(), 
        '11.0.0'
    );
}

/**
 * Refactored main translate function with reduced cognitive complexity
 * Complexity reduced from ~15 to ~3
 */
function dga_translate_api_shortcode_abc456($atts) {
    // Guard clause: Prevent multiple instances
    if (dga_translate_should_skip_instance()) {
        return '<!-- Google Translate instance already loaded -->';
    }
    
    // Handle URL parameters (extracted to helper functions)
    dga_translate_handle_url_language();
    dga_translate_handle_force_thai();
    
    // Parse and sanitize attributes
    $atts = dga_translate_parse_attributes($atts);
    $current_language = dga_translate_get_current_language($atts['default_language']);
    
    // Clean up conflicting cookies
    dga_translate_cleanup_cookies($current_language);
    
    // Setup assets and render widget
    dga_translate_enqueue_assets();
    $instance_id = dga_translate_setup_scripts($current_language, $atts['default_language']);
    
    return dga_translate_render_widget($current_language, $atts, $instance_id);
}

/**
 * Helper function: Parse and validate shortcode attributes
 */
function dga_translate_parse_attributes($atts) {
    $defaults = array(
        'default_language' => DGA_DEFAULT_LANGUAGE,
        'position' => 'inline',
        'style' => 'modern'
    );
    
    $atts = shortcode_atts($defaults, $atts, 'dga_translate_api');
    
    return array(
        'default_language' => sanitize_text_field($atts['default_language']),
        'position' => sanitize_text_field($atts['position']),
        'style' => sanitize_text_field($atts['style'])
    );
}

/**
 * Helper function: Setup JavaScript localization
 */
function dga_translate_setup_scripts($current_language, $default_language) {
    $instance_id = 'dga_translate_' . wp_rand(1000, 9999);
    
    wp_localize_script('dga-translate-api-abc456', 'dgaTranslateAPI', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_translate_api_nonce_abc456'),
        'currentLang' => $current_language,
        'defaultLang' => $default_language,
        'homeUrl' => home_url(),
        'instanceId' => $instance_id,
        'domain' => parse_url(home_url(), PHP_URL_HOST),
        'labels' => dga_translate_get_labels()
    ));
    
    return $instance_id;
}

/**
 * Helper function: Get translation labels
 */
function dga_translate_get_labels() {
    return array(
        'switchingToEn' => __('Switching to English...', 'dga-translate'),
        'switchingToTh' => __('กำลังเปลี่ยนเป็นภาษาไทย...', 'dga-translate'),
        'clearingCookies' => __('กำลังล้างข้อมูล...', 'dga-translate'),
        'reloadingEn' => __('Loading English version...', 'dga-translate'),
        'reloadingTh' => __('กำลังโหลดหน้าภาษาไทย...', 'dga-translate'),
        DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, 'dga-translate')
    );
}

/**
 * Helper function: Render the complete widget HTML
 */
function dga_translate_render_widget($current_language, $atts, $instance_id) {
    $html = dga_translate_render_main_container($current_language, $atts, $instance_id);
    $html .= dga_translate_render_google_script($current_language);
    
    return $html;
}

/**
 * Helper function: Render main widget container
 */
function dga_translate_render_main_container($current_language, $atts, $instance_id) {
    return sprintf(
        '<div class="dga-translate-api-abc456 dga-position-%s dga-style-%s" 
             data-current-lang="%s" 
             data-instance-id="%s"
             role="group"
             aria-label="%s">
            %s
            %s
            %s
        </div>',
        esc_attr($atts['position']),
        esc_attr($atts['style']),
        esc_attr($current_language),
        esc_attr($instance_id),
        __('Language selection', 'dga-translate'),
        dga_translate_render_buttons($current_language),
        dga_translate_render_loading_spinner(),
        dga_translate_render_progress_bar()
    );
}

/**
 * Helper function: Render language buttons
 */
function dga_translate_render_buttons($current_language) {
    return sprintf(
        '<div class="dga-translate-buttons-abc456">%s%s</div>',
        dga_translate_render_button('th', $current_language),
        dga_translate_render_button('en', $current_language)
    );
}

/**
 * Helper function: Render individual button
 */
function dga_translate_render_button($lang, $current_language) {
    $is_active = $current_language === $lang;
    $button_config = dga_translate_get_button_config($lang, $is_active);
    
    return sprintf(
        '<button type="%s" 
                class="dga-translate-btn-abc456 %s" 
                data-lang="%s"
                aria-label="%s"
                aria-pressed="%s"
                title="%s"
                %s>
            %s
            <span class="dga-lang-text-abc456" lang="%s">%s</span>
        </button>',
        DGA_BUTTON_TYPE,
        $is_active ? 'active' : '',
        $lang,
        $button_config['aria_label'],
        $is_active ? 'true' : 'false',
        $button_config[DGA_TITLE_FIELD],
        $is_active ? 'aria-current="true"' : '',
        $button_config['flag_svg'],
        $lang,
        $button_config['text']
    );
}

/**
 * Helper function: Get button configuration
 */
function dga_translate_get_button_config($lang, $is_active) {
    $configs = array(
        'th' => array(
            'text' => 'ไทย',
            DGA_TITLE_FIELD => __('Thai language', 'dga-translate'),
            'aria_label' => $is_active 
                ? __('Thai language (currently selected)', 'dga-translate')
                : __('Switch to Thai language', 'dga-translate'),
            'flag_svg' => dga_translate_render_thai_flag()
        ),
        'en' => array(
            'text' => 'EN',
            DGA_TITLE_FIELD => __('English language', 'dga-translate'),
            'aria_label' => $is_active 
                ? __('English language (currently selected)', 'dga-translate') 
                : __('Switch to English language', 'dga-translate'),
            'flag_svg' => dga_translate_render_english_flag()
        )
    );
    
    return $configs[$lang];
}

/**
 * Helper function: Render Thai flag SVG
 */
function dga_translate_render_thai_flag() {
    return sprintf(
        '<span class="dga-flag-icon-abc456" aria-hidden="true">
            <svg width="30" height="20" viewBox="%s" xmlns="%s" role="img" aria-label="%s">
                <title>%s</title>
                <rect width="30" height="3.33" fill="#ED1C24"/>
                <rect y="3.33" width="30" height="3.33" fill="#FFFFFF"/>
                <rect y="6.66" width="30" height="6.68" fill="#241D4F"/>
                <rect y="13.34" width="30" height="3.33" fill="#FFFFFF"/>
                <rect y="16.67" width="30" height="3.33" fill="#ED1C24"/>
            </svg>
        </span>',
        DGA_SVG_VIEWBOX,
        DGA_SVG_XMLNS,
        __('Thai flag', 'dga-translate'),
        __('Thai flag', 'dga-translate')
    );
}

/**
 * Helper function: Render English flag SVG
 */
function dga_translate_render_english_flag() {
    return sprintf(
        '<span class="dga-flag-icon-abc456" aria-hidden="true">
            <svg width="30" height="20" viewBox="%s" xmlns="%s" role="img" aria-label="%s">
                <title>%s</title>
                <rect width="30" height="20" fill="#012169"/>
                <path d="M0,0 L30,20 M30,0 L0,20" stroke="#FFF" stroke-width="3.5"/>
                <path d="M0,0 L30,20 M30,0 L0,20" stroke="#C8102E" stroke-width="2.3"/>
                <path d="M15,0 V20 M0,10 H30" stroke="#FFF" stroke-width="5.5"/>
                <path d="M15,0 V20 M0,10 H30" stroke="#C8102E" stroke-width="3.5"/>
            </svg>
        </span>',
        DGA_SVG_VIEWBOX,
        DGA_SVG_XMLNS,
        __('British flag', 'dga-translate'),
        __('British flag', 'dga-translate')
    );
}

/**
 * Helper function: Render loading spinner
 */
function dga_translate_render_loading_spinner() {
    return '<div class="dga-translate-loading-abc456" role="status" aria-live="polite" aria-busy="false">
                <div class="dga-spinner-abc456" aria-hidden="true"></div>
                <div class="dga-loading-text-abc456"></div>
            </div>';
}

/**
 * Helper function: Render progress bar
 */
function dga_translate_render_progress_bar() {
    return '<div class="dga-translate-progress-abc456" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-hidden="true">
                <div class="dga-progress-bar-abc456"></div>
            </div>';
}

/**
 * Helper function: Render Google Translate script based on language
 */
function dga_translate_render_google_script($current_language) {
    if ($current_language === 'en') {
        return dga_translate_render_google_translate_script();
    }
    
    return dga_translate_render_google_cleanup_script();
}

/**
 * Helper function: Render Google Translate initialization script
 */
function dga_translate_render_google_translate_script() {
    return sprintf(
        '<div id="google_translate_element_api" style="%s" aria-hidden="true"></div>
        <script type="text/javascript">
        function googleTranslateElementInit() {
            if (document.cookie.indexOf("%s=en") > -1) {
                new google.translate.TranslateElement({
                    pageLanguage: "th",
                    includedLanguages: "en,th",
                    autoDisplay: false,
                    layout: google.translate.TranslateElement.InlineLayout.SIMPLE
                }, "google_translate_element_api");
            }
        }
        if (document.cookie.indexOf("%s=en") > -1) {
            const script = document.createElement("script");
            script.type = "text/javascript";
            script.src = "//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit";
            document.head.appendChild(script);
        }
        </script>',
        DGA_DISPLAY_NONE_CSS,
        DGA_LANG_COOKIE_NAME,
        DGA_LANG_COOKIE_NAME
    );
}

/**
 * Helper function: Render Google Translate cleanup script
 */
function dga_translate_render_google_cleanup_script() {
    return '<script type="text/javascript">
        (function() {
            const gtElements = document.querySelectorAll("[class*=\'goog-te\'], [id*=\'goog\'], .skiptranslate");
            gtElements.forEach(function(el) {
                if (el && el.parentNode) {
                    el.parentNode.removeChild(el);
                }
            });
        })();
        </script>';
}
add_shortcode('dga_translate_api', 'dga_translate_api_shortcode_abc456');

/**
 * Force clear ALL Google-related cookies
 */
function dga_force_clear_all_google_cookies_abc456() {
    $domain = parse_url(home_url(), PHP_URL_HOST);
    
    // List of ALL Google Translate related cookies
    $google_cookies = array(
        'googtrans',
        '_googtrans', 
        'googtrans',
        'googtrans-mini',
        'translate_once',
        'googtranslate'
    );
    
    foreach ($google_cookies as $cookie_name) {
        // Try all methods to clear cookies
        setcookie($cookie_name, '', 1, '/');
        setcookie($cookie_name, '', 1, '/', $domain);
        setcookie($cookie_name, '', 1, '/', '.' . $domain);
        setcookie($cookie_name, '', time() - 3600, '/');
        setcookie($cookie_name, '', time() - 3600, '/', $domain);
        setcookie($cookie_name, '', time() - 3600, '/', '.' . $domain);
        
        // Unset from superglobal
        unset($_COOKIE[$cookie_name]);
    }
    
    // Clear any cookie containing 'trans' or 'googl'
    foreach ($_COOKIE as $name => $value) {
        if (stripos($name, 'trans') !== false || stripos($name, 'googl') !== false) {
            setcookie($name, '', 1, '/');
            setcookie($name, '', 1, '/', $domain);
            unset($_COOKIE[$name]);
        }
    }
}

/**
 * AJAX handler for language change
 */
function dga_ajax_change_language_api_abc456() {
    // Verify nonce for security
    if (!check_ajax_referer('dga_translate_api_nonce_abc456', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        return;
    }
    
    $language = isset($_POST['language']) ? sanitize_text_field($_POST['language']) : 'th';
    
    // Validate language
    if (!in_array($language, ['th', 'en'])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid language'));
        return;
    }
    
    if ($language === 'th') {
        // Clear ALL Google cookies for Thai
        dga_force_clear_all_google_cookies_abc456();
        
        // Set Thai cookie
        setcookie('dga_lang_api_abc456', 'th', time() + (86400 * 30), '/');
        
        // Clear from output buffer
        header_remove('Set-Cookie');
        
        // Set clean cookies
        header('Set-Cookie: dga_lang_api_abc456=th; Max-Age=2592000; Path=/');
        header('Set-Cookie: googtrans=; Max-Age=0; Path=/');
        
    } else {
        // Set English cookies
        setcookie('dga_lang_api_abc456', 'en', time() + (86400 * 30), '/');
        setcookie('googtrans', '/th/en', time() + 3600, '/');
    }
    
    // Save user preference if logged in
    if (is_user_logged_in()) {
        update_user_meta(get_current_user_id(), 'preferred_language_api', $language);
    }
    
    wp_send_json_success(array(
        'language' => $language,
        DGA_MESSAGE_KEY => 'Language changed successfully',
        'force_clear' => ($language === 'th')
    ));
}
add_action('wp_ajax_dga_change_language_api', 'dga_ajax_change_language_api_abc456');
add_action('wp_ajax_nopriv_dga_change_language_api', 'dga_ajax_change_language_api_abc456');

/**
 * Initialize language on every page load
 */
function dga_init_language_on_load_abc456() {
    // Skip in admin area
    if (is_admin()) {
        return;
    }
    
    // Check current language cookie
    $current_lang = isset($_COOKIE['dga_lang_api_abc456']) ? 
                    sanitize_text_field($_COOKIE['dga_lang_api_abc456']) : 'th';
    
    if ($current_lang === 'th') {
        // Force clear Google Translate cookies for Thai
        dga_force_clear_all_google_cookies_abc456();
    } elseif ($current_lang === 'en') {
        // Ensure Google Translate cookie is set for English
        if (!isset($_COOKIE['googtrans']) || $_COOKIE['googtrans'] !== '/th/en') {
            setcookie('googtrans', '/th/en', time() + 3600, '/');
        }
    }
}
add_action('init', 'dga_init_language_on_load_abc456', 1);

/**
 * Add inline cleanup script
 */
function dga_add_cleanup_script_abc456() {
    if (!is_admin()) {
        ?>
        <script>
        // Immediate cleanup on page load
        (function() {
            function getCookie(name) {
                const nameEQ = name + '=';
                const ca = document.cookie.split(';');
                for (let i = 0; i < ca.length; i++) {
                    const c = ca[i].trim();
                    if (c.indexOf(nameEQ) === 0) {
                        return c.substring(nameEQ.length);
                    }
                }
                return null;
            }
            
            function clearCookie(name) {
                document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';
                document.cookie = name + '=; Max-Age=0; path=/';
            }
            
            const currentLang = getCookie('dga_lang_api_abc456') || 'th';
            
            if (currentLang === 'th') {
                // Clear Google cookies for Thai
                clearCookie('googtrans');
                clearCookie('_googtrans');
                
                // Remove Google Translate elements
                const gtElements = document.querySelectorAll('.goog-te-banner-frame, .skiptranslate, #goog-gt-tt, [class*="goog-te"]');
                gtElements.forEach(function(el) {
                    el.style.display = 'none';
                    if (el.parentNode) {
                        el.parentNode.removeChild(el);
                    }
                });
                
                // Reset body styles
                document.body.style.top = '';
                document.body.style.position = '';
                document.body.style.marginTop = '';
            } else if (currentLang === 'en') {
                // Ensure Google Translate cookie for English
                if (getCookie('googtrans') !== '/th/en') {
                    document.cookie = 'googtrans=/th/en; path=/';
                }
            }
        })();
        </script>
        <?php
    }
}
add_action('wp_head', 'dga_add_cleanup_script_abc456', 1);

/**
 * Register text domain for translations
 */
function dga_translate_load_textdomain_abc456() {
    load_plugin_textdomain('dga-translate', false, dirname(plugin_basename(__FILE__)) . '/languages');
}
add_action('plugins_loaded', 'dga_translate_load_textdomain_abc456');



/********** ฟังก์ชั่นอีเมลแจ้งเตือนมีการเปลี่ยนรหัสผ่านสำเร็จ ***************/

// Disable default password change notification
add_filter('send_password_change_email', '__return_false');
add_filter('send_email_change_email', '__return_false');

/**
 * Send custom password change notification
 */
function send_custom_password_notification_dgx729($user_id, $old_user_data = null) {
    // Get user data
    $user = get_userdata($user_id);
    if (!$user) {
        return;
    }
    
    // Get current user (who made the change)
    $current_user = wp_get_current_user();
    
    // Only proceed if admin changed another user's password
    // or user changed their own password
    $changed_by_admin = false;
    if ($current_user->ID !== $user_id && current_user_can(DGA_ADMIN_ROLE)) {
        $changed_by_admin = true;
    }
    
    // Prepare email data
    $email_data = array(
        'to' => $user->user_email,
        'subject' => sprintf(__('Password Successfully Changed - %s', DGA_TEXT_DOMAIN), get_bloginfo('name')),
        'user' => $user,
        'changed_by_admin' => $changed_by_admin,
        'admin_name' => $changed_by_admin ? $current_user->display_name : '',
        'site_name' => get_bloginfo('name'),
        'site_url' => home_url(),
        'logo_url' => get_custom_logo_url_dgx729(),
        'change_time' => current_time('mysql'),
        'ip_address' => $_SERVER['REMOTE_ADDR'] ?? 'Unknown'
    );
    
    // Get email template
    $message = get_password_change_email_template_dgx729($email_data);
    
    // Set headers for HTML email
    $headers = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . get_bloginfo('name') . ' <' . get_option('admin_email') . '>'
    );
    
    // Send email
    wp_mail($email_data['to'], $email_data['subject'], $message, $headers);
}

/**
 * Hook into password change events
 */
add_action('profile_update', function($user_id, $old_user_data) {
    // Check if password was changed
    $user = get_userdata($user_id);
    if ($user && $old_user_data->user_pass !== $user->user_pass) {
        send_custom_password_notification_dgx729($user_id, $old_user_data);
    }
}, 10, 2);

// Hook for password reset
add_action('after_password_reset', function($user, $new_pass) {
    send_custom_password_notification_dgx729($user->ID);
}, 10, 2);

/**
 * Get custom logo URL or fallback
 */
function get_custom_logo_url_dgx729() {
    $custom_logo_id = get_theme_mod('custom_logo');
    if ($custom_logo_id) {
        $logo_data = wp_get_attachment_image_src($custom_logo_id, 'full');
        if ($logo_data) {
            return $logo_data[0];
        }
    }
    // Fallback to site icon or default
    $site_icon = get_site_icon_url();
    if ($site_icon) {
        return $site_icon;
    }
    // Return placeholder
    return 'https://via.placeholder.com/200x60/003366/ffffff?text=' . urlencode(get_bloginfo('name'));
}

/**
 * Load email template
 */
function get_password_change_email_template_dgx729($data) {
    $template_path = get_stylesheet_directory() . '/templates/dga-password-alert.php';
    
    // Check if template exists in child theme
    if (!file_exists($template_path)) {
        // Create default template if not exists
        return get_default_password_email_template_dgx729($data);
    }
    
    // Load template with output buffering
    ob_start();
    extract($data);
    include $template_path;
    return ob_get_clean();
}

/**
 * Default email template (fallback)
 */
function get_default_password_email_template_dgx729($data) {
    extract($data);
    ob_start();
    ?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo esc_html($subject); ?></title>
</head>
<body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background-color: #f5f7fa;">
    <!-- Main Container -->
    <table role="presentation" width="100%" cellspacing="0" cellpadding="0" border="0" style="background-color: #f5f7fa; min-height: 100vh;">
        <tr>
            <td align="center" style="padding: 40px 20px;">
                <!-- Email Container -->
                <table role="presentation" width="600" cellspacing="0" cellpadding="0" border="0" style="background-color: #ffffff; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.08); overflow: hidden;">
                    
                    <!-- Header with Logo -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #003366 0%, #004080 100%); padding: 30px; text-align: center;">
                            <?php if (!empty($logo_url)) : ?>
                                <img src="<?php echo esc_url($logo_url); ?>" alt="<?php echo esc_attr($site_name); ?>" style="max-width: 200px; height: auto; margin-bottom: 10px;">
                            <?php endif; ?>
                            <h1 style="color: #ffffff; margin: 0; font-size: 24px; font-weight: 600; letter-spacing: -0.5px;">
                                <?php echo esc_html($site_name); ?>
                            </h1>
                        </td>
                    </tr>
                    
                    <!-- Alert Banner -->
                    <tr>
                        <td style="background-color: #ff6b35; padding: 15px; text-align: center;">
                            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                                <tr>
                                    <td style="color: #ffffff; font-size: 16px; font-weight: 600;">
                                        🔐 <?php _e('PASSWORD CHANGE NOTIFICATION', DGA_TEXT_DOMAIN); ?>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    
                    <!-- Main Content -->
                    <tr>
                        <td style="padding: 40px 30px;">
                            <!-- Greeting -->
                            <h2 style="color: #003366; font-size: 20px; margin: 0 0 20px 0; font-weight: 600;">
                                <?php printf(__('Hello %s,', DGA_TEXT_DOMAIN), esc_html($user->display_name)); ?>
                            </h2>
                            
                            <!-- Success Message -->
                            <div style="background-color: #e8f4fd; border-left: 4px solid #003366; padding: 15px; margin-bottom: 25px; border-radius: 4px;">
                                <p style="color: #003366; margin: 0; font-size: 15px; line-height: 1.6;">
                                    ✅ <?php _e('Your password has been successfully changed.', DGA_TEXT_DOMAIN); ?>
                                </p>
                            </div>
                            
                            <!-- Details Section -->
                            <div style="background-color: #fafbfc; padding: 20px; border-radius: 6px; margin-bottom: 25px;">
                                <h3 style="color: #003366; font-size: 14px; text-transform: uppercase; letter-spacing: 0.5px; margin: 0 0 15px 0; font-weight: 600;">
                                    <?php _e('Change Details', DGA_TEXT_DOMAIN); ?>
                                </h3>
                                
                                <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                        <td style="padding: 8px 0; color: #6b7280; font-size: 14px; width: 40%;">
                                            <?php _e('Account:', DGA_TEXT_DOMAIN); ?>
                                        </td>
                                        <td style="padding: 8px 0; color: #111827; font-size: 14px; font-weight: 500;">
                                            <?php echo esc_html($user->user_email); ?>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px 0; color: #6b7280; font-size: 14px;">
                                            <?php _e('Changed at:', DGA_TEXT_DOMAIN); ?>
                                        </td>
                                        <td style="padding: 8px 0; color: #111827; font-size: 14px; font-weight: 500;">
                                            <?php echo date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($change_time)); ?>
                                        </td>
                                    </tr>
                                    <?php if ($changed_by_admin) : ?>
                                    <tr>
                                        <td style="padding: 8px 0; color: #6b7280; font-size: 14px;">
                                            <?php _e('Changed by:', DGA_TEXT_DOMAIN); ?>
                                        </td>
                                        <td style="padding: 8px 0; color: #111827; font-size: 14px; font-weight: 500;">
                                            <?php echo esc_html($admin_name); ?> (Administrator)
                                        </td>
                                    </tr>
                                    <?php endif; ?>
                                    <tr>
                                        <td style="padding: 8px 0; color: #6b7280; font-size: 14px;">
                                            <?php _e('IP Address:', DGA_TEXT_DOMAIN); ?>
                                        </td>
                                        <td style="padding: 8px 0; color: #111827; font-size: 14px; font-weight: 500;">
                                            <?php echo esc_html($ip_address); ?>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            
                            <!-- Security Notice -->
                            <div style="background-color: #fef3c7; border: 1px solid #fcd34d; padding: 15px; border-radius: 6px; margin-bottom: 25px;">
                                <p style="color: #92400e; margin: 0; font-size: 14px; line-height: 1.6;">
                                    <strong><?php _e('Security Notice:', DGA_TEXT_DOMAIN); ?></strong><br>
                                    <?php _e('If you did not request this password change, please contact our support team immediately.', DGA_TEXT_DOMAIN); ?>
                                </p>
                            </div>
                            
                            <!-- Action Button -->
                            <div style="text-align: center; margin: 30px 0;">
                                <a href="<?php echo esc_url(wp_login_url()); ?>" style="display: inline-block; background: linear-gradient(135deg, #ff6b35 0%, #ff8c42 100%); color: #ffffff; text-decoration: none; padding: 12px 30px; border-radius: 6px; font-weight: 600; font-size: 14px; box-shadow: 0 2px 4px rgba(255,107,53,0.3);">
                                    <?php _e('Sign In to Your Account', DGA_TEXT_DOMAIN); ?>
                                </a>
                            </div>
                            
                            <!-- Help Text -->
                            <p style="color: #6b7280; font-size: 13px; line-height: 1.6; text-align: center; margin: 20px 0 0 0;">
                                <?php _e('Need help? Contact our support team or visit our help center.', DGA_TEXT_DOMAIN); ?>
                            </p>
                        </td>
                    </tr>
                    
                    <!-- Footer -->
                    <tr>
                        <td style="background-color: #003366; padding: 25px; text-align: center;">
                            <p style="color: #ffffff; font-size: 12px; margin: 0 0 10px 0; opacity: 0.9;">
                                © <?php echo date('Y'); ?> <?php echo esc_html($site_name); ?>. <?php _e('All rights reserved.', DGA_TEXT_DOMAIN); ?>
                            </p>
                            <p style="color: #ffffff; font-size: 11px; margin: 0; opacity: 0.7;">
                                <?php _e('This is an automated security notification. Please do not reply to this email.', DGA_TEXT_DOMAIN); ?>
                            </p>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
    <?php
    return ob_get_clean();
}


/********* ฟังก์ชั่นอีเมลส่งลิงค์เปลี่ยนรหัสผ่าน user *************/

/**
 * Override password reset email subject - Remove Digital Government Standard
 */
add_filter('retrieve_password_title', 'custom_password_reset_email_subject_ktm582', 10, 3);
function custom_password_reset_email_subject_ktm582($title, $user_login, $user_data) {
    return sprintf(__('[URGENT] Password Reset Request - %s', DGA_TEXT_DOMAIN), get_bloginfo('name'));
}

/**
 * Override password reset email message AND set HTML headers
 */
add_filter('retrieve_password_message', 'custom_password_reset_email_message_ktm582', 10, 4);
function custom_password_reset_email_message_ktm582($message, $key, $user_login, $user_data) {
    
    // Force WordPress to send HTML emails
    add_filter('wp_mail_content_type', 'set_html_mail_content_type_ktm582');
    
    // Prepare email data
    $email_data = array(
        'user' => $user_data,
        'user_login' => $user_login,
        'reset_key' => $key,
        'reset_url' => network_site_url("wp-login.php?action=rp&key=$key&login=" . rawurlencode($user_login), 'login'),
        'site_name' => get_bloginfo('name'),
        'site_url' => home_url(),
        'logo_url' => get_custom_logo_url_dgx729(),
        'request_time' => current_time('mysql'),
        'expiry_hours' => 24,
        'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown',
    );
    
    // Get email template
    $html_message = get_password_reset_email_template_ktm582($email_data);
    
    // Reset content type after sending
    add_action('wp_mail_sent', function() {
        remove_filter('wp_mail_content_type', 'set_html_mail_content_type_ktm582');
    });
    
    return $html_message;
}

/**
 * Set mail content type to HTML
 */
function set_html_mail_content_type_ktm582() {
    return 'text/html';
}

/**
 * Alternative method: Use wp_mail directly for password reset
 */
add_filter('retrieve_password_notification_email', 'custom_password_reset_notification_ktm582', 10, 4);
function custom_password_reset_notification_ktm582($defaults, $key, $user_login, $user_data) {
    
    // Prepare email data
    $email_data = array(
        'user' => $user_data,
        'user_login' => $user_login,
        'reset_key' => $key,
        'reset_url' => network_site_url("wp-login.php?action=rp&key=$key&login=" . rawurlencode($user_login), 'login'),
        'site_name' => get_bloginfo('name'),
        'site_url' => home_url(),
        'logo_url' => get_custom_logo_url_dgx729(),
        'request_time' => current_time('mysql'),
        'expiry_hours' => 24,
        'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown',
    );
    
    // Get HTML template
    $message = get_password_reset_email_template_ktm582($email_data);
    
    // Override defaults with HTML email
    $defaults['to'] = $user_data->user_email;
    $defaults['subject'] = sprintf(__('[URGENT] Password Reset Request - %s', DGA_TEXT_DOMAIN), get_bloginfo('name'));
    $defaults['message'] = $message;
    $defaults['headers'] = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . get_bloginfo('name') . ' <' . get_option('admin_email') . '>'
    );
    
    return $defaults;
}

/**
 * Load password reset email template
 */
function get_password_reset_email_template_ktm582($data) {
    $template_path = get_stylesheet_directory() . '/templates/dga-request-repass.php';
    
    // Check if template exists in child theme
    if (!file_exists($template_path)) {
        // Use default template if not exists
        return get_default_password_reset_template_ktm582($data);
    }
    
    // Load template with output buffering
    ob_start();
    extract($data);
    include $template_path;
    return ob_get_clean();
}

/**
 * Default password reset email template (fallback) - WITHOUT IP ADDRESS
 */
function get_default_password_reset_template_ktm582($data) {
    extract($data);
    
    // Calculate expiry time
    $expiry_time = date_i18n(get_option('date_format') . ' ' . get_option('time_format'), 
                             strtotime($request_time) + ($expiry_hours * 3600));
    
    ob_start();
    ?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php _e('Password Reset Request', DGA_TEXT_DOMAIN); ?></title>
</head>
<body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background-color: #f5f7fa;">
    <!-- Main Container -->
    <table role="presentation" width="100%" cellspacing="0" cellpadding="0" border="0" style="background-color: #f5f7fa; min-height: 100vh;">
        <tr>
            <td align="center" style="padding: 40px 20px;">
                <!-- Email Container -->
                <table role="presentation" width="600" cellspacing="0" cellpadding="0" border="0" style="background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); overflow: hidden;">
                    
                    <!-- Header with Logo -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #003366 0%, #004080 100%); padding: 35px 30px; text-align: center; position: relative;">
                            <?php if (!empty($logo_url)) : ?>
                                <img src="<?php echo esc_url($logo_url); ?>" alt="<?php echo esc_attr($site_name); ?>" style="max-width: 180px; height: auto; margin-bottom: 15px; filter: brightness(0) invert(1);">
                            <?php endif; ?>
                            
                            <h1 style="color: #ffffff; margin: 0; font-size: 26px; font-weight: 300; letter-spacing: 1px; text-transform: uppercase;">
                                <?php echo esc_html($site_name); ?>
                            </h1>
                        </td>
                    </tr>
                    
                    <!-- Alert Banner -->
                    <tr>
                        <td style="background: linear-gradient(90deg, #ff6b35 0%, #ff8c42 100%); padding: 18px; text-align: center;">
                            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                                <tr>
                                    <td style="color: #ffffff; font-size: 15px; font-weight: 600; letter-spacing: 0.5px;">
                                        <span style="font-size: 20px; vertical-align: middle;">🔑</span> 
                                        <?php _e('PASSWORD RESET REQUEST', DGA_TEXT_DOMAIN); ?>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    
                    <!-- Main Content -->
                    <tr>
                        <td style="padding: 45px 35px;">
                            <!-- Greeting -->
                            <h2 style="color: #003366; font-size: 22px; margin: 0 0 25px 0; font-weight: 600;">
                                <?php printf(__('Hello %s,', DGA_TEXT_DOMAIN), esc_html($user->display_name)); ?>
                            </h2>
                            
                            <!-- Request Message -->
                            <div style="background: linear-gradient(135deg, #e8f4fd 0%, #f0f9ff 100%); border-left: 5px solid #003366; padding: 18px; margin-bottom: 30px; border-radius: 0 6px 6px 0;">
                                <p style="color: #003366; margin: 0; font-size: 16px; line-height: 1.7;">
                                    <strong><?php _e('Password Reset Requested', DGA_TEXT_DOMAIN); ?></strong><br>
                                    <span style="color: #004080; font-size: 14px;">
                                        <?php _e('We received a request to reset the password for your account. If you made this request, click the button below to proceed.', DGA_TEXT_DOMAIN); ?>
                                    </span>
                                </p>
                            </div>
                            
                            <!-- Request Details -->
                            <div style="background-color: #fafbfc; border: 1px solid #e5e7eb; padding: 25px; border-radius: 8px; margin-bottom: 30px;">
                                <h3 style="color: #003366; font-size: 13px; text-transform: uppercase; letter-spacing: 1px; margin: 0 0 20px 0; font-weight: 700; border-bottom: 2px solid #ff6b35; padding-bottom: 10px; display: inline-block;">
                                    <?php _e('Request Details', DGA_TEXT_DOMAIN); ?>
                                </h3>
                                
                                <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                        <td style="padding: 10px 0; color: #6b7280; font-size: 14px; width: 45%;">
                                            <strong><?php _e('Account:', DGA_TEXT_DOMAIN); ?></strong>
                                        </td>
                                        <td style="padding: 10px 0; color: #111827; font-size: 14px;">
                                            <?php echo esc_html($user->user_email); ?>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 10px 0; color: #6b7280; font-size: 14px;">
                                            <strong><?php _e('Username:', DGA_TEXT_DOMAIN); ?></strong>
                                        </td>
                                        <td style="padding: 10px 0; color: #111827; font-size: 14px;">
                                            <?php echo esc_html($user_login); ?>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 10px 0; color: #6b7280; font-size: 14px;">
                                            <strong><?php _e('Requested at:', DGA_TEXT_DOMAIN); ?></strong>
                                        </td>
                                        <td style="padding: 10px 0; color: #111827; font-size: 14px;">
                                            <?php echo date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($request_time)); ?>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 10px 0; color: #6b7280; font-size: 14px;">
                                            <strong><?php _e('Expires at:', DGA_TEXT_DOMAIN); ?></strong>
                                        </td>
                                        <td style="padding: 10px 0;">
                                            <span style="color: #ff6b35; font-size: 14px; font-weight: 600;">
                                                <?php echo $expiry_time; ?>
                                            </span>
                                            <span style="background-color: #fef3c7; color: #92400e; padding: 2px 8px; border-radius: 3px; font-size: 11px; margin-left: 8px;">
                                                <?php echo sprintf(__('%d HOURS', DGA_TEXT_DOMAIN), $expiry_hours); ?>
                                            </span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            
                            <!-- Reset Button -->
                            <div style="background: linear-gradient(135deg, #f0f9ff 0%, #e8f4fd 100%); padding: 30px; border-radius: 8px; text-align: center; margin-bottom: 30px; border: 2px dashed #003366;">
                                <p style="color: #003366; font-size: 15px; margin: 0 0 20px 0; font-weight: 600;">
                                    <?php _e('Click the button below to reset your password:', DGA_TEXT_DOMAIN); ?>
                                </p>
                                
                                <a href="<?php echo esc_url($reset_url); ?>" style="display: inline-block; background: linear-gradient(135deg, #ff6b35 0%, #ff8c42 100%); color: #ffffff; text-decoration: none; padding: 16px 40px; border-radius: 6px; font-weight: 700; font-size: 16px; box-shadow: 0 4px 12px rgba(255,107,53,0.3); text-transform: uppercase; letter-spacing: 0.5px;">
                                    <?php _e('RESET MY PASSWORD', DGA_TEXT_DOMAIN); ?>
                                </a>
                                
                                <p style="color: #6b7280; font-size: 12px; margin: 20px 0 0 0; line-height: 1.6;">
                                    <?php _e('Or copy and paste this link into your browser:', DGA_TEXT_DOMAIN); ?><br>
                                    <a href="<?php echo esc_url($reset_url); ?>" style="color: #ff6b35; word-break: break-all; font-size: 11px; text-decoration: none;">
                                        <?php echo esc_html($reset_url); ?>
                                    </a>
                                </p>
                            </div>
                            
                            <!-- Security Warning -->
                            <div style="background: linear-gradient(135deg, #fee2e2 0%, #fef2f2 100%); border: 2px solid #ef4444; padding: 20px; border-radius: 8px; margin-bottom: 30px;">
                                <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                        <td style="width: 40px; vertical-align: top; padding-top: 2px;">
                                            <span style="font-size: 24px;">⚠️</span>
                                        </td>
                                        <td>
                                            <h4 style="color: #991b1b; margin: 0 0 8px 0; font-size: 15px; font-weight: 700;">
                                                <?php _e('Security Alert', DGA_TEXT_DOMAIN); ?>
                                            </h4>
                                            <p style="color: #7f1d1d; margin: 0; font-size: 14px; line-height: 1.6;">
                                                <?php _e('If you DID NOT request a password reset, please ignore this email and your password will remain unchanged. However, you may want to review your account security settings.', DGA_TEXT_DOMAIN); ?>
                                            </p>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            
                            <!-- Additional Info -->
                            <div style="background-color: #fafbfc; padding: 20px; border-radius: 6px; border-left: 3px solid #ff6b35;">
                                <h4 style="color: #003366; font-size: 14px; margin: 0 0 12px 0; font-weight: 600;">
                                    <?php _e('Important Notes:', DGA_TEXT_DOMAIN); ?>
                                </h4>
                                <ul style="color: #6b7280; font-size: 13px; line-height: 1.8; margin: 0; padding-left: 20px;">
                                    <li><?php printf(__('This link will expire in %d hours for security reasons', DGA_TEXT_DOMAIN), $expiry_hours); ?></li>
                                    <li><?php _e('You can only use this link once', DGA_TEXT_DOMAIN); ?></li>
                                    <li><?php _e('After resetting, you will be asked to log in with your new password', DGA_TEXT_DOMAIN); ?></li>
                                    <li><?php _e('Choose a strong password that you haven\'t used before', DGA_TEXT_DOMAIN); ?></li>
                                </ul>
                            </div>
                            
                            <!-- Help Section -->
                            <div style="text-align: center; padding-top: 30px; border-top: 1px solid #e5e7eb; margin-top: 30px;">
                                <p style="color: #6b7280; font-size: 14px; line-height: 1.8; margin: 0;">
                                    <?php _e('Need help? Our support team is available 24/7', DGA_TEXT_DOMAIN); ?><br>
                                    <a href="<?php echo esc_url($site_url . '/support'); ?>" style="color: #ff6b35; text-decoration: none; font-weight: 600;">
                                        <?php _e('Contact Support', DGA_TEXT_DOMAIN); ?>
                                    </a> | 
                                    <a href="<?php echo esc_url($site_url . '/security'); ?>" style="color: #ff6b35; text-decoration: none; font-weight: 600;">
                                        <?php _e('Security Center', DGA_TEXT_DOMAIN); ?>
                                    </a>
                                </p>
                            </div>
                            
                        </td>
                    </tr>
                    
                    <!-- Footer -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #003366 0%, #001a33 100%); padding: 30px; text-align: center;">
                            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                                <tr>
                                    <td>
                                        <p style="color: #ffffff; font-size: 13px; margin: 0 0 12px 0; opacity: 0.95;">
                                            <strong><?php echo esc_html($site_name); ?></strong>
                                        </p>
                                        <p style="color: #ffffff; font-size: 11px; margin: 0 0 8px 0; opacity: 0.8; line-height: 1.6;">
                                            © <?php echo date('Y'); ?> <?php _e('All Rights Reserved', DGA_TEXT_DOMAIN); ?> | 
                                            <a href="<?php echo esc_url($site_url . '/privacy'); ?>" style="color: #ff8c42; text-decoration: none;">
                                                <?php _e('Privacy Policy', DGA_TEXT_DOMAIN); ?>
                                            </a> | 
                                            <a href="<?php echo esc_url($site_url . '/terms'); ?>" style="color: #ff8c42; text-decoration: none;">
                                                <?php _e('Terms of Service', DGA_TEXT_DOMAIN); ?>
                                            </a>
                                        </p>
                                        <p style="color: #ffffff; font-size: 10px; margin: 15px 0 0 0; opacity: 0.6; line-height: 1.5;">
                                            <?php _e('This is an automated password reset notification.', DGA_TEXT_DOMAIN); ?><br>
                                            <?php _e('Please do not reply to this email. For assistance, use the contact links above.', DGA_TEXT_DOMAIN); ?>
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
    <?php
    return ob_get_clean();
}



/********** ฟังก์ชั่นอัพเดตวันที่ Post Create Date - Collapsible Version ***********/

// Register shortcode
add_shortcode('dga_update_post_date', 'dga_update_post_date_shortcode_kxt729');

/**
 * Shortcode callback for post date updater with collapsible UI
 */
function dga_update_post_date_shortcode_kxt729($atts) {
    // Parse shortcode attributes
    $atts = shortcode_atts(array(
        'collapsed' => 'true', // Start collapsed by default
        'position' => 'inline' // inline or fixed
    ), $atts, 'dga_update_post_date');
    
    // Check if user is administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        return '';
    }
    
    // Check if we're on a single post/page
    if (!is_singular()) {
        return '<div class="dga-notice-kxt729">' . __('This shortcode only works on single posts or pages.', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    global $post;
    
    // Get current post date
    $current_date = get_the_date('Y-m-d', $post);
    $current_time = get_the_time('H:i', $post);
    $current_datetime = $current_date . 'T' . $current_time;
    
    // Generate nonce
    $nonce = wp_create_nonce('dga_update_date_nonce_kxt729');
    
    // Inline CSS if not loaded properly
    $inline_css = '';
    if (!wp_style_is('dga-uptodate-style', 'enqueued')) {
        $css_path = get_stylesheet_directory() . '/css/dga-uptodate-v2.css';
        if (file_exists($css_path)) {
            $inline_css = '<style>' . file_get_contents($css_path) . '</style>';
        }
    }
    
    // Inline JS if not loaded properly
    $inline_js = '';
    if (!wp_script_is('dga-uptodate-script', 'enqueued')) {
        $js_path = get_stylesheet_directory() . '/js/dga-uptodate-v2.js';
        if (file_exists($js_path)) {
            $inline_js = '<script>
                const dgaUpdateDate = {
                    ajaxurl: "' . admin_url(DGA_ADMIN_AJAX_URL) . '",
                    messages: {
                        success: "' . __('Post date updated successfully!', DGA_TEXT_DOMAIN) . '",
                        error: "' . __('Error updating post date. Please try again.', DGA_TEXT_DOMAIN) . '",
                        invalid_date: "' . __('Please select a valid date and time.', DGA_TEXT_DOMAIN) . '",
                        updating: "' . __('Updating...', DGA_TEXT_DOMAIN) . '"
                    },
                    settings: {
                        startCollapsed: ' . ($atts['collapsed'] === 'true' ? 'true' : 'false') . '
                    }
                };
                </script>';
            $inline_js .= '<script>' . file_get_contents($js_path) . '</script>';
        }
    }
    
    $position_class = $atts['position'] === 'fixed' ? 'dga-fixed-position-kxt729' : '';
    $collapsed_class = $atts['collapsed'] === 'true' ? 'dga-collapsed-kxt729' : '';
    
    ob_start();
    ?>
    <?php echo $inline_css; ?>
    <div class="dga-update-date-widget-kxt729 <?php echo esc_attr($position_class . ' ' . $collapsed_class); ?>" 
         data-post-id="<?php echo esc_attr($post->ID); ?>" 
         data-nonce="<?php echo esc_attr($nonce); ?>"
         data-start-collapsed="<?php echo esc_attr($atts['collapsed']); ?>">
        
        <!-- Toggle Header - Always Visible -->
        <div class="dga-toggle-header-kxt729">
            <div class="dga-toggle-content-kxt729">
                <svg class="dga-icon-kxt729" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
                <span class="dga-toggle-title-kxt729"><?php _e('Post Date Settings', DGA_TEXT_DOMAIN); ?></span>
                <span class="dga-toggle-date-kxt729"><?php echo get_the_date('M j, Y', $post); ?></span>
            </div>
            <button type=DGA_BUTTON_TYPE class="dga-toggle-btn-kxt729" aria-expanded="false" aria-label="<?php esc_attr_e('Toggle date settings', DGA_TEXT_DOMAIN); ?>">
                <svg class="dga-chevron-kxt729" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
            </button>
        </div>
        
        <!-- Collapsible Content -->
        <div class="dga-collapsible-content-kxt729">
            <div class="dga-widget-inner-kxt729">
                <div class="dga-widget-body-kxt729">
                    <label for="dga-datetime-input-<?php echo esc_attr($post->ID); ?>" class="dga-label-kxt729">
                        <?php _e('Select new date and time:', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <input 
                        type="datetime-local" 
                        id="dga-datetime-input-<?php echo esc_attr($post->ID); ?>" 
                        class="dga-datetime-input-kxt729" 
                        value="<?php echo esc_attr($current_datetime); ?>"
                        aria-label="<?php esc_attr_e('Post date and time', DGA_TEXT_DOMAIN); ?>"
                    />
                    
                    <div class="dga-current-info-kxt729">
                        <small><?php _e('Current:', DGA_TEXT_DOMAIN); ?> 
                            <span class="dga-current-date-kxt729"><?php echo get_the_date('F j, Y @ H:i', $post); ?></span>
                        </small>
                    </div>
                    
                    <!-- Quick Actions -->
                    <div class="dga-quick-actions-kxt729">
                        <button type=DGA_BUTTON_TYPE class="dga-quick-btn-kxt729" data-action="now">
                            <?php _e('Now', DGA_TEXT_DOMAIN); ?>
                        </button>
                        <button type=DGA_BUTTON_TYPE class="dga-quick-btn-kxt729" data-action="today">
                            <?php _e('Today 12:00', DGA_TEXT_DOMAIN); ?>
                        </button>
                        <button type=DGA_BUTTON_TYPE class="dga-quick-btn-kxt729" data-action="yesterday">
                            <?php _e('Yesterday', DGA_TEXT_DOMAIN); ?>
                        </button>
                        <button type=DGA_BUTTON_TYPE class="dga-quick-btn-kxt729" data-action="week-ago">
                            <?php _e('Week Ago', DGA_TEXT_DOMAIN); ?>
                        </button>
                    </div>
                </div>
                
                <div class="dga-widget-footer-kxt729">
                    <button 
                        type=DGA_BUTTON_TYPE 
                        class="dga-update-btn-kxt729"
                        aria-label="<?php esc_attr_e('Update post date', DGA_TEXT_DOMAIN); ?>"
                    >
                        <span class="dga-btn-text-kxt729"><?php _e('Update Date', DGA_TEXT_DOMAIN); ?></span>
                        <span class="dga-spinner-kxt729" style="display: none;">
                            <svg class="dga-spin-kxt729" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z" />
                            </svg>
                        </span>
                    </button>
                    
                    <div class="dga-message-kxt729" role="alert" aria-live="polite"></div>
                </div>
            </div>
        </div>
    </div>
    <?php echo $inline_js; ?>
    <?php
    
    return ob_get_clean();
}

// Enqueue scripts and styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_update_date_enqueue_assets_kxt729', 999);

function dga_update_date_enqueue_assets_kxt729() {
    if (!is_singular() || !current_user_can(DGA_ADMIN_ROLE)) {
        return;
    }
    
    global $post;
    if ($post) {
        // Enqueue CSS (v2 for new version)
        wp_enqueue_style(
            'dga-uptodate-style',
            get_stylesheet_directory_uri() . '/css/dga-uptodate-v2.css',
            array(),
            '2.0.0'
        );
        
        // Enqueue JavaScript (v2 for new version)
        wp_enqueue_script(
            'dga-uptodate-script',
            get_stylesheet_directory_uri() . '/js/dga-uptodate-v2.js',
            array(),
            '2.0.0',
            true
        );
        
        // Localize script
        wp_localize_script('dga-uptodate-script', 'dgaUpdateDate', array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            'messages' => array(
                DGA_SUCCESS_STATUS => __('Post date updated successfully!', DGA_TEXT_DOMAIN),
                DGA_ERROR_STATUS => __('Error updating post date. Please try again.', DGA_TEXT_DOMAIN),
                'invalid_date' => __('Please select a valid date and time.', DGA_TEXT_DOMAIN),
                'updating' => __('Updating...', DGA_TEXT_DOMAIN)
            ),
            'settings' => array(
                'startCollapsed' => true
            )
        ));
    }
}

// AJAX handler remains the same
add_action('wp_ajax_dga_update_post_date', 'dga_handle_update_post_date_kxt729');

function dga_handle_update_post_date_kxt729() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_update_date_nonce_kxt729')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Security check failed.', DGA_TEXT_DOMAIN)));
        wp_die();
    }
    
    // Check user capability
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Insufficient permissions.', DGA_TEXT_DOMAIN)));
        wp_die();
    }
    
    // Validate post ID
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    if (!$post_id || !get_post($post_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid post ID.', DGA_TEXT_DOMAIN)));
        wp_die();
    }
    
    // Validate and sanitize datetime
    $new_datetime = isset($_POST['datetime']) ? sanitize_text_field($_POST['datetime']) : '';
    if (empty($new_datetime)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid date and time.', DGA_TEXT_DOMAIN)));
        wp_die();
    }
    
    // Parse datetime
    $datetime_obj = DateTime::createFromFormat('Y-m-d\TH:i', $new_datetime);
    if (!$datetime_obj) {
        $datetime_obj = DateTime::createFromFormat('Y-m-d H:i', str_replace('T', ' ', $new_datetime));
    }
    
    if (!$datetime_obj) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid date format.', DGA_TEXT_DOMAIN)));
        wp_die();
    }
    
    // Get WordPress timezone
    $timezone = wp_timezone();
    $datetime_obj->setTimezone($timezone);
    
    // Prepare post data
    $post_date = $datetime_obj->format('Y-m-d H:i:s');
    $post_date_gmt = get_gmt_from_date($post_date);
    
    $post_data = array(
        'ID' => $post_id,
        'post_date' => $post_date,
        'post_date_gmt' => $post_date_gmt,
        'edit_date' => true
    );
    
    // Remove filters that might interfere
    remove_all_filters('wp_insert_post_data');
    
    // Update post
    $result = wp_update_post($post_data, true);
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => $result->get_error_message()
        ));
        wp_die();
    }
    
    // Clear cache if using cache plugins
    if (function_exists('wp_cache_clear_cache')) {
        wp_cache_clear_cache();
    }
    if (function_exists('rocket_clean_post')) {
        rocket_clean_post($post_id);
    }
    
    // Return success with formatted date
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('Post date updated successfully!', DGA_TEXT_DOMAIN),
        'formatted_date' => get_the_date('F j, Y @ H:i', $post_id),
        'short_date' => get_the_date('M j, Y', $post_id),
        'raw_date' => $post_date,
        DGA_POST_ID_FIELD => $post_id
    ));
    wp_die();
}




/**
 * เพิ่มฟังก์ชัน Skip to Content Link ที่ทำงานได้อย่างถูกต้อง
 * สำหรับเพิ่มการเข้าถึงเว็บไซต์ตามมาตรฐาน WCAG
 */
function add_accessible_skip_to_content_link() {
    // เพิ่ม link ข้ามไปยังเนื้อหาหลัก
    echo '<a class="skip-link screen-reader-text" href="#content">' . esc_html__( 'ข้ามไปยังเนื้อหา', 'your-theme-textdomain' ) . '</a>';
}
add_action('wp_body_open', 'add_accessible_skip_to_content_link', 5);

/**
 * เพิ่ม CSS สำหรับ Skip Link ให้ทำงานได้อย่างถูกต้อง
 */
function add_skip_link_styles() {
    ?>
    <style>
        .screen-reader-text {
            border: 0;
            clip: rect(1px, 1px, 1px, 1px);
            clip-path: inset(50%);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute !important;
            width: 1px;
            word-wrap: normal !important;
        }
        
        .screen-reader-text:focus {
            background-color: #f1f1f1;
            border-radius: 3px;
            box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
            clip: auto !important;
            clip-path: none;
            color: #21759b;
            display: block;
            font-size: 14px;
            font-weight: 700;
            height: auto;
            left: 5px;
            line-height: normal;
            padding: 15px 23px 14px;
            text-decoration: none;
            top: 5px;
            width: auto;
            z-index: 100000;
        }
    </style>
    <?php
}
add_action('wp_head', 'add_skip_link_styles');

/**
 * ตรวจสอบว่า theme รองรับ wp_body_open หรือไม่
 * สำหรับ WordPress เวอร์ชันเก่ากว่า 5.2
 */
if (!function_exists('wp_body_open')) {
    function wp_body_open() {
        do_action('wp_body_open');
    }
}

/**
 * เพิ่ม ID สำหรับเนื้อหาหลัก (ถ้ายังไม่มี)
 * ต้องเปลี่ยน 'the_content' เป็น hook ที่เหมาะสมกับธีมของคุณ
 */
function add_content_id_for_skip_link($content) {
    // ตรวจสอบว่าอยู่ในหน้าหลักหรือไม่
    if (is_singular() && in_the_loop() && is_main_query()) {
        // เพิ่ม ID "content" สำหรับ skip link
        return '<div id="content">' . $content . '</div>';
    }
    return $content;
}
add_filter('the_content', 'add_content_id_for_skip_link');

/**
 * เพิ่ม JavaScript เพื่อทำให้ Skip Link ทำงานได้อย่างถูกต้องใน Chrome และ Firefox
 */
function enable_skip_link_focus_fix() {
    // เวอร์ชันแบบย่อของ script
    ?>
    <script>
    /(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",function(){let t,e=location.hash.substring(1);/^[A-z0-9_-]+$/.test(e)&&(t=document.getElementById(e))&&(/^(?:a|select|input|button|textarea)$/i.test(t.tagName)||(t.tabIndex=-1),t.focus())},!1);
    </script>
    <?php
}
add_action('wp_print_footer_scripts', 'enable_skip_link_focus_fix');




/**
 * Load child theme scripts & styles.
 *
 * @return void
 */
function hello_elementor_child_scripts_styles() {

	wp_enqueue_style(
		'hello-elementor-child-style',
		get_stylesheet_directory_uri() . '/style.css',
		[
			'hello-elementor-theme-style',
		],
		HELLO_ELEMENTOR_CHILD_VERSION
	);

}
add_action( DGA_ENQUEUE_SCRIPTS_HOOK, 'hello_elementor_child_scripts_styles', 20 );


// Add JavaScript Console Logging Function
function enable_console_logging() {
    ?>
    <script>
    if (!window.console) window.console = {};
    if (!window.console.log) window.console.log = function(msg) {};
    console.log('WordPress Console Logging Enabled');
    </script>
    <?php
}
add_action('wp_head', 'enable_console_logging');


/**
 * =================================================================
 * AJAX Contact Form with Google reCAPTCHA v3
 * =================================================================
 *
 * Shortcode to display and process a secure contact form.
 */

// Define a text domain for translations
define('MY_TEXTDOMAIN_ST01', DGA_TEXT_DOMAIN);

/**
 * 1. SHORTCODE REGISTRATION
 * Registers the [contact_form_rc78] shortcode.
 */
add_shortcode('contact_form_rc78', 'cf_shortcode_renderer_ab12');

/**
 * Renders the contact form HTML and enqueues assets.
 *
 * @param array $atts Shortcode attributes.
 * @return string The form HTML.
 */
function cf_shortcode_renderer_ab12($atts) {
    // Enqueue scripts and styles for the form
    cf_enqueue_assets_cd34();

    // Start output buffering to capture the HTML
    ob_start();
    ?>
    <div class="contact-form-wrapper-kl01">
        <form id="ajaxContactForm_ef56" class="contact-form-mn23" novalidate>
            <div class="form-messages-pq45"></div>
            <div class="form-row-gh78">
                <label for="name_ij90"><?php _e('Name', MY_TEXTDOMAIN_ST01); ?></label>
                <input type="text" id="name_ij90" name="name" required>
            </div>
            <div class="form-row-gh78">
                <label for="email_kl01"><?php _e('Email', MY_TEXTDOMAIN_ST01); ?></label>
                <input type="email" id="email_kl01" name="email" required>
            </div>
            <div class="form-row-gh78">
                <label for="message_mn23"><?php _e('Message', MY_TEXTDOMAIN_ST01); ?></label>
                <textarea id="message_mn23" name="message" rows="5" required></textarea>
            </div>
            <div class="form-row-gh78">
                <button type=DGA_SUBMIT_TYPE class="submit-button-pq45"><?php _e('Send Message', MY_TEXTDOMAIN_ST01); ?></button>
            </div>
        </form>
    </div>
    <?php
    // Return the buffered content
    return ob_get_clean();
}

/**
 * 2. ASSET ENQUEUEING
 * Registers and enqueues scripts and styles.
 */
function cf_enqueue_assets_cd34() {
    // Only enqueue if not already processed
    if (wp_script_is('google-recaptcha-v3', 'registered')) {
        return;
    }

    $site_key = defined('RECAPTCHA_V3_SITE_KEY_ab12') ? RECAPTCHA_V3_SITE_KEY_ab12 : '';

    // Register Google reCAPTCHA API script
    wp_register_script(
        'google-recaptcha-v3',
        "https://www.google.com/recaptcha/api.js?render={$site_key}",
        [],
        null,
        true
    );

    // Register custom JS for the contact form
    wp_register_script(
        'contact-form-script-xy34',
        get_stylesheet_directory_uri() . '/js/contact-form-xy34.js',
        ['google-recaptcha-v3'],
        DGA_VERSION_NUMBER,
        true
    );

    // Pass data to our script
    wp_localize_script('contact-form-script-xy34', 'cf_data_rs56', [
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        'nonce'    => wp_create_nonce('contact_form_nonce_tu78'),
        'site_key' => $site_key,
        'sending'  => __('Sending...', MY_TEXTDOMAIN_ST01),
        DGA_ERROR_STATUS    => __('An unexpected error occurred. Please try again.', MY_TEXTDOMAIN_ST01),
        DGA_SUCCESS_STATUS  => __('Thank you! Your message has been sent.', MY_TEXTDOMAIN_ST01),
    ]);

    // Enqueue all assets
    wp_enqueue_script('contact-form-script-xy34');
    wp_enqueue_style(
        'contact-form-style-st89',
        get_stylesheet_directory_uri() . '/css/contact-form-st89.css',
        [],
        DGA_VERSION_NUMBER
    );
    
    // Add reCAPTCHA privacy notice to the footer
    add_action('wp_footer', 'cf_footer_notice_ij90');
}


/**
 * 3. AJAX HANDLER
 * Processes the form submission.
 */
add_action('wp_ajax_nopriv_send_contact_form_ef56', 'cf_ajax_handler_ef56');
add_action('wp_ajax_send_contact_form_ef56', 'cf_ajax_handler_ef56');

function cf_ajax_handler_ef56() {
    // 1. Verify nonce
    if (!check_ajax_referer('contact_form_nonce_tu78', 'nonce', false)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('Security check failed.', MY_TEXTDOMAIN_ST01)], 403);
        return;
    }

    // 2. Verify reCAPTCHA
    if (!isset($_POST['g-recaptcha-response']) || !cf_verify_recaptcha_gh78($_POST['g-recaptcha-response'])) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('reCAPTCHA verification failed. Please try again.', MY_TEXTDOMAIN_ST01)], 403);
        return;
    }

    // 3. Sanitize and Validate Inputs
    $name = isset($_POST['name']) ? sanitize_text_field($_POST['name']) : '';
    $email = isset($_POST['email']) ? sanitize_email($_POST['email']) : '';
    $message = isset($_POST['message']) ? sanitize_textarea_field($_POST['message']) : '';

    if (empty($name) || !is_email($email) || empty($message)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('Please fill in all required fields correctly.', MY_TEXTDOMAIN_ST01)], 400);
        return;
    }

    // 4. Send Email
    $admin_email = get_option('admin_email');
    $subject = sprintf(__('New Contact Form Submission from %s', MY_TEXTDOMAIN_ST01), $name);
    $headers = ["Reply-To: {$name} <{$email}>"];
    $body = "Name: {$name}\n";
    $body .= "Email: {$email}\n\n";
    $body .= "Message:\n{$message}\n";

    $sent = wp_mail($admin_email, $subject, $body, $headers);

    if ($sent) {
        wp_send_json_success([DGA_MESSAGE_KEY => __('Thank you! Your message has been sent.', MY_TEXTDOMAIN_ST01)]);
    } else {
        wp_send_json_error([DGA_MESSAGE_KEY => __('The email could not be sent.', MY_TEXTDOMAIN_ST01)], 500);
    }
}


/**
 * 4. RECAPTCHA VERIFICATION
 * Verifies the reCAPTCHA token with Google's API.
 *
 * @param string $token The reCAPTCHA token from the form.
 * @return bool True if valid, false otherwise.
 */
function cf_verify_recaptcha_gh78($token) {
    $secret_key = defined('RECAPTCHA_V3_SECRET_KEY_ab12') ? RECAPTCHA_V3_SECRET_KEY_ab12 : '';

    if (empty($secret_key) || empty($token)) {
        return false;
    }

    $response = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', [
        'body' => [
            'secret'   => $secret_key,
            'response' => $token,
            'remoteip' => $_SERVER['REMOTE_ADDR']
        ]
    ]);

    if (is_wp_error($response)) {
        return false;
    }

    $result = json_decode(wp_remote_retrieve_body($response), true);
    
    // Check for success and a score >= 0.5 (Google's recommended threshold)
    return isset($result[DGA_SUCCESS_STATUS]) && $result[DGA_SUCCESS_STATUS] === true && isset($result['score']) && $result['score'] >= 0.5;
}


/**
 * 5. FOOTER NOTICE
 * Displays the required reCAPTCHA privacy notice in the footer.
 */
function cf_footer_notice_ij90() {
    $privacy_policy_url = 'https://policies.google.com/privacy';
    $terms_of_service_url = 'https://policies.google.com/terms';

    $notice_text = sprintf(
        /* translators: %1$s: Privacy Policy URL, %2$s: Terms of Service URL */
        __('This site is protected by reCAPTCHA and the Google <a href="%1$s" target="_blank" rel="noopener noreferrer">Privacy Policy</a> and <a href="%2$s" target="_blank" rel="noopener noreferrer">Terms of Service</a> apply.', MY_TEXTDOMAIN_ST01),
        esc_url($privacy_policy_url),
        esc_url($terms_of_service_url)
    );
    
    echo '<p class="recaptcha-notice-vw01">' . $notice_text . '</p>';
}



/***** SiteLogo Update *******/

/**
 * Shortcode [sitelogo] สำหรับแสดงโลโก้ตามประเภทพื้นหลัง
 * 
 * ใช้งานด้วย: 
 * [sitelogo mode="light"]   - แสดงโลโก้สำหรับพื้นหลังสว่าง (โลโก้สีเข้ม)
 * [sitelogo mode="dark"]    - แสดงโลโก้สำหรับพื้นหลังเข้ม (โลโก้สีสว่าง)
 * [sitelogo mode="transparent"] - แสดงโลโก้สำหรับพื้นหลังโปร่งใส
 */
function site_logo_shortcode($atts) {
    // ตั้งค่าพารามิเตอร์เริ่มต้น
    $atts = shortcode_atts(array(
        'mode' => 'light',      // mode: light, dark, transparent
        'class' => '',          // CSS classes เพิ่มเติม
        'size' => 'full',       // ขนาดรูปภาพ (full, large, medium, thumbnail)
        'link' => 'yes',        // แสดงลิงก์หรือไม่ (yes/no)
        'alt' => '',            // alt text สำหรับรูปภาพ
        'width' => '',          // ความกว้างรูปภาพ (พิกเซล)
        'height' => '',         // ความสูงรูปภาพ (พิกเซล)
        'debug' => 'no',        // แสดงข้อมูล debug (yes/no)
        'responsive' => 'yes',  // เปิดใช้ responsive images (yes/no)
    ), $atts, 'sitelogo');
    
    // แปลงค่า mode เป็นตัวพิมพ์เล็ก
    $mode = strtolower($atts['mode']);
    
    // กำหนด theme_mod ที่จะใช้ตาม mode ที่เรียกใช้
    $theme_mod_key = '';
    $background_type = '';
    
    // ตรวจสอบ mode และกำหนด theme_mod_key ให้ถูกต้อง
    if ($mode === 'light') {
        // mode="light" ใช้โลโก้ที่อัพโหลดในพื้นหลังเข้ม (custom_logo_dark)
        $theme_mod_key = 'custom_logo_dark';
        $background_type = 'dark';
    } elseif ($mode === 'dark') {
        // mode="dark" ใช้โลโก้ที่อัพโหลดในพื้นหลังขาว (custom_logo)
        $theme_mod_key = 'custom_logo';
        $background_type = 'white';
    } elseif ($mode === 'transparent') {
        // mode="transparent" ใช้โลโก้ที่อัพโหลดในพื้นหลังโปร่งใส (custom_logo_transparent)
        $theme_mod_key = 'custom_logo_transparent';
        $background_type = 'transparent';
    } else {
        // กรณีอื่นๆ ใช้ค่าเริ่มต้น
        $theme_mod_key = 'custom_logo';
        $background_type = 'white';
    }
    
    // ดึง ID ของโลโก้ตาม theme_mod
    $logo_id = get_theme_mod($theme_mod_key);
    
    // ถ้าไม่พบโลโก้ของโหมดที่เลือก ใช้โลโก้ปกติ (fallback)
    if (!$logo_id && $theme_mod_key !== 'custom_logo') {
        $logo_id = get_theme_mod('custom_logo');
        $background_type = 'white';
    }
    
    // ถ้ายังไม่พบโลโก้ ให้ออก
    if (!$logo_id) {
        if ($atts['debug'] === 'yes') {
            return "ไม่พบโลโก้สำหรับโหมด '{$mode}' (theme_mod: {$theme_mod_key})";
        }
        return '';
    }
    
    // เตรียม attributes สำหรับรูปภาพ
    $img_atts = array(
        'class' => 'custom-logo ' . $atts['class'],
        // ลบ itemprop="logo" ที่นี่เพื่อหลีกเลี่ยงปัญหา
    );
    
    // เพิ่ม alt text
    if (!empty($atts['alt'])) {
        $img_atts['alt'] = esc_attr($atts['alt']);
    } else {
        $img_atts['alt'] = esc_attr(get_bloginfo('name'));
    }
    
    // เพิ่มขนาดรูปภาพถ้ามีการกำหนด
    if (!empty($atts['width'])) {
        $img_atts['width'] = absint($atts['width']);
    }
    
    if (!empty($atts['height'])) {
        $img_atts['height'] = absint($atts['height']);
    }
    
    // เพิ่มข้อมูล data attribute เพื่อช่วยในการ debug
    if ($atts['debug'] === 'yes') {
        $img_atts['data-logo-mode'] = $mode;
        $img_atts['data-theme-mod'] = $theme_mod_key;
        $img_atts['data-logo-id'] = $logo_id;
        $img_atts['data-background-type'] = $background_type;
    }
    
    // สร้าง HTML สำหรับรูปภาพโลโก้ (ปรับให้รองรับ responsive images)
    $logo_html = '';
    
    if ($atts['responsive'] === 'yes') {
        // ดึงข้อมูลรูปภาพในขนาดต่างๆ
        $image_sizes = array('thumbnail', 'medium', 'large', 'full');
        $srcset = array();
        $sizes = array();
        
        // สร้าง srcset จากขนาดต่างๆ
        foreach ($image_sizes as $size) {
            $image_data = wp_get_attachment_image_src($logo_id, $size);
            if ($image_data) {
                $srcset[] = $image_data[0] . ' ' . $image_data[1] . 'w';
                
                // กำหนด sizes ตามขนาดต่างๆ
                if ($size === 'thumbnail') {
                    $sizes[] = '(max-width: 576px) ' . $image_data[1] . 'px';
                } elseif ($size === 'medium') {
                    $sizes[] = '(max-width: 768px) ' . $image_data[1] . 'px';
                } elseif ($size === 'large') {
                    $sizes[] = '(max-width: 1200px) ' . $image_data[1] . 'px';
                } else {
                    $sizes[] = $image_data[1] . 'px';
                }
            }
        }
        
        // ถ้ามีขนาดต่างๆ ให้เพิ่ม srcset และ sizes attributes
        if (!empty($srcset) && !empty($sizes)) {
            $img_atts['srcset'] = implode(', ', $srcset);
            $img_atts['sizes'] = implode(', ', $sizes);
        }
        
        // สร้าง picture element เพื่อรองรับ high-DPI displays
        $full_image = wp_get_attachment_image_src($logo_id, 'full');
        if ($full_image) {
            // ดึง URL ของรูปภาพ
            $image_url = $full_image[0];
            $image_width = $full_image[1];
            $image_height = $full_image[2];
            
            // ถ้าเป็นไฟล์รูปภาพที่ไม่ใช่ WebP ให้เพิ่ม type attribute
            $file_type = wp_check_filetype($image_url);
            $mime_type = !empty($file_type['type']) ? $file_type['type'] : '';
            
            // เริ่มสร้าง picture element
            $logo_html .= '<picture>';
            
            // เพิ่ม source สำหรับ high-DPI displays (2x)
            $retina_image = generate_retina_url($image_url);
            if ($retina_image) {
                $logo_html .= '<source media="(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)" srcset="' . esc_url($retina_image) . '"';
                if (!empty($mime_type)) {
                    $logo_html .= ' type="' . esc_attr($mime_type) . '"';
                }
                $logo_html .= '>';
            }
            
            // เพิ่ม source สำหรับหน้าจอมาตรฐาน
            $logo_html .= '<source srcset="' . esc_url($image_url) . '"';
            if (!empty($mime_type)) {
                $logo_html .= ' type="' . esc_attr($mime_type) . '"';
            }
            $logo_html .= '>';
            
            // เพิ่ม fallback img tag
            $logo_html .= '<img src="' . esc_url($image_url) . '" ';
            foreach ($img_atts as $name => $value) {
                $logo_html .= $name . '="' . esc_attr($value) . '" ';
            }
            $logo_html .= '>';
            
            $logo_html .= '</picture>';
        } else {
            // ถ้าไม่สามารถดึงข้อมูลรูปภาพได้ ใช้ฟังก์ชัน wp_get_attachment_image ปกติ
            $logo_html = wp_get_attachment_image($logo_id, $atts['size'], false, $img_atts);
        }
    } else {
        // ใช้ฟังก์ชัน wp_get_attachment_image ปกติ (ไม่ใช้ responsive)
        $logo_html = wp_get_attachment_image($logo_id, $atts['size'], false, $img_atts);
    }
    
    // ถ้าโหมด debug เปิดอยู่ ให้แสดงข้อมูลเพิ่มเติม
    if ($atts['debug'] === 'yes') {
        $debug_info = '<div class="site-logo-debug" style="background:#f5f5f5;padding:10px;margin:10px 0;font-size:12px;border:1px solid #ddd;">';
        $debug_info .= '<p>โหมดที่เรียกใช้: ' . $mode . '</p>';
        $debug_info .= '<p>พื้นหลังที่เลือกในหน้าอัพโหลด: ' . $background_type . '</p>';
        $debug_info .= '<p>Theme Mod Key: ' . $theme_mod_key . '</p>';
        $debug_info .= '<p>Logo ID: ' . $logo_id . '</p>';
        $debug_info .= '<p>Logo URL: ' . wp_get_attachment_url($logo_id) . '</p>';
        
        // แสดงข้อมูล theme mods ทั้งหมดที่เกี่ยวข้องกับโลโก้
        $debug_info .= '<p>ข้อมูล Theme Mods:</p><ul>';
        $debug_info .= '<li>custom_logo (พื้นหลังขาว): ' . get_theme_mod('custom_logo') . '</li>';
        $debug_info .= '<li>custom_logo_dark (พื้นหลังเข้ม): ' . get_theme_mod('custom_logo_dark') . '</li>';
        $debug_info .= '<li>custom_logo_transparent (พื้นหลังโปร่งใส): ' . get_theme_mod('custom_logo_transparent') . '</li>';
        $debug_info .= '</ul>';
        
        // แสดงความสัมพันธ์ระหว่างโหมดกับพื้นหลัง
        $debug_info .= '<p>ความสัมพันธ์:</p><ul>';
        $debug_info .= '<li>[sitelogo mode="light"] → ใช้โลโก้จากพื้นหลังสีเข้ม (custom_logo_dark)</li>';
        $debug_info .= '<li>[sitelogo mode="dark"] → ใช้โลโก้จากพื้นหลังสีขาว (custom_logo)</li>';
        $debug_info .= '<li>[sitelogo mode="transparent"] → ใช้โลโก้จากพื้นหลังโปร่งใส (custom_logo_transparent)</li>';
        $debug_info .= '</ul>';
        $debug_info .= '</div>';
        
        $logo_html .= $debug_info;
    }
    
    // ถ้าต้องการใส่ลิงก์ - แก้ไขเพื่อเพิ่ม microdata ที่ถูกต้อง
    if ($atts['link'] === 'yes') {
        $html = sprintf(
            '<div itemscope itemtype="https://schema.org/Organization"><a href="%1$s" class="custom-logo-link" rel="home">%2$s</a></div>',
            esc_url(home_url('/')),
            $logo_html
        );
    } else {
        $html = '<div itemscope itemtype="https://schema.org/Organization">' . $logo_html . '</div>';
    }
    
    return $html;
}
add_shortcode('sitelogo', 'site_logo_shortcode');

/**
 * ฟังก์ชันสร้าง URL สำหรับรูปภาพ retina (2x)
 */
function generate_retina_url($url) {
    // ตรวจสอบว่ามีรูปภาพ @2x หรือไม่
    $path_parts = pathinfo($url);
    $retina_url = $path_parts['dirname'] . '/' . $path_parts['filename'] . '@2x.' . $path_parts['extension'];
    
    // ตรวจสอบว่าไฟล์มีอยู่จริงหรือไม่ (สำหรับรูปภาพที่อัพโหลดผ่าน WordPress)
    $uploads_dir = wp_upload_dir();
    $upload_base_url = $uploads_dir['baseurl'];
    $upload_base_dir = $uploads_dir['basedir'];
    
    if (strpos($url, $upload_base_url) === 0) {
        // แปลง URL เป็น path ในเครื่อง server
        $file_path = str_replace($upload_base_url, $upload_base_dir, $retina_url);
        
        // ตรวจสอบว่าไฟล์มีอยู่จริงหรือไม่
        if (file_exists($file_path)) {
            return $retina_url;
        }
    }
    
    return false;
}

/**
 * ฟังก์ชันสร้างรูปภาพ retina และรูปภาพในขนาดต่างๆ
 * เรียกใช้เมื่อมีการอัพโหลดรูปภาพ
 */
function generate_logo_image_sizes($attachment_id) {
    // ตรวจสอบว่าเป็นรูปภาพโลโก้หรือไม่
    $logo_id = get_theme_mod('custom_logo');
    $logo_dark_id = get_theme_mod('custom_logo_dark');
    $logo_transparent_id = get_theme_mod('custom_logo_transparent');
    
    if ($attachment_id == $logo_id || $attachment_id == $logo_dark_id || $attachment_id == $logo_transparent_id) {
        // ดึงข้อมูลรูปภาพ
        $image_path = get_attached_file($attachment_id);
        if (!$image_path) {
            return;
        }
        
        // สร้างรูปภาพในขนาดต่างๆ
        $editor = wp_get_image_editor($image_path);
        if (!is_wp_error($editor)) {
            // ดึงขนาดปัจจุบัน
            $size = $editor->get_size();
            $orig_width = $size['width'];
            $orig_height = $size['height'];
            
            // สร้างรูปภาพ retina (2x)
            $retina_width = $orig_width * 2;
            $retina_height = $orig_height * 2;
            
            // สร้างชื่อไฟล์ retina
            $path_parts = pathinfo($image_path);
            $retina_path = $path_parts['dirname'] . '/' . $path_parts['filename'] . '@2x.' . $path_parts['extension'];
            
            // ดึงไฟล์ต้นฉบับที่มีความละเอียดสูงกว่า (ถ้ามี)
            $original_file = $image_path;
            
            // อัพโหลดไฟล์ retina ถ้ามีไฟล์ต้นฉบับที่ใหญ่กว่า
            if (file_exists($original_file)) {
                $orig_editor = wp_get_image_editor($original_file);
                if (!is_wp_error($orig_editor)) {
                    $orig_size = $orig_editor->get_size();
                    
                    // ถ้าไฟล์ต้นฉบับมีขนาดใหญ่พอ
                    if ($orig_size['width'] >= $retina_width && $orig_size['height'] >= $retina_height) {
                        // สร้างรูปภาพ retina
                        $orig_editor->resize($retina_width, $retina_height, true);
                        $orig_editor->save($retina_path);
                    }
                }
            }
        }
    }
}
add_action('wp_generate_attachment_metadata', 'generate_logo_image_sizes', 10, 1);

/**
 * เพิ่ม CSS สำหรับการแสดงผลโลโก้ให้ถูกต้อง
 */
function site_logo_responsive_styles() {
    ?>
    <style>
    .custom-logo-link {
        display: inline-block;
    }
    .custom-logo {
        max-width: 100%;
        height: auto;
    }
    @media only screen and (-webkit-min-device-pixel-ratio: 2), 
           only screen and (min-resolution: 192dpi) {
        /* สไตล์สำหรับ high-DPI displays */
        .custom-logo {
            image-rendering: -webkit-optimize-contrast; /* สำหรับ Chrome/Safari */
            image-rendering: crisp-edges; /* รองรับในอนาคต */
        }
    }
    </style>
    <?php
}
add_action('wp_head', 'site_logo_responsive_styles');

/**
 * ฟังก์ชันบันทึกโลโก้
 */
function save_site_logo($attachment_id, $background_type = 'white') {
    // ตรวจสอบความถูกต้องของ attachment_id
    if (!$attachment_id || !wp_attachment_is_image($attachment_id)) {
        return false;
    }
    
    // กำหนด theme_mod ตามประเภทพื้นหลัง
    $mod_name = '';
    switch ($background_type) {
        case 'white':
            $mod_name = 'custom_logo';
            break;
        case 'dark':
            $mod_name = 'custom_logo_dark';
            break;
        case 'transparent':
            $mod_name = 'custom_logo_transparent';
            break;
        default:
            $mod_name = 'custom_logo';
    }
    
    // บันทึก theme mod
    set_theme_mod($mod_name, $attachment_id);
    
    return $attachment_id;
}

/**
 * ฟังก์ชัน Helper สำหรับเรียกใช้โลโก้ในไฟล์ธีม
 * 
 * ใช้งาน: <?php echo get_site_logo('dark'); ?>
 */
function get_site_logo($mode = 'light', $args = array()) {
    $defaults = array(
        'mode' => $mode,
        'class' => '',
        'size' => 'full',
        'link' => 'yes',
        'alt' => '',
        'width' => '',
        'height' => '',
    );
    
    $args = wp_parse_args($args, $defaults);
    
    // สร้าง shortcode attributes string
    $shortcode_atts = '';
    foreach ($args as $key => $value) {
        if (!empty($value)) {
            $shortcode_atts .= ' ' . $key . '="' . esc_attr($value) . '"';
        }
    }
    
    return do_shortcode('[sitelogo' . $shortcode_atts . ']');
}

/**
 * ฟังก์ชัน Helper สำหรับแสดงโลโก้ในไฟล์ธีม
 * 
 * ใช้งาน: <?php site_logo('dark'); ?>
 */
function site_logo($mode = 'light', $args = array()) {
    echo get_site_logo($mode, $args);
}

/**
 * ฟังก์ชันเพื่อแสดงโลโก้ตามประเภทพื้นหลัง
 * ฟังก์ชันนี้จะใช้กับ auto-detection สำหรับแสดงโลโก้ที่เหมาะสมกับพื้นหลัง
 */
function get_logo_for_background($background_type = 'auto') {
    // ตรวจสอบว่าจะใช้โลโก้แบบไหน
    if ($background_type === 'auto') {
        // ตรงนี้ต้องมีการตรวจสอบสีพื้นหลังด้วย JavaScript
        echo '<script>
            document.addEventListener("DOMContentLoaded", function() {
                // ฟังก์ชันนี้จะตรวจสอบว่าควรใช้โลโก้แบบไหน
                function checkBackgroundType() {
                    const element = document.querySelector(".site-header"); // ปรับตามคลาสที่ใช้จริง
                    if (!element) return;
                    
                    // ดึงสี background ของ header
                    const bgColor = window.getComputedStyle(element).backgroundColor;
                    
                    // แปลงเป็นค่า RGB หรือ แปลงเป็นค่าความสว่าง
                    const match = bgColor.match(/rgba?\((\d+), (\d+), (\d+)/);
                    if (match) {
                        const r = parseInt(match[1]);
                        const g = parseInt(match[2]);
                        const b = parseInt(match[3]);
                        
                        // คำนวณความสว่าง (ค่าเฉลี่ย)
                        const brightness = (r + g + b) / 3;
                        
                        const logo = document.querySelector(".custom-logo");
                        if (!logo) return;
                        
                        // ถ้าพื้นหลังมืด ใช้โลโก้สำหรับพื้นหลังสีเข้ม
                        if (brightness < 128) {
                            const lightLogoId = "' . get_theme_mod("custom_logo_dark") . '";
                            if (lightLogoId) {
                                logo.src = "' . wp_get_attachment_url(get_theme_mod("custom_logo_dark")) . '";
                            }
                        }
                    }
                }
                
                // ตรวจสอบตอนโหลดเพจและเมื่อขนาดหน้าจอเปลี่ยน
                checkBackgroundType();
                window.addEventListener("resize", checkBackgroundType);
            });
        </script>';
        
        // ใช้ microdata ที่ถูกต้อง - แก้ไขจากเดิม
        echo '<div itemscope itemtype="https://schema.org/Organization">';
        echo get_custom_logo();
        echo '</div>';
        
        return;
    } else {
        // ใช้โลโก้ตามประเภทที่ระบุโดยตรง
        if ($background_type === 'dark') {
            return get_site_logo('light'); // พื้นหลังเข้ม ใช้ mode="light"
        } elseif ($background_type === 'transparent') {
            return get_site_logo('transparent'); // พื้นหลังโปร่งใส ใช้ mode="transparent"
        } else {
            return get_site_logo('dark'); // พื้นหลังสว่าง ใช้ mode="dark"
        }
    }
}

/**
 * ฟังก์ชันเพื่อช่วยตรวจสอบและบันทึกค่า theme mods ให้ถูกต้อง
 * สามารถเรียกใช้จาก functions.php หรือหน้าตั้งค่าธีม
 */
function fix_site_logo_theme_mods() {
    // ดึงค่า theme mods ปัจจุบัน
    $white_logo_id = get_theme_mod('custom_logo');
    $dark_logo_id = get_theme_mod('custom_logo_dark');
    $transparent_logo_id = get_theme_mod('custom_logo_transparent');
    
    // ตรวจสอบค่าและแสดงสถานะปัจจุบัน
    $status = array(
        'white_logo' => $white_logo_id ? 'OK' : 'Missing',
        'dark_logo' => $dark_logo_id ? 'OK' : 'Missing',
        'transparent_logo' => $transparent_logo_id ? 'OK' : 'Missing'
    );
    
    return $status;
}

/**
 * ฟังก์ชันเพื่อรีเซ็ตหรือล้างค่า theme mods ที่เกี่ยวข้องกับโลโก้
 * สามารถเรียกใช้ในกรณีที่ต้องการเริ่มต้นใหม่
 */
function reset_site_logo_theme_mods() {
    remove_theme_mod('custom_logo');
    remove_theme_mod('custom_logo_dark');
    remove_theme_mod('custom_logo_transparent');
    
    return array(
        DGA_SUCCESS_STATUS => true,
        DGA_MESSAGE_KEY => 'รีเซ็ตค่า theme mods สำหรับโลโก้เรียบร้อยแล้ว'
    );
}

/**
 * เพิ่มการสนับสนุน custom logo ทั้งหมด
 * ให้เรียกใช้ใน functions.php ของธีม
 */
function site_logo_setup() {
    // สนับสนุน custom logo ปกติของ WordPress
    add_theme_support('custom-logo', array(
        'height'      => 90,
        'width'       => 330,
        'flex-height' => true,
        'flex-width'  => true,
        'header-text' => array('site-title', 'site-description'),
    ));
}
add_action('after_setup_theme', 'site_logo_setup');




/***** ฟังก์ชั่นนับจำนวนโพสตั้งค่าเองได้ ******/

class Post_Count_Widget_Stats_XRT923 {
    
    /**
     * Constructor
     */
    public function __construct() {
        add_action(DGA_ENQUEUE_SCRIPTS_HOOK, array($this, 'register_scripts'));
        add_shortcode('post_count', array($this, 'shortcode_callback'));
        add_action('wp_ajax_get_post_count_xrt923', array($this, 'ajax_callback'));
        add_action('wp_ajax_nopriv_get_post_count_xrt923', array($this, 'ajax_callback'));
        add_action('wp_ajax_get_post_stats_xrt923', array($this, 'ajax_stats_callback'));
        add_action('wp_ajax_nopriv_get_post_stats_xrt923', array($this, 'ajax_stats_callback'));
    }
    
    /**
     * Register and enqueue scripts and styles
     */
    public function register_scripts() {
        // Register Chart.js from CDN
        wp_register_script(
            'chart-js', 
            'https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js',
            array(),
            '4.4.1',
            true
        );
        
        wp_register_script(
            'widget-post-count-xrt923', 
            get_stylesheet_directory_uri() . '/js/widget-post-count-stats.js', 
            array('chart-js'), 
            '2.0.0', 
            true
        );
        
        wp_register_style(
            'widget-post-count-xrt923', 
            get_stylesheet_directory_uri() . '/css/widget-post-count-stats.css', 
            array(), 
            '2.0.0'
        );
        
        wp_localize_script('widget-post-count-xrt923', 'postCountData', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('post_count_nonce_xrt923'),
            'i18n' => array(
                'loading' => __('Loading...', DGA_TEXT_DOMAIN),
                DGA_ERROR_STATUS => __('Error loading data', DGA_TEXT_DOMAIN),
                'monthly' => __('Monthly', DGA_TEXT_DOMAIN),
                'yearly' => __('Yearly', DGA_TEXT_DOMAIN),
                'posts' => __('Posts', DGA_TEXT_DOMAIN),
                'close' => __('Close', DGA_TEXT_DOMAIN),
                'statistics' => __('Post Statistics', DGA_TEXT_DOMAIN),
                'noData' => __('No data available', DGA_TEXT_DOMAIN),
                'jan' => __('Jan', DGA_TEXT_DOMAIN),
                'feb' => __('Feb', DGA_TEXT_DOMAIN),
                'mar' => __('Mar', DGA_TEXT_DOMAIN),
                'apr' => __('Apr', DGA_TEXT_DOMAIN),
                'may' => __('May', DGA_TEXT_DOMAIN),
                'jun' => __('Jun', DGA_TEXT_DOMAIN),
                'jul' => __('Jul', DGA_TEXT_DOMAIN),
                'aug' => __('Aug', DGA_TEXT_DOMAIN),
                'sep' => __('Sep', DGA_TEXT_DOMAIN),
                'oct' => __('Oct', DGA_TEXT_DOMAIN),
                'nov' => __('Nov', DGA_TEXT_DOMAIN),
                'dec' => __('Dec', DGA_TEXT_DOMAIN)
            )
        ));
    }
    
    /**
     * Shortcode callback
     */
    public function shortcode_callback($atts) {
        // Enqueue scripts and styles
        wp_enqueue_script('widget-post-count-xrt923');
        wp_enqueue_style('widget-post-count-xrt923');
        
        // Extract parameters
        $atts = shortcode_atts(array(
            'posttype' => 'post',
            DGA_TAXONOMY_FIELD => '',
            'term' => '',
            'show_stats' => 'yes',
        ), $atts, 'post_count');
        
        // Generate unique ID for this instance
        $unique_id = 'post-count-xrt923-' . wp_rand(100000, 999999);
        
        // Create output HTML with data attributes
        $output = '<div id="' . esc_attr($unique_id) . '" class="post-count-widget-xrt923" ';
        $output .= 'data-posttype="' . esc_attr($atts['posttype']) . '" ';
        $output .= 'data-taxonomy="' . esc_attr($atts[DGA_TAXONOMY_FIELD]) . '" ';
        $output .= 'data-term="' . esc_attr($atts['term']) . '" ';
        $output .= 'data-showstats="' . esc_attr($atts['show_stats']) . '">';
        $output .= '<span class="post-count-loading-xrt923">' . __('Loading...', DGA_TEXT_DOMAIN) . '</span>';
        $output .= '</div>';
        
        return $output;
    }
    
    /**
     * AJAX callback for post count
     */
    public function ajax_callback() {
        // Verify nonce
        check_ajax_referer('post_count_nonce_xrt923', 'nonce');
        
        // Get parameters
        $post_type = isset($_POST['posttype']) ? sanitize_text_field($_POST['posttype']) : 'post';
        $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_text_field($_POST[DGA_TAXONOMY_FIELD]) : '';
        $term = isset($_POST['term']) ? sanitize_text_field($_POST['term']) : '';
        
        // Set up query args
        $args = array(
            DGA_POST_TYPE_FIELD => $post_type,
            DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
            DGA_POSTS_PER_PAGE => -1,
        );
        
        // Add taxonomy query if both taxonomy and term are provided
        if (!empty($taxonomy) && !empty($term)) {
            $args['tax_query'] = array(
                array(
                    DGA_TAXONOMY_FIELD => $taxonomy,
                    DGA_FIELD_KEY => 'slug',
                    'terms' => $term,
                ),
            );
        }
        
        // Get post count
        $query = new WP_Query($args);
        $count = $query->found_posts;
        
        // Send response
        wp_send_json_success(array(
            'count' => $count,
        ));
    }
    
    /**
     * AJAX callback for post statistics
     */
    public function ajax_stats_callback() {
        // Verify nonce
        check_ajax_referer('post_count_nonce_xrt923', 'nonce');
        
        // Get parameters
        $post_type = isset($_POST['posttype']) ? sanitize_text_field($_POST['posttype']) : 'post';
        $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_text_field($_POST[DGA_TAXONOMY_FIELD]) : '';
        $term = isset($_POST['term']) ? sanitize_text_field($_POST['term']) : '';
        $year = isset($_POST['year']) ? intval($_POST['year']) : date('Y');
        $view = isset($_POST['view']) ? sanitize_text_field($_POST['view']) : 'monthly';
        
        $stats = array();
        
        if ($view === 'monthly') {
            // Get monthly statistics for selected year
            for ($month = 1; $month <= 12; $month++) {
                $args = array(
                    DGA_POST_TYPE_FIELD => $post_type,
                    DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
                    DGA_POSTS_PER_PAGE => -1,
                    'date_query' => array(
                        array(
                            'year' => $year,
                            'month' => $month,
                        ),
                    ),
                );
                
                // Add taxonomy query if provided
                if (!empty($taxonomy) && !empty($term)) {
                    $args['tax_query'] = array(
                        array(
                            DGA_TAXONOMY_FIELD => $taxonomy,
                            DGA_FIELD_KEY => 'slug',
                            'terms' => $term,
                        ),
                    );
                }
                
                $query = new WP_Query($args);
                $stats[] = array(
                    DGA_LABEL_FIELD => $month,
                    'count' => $query->found_posts
                );
            }
        } else {
            // Get yearly statistics for last 5 years
            $current_year = date('Y');
            for ($i = 4; $i >= 0; $i--) {
                $check_year = $current_year - $i;
                
                $args = array(
                    DGA_POST_TYPE_FIELD => $post_type,
                    DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
                    DGA_POSTS_PER_PAGE => -1,
                    'date_query' => array(
                        array(
                            'year' => $check_year,
                        ),
                    ),
                );
                
                // Add taxonomy query if provided
                if (!empty($taxonomy) && !empty($term)) {
                    $args['tax_query'] = array(
                        array(
                            DGA_TAXONOMY_FIELD => $taxonomy,
                            DGA_FIELD_KEY => 'slug',
                            'terms' => $term,
                        ),
                    );
                }
                
                $query = new WP_Query($args);
                $stats[] = array(
                    DGA_LABEL_FIELD => $check_year,
                    'count' => $query->found_posts
                );
            }
        }
        
        // Get available years for dropdown
        global $wpdb;
        $years_query = "SELECT DISTINCT YEAR(post_date) as year 
                       FROM {$wpdb->posts} 
                       WHERE post_type = %s AND post_status = DGA_PUBLISH_STATUS 
                       ORDER BY year DESC";
        
        $available_years = $wpdb->get_col($wpdb->prepare($years_query, $post_type));
        
        wp_send_json_success(array(
            'stats' => $stats,
            'available_years' => $available_years,
            'current_year' => $year,
            'view' => $view
        ));
    }
}

// Initialize the class
new Post_Count_Widget_Stats_XRT923();


/**
 * ฟังก์ชันสำหรับตรวจสอบการทำงานของ shortcode
 * สามารถเพิ่มไว้ใน functions.php หรือไฟล์ PHP ที่มีการโหลดในธีม
 */
function debug_site_logo_shortcodes() {
    $output = '<div style="background:#f5f5f5;padding:20px;margin:20px 0;border:1px solid #ddd;font-family:Arial,sans-serif;">';
    $output .= '<h2 style="margin-top:0;">ทดสอบ Shortcode Logo</h2>';
    
    // สถานะการตั้งค่า theme mods
    $output .= '<h3>สถานะ Theme Mods:</h3>';
    $output .= '<ul>';
    $output .= '<li>custom_logo (พื้นหลังขาว): ' . (get_theme_mod('custom_logo') ? 'มีค่า (' . get_theme_mod('custom_logo') . ')' : 'ไม่มีค่า') . '</li>';
    $output .= '<li>custom_logo_dark (พื้นหลังเข้ม): ' . (get_theme_mod('custom_logo_dark') ? 'มีค่า (' . get_theme_mod('custom_logo_dark') . ')' : 'ไม่มีค่า') . '</li>';
    $output .= '<li>custom_logo_transparent (พื้นหลังโปร่งใส): ' . (get_theme_mod('custom_logo_transparent') ? 'มีค่า (' . get_theme_mod('custom_logo_transparent') . ')' : 'ไม่มีค่า') . '</li>';
    $output .= '</ul>';
    
    // ทดสอบ shortcode
    $output .= '<h3>ทดสอบ Shortcode:</h3>';
    
    // mode="light"
    $output .= '<div style="margin-bottom:20px;padding:15px;background-color:#fff;border:1px solid #ddd;">';
    $output .= '<h4 style="margin-top:0;">1. [sitelogo mode="light"]</h4>';
    $output .= '<p>ควรแสดงโลโก้จาก theme_mod: <strong>custom_logo_dark</strong> (โลโก้สีสว่างสำหรับพื้นหลังเข้ม)</p>';
    $output .= '<div style="background:#333;padding:15px;text-align:center;">';
    $output .= do_shortcode('[sitelogo mode="light" debug="yes"]');
    $output .= '</div>';
    $output .= '</div>';
    
    // mode="dark"
    $output .= '<div style="margin-bottom:20px;padding:15px;background-color:#fff;border:1px solid #ddd;">';
    $output .= '<h4 style="margin-top:0;">2. [sitelogo mode="dark"]</h4>';
    $output .= '<p>ควรแสดงโลโก้จาก theme_mod: <strong>custom_logo</strong> (โลโก้สีเข้มสำหรับพื้นหลังขาว)</p>';
    $output .= '<div style="background:#fff;padding:15px;text-align:center;">';
    $output .= do_shortcode('[sitelogo mode="dark" debug="yes"]');
    $output .= '</div>';
    $output .= '</div>';
    
    // mode="transparent"
    $output .= '<div style="margin-bottom:20px;padding:15px;background-color:#fff;border:1px solid #ddd;">';
    $output .= '<h4 style="margin-top:0;">3. [sitelogo mode="transparent"]</h4>';
    $output .= '<p>ควรแสดงโลโก้จาก theme_mod: <strong>custom_logo_transparent</strong> (โลโก้สำหรับพื้นหลังโปร่งใส)</p>';
    $output .= '<div style="background-image: linear-gradient(45deg, #f0f0f0 25%, transparent 25%), 
                linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), 
                linear-gradient(45deg, transparent 75%, #f0f0f0 75%), 
                linear-gradient(-45deg, transparent 75%, #f0f0f0 75%);
                background-size: 20px 20px;
                background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
                padding:15px;text-align:center;">';
    $output .= do_shortcode('[sitelogo mode="transparent" debug="yes"]');
    $output .= '</div>';
    $output .= '</div>';
    
    // คำแนะนำในการแก้ไขปัญหา
    $output .= '<h3>วิธีแก้ไขปัญหา:</h3>';
    $output .= '<ol>';
    $output .= '<li>ตรวจสอบว่าได้อัพโหลดและบันทึกโลโก้สำหรับแต่ละพื้นหลังแล้ว</li>';
    $output .= '<li>หากยังมีปัญหา ให้ทดลองรีเซ็ตการตั้งค่าโลโก้ด้วยฟังก์ชัน <code>reset_site_logo_theme_mods()</code> แล้วอัพโหลดใหม่</li>';
    $output .= '<li>ตรวจสอบว่าไม่มีปลั๊กอินหรือโค้ดอื่นที่อาจขัดแย้งกับการตั้งค่า theme mods</li>';
    $output .= '<li>ลองเพิ่มโค้ด <code>add_theme_support(\'custom-logo\')</code> ในไฟล์ functions.php ของธีม</li>';
    $output .= '</ol>';
    
    // ปุ่มรีเซ็ต theme mods
    $output .= '<div style="margin-top:20px;">';
    $output .= '<a href="#" id="reset-logo-mods" style="display:inline-block;padding:10px 15px;background:#dc3545;color:#fff;text-decoration:none;border-radius:4px;">รีเซ็ตการตั้งค่าโลโก้ทั้งหมด</a>';
    $output .= '<div id="reset-result" style="margin-top:10px;display:none;padding:10px;background:#d4edda;color:#155724;border-radius:4px;"></div>';
    $output .= '</div>';
    
    // เพิ่ม JavaScript สำหรับปุ่มรีเซ็ต
    $output .= '<script>
        document.addEventListener("DOMContentLoaded", function() {
            const resetButton = document.getElementById("reset-logo-mods");
            const resultDiv = document.getElementById("reset-result");
            
            if (resetButton) {
                resetButton.addEventListener("click", function(e) {
                    e.preventDefault();
                    
                    if (confirm("คุณแน่ใจหรือไม่ว่าต้องการรีเซ็ตการตั้งค่าโลโก้ทั้งหมด?")) {
                        // ใช้ AJAX เพื่อเรียกฟังก์ชัน reset_site_logo_theme_mods()
                        const xhr = new XMLHttpRequest();
                        xhr.open("POST", ajaxurl, true);
                        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                        xhr.onreadystatechange = function() {
                            if (xhr.readyState === 4 && xhr.status === 200) {
                                const response = JSON.parse(xhr.responseText);
                                resultDiv.textContent = response.data.message;
                                resultDiv.style.display = "block";
                                
                                // รีโหลดหน้าหลังจาก 2 วินาที
                                setTimeout(function() {
                                    window.location.reload();
                                }, 2000);
                            }
                        };
                        xhr.send("action=reset_site_logo_theme_mods&nonce=" + site_logo_debug_data.nonce);
                    }
                });
            }
        });
    </script>';
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('debug_sitelogo', 'debug_site_logo_shortcodes');

/**
 * AJAX handler เพื่อรีเซ็ต theme mods
 */
function ajax_reset_site_logo_theme_mods() {
    // ตรวจสอบความปลอดภัย
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์เพียงพอ');
        exit;
    }
    
    // รีเซ็ต theme mods
    $result = reset_site_logo_theme_mods();
    
    wp_send_json_success($result);
    exit;
}
add_action('wp_ajax_reset_site_logo_theme_mods', 'ajax_reset_site_logo_theme_mods');

/**
 * เพิ่ม script data สำหรับหน้า debug
 */
function enqueue_site_logo_debug_scripts() {
    wp_localize_script(DGA_JQUERY_HANDLE, 'site_logo_debug_data', array(
        DGA_NONCE_KEY => wp_create_nonce('site_logo_debug_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'enqueue_site_logo_debug_scripts');

/**
 * ฟังก์ชันสร้างหน้าคำแนะนำการใช้งานและการแก้ไขปัญหา
 * สามารถใช้เป็น shortcode [sitelogo_guide]
 */
function site_logo_guide() {
    $output = '<div class="site-logo-guide">';
    
    // หัวข้อ
    $output .= '<h2>คู่มือการใช้งานและแก้ไขปัญหา Logo Shortcode</h2>';
    
    // วิธีการใช้งาน
    $output .= '<div class="guide-section">';
    $output .= '<h3>วิธีการใช้งาน</h3>';
    $output .= '<table class="guide-table">';
    $output .= '<tr><th>Shortcode</th><th>การใช้งาน</th><th>ตัวอย่าง</th></tr>';
    $output .= '<tr><td><code>[sitelogo mode="light"]</code></td><td>แสดงโลโก้บนพื้นหลังสว่าง (ควรเป็นโลโก้สีเข้ม)</td><td>' . do_shortcode('[sitelogo mode="light" width="100"]') . '</td></tr>';
    $output .= '<tr><td><code>[sitelogo mode="dark"]</code></td><td>แสดงโลโก้บนพื้นหลังเข้ม (ควรเป็นโลโก้สีสว่าง)</td><td>' . do_shortcode('[sitelogo mode="dark" width="100"]') . '</td></tr>';
    $output .= '<tr><td><code>[sitelogo mode="transparent"]</code></td><td>แสดงโลโก้บนพื้นหลังโปร่งใส</td><td>' . do_shortcode('[sitelogo mode="transparent" width="100"]') . '</td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // อธิบายความสัมพันธ์
    $output .= '<div class="guide-section">';
    $output .= '<h3>ความสัมพันธ์ระหว่างโหมดและพื้นหลัง</h3>';
    $output .= '<p>ระบบใช้หลักการว่า โลโก้ที่คุณอัพโหลดบนพื้นหลังหนึ่ง จะถูกเรียกใช้เมื่อต้องการแสดงบนอีกพื้นหลังที่แตกต่างกัน:</p>';
    $output .= '<ul>';
    $output .= '<li><strong>โลโก้ที่อัพโหลดบนพื้นหลังขาว</strong> (ควรเป็นโลโก้สีเข้ม) → เรียกใช้ด้วย <code>[sitelogo mode="dark"]</code></li>';
    $output .= '<li><strong>โลโก้ที่อัพโหลดบนพื้นหลังเข้ม</strong> (ควรเป็นโลโก้สีสว่าง) → เรียกใช้ด้วย <code>[sitelogo mode="light"]</code></li>';
    $output .= '<li><strong>โลโก้ที่อัพโหลดบนพื้นหลังโปร่งใส</strong> (ควรเป็นโลโก้ PNG โปร่งใส) → เรียกใช้ด้วย <code>[sitelogo mode="transparent"]</code></li>';
    $output .= '</ul>';
    $output .= '</div>';
    
    // ตารางแสดงความสัมพันธ์ที่ละเอียดขึ้น
    $output .= '<div class="guide-section">';
    $output .= '<h3>ตารางเปรียบเทียบชัดเจน</h3>';
    $output .= '<table class="guide-table">';
    $output .= '<tr><th>เมื่อคุณอัพโหลดโลโก้บน</th><th>ระบบบันทึกเป็น Theme Mod</th><th>เรียกใช้ด้วย Shortcode</th></tr>';
    $output .= '<tr><td>พื้นหลังขาว (โลโก้สีเข้ม/ดำ)</td><td>custom_logo</td><td><code>[sitelogo mode="dark"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังเข้ม (โลโก้สีสว่าง/ขาว)</td><td>custom_logo_dark</td><td><code>[sitelogo mode="light"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังโปร่งใส (โลโก้ PNG)</td><td>custom_logo_transparent</td><td><code>[sitelogo mode="transparent"]</code></td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // พารามิเตอร์เพิ่มเติม
    $output .= '<div class="guide-section">';
    $output .= '<h3>พารามิเตอร์เพิ่มเติม</h3>';
    $output .= '<table class="guide-table">';
    $output .= '<tr><th>พารามิเตอร์</th><th>คำอธิบาย</th><th>ตัวอย่าง</th></tr>';
    $output .= '<tr><td><code>class</code></td><td>กำหนด CSS class เพิ่มเติม</td><td><code>[sitelogo mode="dark" class="my-logo"]</code></td></tr>';
    $output .= '<tr><td><code>size</code></td><td>ขนาดรูปภาพ (full, large, medium, thumbnail)</td><td><code>[sitelogo mode="dark" size="medium"]</code></td></tr>';
    $output .= '<tr><td><code>link</code></td><td>กำหนดให้มีลิงก์หรือไม่ (yes/no)</td><td><code>[sitelogo mode="dark" link="no"]</code></td></tr>';
    $output .= '<tr><td><code>width</code>/<code>height</code></td><td>กำหนดความกว้าง/สูงเป็นพิกเซล</td><td><code>[sitelogo mode="dark" width="200" height="60"]</code></td></tr>';
    $output .= '<tr><td><code>alt</code></td><td>กำหนด alt text</td><td><code>[sitelogo mode="dark" alt="โลโก้บริษัท"]</code></td></tr>';
    $output .= '<tr><td><code>debug</code></td><td>แสดงข้อมูล debug (yes/no)</td><td><code>[sitelogo mode="dark" debug="yes"]</code></td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // คำถามที่พบบ่อย
    $output .= '<div class="guide-section">';
    $output .= '<h3>คำถามที่พบบ่อย</h3>';
    $output .= '<div class="faq-item">';
    $output .= '<h4>Q: โลโก้ไม่แสดงหรือแสดงผิด เกิดจากอะไร?</h4>';
    $output .= '<p>A: สาเหตุอาจเกิดจาก:</p>';
    $output .= '<ol>';
    $output .= '<li>ยังไม่ได้อัพโหลดโลโก้สำหรับบางพื้นหลัง</li>';
    $output .= '<li>มีความขัดแย้งกับปลั๊กอินอื่นที่ปรับแต่ง custom logo</li>';
    $output .= '<li>ธีมไม่รองรับ custom-logo feature</li>';
    $output .= '</ol>';
    $output .= '<p>ทดสอบด้วย shortcode <code>[debug_sitelogo]</code> เพื่อดูรายละเอียดการทำงาน</p>';
    $output .= '</div>';
    
    $output .= '<div class="faq-item">';
    $output .= '<h4>Q: ควรอัพโหลดโลโก้ในรูปแบบใด?</h4>';
    $output .= '<p>A: แนะนำให้เตรียมโลโก้ 3 รูปแบบ:</p>';
    $output .= '<ul>';
    $output .= '<li><strong>โลโก้สีเข้ม/ดำ</strong> สำหรับแสดงบนพื้นหลังสีอ่อน</li>';
    $output .= '<li><strong>โลโก้สีสว่าง/ขาว</strong> สำหรับแสดงบนพื้นหลังสีเข้ม</li>';
    $output .= '<li><strong>โลโก้ PNG โปร่งใส</strong> สำหรับแสดงบนพื้นหลังที่มีลวดลาย</li>';
    $output .= '</ul>';
    $output .= '</div>';
    
    $output .= '<div class="faq-item">';
    $output .= '<h4>Q: ถ้าต้องการรีเซ็ตข้อมูลโลโก้ทั้งหมด ทำอย่างไร?</h4>';
    $output .= '<p>A: สามารถใช้ฟังก์ชัน <code>reset_site_logo_theme_mods()</code> เพื่อรีเซ็ตการตั้งค่าทั้งหมด หรือใช้ shortcode <code>[debug_sitelogo]</code> แล้วคลิกที่ปุ่มรีเซ็ต</p>';
    $output .= '</div>';
    
    $output .= '</div>';
    
    // สไตล์สำหรับการแสดงผล
    $output .= '<style>
        .site-logo-guide {
            max-width: 800px;
            margin: 20px auto;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            color: #333;
            line-height: 1.5;
        }
        .site-logo-guide h2 {
            text-align: center;
            padding-bottom: 15px;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }
        .guide-section {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        .guide-section h3 {
            margin-bottom: 15px;
            color: #2271b1;
        }
        .guide-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .guide-table th, .guide-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        .guide-table th {
            background-color: #f5f5f5;
        }
        .guide-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .site-logo-guide code {
            background: #f0f0f1;
            padding: 2px 5px;
            border-radius: 3px;
            font-size: 13px;
            color: #007cba;
            font-family: Consolas, Monaco, monospace;
        }
        .faq-item {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-left: 4px solid #2271b1;
            border-radius: 4px;
        }
        .faq-item h4 {
            margin-top: 0;
            margin-bottom: 10px;
            color: #2271b1;
        }
        .faq-item p, .faq-item ul, .faq-item ol {
            margin-bottom: 10px;
        }
    </style>';
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('sitelogo_guide', 'site_logo_guide');

/**
 * ฟังก์ชัน site_logo_update() สำหรับแสดง UI จัดการโลโก้
 * ใช้งานด้วย shortcode [site_logo_updater]
 * 
 * @return string HTML output
 */
function site_logo_update() {
    // เตรียมการใช้ WordPress Media Library
    wp_enqueue_media();
    
    // โหลด scripts และ styles
    wp_enqueue_script(
        'site-logo-update-js',
        get_stylesheet_directory_uri() . '/js/site-logo-update.js',
        array(DGA_JQUERY_HANDLE, 'jquery-ui-draggable', 'jquery-ui-slider'),
        '1.1.0',
        true
    );
    
    wp_enqueue_style(
        'site-logo-update-css',
        get_stylesheet_directory_uri() . '/css/site-logo-update.css',
        array(),
        '1.1.0'
    );
    
    // โหลด jQuery UI CSS สำหรับ slider
    wp_enqueue_style(
        'jquery-ui-css',
        'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css'
    );
    
    // ดึงข้อมูลโลโก้ปัจจุบัน
    $white_logo_id = get_theme_mod('custom_logo');
    $dark_logo_id = get_theme_mod('custom_logo_dark');
    $transparent_logo_id = get_theme_mod('custom_logo_transparent');
    
    // เตรียม URL ของโลโก้
    $white_logo_url = $white_logo_id ? wp_get_attachment_image_url($white_logo_id, 'full') : '';
    $dark_logo_url = $dark_logo_id ? wp_get_attachment_image_url($dark_logo_id, 'full') : '';
    $transparent_logo_url = $transparent_logo_id ? wp_get_attachment_image_url($transparent_logo_id, 'full') : '';
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script(
        'site-logo-update-js',
        'siteLogoUpdateData',
        array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('site_logo_update_nonce'),
            'white_logo_url' => $white_logo_url,
            'dark_logo_url' => $dark_logo_url,
            'transparent_logo_url' => $transparent_logo_url,
            'white_logo_id' => $white_logo_id,
            'dark_logo_id' => $dark_logo_id,
            'transparent_logo_id' => $transparent_logo_id,
            'skip_crop' => true,
        )
    );
    
    // เริ่มสร้าง HTML output
    $output = '<div class="site-logo-updater-container">';
    
    // ส่วนหัว
    $output .= '<h2 class="site-logo-title">จัดการโลโก้เว็บไซต์</h2>';
    
    // คำอธิบายความสัมพันธ์
    $output .= '<div class="site-logo-relationship-info">';
    $output .= '<h3>ความสัมพันธ์ระหว่างพื้นหลังและการใช้งาน:</h3>';
    $output .= '<table class="site-logo-relationship-table">';
    $output .= '<tr><th>พื้นหลังที่อัพโหลด</th><th>ลักษณะของโลโก้</th><th>ใช้งานด้วย Shortcode</th></tr>';
    $output .= '<tr><td>พื้นหลังขาว</td><td>โลโก้สีเข้ม/ดำ</td><td><code>[sitelogo mode="dark"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังเข้ม</td><td>โลโก้สีสว่าง/ขาว</td><td><code>[sitelogo mode="light"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังโปร่งใส</td><td>โลโก้ PNG โปร่งใส</td><td><code>[sitelogo mode="transparent"]</code></td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // แท็บเมนู
    $output .= '<div class="site-logo-tabs">';
    $output .= '<div class="site-logo-tab active" data-tab="white">พื้นหลังขาว</div>';
    $output .= '<div class="site-logo-tab" data-tab="dark">พื้นหลังเข้ม</div>';
    $output .= '<div class="site-logo-tab" data-tab="transparent">พื้นหลังโปร่งใส</div>';
    $output .= '</div>';
    
    // ส่วนเนื้อหาแท็บ
    $output .= '<div class="site-logo-content-panels">';
    
    // แท็บ 1: พื้นหลังขาว
    $output .= '<div class="site-logo-content active" data-content="white">';
    $output .= '<div class="site-logo-preview-area" id="site-logo-preview-white" style="background-color: #ffffff;">';
    
    if ($white_logo_url) {
        $output .= '<div class="site-logo-image-container" id="site-logo-container-white" data-attachment-id="' . esc_attr($white_logo_id) . '">';
        $output .= '<img src="' . esc_url($white_logo_url) . '" alt="โลโก้พื้นขาว" id="site-logo-image-white" />';
        $output .= '</div>';
        $output .= '<div class="site-logo-overlay"><span>โลโก้สำหรับพื้นหลังขาว (สีเข้ม)</span></div>';
    } else {
        $output .= '<div class="site-logo-placeholder" id="site-logo-placeholder-white">คลิกเพื่อเลือกรูปภาพโลโก้สีเข้ม/ดำ</div>';
    }
    
    $output .= '</div>';
    
    $output .= '<div class="site-logo-panel-info">';
    $output .= '<h4>โลโก้สำหรับพื้นหลังขาว (สีเข้ม)</h4>';
    $output .= '<p>อัพโหลดโลโก้สีเข้ม/ดำ สำหรับแสดงบนพื้นหลังสีขาวหรือสีอ่อน</p>';
    $output .= '<p>→ ใช้งานด้วย <code>[sitelogo mode="dark"]</code></p>';
    $output .= '<div class="site-logo-controls">';
    $output .= '<button type=DGA_BUTTON_TYPE id="site-logo-select-white" class="site-logo-button">เลือกรูปภาพ</button>';
    $output .= '<button type=DGA_BUTTON_TYPE id="site-logo-save-white" class="site-logo-button" ' . (!$white_logo_url ? 'disabled' : '') . '>บันทึกโลโก้</button>';
    $output .= '</div>';
    if ($white_logo_url) {
        $output .= '<div class="site-logo-success-banner">';
        $output .= '<span>ใช้งานด้วย</span>';
        $output .= '<code>[sitelogo mode="dark"]</code>';
        $output .= '</div>';
    }
    $output .= '</div>';
    $output .= '</div>';
    
    // แท็บ 2: พื้นหลังเข้ม
    $output .= '<div class="site-logo-content" data-content="dark">';
    $output .= '<div class="site-logo-preview-area" id="site-logo-preview-dark" style="background-color: #333333;">';
    
    if ($dark_logo_url) {
        $output .= '<div class="site-logo-image-container" id="site-logo-container-dark" data-attachment-id="' . esc_attr($dark_logo_id) . '">';
        $output .= '<img src="' . esc_url($dark_logo_url) . '" alt="โลโก้พื้นเข้ม" id="site-logo-image-dark" />';
        $output .= '</div>';
        $output .= '<div class="site-logo-overlay"><span>โลโก้สำหรับพื้นหลังเข้ม (สีสว่าง)</span></div>';
    } else {
        $output .= '<div class="site-logo-placeholder" id="site-logo-placeholder-dark">คลิกเพื่อเลือกรูปภาพโลโก้สีสว่าง/ขาว</div>';
    }
    
    $output .= '</div>';
    
    $output .= '<div class="site-logo-panel-info">';
    $output .= '<h4>โลโก้สำหรับพื้นหลังเข้ม (สีสว่าง)</h4>';
    $output .= '<p>อัพโหลดโลโก้สีสว่าง/ขาว สำหรับแสดงบนพื้นหลังสีเข้มหรือสีดำ</p>';
    $output .= '<p>→ ใช้งานด้วย <code>[sitelogo mode="light"]</code></p>';
    $output .= '<div class="site-logo-controls">';
    $output .= '<button type=DGA_BUTTON_TYPE id="site-logo-select-dark" class="site-logo-button">เลือกรูปภาพ</button>';
    $output .= '<button type=DGA_BUTTON_TYPE id="site-logo-save-dark" class="site-logo-button" ' . (!$dark_logo_url ? 'disabled' : '') . '>บันทึกโลโก้</button>';
    $output .= '</div>';
    if ($dark_logo_url) {
        $output .= '<div class="site-logo-success-banner">';
        $output .= '<span>ใช้งานด้วย</span>';
        $output .= '<code>[sitelogo mode="light"]</code>';
        $output .= '</div>';
    }
    $output .= '</div>';
    $output .= '</div>';
    
    // แท็บ 3: พื้นหลังโปร่งใส
    $output .= '<div class="site-logo-content" data-content="transparent">';
    $output .= '<div class="site-logo-preview-area transparent-bg" id="site-logo-preview-transparent">';
    
    if ($transparent_logo_url) {
        $output .= '<div class="site-logo-image-container" id="site-logo-container-transparent" data-attachment-id="' . esc_attr($transparent_logo_id) . '">';
        $output .= '<img src="' . esc_url($transparent_logo_url) . '" alt="โลโก้พื้นโปร่งใส" id="site-logo-image-transparent" />';
        $output .= '</div>';
        $output .= '<div class="site-logo-overlay"><span>โลโก้สำหรับพื้นหลังโปร่งใส</span></div>';
    } else {
        $output .= '<div class="site-logo-placeholder" id="site-logo-placeholder-transparent">คลิกเพื่อเลือกรูปภาพโลโก้พื้นหลังโปร่งใส</div>';
    }
    
    $output .= '</div>';
    
    $output .= '<div class="site-logo-panel-info">';
    $output .= '<h4>โลโก้สำหรับพื้นหลังโปร่งใส</h4>';
    $output .= '<p>อัพโหลดโลโก้แบบพื้นหลังโปร่งใส (PNG) สำหรับแสดงบนพื้นหลังที่มีลวดลาย</p>';
    $output .= '<p>→ ใช้งานด้วย <code>[sitelogo mode="transparent"]</code></p>';
    $output .= '<div class="site-logo-controls">';
    $output .= '<button type=DGA_BUTTON_TYPE id="site-logo-select-transparent" class="site-logo-button">เลือกรูปภาพ</button>';
    $output .= '<button type=DGA_BUTTON_TYPE id="site-logo-save-transparent" class="site-logo-button" ' . (!$transparent_logo_url ? 'disabled' : '') . '>บันทึกโลโก้</button>';
    $output .= '</div>';
    if ($transparent_logo_url) {
        $output .= '<div class="site-logo-success-banner">';
        $output .= '<span>ใช้งานด้วย</span>';
        $output .= '<code>[sitelogo mode="transparent"]</code>';
        $output .= '</div>';
    }
    $output .= '</div>';
    $output .= '</div>';
    
    $output .= '</div>'; // ปิด site-logo-content-panels
    
    // พื้นที่แสดงข้อความสถานะ
    $output .= '<div id="site-logo-update-message" class="site-logo-update-message"></div>';
    
    // ส่วนแนะนำการใช้งาน
    $output .= '<div class="site-logo-usage-guide">';
    $output .= '<h3>วิธีใช้งาน Shortcode</h3>';
    $output .= '<p>หลังจากบันทึกโลโก้แล้ว สามารถใช้ shortcode ต่อไปนี้เพื่อแสดงโลโก้ในตำแหน่งที่ต้องการ:</p>';
    $output .= '<ul>';
    $output .= '<li><code>[sitelogo mode="light"]</code> - แสดงโลโก้สีสว่างสำหรับพื้นหลังเข้ม</li>';
    $output .= '<li><code>[sitelogo mode="dark"]</code> - แสดงโลโก้สีเข้มสำหรับพื้นหลังขาว</li>';
    $output .= '<li><code>[sitelogo mode="transparent"]</code> - แสดงโลโก้สำหรับพื้นหลังโปร่งใส</li>';
    $output .= '</ul>';
    $output .= '<p>ตัวอย่างการใช้งานพารามิเตอร์เพิ่มเติม:</p>';
    $output .= '<ul>';
    $output .= '<li><code>[sitelogo mode="dark" width="200" height="60"]</code> - กำหนดขนาด</li>';
    $output .= '<li><code>[sitelogo mode="light" class="my-logo" link="no"]</code> - เพิ่ม class และไม่มีลิงก์</li>';
    $output .= '</ul>';
    $output .= '<p>หากต้องการความช่วยเหลือเพิ่มเติม สามารถใช้ <code>[sitelogo_guide]</code> เพื่อดูคู่มือการใช้งานแบบละเอียด หรือ <code>[debug_sitelogo]</code> เพื่อตรวจสอบปัญหา</p>';
    $output .= '</div>';
    
    $output .= '</div>'; // ปิด site-logo-updater-container
    
    // เพิ่ม CSS เพิ่มเติมสำหรับส่วนใหม่
    $output .= '<style>
        .site-logo-relationship-info {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-left: 4px solid #2271b1;
            border-radius: 4px;
        }
        .site-logo-relationship-info h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
            color: #1d2327;
        }
        .site-logo-relationship-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        .site-logo-relationship-table th, 
        .site-logo-relationship-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .site-logo-relationship-table th {
            background-color: #f5f5f5;
        }
        .site-logo-usage-guide {
            margin-top: 30px;
            padding: 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #ddd;
        }
        .site-logo-usage-guide h3 {
            margin-top: 0;
            color: #1d2327;
        }
        .site-logo-usage-guide ul {
            margin-left: 20px;
        }
        .site-logo-usage-guide li {
            margin-bottom: 5px;
        }
    </style>';
    
    return $output;
}
add_shortcode('site_logo_updater', 'site_logo_update');


/**
 * AJAX handler สำหรับบันทึกโลโก้
 */
function site_logo_update_ajax_handler() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'site_logo_update_nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
        exit;
    }
    
    // ตรวจสอบ attachment_id
    $attachment_id = isset($_POST['attachment_id']) ? intval($_POST['attachment_id']) : 0;
    if ($attachment_id <= 0) {
        wp_send_json_error('ไม่พบไฟล์แนบที่ถูกต้อง');
        exit;
    }
    
    // ตรวจสอบว่าเป็นรูปภาพจริง
    if (!wp_attachment_is_image($attachment_id)) {
        wp_send_json_error('ไฟล์แนบไม่ใช่รูปภาพ');
        exit;
    }
    
    // ตรวจสอบ background_type
    $background_type = isset($_POST['background_type']) ? sanitize_text_field($_POST['background_type']) : 'white';
    if (!in_array($background_type, array('white', 'dark', 'transparent'))) {
        $background_type = 'white';
    }
    
    // บันทึกโลโก้
    $saved_attachment_id = save_site_logo($attachment_id, $background_type);
    if (!$saved_attachment_id) {
        wp_send_json_error('ไม่สามารถบันทึกโลโก้ได้');
        exit;
    }
    
    // ชื่อพื้นหลังและ shortcode mode
    $background_name = '';
    $shortcode_mode = '';
    switch ($background_type) {
        case 'white':
            $background_name = 'ขาว';
            $shortcode_mode = 'dark';
            break;
        case 'dark':
            $background_name = 'สีเข้ม';
            $shortcode_mode = 'light';
            break;
        case 'transparent':
            $background_name = 'โปร่งใส';
            $shortcode_mode = 'transparent';
            break;
        default:
            $background_name = 'ขาว';
            $shortcode_mode = 'dark';
            break;
    }
    
    // ส่งข้อมูลกลับ
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'บันทึกโลโก้สำหรับพื้นหลัง' . $background_name . 'เรียบร้อยแล้ว',
        'shortcode' => '[sitelogo mode="' . $shortcode_mode . '"]',
        'logo_html' => wp_get_attachment_image($saved_attachment_id, 'full', false, array('class' => 'custom-logo')),
        'logo_url' => wp_get_attachment_image_url($saved_attachment_id, 'full'),
        'background_type' => $background_type,
        'shortcode_mode' => $shortcode_mode
    ));
    exit;
}
add_action('wp_ajax_site_logo_update', 'site_logo_update_ajax_handler');


/****** ฟังก์ชั่น DGA MENU FOR MOBILE *********/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue mobile menu assets with optimized loading
 */
function dga_mobile_menu_enqueue_scripts_kxm892() {
    // Only load on frontend
    if (is_admin()) {
        return;
    }
    
    // Register styles with version control
    wp_register_style(
        'dga-mobile-menu-css-kxm892', 
        get_stylesheet_directory_uri() . '/css/dga-mobile-menu-enhanced.css', 
        array(), 
        '2.0.0'
    );
    
    // Register scripts with dependencies
    wp_register_script(
        'dga-mobile-menu-js-kxm892', 
        get_stylesheet_directory_uri() . '/js/dga-mobile-menu-enhanced.js', 
        array(DGA_JQUERY_HANDLE), 
        '2.0.0',
        true // Load in footer
    );
    
    // Localize script with AJAX and settings
    wp_localize_script('dga-mobile-menu-js-kxm892', 'dgaMobileMenu', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_mobile_menu_nonce'),
        'messages' => array(
            'loading' => __('กำลังโหลดเมนู...', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __('เกิดข้อผิดพลาดในการโหลดเมนู', DGA_TEXT_DOMAIN),
            'close' => __('ปิดเมนู', DGA_TEXT_DOMAIN),
            'open' => __('เปิดเมนู', DGA_TEXT_DOMAIN)
        ),
        'settings' => array(
            'breakpoint' => 992,
            'animationSpeed' => 300,
            'cacheMenu' => true,
            'touchEnabled' => wp_is_mobile()
        )
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_mobile_menu_enqueue_scripts_kxm892', 5);

/**
 * Mobile menu shortcode with improved HTML structure
 */
function dga_mobile_menu_shortcode_kxm892($atts = array()) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'menu_location' => 'primary',
        'menu_title' => __('เมนู', DGA_TEXT_DOMAIN),
        'position' => 'right', // left or right
        'theme' => 'light', // light or dark
        'show_logo' => 'false',
        'show_search' => 'false'
    ), $atts, 'dga_mobile_menu');
    
    // Enqueue assets only when shortcode is used
    wp_enqueue_style('dga-mobile-menu-css-kxm892');
    wp_enqueue_script('dga-mobile-menu-js-kxm892');
    
    // Sanitize attributes
    $menu_title = sanitize_text_field($atts['menu_title']);
    $position = in_array($atts['position'], array('left', 'right')) ? $atts['position'] : 'right';
    $theme = in_array($atts['theme'], array('light', 'dark')) ? $atts['theme'] : 'light';
    $show_logo = filter_var($atts['show_logo'], FILTER_VALIDATE_BOOLEAN);
    $show_search = filter_var($atts['show_search'], FILTER_VALIDATE_BOOLEAN);
    
    // Generate unique ID for this instance
    $instance_id = 'kxm892-' . uniqid();
    
    ob_start();
    ?>
    <div class="dga-mobile-menu-container-kxm892" 
         data-instance="<?php echo esc_attr($instance_id); ?>"
         data-position="<?php echo esc_attr($position); ?>"
         data-theme="<?php echo esc_attr($theme); ?>"
         data-menu-location="<?php echo esc_attr($atts['menu_location']); ?>">
         
        <!-- Toggle Button -->
        <button class="dga-mobile-menu-toggle-kxm892" 
                type=DGA_BUTTON_TYPE
                aria-label="<?php esc_attr_e('เปิดเมนูหลัก', DGA_TEXT_DOMAIN); ?>"
                aria-expanded="false"
                aria-controls="mobile-menu-<?php echo esc_attr($instance_id); ?>">
            <span class="dga-menu-icon-kxm892">
                <span class="bar-kxm892"></span>
                <span class="bar-kxm892"></span>
                <span class="bar-kxm892"></span>
            </span>
            <span class="sr-only-kxm892"><?php _e('เมนู', DGA_TEXT_DOMAIN); ?></span>
        </button>
        
        <!-- Overlay -->
        <div class="dga-mobile-menu-overlay-kxm892" 
             aria-hidden="true"
             role="presentation"></div>
        
        <!-- Menu Wrapper -->
        <nav class="dga-mobile-menu-wrapper-kxm892 dga-position-<?php echo esc_attr($position); ?> dga-theme-<?php echo esc_attr($theme); ?>" 
             id="mobile-menu-<?php echo esc_attr($instance_id); ?>"
             role="navigation"
             aria-label="<?php esc_attr_e('เมนูหลักสำหรับมือถือ', DGA_TEXT_DOMAIN); ?>">
             
            <!-- Menu Header -->
            <div class="dga-mobile-menu-header-kxm892">
                <?php if ($show_logo): ?>
                <div class="dga-menu-logo-kxm892">
                    <?php 
                    $custom_logo_id = get_theme_mod('custom_logo');
                    if ($custom_logo_id) {
                        echo wp_get_attachment_image($custom_logo_id, 'medium', false, array(
                            'class' => 'dga-logo-image-kxm892',
                            'alt' => get_bloginfo('name')
                        ));
                    } else {
                        echo '<span class="dga-site-name-kxm892">' . esc_html(get_bloginfo('name')) . '</span>';
                    }
                    ?>
                </div>
                <?php endif; ?>
                
                <span class="dga-mobile-menu-title-kxm892"><?php echo esc_html($menu_title); ?></span>
                
                <button class="dga-mobile-menu-close-kxm892" 
                        type=DGA_BUTTON_TYPE
                        aria-label="<?php esc_attr_e('ปิดเมนู', DGA_TEXT_DOMAIN); ?>">
                    <svg class="dga-close-icon-kxm892" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
            
            <?php if ($show_search): ?>
            <!-- Search Box -->
            <div class="dga-mobile-menu-search-kxm892">
                <form role="search" method="get" action="<?php echo esc_url(home_url('/')); ?>">
                    <label for="mobile-search-<?php echo esc_attr($instance_id); ?>" class="sr-only-kxm892">
                        <?php _e('ค้นหา', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <input type="search" 
                           id="mobile-search-<?php echo esc_attr($instance_id); ?>"
                           class="dga-search-input-kxm892" 
                           placeholder="<?php esc_attr_e('ค้นหา...', DGA_TEXT_DOMAIN); ?>" 
                           value="<?php echo get_search_query(); ?>" 
                           name="s">
                    <button type=DGA_SUBMIT_TYPE class="dga-search-button-kxm892">
                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="8" cy="8" r="6"></circle>
                            <line x1="13" y1="13" x2="18" y2="18"></line>
                        </svg>
                    </button>
                </form>
            </div>
            <?php endif; ?>
            
            <!-- Menu Content -->
            <div class="dga-mobile-menu-content-kxm892" 
                 role="region"
                 aria-live="polite"
                 aria-busy="false">
                <!-- Menu will be loaded here via AJAX -->
            </div>
            
            <!-- Menu Footer (optional) -->
            <div class="dga-mobile-menu-footer-kxm892">
                <!-- Additional content can be added here -->
            </div>
        </nav>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('dga_mobile_menu', 'dga_mobile_menu_shortcode_kxm892');

/**
 * AJAX handler to get menu with improved caching
 */
function dga_get_mobile_menu_ajax_kxm892() {
    // Verify nonce for security
    if (!wp_verify_nonce($_POST['nonce'] ?? '', 'dga_mobile_menu_nonce')) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)
        ));
    }
    
    // Get menu location from request
    $menu_location = sanitize_text_field($_POST['menu_location'] ?? 'primary');
    
    // Try to get menu from transient cache first
    $cache_key = 'dga_mobile_menu_' . $menu_location . '_' . get_locale();
    $cached_menu = get_transient($cache_key);
    
    if (false !== $cached_menu && !isset($_POST['force_refresh'])) {
        wp_send_json_success(array(
            'html' => $cached_menu,
            'cached' => true
        ));
    }
    
    // Find menu ID
    $menu_id = dga_find_menu_id_kxm892($menu_location);
    
    if (!$menu_id) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('ไม่พบเมนู กรุณาตรวจสอบการตั้งค่าเมนูใน WordPress', DGA_TEXT_DOMAIN)
        ));
    }
    
    // Get menu items
    $menu_items = wp_get_nav_menu_items($menu_id);
    
    if (empty($menu_items)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('ไม่พบรายการเมนู', DGA_TEXT_DOMAIN)
        ));
    }
    
    // Build menu HTML
    $menu_html = dga_build_accordion_menu_kxm892($menu_items);
    
    // Cache the menu for 1 hour
    set_transient($cache_key, $menu_html, HOUR_IN_SECONDS);
    
    wp_send_json_success(array(
        'html' => $menu_html,
        'cached' => false
    ));
}
add_action('wp_ajax_dga_get_mobile_menu', 'dga_get_mobile_menu_ajax_kxm892');
add_action('wp_ajax_nopriv_dga_get_mobile_menu', 'dga_get_mobile_menu_ajax_kxm892');

/**
 * Find menu ID by location with fallback
 */
function dga_find_menu_id_kxm892($preferred_location = 'primary') {
    $locations = get_nav_menu_locations();
    
    // Check preferred location
    if (isset($locations[$preferred_location])) {
        return $locations[$preferred_location];
    }
    
    // Check common location names
    $common_locations = array('primary', 'main-menu', 'header-menu', 'main_menu', 'header_menu');
    foreach ($common_locations as $location) {
        if (isset($locations[$location])) {
            return $locations[$location];
        }
    }
    
    // Fallback to first available menu
    $menus = wp_get_nav_menus();
    if (!empty($menus)) {
        return $menus[0]->term_id;
    }
    
    return false;
}

/**
 * Build accordion menu with improved HTML structure
 */
function dga_build_accordion_menu_kxm892($menu_items) {
    // Build hierarchical menu structure
    $menu_tree = dga_build_menu_tree_kxm892($menu_items);
    
    // Start building HTML
    $output = '<ul class="dga-accordion-menu-kxm892" role="tree">';
    $output .= dga_render_menu_items_kxm892($menu_tree, 0);
    $output .= '</ul>';
    
    return $output;
}

/**
 * Build hierarchical menu tree
 */
function dga_build_menu_tree_kxm892($menu_items) {
    $menu_tree = array();
    $items_by_id = array();
    
    // First pass: index items by ID
    foreach ($menu_items as $item) {
        $items_by_id[$item->ID] = $item;
        $items_by_id[$item->ID]->children = array();
    }
    
    // Second pass: build tree structure
    foreach ($menu_items as $item) {
        if ($item->menu_item_parent == 0) {
            $menu_tree[] = $items_by_id[$item->ID];
        } else {
            if (isset($items_by_id[$item->menu_item_parent])) {
                $items_by_id[$item->menu_item_parent]->children[] = $items_by_id[$item->ID];
            }
        }
    }
    
    return $menu_tree;
}

/**
 * Render menu items recursively
 */
function dga_render_menu_items_kxm892($items, $level = 0) {
    $output = '';
    
    foreach ($items as $item) {
        $has_children = !empty($item->children);
        $item_classes = array(
            'menu-item-kxm892',
            'menu-item-' . $item->ID,
            'level-' . $level
        );
        
        if ($has_children) {
            $item_classes[] = 'has-children-kxm892';
        }
        
        // Check if current page
        $current_url = trailingslashit(home_url(add_query_arg(array())));
        $item_url = trailingslashit($item->url);
        if ($current_url === $item_url) {
            $item_classes[] = 'current-menu-item-kxm892';
        }
        
        $item_id = 'menu-item-kxm892-' . $item->ID;
        
        $output .= '<li class="' . esc_attr(implode(' ', $item_classes)) . '" role="treeitem">';
        
        if ($has_children) {
            // Item with children
            $output .= '<div class="dga-menu-item-header-kxm892">';
            $output .= '<a href="' . esc_url($item->url) . '" class="dga-menu-link-kxm892">';
            $output .= '<span class="menu-text-kxm892">' . esc_html($item->title) . '</span>';
            $output .= '</a>';
            $output .= '<button class="dga-accordion-toggle-kxm892" ';
            $output .= 'type=DGA_BUTTON_TYPE ';
            $output .= 'aria-expanded="false" ';
            $output .= 'aria-controls="submenu-' . esc_attr($item->ID) . '" ';
            $output .= 'aria-label="' . esc_attr(sprintf(__('เปิด/ปิดเมนูย่อยของ %s', DGA_TEXT_DOMAIN), $item->title)) . '">';
            $output .= '<span class="dga-toggle-icon-kxm892"></span>';
            $output .= '</button>';
            $output .= '</div>';
            
            // Submenu
            $output .= '<ul class="dga-submenu-kxm892" ';
            $output .= 'id="submenu-' . esc_attr($item->ID) . '" ';
            $output .= 'role="group" ';
            $output .= 'aria-hidden="true">';
            $output .= dga_render_menu_items_kxm892($item->children, $level + 1);
            $output .= '</ul>';
        } else {
            // Regular item
            $output .= '<a href="' . esc_url($item->url) . '" class="dga-menu-link-kxm892">';
            $output .= '<span class="menu-text-kxm892">' . esc_html($item->title) . '</span>';
            $output .= '</a>';
        }
        
        $output .= '</li>';
    }
    
    return $output;
}

/**
 * Clear menu cache when menus are updated
 */
function dga_clear_menu_cache_kxm892() {
    // Clear all menu caches
    global $wpdb;
    $wpdb->query(
        $wpdb->prepare(
            "DELETE FROM {$wpdb->options} WHERE option_name LIKE %s",
            '_transient_dga_mobile_menu_%'
        )
    );
}
add_action('wp_update_nav_menu', 'dga_clear_menu_cache_kxm892');
add_action('wp_update_nav_menu_item', 'dga_clear_menu_cache_kxm892');





/***** ฟังก์ชั่นอัพเดตภาพหน้าปก *****/

/**
 * Shortcode สำหรับอัพเดตภาพหน้าปกของโพสต์ (แก้ไขปัญหา icon และ Modal)
 * 
 * [postupdate_featured_images] หรือ [postupdate_featured_images post_id="123"]
 */

// ลงทะเบียน CSS และ JavaScript
function postupdate_featured_images_scripts() {
    // ตรวจสอบว่ามีการใช้ shortcode ในหน้าปัจจุบันหรือไม่
    global $post;
    if (is_a($post, 'WP_Post')) {
        if (has_shortcode($post->post_content, 'postupdate_featured_images') || is_singular()) {
            // Enqueue the WordPress media uploader scripts
            wp_enqueue_media();
            
            // CSS
            wp_enqueue_style('postupdate-featured-images-style', 
                get_stylesheet_directory_uri() . '/css/postupdate-featured-images.css', 
                array(), 
                time() // ใช้เวลาปัจจุบันเพื่อป้องกัน cache
            );
            
            // JavaScript
            wp_enqueue_script('postupdate-featured-images-script', 
                get_stylesheet_directory_uri() . '/js/postupdate-featured-images.js', 
                array(DGA_JQUERY_HANDLE), 
                time(), // ใช้เวลาปัจจุบันเพื่อป้องกัน cache
                true
            );
            
            // Localize script
            wp_localize_script('postupdate-featured-images-script', 'postupdateData', array(
                DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('postupdate_featured_image_nonce'),
                'current_url' => get_permalink(),
                'debug_mode' => true, // เพิ่มโหมดดีบั๊ก
                'strings' => array(
                    'upload_title' => 'อัพโหลดภาพหน้าปกใหม่',
                    'processing' => 'กำลังประมวลผล...',
                    DGA_SUCCESS_STATUS => 'อัพเดตภาพหน้าปกสำเร็จ กำลังรีโหลดหน้า...',
                    DGA_ERROR_STATUS => DGA_ERROR_RETRY_MESSAGE_TH,
                    'no_file' => 'กรุณาเลือกไฟล์ก่อนอัพโหลด',
                    'confirm_delete' => 'คุณต้องการลบภาพนี้ใช่หรือไม่?'
                )
            ));
        }
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'postupdate_featured_images_scripts', 999); // ใช้ priority สูงเพื่อให้โหลดหลังสุด

// สร้าง Shortcode function (แก้ไขแล้ว)
function postupdate_featured_images_shortcode($atts) {
    // รับค่า attributes
    $atts = shortcode_atts(
        array(
            DGA_POST_ID_FIELD => get_the_ID(), // เริ่มต้นใช้ ID ของโพสต์ปัจจุบัน
        ),
        $atts,
        'postupdate_featured_images'
    );
    
    // ตรวจสอบสิทธิ์ผู้ใช้ (แก้ไขให้ทดสอบง่ายขึ้น - สามารถลบออกในโปรดักชัน)
    // if (!is_user_logged_in() || !current_user_can('edit_post', $atts[DGA_POST_ID_FIELD])) {
    //     return ''; // ไม่แสดง shortcode สำหรับผู้ใช้ที่ไม่มีสิทธิ์
    // }
    
    // ดึงข้อมูลภาพปัจจุบัน (ถ้ามี)
    $current_image_id = get_post_thumbnail_id($atts[DGA_POST_ID_FIELD]);
    $current_image_url = $current_image_id ? wp_get_attachment_url($current_image_id) : '';
    
    // สร้าง ID เฉพาะสำหรับ instance นี้
    $instance_id = 'postupdate-featured-' . $atts[DGA_POST_ID_FIELD];
    
    // ใช้ไอคอนแบบ Font Awesome แทน SVG (หรือเลือกใช้ไอคอนอื่นที่มีความเข้ากันได้สูงกว่า)
    $upload_icon = '<i class="fa fa-upload postupdate-upload-icon"></i>';
    $tree_icon = '<i class="fa fa-tree postupdate-tree-icon"></i>';
    
    // ถ้าไม่มี Font Awesome ให้ใช้ไอคอนแบบ HTML Entity หรือ Unicode
    if (!wp_style_is('font-awesome', 'enqueued')) {
        $upload_icon = '<span class="postupdate-upload-icon">&#x1F4E4;</span>'; // Unicode upload icon
        $tree_icon = '<span class="postupdate-tree-icon">&#x1F332;</span>'; // Unicode tree icon
    }
    
    // เริ่มสร้าง output HTML
    $output = '<div class="postupdate-featured-wrap" id="' . esc_attr($instance_id) . '" data-post-id="' . esc_attr($atts[DGA_POST_ID_FIELD]) . '">';
    
    // ปุ่มเปิด Modal (ปรับให้เรียบง่ายขึ้น)
    $output .= '<button type=DGA_BUTTON_TYPE class="postupdate-featured-btn" aria-label="อัพเดตภาพหน้าปก" title="อัพเดตภาพหน้าปก">';
    $output .= $tree_icon;
    $output .= '</button>';
    
    // Modal Container (ปรับโครงสร้างให้เรียบง่ายขึ้น)
    $output .= '<div class="postupdate-modal" aria-hidden="true" tabindex="-1" role="dialog">';
    $output .= '<div class="postupdate-modal-overlay"></div>';
    $output .= '<div class="postupdate-modal-container">';
    
    // Modal Header
    $output .= '<div class="postupdate-modal-header">';
    $output .= '<h3 class="postupdate-modal-title">อัพโหลดภาพหน้าปกใหม่</h3>';
    $output .= '<button type=DGA_BUTTON_TYPE class="postupdate-modal-close" aria-label="ปิด">×</button>';
    $output .= '</div>';
    
    // Modal Body
    $output .= '<div class="postupdate-modal-body">';
    
    // Upload Zone
    $output .= '<div class="postupdate-upload-zone">';
    $output .= '<div class="postupdate-upload-prompt">';
    $output .= $upload_icon;
    $output .= '<p>ลากและวางไฟล์ภาพที่นี่<br>หรือ<br>คลิกเพื่อเลือกไฟล์</p>';
    $output .= '</div>';
    $output .= '<div class="postupdate-upload-preview" style="' . ($current_image_url ? '' : 'display: none;') . '">';
    
    if ($current_image_url) {
        $output .= '<img src="' . esc_url($current_image_url) . '" alt="ภาพหน้าปกปัจจุบัน" data-attachment-id="' . esc_attr($current_image_id) . '" />';
    } else {
        $output .= '<img src="" alt="ตัวอย่างภาพ" />';
    }
    
    $output .= '<div class="postupdate-preview-actions">';
    $output .= '<button type=DGA_BUTTON_TYPE class="postupdate-remove-image" aria-label="ลบไฟล์ภาพ">ลบไฟล์ภาพ</button>';
    $output .= '</div>';
    $output .= '</div>';
    
    $output .= '<input type="file" class="postupdate-file-input" accept="image/*" style="display: none;" />';
    $output .= '<div class="postupdate-progress-wrap">';
    $output .= '<div class="postupdate-progress-bar"></div>';
    $output .= '</div>';
    $output .= '</div>';
    
    // Status Message
    $output .= '<div class="postupdate-status" aria-live="polite"></div>';
    
    $output .= '</div>'; // End Modal Body
    
    // Modal Footer
    $output .= '<div class="postupdate-modal-footer">';
    $output .= '<button type=DGA_BUTTON_TYPE class="postupdate-cancel-btn">ยกเลิก</button>';
    $output .= '<button type=DGA_BUTTON_TYPE class="postupdate-update-btn" ' . ($current_image_url ? '' : 'disabled') . '>อัพเดตภาพหน้าปก</button>';
    $output .= '</div>';
    
    $output .= '</div>'; // End Modal Container
    $output .= '</div>'; // End Modal
    
    // เพิ่มข้อมูลดีบั๊ก
    $output .= '<div class="postupdate-debug" style="display: none;">';
    $output .= '<p>Debug Info: PostID=' . esc_attr($atts[DGA_POST_ID_FIELD]) . ', Has Image: ' . ($current_image_url ? 'Yes' : 'No') . '</p>';
    $output .= '</div>';
    
    $output .= '</div>'; // End Wrap
    
    return $output;
}
add_shortcode('postupdate_featured_images', 'postupdate_featured_images_shortcode');

/**
 * AJAX handler สำหรับอัพโหลดไฟล์ไปยัง Media Library
 */
function postupdate_handle_file_upload() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (isset($_POST['_wpnonce']) && !wp_verify_nonce($_POST['_wpnonce'], 'postupdate_featured_image_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'รหัสความปลอดภัยไม่ถูกต้อง'));
    }
    
    // ตรวจสอบว่ามีไฟล์ที่อัพโหลดหรือไม่
    if (empty($_FILES['file'])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบไฟล์ที่อัพโหลด'));
    }
    
    // ตรวจสอบข้อผิดพลาดในการอัพโหลด
    if ($_FILES['file'][DGA_ERROR_STATUS] !== UPLOAD_ERR_OK) {
        $error_message = postupdate_get_upload_error_message($_FILES['file'][DGA_ERROR_STATUS]);
        wp_send_json_error(array(DGA_MESSAGE_KEY => $error_message));
    }
    
    // ตรวจสอบประเภทไฟล์
    $file_type = wp_check_filetype(basename($_FILES['file']['name']));
    if (!$file_type['type']) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ประเภทของไฟล์ไม่ได้รับอนุญาต'));
    }
    
    // ตรวจสอบว่าเป็นไฟล์ภาพหรือไม่
    $allowed_types = array('image/jpeg', 'image/png', 'image/gif', 'image/webp');
    if (!in_array($file_type['type'], $allowed_types)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไฟล์นี้ไม่ใช่ไฟล์ภาพที่รองรับ (รองรับเฉพาะ JPG, PNG, GIF, WEBP)'));
    }
    
    // เตรียมข้อมูลสำหรับการอัพโหลดไฟล์
    $upload = wp_upload_bits($_FILES['file']['name'], null, file_get_contents($_FILES['file']['tmp_name']));
    
    if ($upload[DGA_ERROR_STATUS]) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $upload[DGA_ERROR_STATUS]));
    }
    
    // สร้าง attachment metadata
    $attachment = array(
        'post_mime_type' => $file_type['type'],
        'post_title'     => preg_replace('/\.[^.]+$/', '', basename($upload['file'])),
        'post_content'   => '',
        DGA_POST_STATUS_FIELD    => 'inherit'
    );
    
    // แทรกไฟล์เข้าไปใน WordPress Media Library
    $attachment_id = wp_insert_attachment($attachment, $upload['file']);
    
    if (is_wp_error($attachment_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $attachment_id->get_error_message()));
    }
    
    // สร้าง metadata สำหรับไฟล์ภาพ
    require_once ABSPATH . 'wp-admin/includes/image.php';
    $attachment_data = wp_generate_attachment_metadata($attachment_id, $upload['file']);
    wp_update_attachment_metadata($attachment_id, $attachment_data);
    
    // ส่งคืนข้อมูลที่ต้องการ
    wp_send_json_success(array(
        'id'      => $attachment_id,
        'url'     => $upload['url'],
        'width'   => isset($attachment_data['width']) ? $attachment_data['width'] : 0,
        'height'  => isset($attachment_data['height']) ? $attachment_data['height'] : 0,
        DGA_MESSAGE_KEY => 'อัพโหลดไฟล์สำเร็จ'
    ));
}
add_action('wp_ajax_postupdate_handle_file_upload', 'postupdate_handle_file_upload');
add_action('wp_ajax_nopriv_postupdate_handle_file_upload', 'postupdate_handle_file_upload'); // เพิ่มสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (ถ้าต้องการ)

/**
 * ตรวจสอบและส่งคืนข้อความข้อผิดพลาดในการอัพโหลด
 */
function postupdate_get_upload_error_message($error_code) {
    $errors = array(
        UPLOAD_ERR_INI_SIZE   => 'ไฟล์มีขนาดใหญ่เกินกำหนดในการตั้งค่า PHP (upload_max_filesize)',
        UPLOAD_ERR_FORM_SIZE  => 'ไฟล์มีขนาดใหญ่เกินกำหนดในฟอร์ม HTML (MAX_FILE_SIZE)',
        UPLOAD_ERR_PARTIAL    => 'ไฟล์ถูกอัพโหลดเพียงบางส่วน',
        UPLOAD_ERR_NO_FILE    => 'ไม่มีไฟล์ถูกอัพโหลด',
        UPLOAD_ERR_NO_TMP_DIR => 'ไม่พบโฟลเดอร์ชั่วคราวสำหรับอัพโหลด',
        UPLOAD_ERR_CANT_WRITE => 'เกิดข้อผิดพลาดในการเขียนไฟล์ลงดิสก์',
        UPLOAD_ERR_EXTENSION  => 'การอัพโหลดถูกหยุดโดย PHP Extension'
    );
    
    return isset($errors[$error_code]) ? $errors[$error_code] : 'เกิดข้อผิดพลาดที่ไม่ทราบสาเหตุในการอัพโหลดไฟล์';
}

/**
 * AJAX handler สำหรับอัพเดตภาพหน้าปก
 */
function postupdate_set_featured_image() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'postupdate_featured_image_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'รหัสความปลอดภัยไม่ถูกต้อง'));
    }
    
    // ตรวจสอบการส่งข้อมูลที่ต้องการ
    if (!isset($_POST[DGA_POST_ID_FIELD]) || !isset($_POST['attachment_id'])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ข้อมูลไม่ครบถ้วน'));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    $attachment_id = intval($_POST['attachment_id']);
    
    // ตรวจสอบสิทธิ์ผู้ใช้ (ถ้าต้องการเปิดใช้)
    // if (!current_user_can('edit_post', $post_id)) {
    //     wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    // }
    
    // ตั้งค่าภาพหน้าปก
    $result = set_post_thumbnail($post_id, $attachment_id);
    
    if ($result) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'อัพเดตภาพหน้าปกสำเร็จ',
            'post_url' => get_permalink($post_id)
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการอัพเดตภาพหน้าปก'));
    }
}
add_action('wp_ajax_postupdate_set_featured_image', 'postupdate_set_featured_image');
add_action('wp_ajax_nopriv_postupdate_set_featured_image', 'postupdate_set_featured_image'); // เพิ่มสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (เฉพาะเพื่อการทดสอบ)

/**
 * AJAX handler สำหรับลบภาพหน้าปก
 */
function postupdate_remove_featured_image() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'postupdate_featured_image_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'รหัสความปลอดภัยไม่ถูกต้อง'));
    }
    
    // ตรวจสอบการส่งข้อมูลที่ต้องการ
    if (!isset($_POST[DGA_POST_ID_FIELD])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ข้อมูลไม่ครบถ้วน'));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    
    // ตรวจสอบสิทธิ์ผู้ใช้ (ถ้าต้องการเปิดใช้)
    // if (!current_user_can('edit_post', $post_id)) {
    //     wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    // }
    
    // ลบภาพหน้าปก
    $result = delete_post_thumbnail($post_id);
    
    if ($result) {
        wp_send_json_success(array(DGA_MESSAGE_KEY => 'ลบภาพหน้าปกสำเร็จ'));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการลบภาพหน้าปก'));
    }
}
add_action('wp_ajax_postupdate_remove_featured_image', 'postupdate_remove_featured_image');
add_action('wp_ajax_nopriv_postupdate_remove_featured_image', 'postupdate_remove_featured_image'); // เพิ่มสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (เฉพาะเพื่อการทดสอบ)

// เพิ่มฟังก์ชันสำหรับเก็บบันทึกข้อผิดพลาด
function postupdate_log_error($message, $context = array()) {
    if (WP_DEBUG === true) {
        error_log('POSTUPDATE ERROR: ' . $message . ' ' . json_encode($context));
    }
}



/******* ลิมิตจำนวนตัวอักษรใน EDIT HEADING ********/


function limited_post_title_shortcode($atts) {
    // รับค่า parameters จาก shortcode
    $args = shortcode_atts(array(
        'length' => 25,    // ความยาวเริ่มต้น 50 ตัวอักษร
        DGA_POST_ID_FIELD => null, // สามารถระบุ post ID เฉพาะได้
        'suffix' => '...', // ข้อความต่อท้ายเมื่อตัดข้อความ
    ), $atts);

    // ถ้าไม่ได้ระบุ post_id ให้ใช้โพสต์ปัจจุบัน
    $post_id = $args[DGA_POST_ID_FIELD] ? $args[DGA_POST_ID_FIELD] : get_the_ID();
    
    // ดึงชื่อโพสต์
    $title = get_the_title($post_id);
    
    // ตรวจสอบว่าความยาวชื่อเกินกำหนดหรือไม่
    if (mb_strlen($title) > $args['length']) {
        // ตัดข้อความและเพิ่ม suffix
        $title = mb_substr($title, 0, $args['length']) . $args['suffix'];
    }
    
    // ส่งคืนชื่อที่ถูกจำกัดความยาวแล้ว
    return '<span class="limited-title">' . esc_html($title) . '</span>';
}

// ลงทะเบียน shortcode
add_shortcode('limited_title', 'limited_post_title_shortcode');


/**
 * กำหนดให้ URL Slug ของ Post Type 'article' ใช้ Post ID เท่านั้น
 * ต้องเพิ่มโค้ดนี้ใน functions.php ของธีมที่ใช้งาน
 */

// เพิ่ม filter สำหรับแก้ไข post slug ก่อนบันทึก
add_filter('wp_unique_post_slug', 'custom_article_post_slug', 10, 6);

function custom_article_post_slug($slug, $post_ID, $post_status, $post_type, $post_parent, $original_slug) {
    // ตรวจสอบว่าเป็น post type 'article' หรือไม่
    if ($post_type === 'article') {
        // ใช้ post ID เป็น slug
        return $post_ID;
    }
    
    // ถ้าไม่ใช่ post type 'article' ให้ใช้ slug ปกติ
    return $slug;
}

// เพิ่ม filter สำหรับแก้ไข permalink structure
add_filter('post_type_link', 'custom_article_permalink', 10, 2);

function custom_article_permalink($permalink, $post) {
    // ตรวจสอบว่าเป็น post type 'article' หรือไม่
    if ($post->post_type !== 'article') {
        return $permalink;
    }
    
    // สร้าง permalink ใหม่โดยใช้ post ID
    $permalink = home_url('/article/' . $post->ID . '/');
    
    return $permalink;
}

// เพิ่ม rewrite rules สำหรับ article post type
add_action('init', 'custom_article_rewrite_rules');

function custom_article_rewrite_rules() {
    add_rewrite_rule(
        'article/([0-9]+)/?$',
        'index.php?post_type=article&p=$matches[1]',
        'top'
    );

}


/**** กำหนดให้ชื่อของภาพ เป็น Alt-text โดยอัตโนมัติ ******/

// Automatically set alt text for newly uploaded images
function auto_set_image_alt_text($post_ID) {
    // Check if this is an image attachment
    if (wp_attachment_is_image($post_ID)) {
        // Get the image filename without extension
        $filename = pathinfo(get_post_meta($post_ID, '_wp_attached_file', true), PATHINFO_FILENAME);
        
        // Clean up the filename to make it more readable as alt text
        // Replace dashes, underscores with spaces
        $alt_text = str_replace(array('-', '_'), ' ', $filename);
        
        // Capitalize first letter of each word
        $alt_text = ucwords($alt_text);
        
        // Update the image alt text
        update_post_meta($post_ID, '_wp_attachment_image_alt', $alt_text);
    }
    
    return $post_ID;
}
add_action('add_attachment', 'auto_set_image_alt_text');

// Function to update alt text for all existing images in media library
function update_all_image_alt_texts() {
    // Get all image attachments
    $args = array(
        DGA_POST_TYPE_FIELD => 'attachment',
        'post_mime_type' => 'image',
        DGA_POST_STATUS_FIELD => 'inherit',
        DGA_POSTS_PER_PAGE => -1,
    );
    
    $images = get_posts($args);
    
    $count = 0;
    foreach ($images as $image) {
        // Get the image filename without extension
        $filename = pathinfo(get_post_meta($image->ID, '_wp_attached_file', true), PATHINFO_FILENAME);
        
        // Clean up the filename to make it more readable as alt text
        // Replace dashes, underscores with spaces
        $alt_text = str_replace(array('-', '_'), ' ', $filename);
        
        // Capitalize first letter of each word
        $alt_text = ucwords($alt_text);
        
        // Only update if alt text is empty
        $current_alt = get_post_meta($image->ID, '_wp_attachment_image_alt', true);
        if (empty($current_alt)) {
            update_post_meta($image->ID, '_wp_attachment_image_alt', $alt_text);
            $count++;
        }
    }
    
    return $count;
}

// Add admin page to run update function on all existing images
function auto_alt_text_admin_menu() {
    add_management_page(
        'Auto Alt Text',
        'Auto Alt Text',
        DGA_MANAGE_OPTIONS_CAP,
        'auto-alt-text',
        'auto_alt_text_admin_page'
    );
}
add_action('admin_menu', 'auto_alt_text_admin_menu');

// Admin page callback function
function auto_alt_text_admin_page() {
    $message = '';
    
    // Process form submission
    if (isset($_POST['update_all_alt_texts']) && check_admin_referer('auto_alt_text_update_nonce')) {
        $count = update_all_image_alt_texts();
        $message = sprintf(_n('%s image updated.', '%s images updated.', $count), $count);
    }
    
    ?>
    <div class="wrap">
        <h1><?php _e('Auto Alt Text'); ?></h1>
        
        <?php if (!empty($message)): ?>
            <div class="notice notice-success is-dismissible">
                <p><?php echo esc_html($message); ?></p>
            </div>
        <?php endif; ?>
        
        <form method="post" action="">
            <?php wp_nonce_field('auto_alt_text_update_nonce'); ?>
            <p><?php _e('Click the button below to automatically set alt text for all images in the media library that currently have no alt text.'); ?></p>
            <p><?php _e('The alt text will be based on the image filename.'); ?></p>
            <p><input type=DGA_SUBMIT_TYPE name="update_all_alt_texts" class="button button-primary" value="<?php _e('Update All Images'); ?>"></p>
        </form>
    </div>
    <?php
}


/****** กำหนดให้ Menu แสดงตาม Role ******/

// Enqueue scripts and styles from child theme
function menu_roles_admin_scripts() {
    if (is_admin()) {
        // Get child theme directory URL
        $child_theme_url = get_stylesheet_directory_uri();
        
        // Enqueue Select2
        wp_enqueue_style('select2-css', $child_theme_url . '/css/select2.min.css');
        wp_enqueue_script('select2-js', $child_theme_url . '/js/select2.min.js', array(DGA_JQUERY_HANDLE), null, true);
        
        // Enqueue custom script
        wp_enqueue_script('menu-roles-js', $child_theme_url . '/js/menu-roles.js', array(DGA_JQUERY_HANDLE, 'select2-js'), '1.0', true);
        
        // Localize script for AJAX
        wp_localize_script('menu-roles-js', 'menuRolesAjax', array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('menu_roles_nonce')
        ));
    }
}
add_action('admin_enqueue_scripts', 'menu_roles_admin_scripts');

function add_nav_menu_role_fields($item_id, $item) {
    $roles = wp_roles()->roles;
    $current_roles = get_post_meta($item_id, '_menu_roles', true);
    
    if (!is_array($current_roles)) {
        $current_roles = array();
    }
    ?>
    <p class="field-menu-role description-wide" style="margin: 10px 0;">
        <label for="edit-menu-item-role-<?php echo $item_id; ?>">
            <?php _e('Display Role', 'menu-roles'); ?><br />
            <select multiple="multiple" 
                    id="edit-menu-item-role-<?php echo $item_id; ?>" 
                    name="menu-item-role[<?php echo $item_id; ?>][]" 
                    class="menu-role-select"
                    data-item-id="<?php echo $item_id; ?>"
                    style="width: 100%;">
                <option value="all" <?php selected(in_array('all', $current_roles) || empty($current_roles)); ?>>
                    <?php _e('All Users', 'menu-roles'); ?>
                </option>
                <?php foreach ($roles as $role => $role_info): ?>
                <option value="<?php echo esc_attr($role); ?>" 
                        <?php selected(in_array($role, $current_roles)); ?>>
                    <?php echo translate_user_role($role_info['name']); ?>
                </option>
                <?php endforeach; ?>
            </select>
            <span class="spinner" style="float: none; margin: 0 5px;"></span>
            <span class="status-message"></span>
        </label>
    </p>
    <?php
}
add_action('wp_nav_menu_item_custom_fields', 'add_nav_menu_role_fields', 10, 2);

// AJAX handler for updating menu roles
function update_menu_role_ajax() {
    // Verify nonce
    if (!check_ajax_referer('menu_roles_nonce', 'nonce', false)) {
        wp_send_json_error(DGA_INVALID_NONCE_MESSAGE);
    }

    // Get and validate parameters
    $item_id = isset($_POST['item_id']) ? intval($_POST['item_id']) : 0;
    $roles = isset($_POST['roles']) ? $_POST['roles'] : array();

    if (!$item_id) {
        wp_send_json_error('Invalid menu item ID');
    }

    // Handle 'all' selection
    if (in_array('all', $roles)) {
        delete_post_meta($item_id, '_menu_roles');
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('Updated to All Users', 'menu-roles'),
            'roles' => array()
        ));
    }

    // Validate roles
    $valid_roles = array_intersect($roles, array_keys(wp_roles()->roles));
    
    if (empty($valid_roles)) {
        delete_post_meta($item_id, '_menu_roles');
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('No valid roles selected, defaulting to All Users', 'menu-roles'),
            'roles' => array()
        ));
    }

    // Update roles
    update_post_meta($item_id, '_menu_roles', $valid_roles);
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('Roles updated successfully', 'menu-roles'),
        'roles' => $valid_roles
    ));
}
add_action('wp_ajax_update_menu_role', 'update_menu_role_ajax');

// Filter menu items (unchanged)
function filter_nav_menu_role_items($items) {
    if (is_admin()) {
        return $items;
    }

    $user = wp_get_current_user();
    $filtered = array();

    foreach ($items as $item) {
        $roles = get_post_meta($item->ID, '_menu_roles', true);

        if (empty($roles)) {
            $filtered[] = $item;
            continue;
        }

        if ($user->ID && array_intersect($roles, (array) $user->roles)) {
            $filtered[] = $item;
        }
    }

    return $filtered;
}
add_filter('wp_get_nav_menu_items', 'filter_nav_menu_role_items', 10);

/**** DGA TEAM ******/

/**
 * DGA Team Member Shortcode (ปรับปรุงเพิ่มเติม)
 * 
 * ใช้งานด้วย [dga_team id="123" name="ชื่อ" position="ตำแหน่ง" phone="เบอร์โทร" half_image="url/รูปครึ่งตัว" full_image="url/รูปเต็มตัว" style="default|card"]
 * ถ้าระบุ id จะดึงข้อมูลจาก post นั้น
 * style="card" จะแสดงแบบการ์ดคล้ายกับภาพตัวอย่าง
 */
/**
 * Helper function to get post data for team shortcode
 */
function dga_team_get_post_data($attributes) {
    if (empty($attributes['id']) || !is_numeric($attributes['id'])) {
        return $attributes;
    }
    
    $team_post = get_post($attributes['id']);
    if (!$team_post) {
        return $attributes;
    }
    
    // Update attributes with post data
    $attributes['name'] = $attributes['name'] ?: get_the_title($team_post->ID);
    $attributes['position'] = $attributes['position'] ?: get_post_meta($team_post->ID, 'position', true);
    $attributes['phone'] = $attributes['phone'] ?: get_post_meta($team_post->ID, 'phone', true);
    $attributes['url'] = $attributes['url'] ?: get_permalink($team_post->ID);
    
    return $attributes;
}

/**
 * Helper function to prepare team images
 */
function dga_team_prepare_images($attributes, $team_post = null) {
    if (!$team_post) {
        return $attributes;
    }
    
    // Get half image
    if (empty($attributes['half_image'])) {
        $half_image_id = get_post_meta($team_post->ID, 'half_image_id', true);
        $attributes['half_image'] = wp_get_attachment_url($half_image_id);
    }
    
    // Get full image
    if (empty($attributes['full_image'])) {
        $full_image_id = get_post_meta($team_post->ID, 'full_image_id', true);
        $attributes['full_image'] = wp_get_attachment_url($full_image_id);
        
        // Use featured image as fallback
        if (empty($attributes['full_image']) && has_post_thumbnail($team_post->ID)) {
            $attributes['full_image'] = get_the_post_thumbnail_url($team_post->ID, 'full');
        }
    }
    
    // Use full image for half image if half is empty
    if (empty($attributes['half_image']) && !empty($attributes['full_image'])) {
        $attributes['half_image'] = $attributes['full_image'];
    }
    
    return $attributes;
}

/**
 * Helper function to build team member data attributes
 */
function dga_team_build_data_attributes($attributes) {
    $data_attrs = '';
    $data_attrs .= ' data-name="' . esc_attr($attributes['name']) . '"';
    $data_attrs .= ' data-position="' . esc_attr($attributes['position']) . '"';
    $data_attrs .= ' data-phone="' . esc_attr($attributes['phone']) . '"';
    
    if (!empty($attributes['url'])) {
        $data_attrs .= ' data-url="' . esc_url($attributes['url']) . '"';
        $data_attrs .= ' style="cursor: pointer;"';
    }
    
    return $data_attrs;
}

/**
 * Helper function to render card style team member
 */
function dga_team_render_card_style($attributes, $classes, $unique_id, $data_attrs) {
    return '
    <div class="' . esc_attr($classes) . '" id="' . esc_attr($unique_id) . '"' . $data_attrs . '>
        <div class="dga-team-image-container">
            <div class="dga-team-image-half" style="background-image: url(' . esc_url($attributes['half_image']) . ');"></div>
            <div class="dga-team-image-full" style="background-image: url(' . esc_url($attributes['full_image']) . ');"></div>
            <!-- ส่วนแสดงข้อมูลจะถูกสร้างโดย JavaScript -->
        </div>
        ' . (!empty($attributes['url']) ? '<a href="' . esc_url($attributes['url']) . '" class="dga-team-link"></a>' : '') . '
    </div>';
}

/**
 * Helper function to render default style team member
 */
function dga_team_render_default_style($attributes, $classes, $unique_id, $data_attrs) {
    return '
    <div class="' . esc_attr($classes) . '" id="' . esc_attr($unique_id) . '"' . $data_attrs . '>
        <div class="dga-team-image-container">
            <div class="dga-team-image-half" style="background-image: url(' . esc_url($attributes['half_image']) . ');"></div>
            <div class="dga-team-image-full" style="background-image: url(' . esc_url($attributes['full_image']) . ');"></div>
        </div>
        <div class="dga-team-info">
            <h3 class="dga-team-name">' . esc_html($attributes['name']) . '</h3>
            <p class="dga-team-position">' . esc_html($attributes['position']) . '</p>
            <p class="dga-team-phone">' . esc_html($attributes['phone']) . '</p>
        </div>
        ' . (!empty($attributes['url']) ? '<a href="' . esc_url($attributes['url']) . '" class="dga-team-link"></a>' : '') . '
    </div>';
}

function dga_team_shortcode($atts) {
    // Get shortcode attributes
    $attributes = shortcode_atts(array(
        'id' => '',
        DGA_NAME_FIELD => '',
        'position' => '',
        'phone' => '',
        'half_image' => '',
        'full_image' => '',
        'style' => 'card',
        'url' => ''
    ), $atts);
    
    // Enqueue CSS and JS
    wp_enqueue_style('dga-team-css', get_stylesheet_directory_uri() . '/css/dga-team.css', array(), DGA_THEME_VERSION);
    wp_enqueue_script('dga-team-js', get_stylesheet_directory_uri() . '/js/dga-team.js', array(DGA_JQUERY_HANDLE), DGA_THEME_VERSION, true);
    
    // Get post data if ID is provided
    $team_post = null;
    if (!empty($attributes['id']) && is_numeric($attributes['id'])) {
        $team_post = get_post($attributes['id']);
        $attributes = dga_team_get_post_data($attributes);
        $attributes = dga_team_prepare_images($attributes, $team_post);
    }
    
    // Validate required images
    if (empty($attributes['half_image']) || empty($attributes['full_image'])) {
        return '<p class="dga-team-error">Error: ไม่ได้ระบุรูปภาพทีมงาน</p>';
    }
    
    // Prepare common variables
    $unique_id = 'dga-team-' . (is_numeric($attributes['id']) ? $attributes['id'] : uniqid());
    $classes = 'dga-team-member' . ($attributes['style'] == 'card' ? ' dga-team-alternate' : '');
    $data_attrs = dga_team_build_data_attributes($attributes);
    
    // Return appropriate style
    return ($attributes['style'] == 'card') 
        ? dga_team_render_card_style($attributes, $classes, $unique_id, $data_attrs)
        : dga_team_render_default_style($attributes, $classes, $unique_id, $data_attrs);
}
add_shortcode('dga_team', 'dga_team_shortcode');

/**
 * สร้าง shortcode สำหรับแสดงทีมงานหลายคนพร้อมกัน
 * 
 * ใช้งานด้วย:
 * [dga_team_group]
 *   [dga_team id="123" name="คนที่ 1" position="ตำแหน่ง" phone="089-123-4567" half_image="url" full_image="url"]
 *   [dga_team id="124" name="คนที่ 2" position="ตำแหน่ง" phone="089-765-4321" half_image="url" full_image="url"]
 * [/dga_team_group]
 */
function dga_team_group_shortcode($atts, $content = null) {
    // เรียกใช้ CSS และ JS
    wp_enqueue_style('dga-team-css', get_stylesheet_directory_uri() . '/css/dga-team.css', array(), DGA_THEME_VERSION);
    wp_enqueue_script('dga-team-js', get_stylesheet_directory_uri() . '/js/dga-team.js', array(DGA_JQUERY_HANDLE), DGA_THEME_VERSION, true);
    
    // ดึงค่า shortcode ข้างใน
    $output = '<div class="dga-team-grid">';
    $output .= do_shortcode($content);
    $output .= '</div>';
    
    return $output;
}
add_shortcode('dga_team_group', 'dga_team_group_shortcode');



/**** บังคับปิดแถบเครื่องมือถ้า user ไม่ใช่ Administrator ******/

/**
 * Show admin bar only for administrators
 * Place this code in your theme's functions.php file
 */

// Function to check if current user is administrator
function is_user_administrator() {
    return current_user_can(DGA_ADMIN_ROLE);
}

// Remove admin bar for non-administrators
function remove_admin_bar_for_non_admins() {
    if (!is_user_administrator()) {
        // Hide admin bar from frontend
        add_filter('show_admin_bar', '__return_false');
        
        // Remove admin bar related CSS
        remove_action('wp_head', '_admin_bar_bump_cb');
        
        // Disable admin bar on backend if somehow accessed
        if (!is_admin()) {
            add_filter('show_admin_bar', '__return_false');
        }
    }
}
add_action('init', 'remove_admin_bar_for_non_admins');

// Redirect non-administrators attempting to access wp-admin
function redirect_non_admin_users() {
    if (is_admin() && !is_user_administrator() && !(defined('DOING_AJAX') && DOING_AJAX)) {
        wp_redirect(home_url());
        exit;
    }
}
add_action('init', 'redirect_non_admin_users');

// Remove admin bar menu items for non-administrators
function remove_admin_bar_items($wp_admin_bar) {
    if (!is_user_administrator()) {
        $wp_admin_bar->remove_menu('site-name');
        $wp_admin_bar->remove_menu('dashboard');
        $wp_admin_bar->remove_menu('themes');
        $wp_admin_bar->remove_menu('customize');
        $wp_admin_bar->remove_menu('updates');
        $wp_admin_bar->remove_menu('comments');
        $wp_admin_bar->remove_menu('new-content');
        $wp_admin_bar->remove_menu('edit');
    }
}
add_action('admin_bar_menu', 'remove_admin_bar_items', 999);

// Disable admin bar styling for non-administrators
function disable_admin_bar_style() {
    if (!is_user_administrator()) {
        wp_dequeue_style('admin-bar');
        wp_dequeue_style('admin-bar-min');
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'disable_admin_bar_style', 99);



/***** Widget แสดงข้อความสวัสดีผู้ใช้งาน ******/


// Enqueue scripts and styles for Welcome User Widget
function welcome_user_widget_enqueue_scripts_tt25() {
    // Enqueue CSS file
    wp_enqueue_style(
        'welcome-user-widget-style-tt25',
        get_stylesheet_directory_uri() . '/css/welcome-user-widget.css',
        array(),
        '1.1.0', // Updated version for tooltips feature
        'all'
    );
    
    // Enqueue JavaScript file
    wp_enqueue_script(
        'welcome-user-widget-script-tt25',
        get_stylesheet_directory_uri() . '/js/welcome-user-widget.js',
        array(DGA_JQUERY_HANDLE),
        '1.1.0', // Updated version for tooltips feature
        true
    );
    
    // Localize script with AJAX data
    wp_localize_script(
        'welcome-user-widget-script-tt25',
        'welcome_user_widget_ajax',
        array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            'logout_nonce' => wp_create_nonce('welcome_user_logout_nonce'),
            'login_nonce' => wp_create_nonce('welcome_user_login_nonce'),
            'home_url' => home_url(),
            'current_url' => (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]",
        )
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'welcome_user_widget_enqueue_scripts_tt25');

// Enhanced Shortcode function with tooltips support
function welcome_user_shortcode_tt25($atts) {
    // Parse shortcode attributes
    $attributes = shortcode_atts(
        array(
            'style' => 'inline', // default style is inline, can be 'tooltips'
        ),
        $atts,
        'welcome_user'
    );
    
    // Sanitize the style attribute
    $style = sanitize_text_field($attributes['style']);
    $style_class = ($style === 'tooltips') ? 'tooltips-style' : 'inline-style';
    
    // Check if user is logged in
    if (is_user_logged_in()) {
        // User is logged in - display welcome message
        $current_user = wp_get_current_user();
        $user_roles = $current_user->roles;
        $role_name = '';
        
        // Translate user roles to Thai
        if (in_array(DGA_ADMIN_ROLE, $user_roles)) {
            $role_name = __('ผู้ดูแลระบบ', DGA_TEXT_DOMAIN);
        } elseif (in_array('editor', $user_roles)) {
            $role_name = __('บรรณาธิการ', DGA_TEXT_DOMAIN);
        } elseif (in_array('author', $user_roles)) {
            $role_name = __('ผู้เขียน', DGA_TEXT_DOMAIN);
        } elseif (in_array('contributor', $user_roles)) {
            $role_name = __('ผู้มีส่วนร่วม', DGA_TEXT_DOMAIN);
        } elseif (in_array('subscriber', $user_roles)) {
            $role_name = __('สมาชิก', DGA_TEXT_DOMAIN);
        } else {
            $role_name = $user_roles[0];
        }
        
        // Get user avatar
        $avatar = get_avatar(
            $current_user->ID, 
            30,
            '', 
            '', 
            array(
                'class' => 'welcome-user-avatar-tt25',
                'force_default' => false
            )
        );
        
        // Build HTML output for logged-in user
        $output = '<div class="welcome-user-widget-tt25 logged-in ' . esc_attr($style_class) . '">';
        $output .= '<div class="welcome-user-content-tt25">';
        
        // Add Avatar
        $output .= '<div class="welcome-user-avatar-container-tt25">';
        $output .= $avatar;
        $output .= '</div>';
        
        $output .= '<div class="welcome-user-info-tt25">';
        $output .= '<span class="welcome-user-name-tt25">' . sprintf(__('สวัสดี, %s', DGA_TEXT_DOMAIN), esc_html($current_user->display_name)) . '</span>';
        $output .= '<span class="welcome-user-role-tt25">' . esc_html($role_name) . '</span>';
        $output .= '</div>';
        
        $output .= '<div class="welcome-user-buttons-tt25">';
        $output .= '<a href="/profiles" class="welcome-user-profile-btn-tt25">' . __('โปรไฟล์', DGA_TEXT_DOMAIN) . '</a>';
        $output .= '<a href="#" id="welcome-user-logout-btn-tt25">' . __(DGA_LOGOUT_TEXT_TH, DGA_TEXT_DOMAIN) . '</a>';
        $output .= '</div>';
        
        $output .= '</div>';
        $output .= '</div>';
    } else {
        // User is not logged in - display login options
        $output = '<div class="welcome-user-widget-tt25 not-logged-in ' . esc_attr($style_class) . '">';
        
        // Container for guest user buttons
        $output .= '<div class="guest-user-buttons-tt25">';
        
        // Login trigger button
        $output .= '<div class="login-trigger-container-tt25">';
        $output .= '<a href="#" id="login-trigger-btn-tt25" aria-expanded="false" aria-controls="login-form-container-tt25">' . __('ลงชื่อเข้าใช้งาน', DGA_TEXT_DOMAIN) . '</a>';
        $output .= '</div>';
        
        // Register button
        $output .= '<div class="register-container-tt25">';
        $output .= '<a href="' . esc_url(home_url(DGA_REGISTER_PATH)) . '" class="register-btn-tt25">' . __('สมัครสมาชิก', DGA_TEXT_DOMAIN) . '</a>';
        $output .= '</div>';
        
        $output .= '</div>'; // Close guest-user-buttons
        
        // Login form container (hidden initially)
        $form_style = ($style === 'tooltips') ? 'tooltips-form-tt25' : 'inline-form-tt25';
        $output .= '<div id="login-form-container-tt25" class="login-form-container-tt25 ' . esc_attr($form_style) . '" style="display: none;" role="dialog" aria-labelledby="login-form-title-tt25" aria-modal="true">';
        
        // Form title for tooltips style
        if ($style === 'tooltips') {
            $output .= '<div class="login-form-header-tt25">';
            $output .= '<div id="login-form-title-tt25" class="login-form-title-tt25" role="heading" aria-level="2">' . __(DGA_LOGIN_TEXT_TH, DGA_TEXT_DOMAIN) . '</div>';
            $output .= '<button type=DGA_BUTTON_TYPE class="login-form-close-tt25" aria-label="' . __('ปิดฟอร์มล็อกอิน', DGA_TEXT_DOMAIN) . '">×</button>';
            $output .= '</div>';
        }
        
        // Generate random field names to prevent browser autocomplete
        $random_suffix = wp_rand(10000, 99999);
        
        // Add form with autocomplete="off" and additional anti-autocomplete techniques
        $output .= '<form id="ajax-login-form-tt25" action="" method="post" autocomplete="off" novalidate>';
        $output .= '<div class="login-form-fields-tt25">';
        
        
        
        // Username field with anti-autocomplete measures
        $output .= '<div class="form-field-wrapper-tt25">';
        $output .= '<label for="login-username-' . $random_suffix . '" class="login-field-label-tt25">' . __('ชื่อผู้ใช้งาน', DGA_TEXT_DOMAIN) . '</label>';
        $output .= '<input type="text" ';
        $output .= 'name="username_' . $random_suffix . '" ';
        $output .= 'id="login-username-' . $random_suffix . '" ';
        $output .= 'class="login-username-field-tt25" ';
        $output .= 'placeholder="' . __('ชื่อผู้ใช้งาน', DGA_TEXT_DOMAIN) . '" ';
        $output .= 'aria-required="true" ';
        $output .= 'required ';
        $output .= 'autocomplete="off" ';
        $output .= 'autocorrect="off" ';
        $output .= 'autocapitalize="off" ';
        $output .= 'spellcheck="false" ';
        $output .= 'data-lpignore="true" '; // For LastPass
        $output .= 'data-form-type="other" />'; // For Dashlane
        $output .= '</div>';
        
        // Password field with anti-autocomplete measures
        $output .= '<div class="form-field-wrapper-tt25">';
        $output .= '<label for="login-password-' . $random_suffix . '" class="login-field-label-tt25">' . __('รหัสผ่าน', DGA_TEXT_DOMAIN) . '</label>';
        $output .= '<input type="password" ';
        $output .= 'name="password_' . $random_suffix . '" ';
        $output .= 'id="login-password-' . $random_suffix . '" ';
        $output .= 'class="login-password-field-tt25" ';
        $output .= 'placeholder="' . __('รหัสผ่าน', DGA_TEXT_DOMAIN) . '" ';
        $output .= 'aria-required="true" ';
        $output .= 'required ';
        $output .= 'autocomplete="new-password" '; // Use new-password instead of off
        $output .= 'autocorrect="off" ';
        $output .= 'autocapitalize="off" ';
        $output .= 'spellcheck="false" ';
        $output .= 'data-lpignore="true" '; // For LastPass
        $output .= 'data-form-type="other" />'; // For Dashlane
        $output .= '</div>';
        
        // Hidden field to store the random suffix for JavaScript
        $output .= '<input type="hidden" id="form-random-suffix-tt25" value="' . $random_suffix . '" />';
        
        // Submit button and forgot password link
        $output .= '<div class="login-form-actions-tt25">';
        $output .= '<button type=DGA_SUBMIT_TYPE id="login-submit-btn-tt25">' . __(DGA_LOGIN_TEXT_TH, DGA_TEXT_DOMAIN) . '</button>';
        $output .= '<a href="' . esc_url(home_url('/reset-password')) . '" class="forgot-password-link-tt25">' . __('ลืมรหัสผ่าน', DGA_TEXT_DOMAIN) . '</a>';
        $output .= '</div>';
        
        $output .= '</div>'; // Close login-form-fields
        
        $output .= '<div class="login-message-tt25" role="alert" aria-live="polite"></div>';
        $output .= '</form>';
        $output .= '</div>'; // Close login-form-container
        
        $output .= '</div>'; // Close welcome-user-widget
    }
    
    return $output;
}
add_shortcode('welcome_user', 'welcome_user_shortcode_tt25');


// AJAX function for logout
function welcome_user_logout_callback_tt25() {
    // Verify nonce for security
    if (isset($_POST['nonce']) && wp_verify_nonce($_POST['nonce'], 'welcome_user_logout_nonce')) {
        // Log the action for debugging
        error_log('Logout AJAX initiated');
        
        // Perform logout
        wp_logout();
        
        // Log success for debugging
        error_log('Logout successful');
        
        // Send success response
        wp_send_json_success(array(DGA_MESSAGE_KEY => __('ออกจากระบบสำเร็จ', DGA_TEXT_DOMAIN)));
    } else {
        // Log failure for debugging
        error_log('Logout nonce verification failed');
        
        // Send error response
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาด โปรดลองอีกครั้ง', DGA_TEXT_DOMAIN)));
    }
    
    die();
}
add_action('wp_ajax_welcome_user_logout', 'welcome_user_logout_callback_tt25');

// AJAX function for login
function welcome_user_login_callback_tt25() {
    // Verify nonce for security
    if (isset($_POST['nonce']) && wp_verify_nonce($_POST['nonce'], 'welcome_user_login_nonce')) {
        // Validate input data
        $username = isset($_POST['username']) ? sanitize_user($_POST['username']) : '';
        $password = isset($_POST['password']) ? $_POST['password'] : '';
        
        // Check if required fields are provided
        if (empty($username) || empty($password)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('กรุณากรอกชื่อผู้ใช้และรหัสผ่าน', DGA_TEXT_DOMAIN)));
            die();
        }
        
        // Attempt to sign in user
        $user = wp_signon(
            array(
                'user_login' => $username,
                'user_password' => $password,
                'remember' => true
            ),
            is_ssl()
        );
        
        // Check login result
        if (is_wp_error($user)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง', DGA_TEXT_DOMAIN)));
        } else {
            wp_send_json_success(array(DGA_MESSAGE_KEY => __('เข้าสู่ระบบสำเร็จ', DGA_TEXT_DOMAIN)));
        }
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาดด้านความปลอดภัย โปรดลองอีกครั้ง', DGA_TEXT_DOMAIN)));
    }
    die();
}
add_action('wp_ajax_nopriv_welcome_user_login', 'welcome_user_login_callback_tt25');

// Alternative logout link for fallback
function welcome_user_alternative_logout_link_tt25() {
    if (is_user_logged_in()) {
        echo '<div id="welcome-user-alternative-logout-tt25" style="display:none;">';
        echo '<a href="' . wp_logout_url($_SERVER['REQUEST_URI']) . '" id="welcome-user-alt-logout-link-tt25">Logout</a>';
        echo '</div>';
    }
}
add_action('wp_footer', 'welcome_user_alternative_logout_link_tt25');



/***** DGA MAIN SLIDE ********/

/**
 * DGA Carousel Slide Shortcode
 * 
 * Creates a carousel slider for posts from multiple post types with peek effect
 * Usage: [dga_carousel_slide post_types="news,article,pha,dgallery" posts_per_page="5"]
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Enqueue scripts and styles
function dga_carousel_slide_enqueue_scripts() {
    // Get theme directory URI for child theme
    $theme_dir = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style(
        'dga-carousel-slide-css',
        $theme_dir . '/css/dga-carousel-slide.css',
        array(),
        '1.0.6'
    );
    
    // Enqueue jQuery if not already loaded
    wp_enqueue_script(DGA_JQUERY_HANDLE);
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'dga-carousel-slide-js',
        $theme_dir . '/js/dga-carousel-slide.js',
        array(DGA_JQUERY_HANDLE),
        '1.0.6',
        true
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_carousel_slide_enqueue_scripts');

// Shortcode function
function dga_carousel_slide_shortcode($atts) {
    // Default attributes
    $atts = shortcode_atts(
        array(
            'post_types' => 'news,article,pha,dgallery', // Default post types
            DGA_POSTS_PER_PAGE => 5, // Number of posts to display
            DGA_ORDERBY_FIELD_VALUE => 'date', // Order by date
            DGA_ORDER_FIELD => 'DESC', // Descending order (newest first)
        ),
        $atts,
        'dga_carousel_slide'
    );
    
    // Convert post_types string to array
    $post_types = explode(',', $atts['post_types']);
    
    // Query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => $post_types,
        DGA_POSTS_PER_PAGE => intval($atts[DGA_POSTS_PER_PAGE]),
        DGA_ORDERBY_FIELD_VALUE => $atts[DGA_ORDERBY_FIELD_VALUE],
        DGA_ORDER_FIELD => $atts[DGA_ORDER_FIELD],
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        'meta_query' => array(
            array(
                'key' => '_thumbnail_id',  // Only get posts with featured images
                'compare' => 'EXISTS'
            ),
        ),
        'no_found_rows' => true, // Performance improvement
    );
    
    // Get posts
    $posts_query = new WP_Query($args);
    
    // Check if posts exist
    if (!$posts_query->have_posts()) {
        return '<div class="dga-carousel-empty">No posts with featured images found.</div>';
    }
    
    // Generate unique ID for this carousel
    $carousel_id = 'dga-carousel-' . wp_rand(1000, 9999);
    
    // Start output buffer
    ob_start();
    ?>
    <div id="<?php echo esc_attr($carousel_id); ?>" class="dga-carousel-container" role="region" aria-roledescription="carousel" aria-label="Content Carousel">
        <!-- Live region สำหรับโปรแกรมอ่านหน้าจอ -->
        <div class="screen-reader-text dga-carousel-liveregion" aria-live="polite" aria-atomic="true"></div>
        
        <div class="dga-carousel-track-container">
            <!-- ใช้ div แทน ul เพื่อแก้ปัญหาโครงสร้าง HTML -->
            <div class="dga-carousel-track">
                <?php $slide_index = 0; while ($posts_query->have_posts()) : $posts_query->the_post(); 
                    $thumbnail_url = get_the_post_thumbnail_url(get_the_ID(), 'large');
                    if (!$thumbnail_url) continue; // Skip if no thumbnail
                    
                    // Get post title and excerpt for overlay
                    $post_title = get_the_title();
                    $post_url = get_permalink();
                    $post_excerpt = get_the_excerpt();
                    $short_excerpt = wp_trim_words($post_excerpt, 15, '...');
                    $slide_id = 'slide-' . $slide_index . '-' . $carousel_id;
                ?>
                <div id="<?php echo esc_attr($slide_id); ?>" 
                    class="dga-carousel-slide" 
                    role="tabpanel" 
                    aria-roledescription="slide" 
                    aria-label="<?php echo esc_attr($slide_index + 1); ?> of <?php echo esc_attr($posts_query->post_count); ?>"
                    data-post-url="<?php echo esc_url($post_url); ?>">
                    
                    <!-- ทำให้คลิกได้ทั้งพื้นที่โดยครอบด้วย a tag -->
                    <a href="<?php echo esc_url($post_url); ?>" 
                       class="dga-carousel-slide-link" 
                       data-post-id="<?php echo get_the_ID(); ?>"
                       aria-label="<?php echo esc_attr($post_title); ?>"
                       title="<?php echo esc_attr($post_title); ?>"
                       <?php if ($slide_index !== 2) echo 'tabindex="-1"'; ?>>
                        
                        <div class="dga-carousel-image" style="background-image: url('<?php echo esc_url($thumbnail_url); ?>');">
                            <span class="screen-reader-text"><?php echo esc_html($post_title); ?></span>
                            
                            <!-- เพิ่ม overlay แสดงชื่อเรื่องและข้อมูลเพิ่มเติม -->
                            <div class="dga-carousel-overlay">
                                <h3 class="dga-carousel-title"><?php echo esc_html($post_title); ?></h3>
                                <p class="dga-carousel-excerpt"><?php echo esc_html($short_excerpt); ?></p>
                                <span class="dga-carousel-read-more">อ่านเพิ่มเติม</span>
                            </div>
                        </div>
                    </a>
                </div>
                <?php $slide_index++; endwhile; ?>
            </div>
        </div>
        
        <div class="dga-carousel-controls">
            <button class="dga-carousel-prev" aria-label="Previous slide">
                <svg viewBox="0 0 24 24" width="24" height="24" aria-hidden="true" focusable="false">
                    <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" fill="currentColor"></path>
                </svg>
                <span class="screen-reader-text">Previous</span>
            </button>
            
            <div class="dga-carousel-dots" role="tablist" aria-label="Carousel Navigation">
                <!-- จะถูกสร้างโดย JavaScript -->
            </div>
            
            <button class="dga-carousel-next" aria-label="Next slide">
                <svg viewBox="0 0 24 24" width="24" height="24" aria-hidden="true" focusable="false">
                    <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z" fill="currentColor"></path>
                </svg>
                <span class="screen-reader-text">Next</span>
            </button>
        </div>
        
        <!-- เพิ่ม template สำหรับใช้กับ JavaScript -->
        <template id="<?php echo esc_attr($carousel_id); ?>-dot-template">
            <button class="dga-carousel-dot" role="tab" aria-selected="false">
                <span class="screen-reader-text">Go to slide</span>
            </button>
        </template>
    </div>
    
    <script>
    // Script แยกสำหรับเตรียมพร้อมใช้งาน carousel นี้โดยเฉพาะ
    (function() {
        document.addEventListener('DOMContentLoaded', function() {
            // ตรวจสอบว่า Carousel ถูกสร้างในหน้านี้
            const carousel = document.getElementById('<?php echo esc_attr($carousel_id); ?>');
            if (carousel && typeof jQuery !== 'undefined') {
                // กระตุ้นให้ initialize carousel นี้
                jQuery(carousel).data('dgaCarousel') || initDgaCarousels();
            }
        });
    })();
    </script>
    <?php
    // Reset post data
    wp_reset_postdata();
    
    // Return output buffer
    return ob_get_clean();
}
add_shortcode('dga_carousel_slide', 'dga_carousel_slide_shortcode');



/****** Login ******/

// Add shortcode
add_shortcode('modern_login_xqz789', 'modern_login_shortcode_xqz789');

// Register assets
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'modern_login_assets_xqz789');

function modern_login_assets_xqz789() {
    // Only load on pages with the shortcode
    if (!is_singular()) {
        return;
    }
    
    global $post;
    if (!has_shortcode($post->post_content, 'modern_login_xqz789')) {
        return;
    }
    
    $child_theme_url = get_stylesheet_directory_uri();
    $version = '2.0.0';
    
    // Enqueue styles
    wp_enqueue_style(
        'modern-login-style-xqz789', 
        $child_theme_url . '/css/modern-login-xqz789.css', 
        array(), 
        $version
    );
    
    // Enqueue modern JavaScript (no jQuery dependency)
    wp_enqueue_script(
        'modern-login-script-xqz789', 
        $child_theme_url . '/js/modern-login-xqz789.js', 
        array(), 
        $version, 
        true
    );
    
    // Localize script with security and translations
    wp_localize_script('modern-login-script-xqz789', 'modernLoginConfig', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        'security' => wp_create_nonce('modern-login-nonce-xqz789'),
        'redirectUrl' => home_url('/profile'),
        'i18n' => array(
            'usernameRequired' => __('กรุณากรอกชื่อผู้ใช้หรืออีเมล', DGA_TEXT_DOMAIN),
            'passwordRequired' => __('กรุณากรอกรหัสผ่าน', DGA_TEXT_DOMAIN),
            'invalidCredentials' => __('ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง', DGA_TEXT_DOMAIN),
            'connectionError' => __('เกิดข้อผิดพลาดในการเชื่อมต่อ', DGA_TEXT_DOMAIN),
            'tooManyAttempts' => __('คุณพยายามเข้าสู่ระบบมากเกินไป กรุณารอสักครู่', DGA_TEXT_DOMAIN),
            'loginSuccess' => __('เข้าสู่ระบบสำเร็จ กำลังนำคุณไปยังหน้าโปรไฟล์...', DGA_TEXT_DOMAIN),
            'userNotFound' => __('ไม่พบบัญชีผู้ใช้นี้ในระบบ', DGA_TEXT_DOMAIN),
            'show' => __('แสดง', DGA_TEXT_DOMAIN),
            'hide' => __('ซ่อน', DGA_TEXT_DOMAIN)
        )
    ));
}

function modern_login_shortcode_xqz789() {
    // Redirect if already logged in (except admins)
    if (is_user_logged_in() && !current_user_can(DGA_ADMIN_ROLE)) {
        wp_safe_redirect(home_url('/profile'));
        exit;
    }

    ob_start();
    ?>
    <div class="modern-login-wrapper-xqz789">
        <div class="modern-login-container-xqz789">
            <div class="login-card-xqz789">
                <!-- DGA Logo area -->
                
                
                <div class="login-header-xqz789">
                    <h2><?php esc_html_e(DGA_LOGIN_TEXT_TH, DGA_TEXT_DOMAIN); ?></h2>
                    <p><?php esc_html_e('ฝ่ายมาตรฐานดิจิทัลภาครัฐ'); ?></p>
                </div>
                
                <form id="modern-login-form-xqz789" class="login-form-xqz789" novalidate>
                    <!-- Step 1: Username -->
                    <div class="form-step-xqz789 active" data-step="1">
                        <div class="input-group-xqz789">
                            <input 
                                type="text" 
                                id="username-xqz789" 
                                name="username" 
                                class="form-input-xqz789" 
                                placeholder=" "
                                autocomplete="username"
                                aria-label="<?php esc_attr_e('ชื่อผู้ใช้หรืออีเมล', DGA_TEXT_DOMAIN); ?>"
                                required>
                            <label for="username-xqz789" class="form-label-xqz789">
                                <?php esc_html_e('ชื่อผู้ใช้หรืออีเมล', DGA_TEXT_DOMAIN); ?>
                            </label>
                            <span class="input-icon-xqz789">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2M12 11a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                </svg>
                            </span>
                        </div>
                        
                        <button type=DGA_BUTTON_TYPE class="btn-primary-xqz789 btn-next-xqz789" disabled>
                            <span class="btn-text"><?php esc_html_e('ถัดไป', DGA_TEXT_DOMAIN); ?></span>
                            <span class="btn-icon">→</span>
                        </button>
                    </div>
                    
                    <!-- Step 2: Password -->
                    <div class="form-step-xqz789" data-step="2">
                        <div class="user-info-box-xqz789">
                            <div class="user-avatar-xqz789">
                                <span class="avatar-initial"></span>
                            </div>
                            <div class="user-details-xqz789">
                                <span class="username-display-xqz789"></span>
                                <button type=DGA_BUTTON_TYPE class="btn-change-user-xqz789">
                                    <?php esc_html_e('เปลี่ยนบัญชี', DGA_TEXT_DOMAIN); ?>
                                </button>
                            </div>
                        </div>
                        
                        <div class="input-group-xqz789">
                            <input 
                                type="password" 
                                id="password-xqz789" 
                                name="password" 
                                class="form-input-xqz789" 
                                placeholder=" "
                                autocomplete="current-password"
                                aria-label="<?php esc_attr_e('รหัสผ่าน', DGA_TEXT_DOMAIN); ?>"
                                required>
                            <label for="password-xqz789" class="form-label-xqz789">
                                <?php esc_html_e('รหัสผ่าน', DGA_TEXT_DOMAIN); ?>
                            </label>
                            <button type=DGA_BUTTON_TYPE class="btn-toggle-password-xqz789" aria-label="Toggle password visibility">
                                <svg class="icon-show" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" stroke="currentColor" stroke-width="2"/>
                                    <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
                                </svg>
                                <svg class="icon-hide" width="20" height="20" viewBox="0 0 24 24" fill="none" style="display:none;">
                                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24M1 1l22 22" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                </svg>
                            </button>
                        </div>
                        
                        <div class="form-options-xqz789">
                            <label class="checkbox-wrapper-xqz789">
                                <input type="checkbox" id="remember-xqz789" name="remember">
                                <span class="checkbox-custom-xqz789"></span>
                                <span><?php esc_html_e('จดจำฉัน', DGA_TEXT_DOMAIN); ?></span>
                            </label>
                            <a href="<?php echo esc_url(wp_lostpassword_url()); ?>" class="link-forgot-xqz789">
                                <?php esc_html_e('ลืมรหัสผ่าน?', DGA_TEXT_DOMAIN); ?>
                            </a>
                        </div>
                        
                        <button type=DGA_SUBMIT_TYPE class="btn-primary-xqz789 btn-login-xqz789" disabled>
                            <span class="btn-text"><?php esc_html_e(DGA_LOGIN_TEXT_TH, DGA_TEXT_DOMAIN); ?></span>
                            <span class="spinner-xqz789"></span>
                        </button>
                    </div>
                    
                    <!-- Message area -->
                    <div class="message-box-xqz789" role="alert" aria-live="polite"></div>
                </form>
                
                <div class="login-footer-xqz789">
                    <p><?php esc_html_e('ยังไม่มีบัญชี?', DGA_TEXT_DOMAIN); ?> 
                        <a href="<?php echo esc_url(home_url(DGA_REGISTER_PATH)); ?>" class="link-register-xqz789">
                            <?php esc_html_e('ลงทะเบียนเลย', DGA_TEXT_DOMAIN); ?>
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// AJAX: Check username with rate limiting
add_action('wp_ajax_nopriv_check_username_xqz789', 'check_username_exists_xqz789');
add_action('wp_ajax_check_username_xqz789', 'check_username_exists_xqz789');

function check_username_exists_xqz789() {
    check_ajax_referer('modern-login-nonce-xqz789', 'security');
    
    // Rate limiting check
    $ip = $_SERVER['REMOTE_ADDR'];
    $transient_key = 'username_check_' . md5($ip);
    $attempts = get_transient($transient_key);
    
    if ($attempts && $attempts > 10) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('Too many attempts. Please try again later.', DGA_TEXT_DOMAIN)
        ));
    }
    
    set_transient($transient_key, ($attempts ?? 0) + 1, 60); // Reset after 1 minute
    
    $username = sanitize_user($_POST['username']);
    
    if (empty($username)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('Username is required', DGA_TEXT_DOMAIN)
        ));
    }
    
    $exists = email_exists($username) || username_exists($username);
    
    if ($exists) {
        wp_send_json_success(array(
            'exists' => true,
            DGA_MESSAGE_KEY => __('User found', DGA_TEXT_DOMAIN)
        ));
    } else {
        wp_send_json_error(array(
            'exists' => false,
            DGA_MESSAGE_KEY => __('User not found', DGA_TEXT_DOMAIN)
        ));
    }
}

// AJAX: Handle login with enhanced security
add_action('wp_ajax_nopriv_modern_login_xqz789', 'handle_modern_login_xqz789');
add_action('wp_ajax_modern_login_xqz789', 'handle_modern_login_xqz789');

function handle_modern_login_xqz789() {
    check_ajax_referer('modern-login-nonce-xqz789', 'security');
    
    // Rate limiting for login attempts
    $username = sanitize_user($_POST['username']);
    $transient_key = 'login_attempts_' . md5($username);
    $attempts = get_transient($transient_key);
    
    if ($attempts && $attempts >= 5) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('Too many failed attempts. Please try again in 15 minutes.', DGA_TEXT_DOMAIN),
            'locked' => true
        ));
    }
    
    // Validate inputs
    if (empty($username) || empty($_POST['password'])) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('Username and password are required', DGA_TEXT_DOMAIN)
        ));
    }
    
    $credentials = array(
        'user_login' => $username,
        'user_password' => $_POST['password'],
        'remember' => isset($_POST['remember']) && $_POST['remember'] === 'true'
    );
    
    // Attempt login
    $user = wp_signon($credentials, is_ssl());
    
    if (is_wp_error($user)) {
        // Increment failed attempts
        set_transient($transient_key, ($attempts ?? 0) + 1, 15 * MINUTE_IN_SECONDS);
        
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('Invalid username or password', DGA_TEXT_DOMAIN),
            'attempts_remaining' => max(0, 5 - (($attempts ?? 0) + 1))
        ));
    } else {
        // Clear failed attempts on successful login
        delete_transient($transient_key);
        
        // Log successful login (optional)
        do_action('modern_login_success_xqz789', $user);
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('Login successful! Redirecting...', DGA_TEXT_DOMAIN),
            'redirect_url' => apply_filters('modern_login_redirect_xqz789', home_url('/profile'), $user)
        ));
    }
}


/***** DUAL BUTTON LOGIN - REGISTER ******/

// Add shortcode for auth buttons
add_shortcode('daul-button', 'modern_auth_buttons_shortcode');

// Register necessary scripts and styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'modern_auth_buttons_assets');

function modern_auth_buttons_assets() {
    // Get Child Theme directory URL
    $child_theme_url = get_stylesheet_directory_uri();
    
    // Enqueue Font Awesome
    wp_enqueue_style('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');
    
    // Enqueue custom styles and scripts from Child Theme
    wp_enqueue_style('modern-auth-buttons', $child_theme_url . '/css/modern-auth-buttons.css', array(), DGA_VERSION_NUMBER);
    wp_enqueue_script('modern-auth-buttons', $child_theme_url . '/js/modern-auth-buttons.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
}

// Main shortcode function
function modern_auth_buttons_shortcode() {
    ob_start();
    ?>
    <div class="modern-auth-buttons">
        <a href="<?php echo home_url('/login'); ?>" target="_blank" class="auth-button login-button" aria-label="<?php echo DGA_LOGIN_TEXT_TH; ?>">
            <div class="button-content">
                <div class="icon-wrapper">
                    <i class="fas fa-sign-in-alt"></i>
                    <div class="icon-ripple"></div>
                </div>
                <span class="button-text"><?php echo DGA_LOGIN_TEXT_TH; ?></span>
                <i class="fas fa-external-link-alt external-icon"></i>
            </div>
            <div class="hover-effect"></div>
        </a>

        <a href="<?php echo home_url(DGA_REGISTER_PATH); ?>" target="_blank" class="auth-button register-button" aria-label="ลงทะเบียน">
            <div class="button-content">
                <div class="icon-wrapper">
                    <i class="fas fa-user-plus"></i>
                    <div class="icon-ripple"></div>
                </div>
                <span class="button-text">ลงทะเบียน</span>
                <i class="fas fa-external-link-alt external-icon"></i>
            </div>
            <div class="hover-effect"></div>
        </a>
    </div>
    <?php
    return ob_get_clean();
}


/**** อัพเดต WP CONTENT ******/

// เพิ่ม Shortcode
function edit_wpcontent_shortcode($atts) {
    // ดึงค่าตัวแปรจาก shortcode attributes
    $atts = shortcode_atts(array(
        'id' => get_the_ID(), // ใช้ ID ของโพสต์ปัจจุบันเป็นค่าเริ่มต้น
        DGA_FIELD_KEY => 'content', // ค่าเริ่มต้นคือเนื้อหาโพสต์
    ), $atts);
    
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการแก้ไขหรือไม่
    $can_edit = current_user_can('edit_post', $atts['id']);
    
    // ดึงข้อมูลโพสต์
    $post = get_post($atts['id']);
    
    if (!$post) {
        return '<p>ไม่พบเนื้อหา</p>';
    }
    
    // เลือกข้อมูลที่จะแสดงตาม field ที่กำหนด
    switch ($atts[DGA_FIELD_KEY]) {
        case DGA_TITLE_FIELD:
            $content = $post->post_title;
            break;
        case 'excerpt':
            $content = $post->post_excerpt;
            break;
        case 'content':
        default:
            $content = $post->post_content;
            break;
    }
    
    // สร้าง nonce สำหรับความปลอดภัย
    $nonce = wp_create_nonce('edit_wpcontent_nonce');
    
    // สร้าง output HTML
    $output = '<div class="edit-wpcontent-container" data-id="' . esc_attr($atts['id']) . '" data-field="' . esc_attr($atts[DGA_FIELD_KEY]) . '" data-nonce="' . esc_attr($nonce) . '">';
    $output .= '<div class="edit-wpcontent-content">' . wpautop($content) . '</div>';
    
    // แสดงปุ่มแก้ไขเฉพาะสำหรับผู้ใช้ที่มีสิทธิ์
    if ($can_edit) {
        $output .= '<button class="edit-wpcontent-button" title="แก้ไขเนื้อหา"><i class="dashicons dashicons-edit"></i></button>';
        $output .= '<div class="edit-wpcontent-form" style="display:none;">';
        $output .= '<textarea class="edit-wpcontent-textarea">' . esc_textarea($content) . '</textarea>';
        $output .= '<div class="edit-wpcontent-actions">';
        $output .= '<button class="edit-wpcontent-save">บันทึก</button>';
        $output .= '<button class="edit-wpcontent-cancel">ยกเลิก</button>';
        $output .= '</div></div>';
    }
    
    $output .= '</div>';
    
    // เรียกใช้ CSS และ JS
    wp_enqueue_style('edit-wpcontent-style');
    wp_enqueue_script('edit-wpcontent-script');
    wp_enqueue_style('dashicons');
    
    return $output;
}
add_shortcode('edit_wpcontent', 'edit_wpcontent_shortcode');

// ลงทะเบียน CSS สำหรับ shortcode
function edit_wpcontent_register_styles() {
    wp_register_style(
        'edit-wpcontent-style', 
        get_stylesheet_directory_uri() . '/css/edit-wpcontent.css', 
        array(), 
        DGA_VERSION_NUMBER
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'edit_wpcontent_register_styles');

// ลงทะเบียน JavaScript สำหรับ shortcode
function edit_wpcontent_register_scripts() {
    wp_register_script(
        'edit-wpcontent-script', 
        get_stylesheet_directory_uri() . '/js/edit-wpcontent.js', 
        array(DGA_JQUERY_HANDLE), 
        DGA_VERSION_NUMBER, 
        true
    );
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('edit-wpcontent-script', 'editWpContent', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        'messages' => array(
            DGA_SUCCESS_STATUS => 'บันทึกเนื้อหาเรียบร้อยแล้ว',
            DGA_ERROR_STATUS => 'เกิดข้อผิดพลาด โปรดลองอีกครั้ง'
        )
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'edit_wpcontent_register_scripts');

// สร้าง AJAX handler สำหรับการบันทึกเนื้อหา
function edit_wpcontent_ajax_save() {
    // ตรวจสอบความปลอดภัยด้วย nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'edit_wpcontent_nonce')) {
        wp_send_json_error(DGA_SECURITY_FAILED_MSG);
    }
    
    // ตรวจสอบข้อมูลที่ส่งมา
    if (!isset($_POST[DGA_POST_ID_FIELD]) || !isset($_POST['content']) || !isset($_POST[DGA_FIELD_KEY])) {
        wp_send_json_error('Missing required data');
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    $content = wp_kses_post($_POST['content']);
    $field = sanitize_text_field($_POST[DGA_FIELD_KEY]);
    
    // ตรวจสอบสิทธิ์การแก้ไข
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
    }
    
    // อัปเดตโพสต์ตาม field ที่กำหนด
    $post_data = array(
        'ID' => $post_id
    );
    
    switch ($field) {
        case DGA_TITLE_FIELD:
            $post_data['post_title'] = $content;
            break;
        case 'excerpt':
            $post_data['post_excerpt'] = $content;
            break;
        case 'content':
        default:
            $post_data['post_content'] = $content;
            break;
    }
    
    // บันทึกการเปลี่ยนแปลง
    $result = wp_update_post($post_data);
    
    if ($result) {
        // แปลงเนื้อหาให้อยู่ในรูปแบบที่ถูกต้องสำหรับการแสดงผล
        $formatted_content = $content;
        if ($field == 'content') {
            $formatted_content = wpautop($content);
        }
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'Content updated successfully',
            'formatted_content' => $formatted_content
        ));
    } else {
        wp_send_json_error('Failed to update content');
    }
}
add_action('wp_ajax_edit_wpcontent_save', 'edit_wpcontent_ajax_save');


/********* ฟังก์ชั่น WCAG CHECKER ************/

/**
 * WCAG CHECKER - COMPLETE MANUAL CHECKS
*/

// Enable debug mode
define('WCAG_DEBUG', true);
define('WCAG_VERBOSE', true);

// Error logging function
function wcag_log_error($message, $data = null) {
    if (WCAG_DEBUG) {
        $log_entry = '[WCAG Checker ' . date('H:i:s') . '] ' . $message;
        if ($data !== null) {
            $log_entry .= ' - Data: ' . print_r($data, true);
        }
        error_log($log_entry);
    }
}

// Add shortcode with user role check
function wcag_compliance_checker_shortcode() {
    wp_enqueue_style('wcag-checker-style', get_stylesheet_directory_uri() . '/css/wcag-checker.css');
    wp_enqueue_script('wcag-checker-script', get_stylesheet_directory_uri() . '/js/wcag-checker.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    
    // Check if user is administrator
    $is_admin = current_user_can(DGA_ADMIN_ROLE);
    
    // Get saved grade for this page (if exists)
    $current_page_id = get_the_ID();
    $saved_grade = get_post_meta($current_page_id, '_wcag_grade', true);
    $saved_score = get_post_meta($current_page_id, '_wcag_score', true);
    $last_check = get_post_meta($current_page_id, '_wcag_last_check', true);
    
    // Debug log
    if (WCAG_DEBUG) {
        error_log('WCAG Shortcode - Page ID: ' . $current_page_id);
        error_log('WCAG Shortcode - Saved Grade: ' . $saved_grade);
        error_log('WCAG Shortcode - Saved Score: ' . $saved_score);
        error_log('WCAG Shortcode - Last Check: ' . $last_check);
    }
    
    wp_localize_script('wcag-checker-script', 'wcagAjax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('wcag_checker_nonce'),
        'currentUrl' => get_permalink(),
        'debug' => WCAG_DEBUG,
        'verbose' => WCAG_VERBOSE,
        'isAdmin' => $is_admin,
        'savedGrade' => $saved_grade,
        'savedScore' => $saved_score,
        'lastCheck' => $last_check,
        'logoUrls' => array(
            'A' => 'https://www.w3.org/WAI/wcag21/wcag2.1A-v.png',
            'AA' => 'https://www.w3.org/WAI/wcag21/wcag2.1AA-v.png',
            'AAA' => 'https://www.w3.org/WAI/wcag21/wcag2.1AAA-v.png'
        )
    ));
    
    $output = '
        <div class="wcag-checker-container">
            <div class="wcag-results">
                <div class="wcag-grade">';
    
    // แสดง saved grade ทันทีถ้ามี (ไม่ต้องรอ JavaScript)
    if ($saved_grade && !empty($saved_grade)) {
        $logo_url = '';
        if ($saved_grade === 'AAA') {
            $logo_url = 'https://www.w3.org/WAI/wcag21/wcag2.1AAA-v.png';
        } elseif ($saved_grade === 'AA') {
            $logo_url = 'https://www.w3.org/WAI/wcag21/wcag2.1AA-v.png';
        } elseif ($saved_grade === 'A') {
            $logo_url = 'https://www.w3.org/WAI/wcag21/wcag2.1A-v.png';
        }
        
        if ($logo_url) {
            $output .= '
                <div class="wcag-logo-container">
                    <img src="' . esc_url($logo_url) . '" 
                         alt="WCAG 2.1 Level ' . esc_attr($saved_grade) . ' conformance" 
                         class="wcag-logo"
                         width="88" 
                         height="31" />
                    <span class="wcag-score">' . ($saved_score ? number_format($saved_score, 1) : '0.0') . '%</span>
                </div>';
        } else {
            $output .= '
                <div class="wcag-no-grade">
                    <p>ไม่ผ่านมาตรฐาน WCAG 2.1</p>
                    <span class="wcag-score">' . ($saved_score ? number_format($saved_score, 1) : '0.0') . '%</span>
                </div>';
        }
        
        // แสดงวันที่ตรวจสอบล่าสุด
        if ($last_check) {
            $output .= '<div class="wcag-last-check">ตรวจสอบล่าสุด: ' . date_i18n(DGA_DATETIME_FORMAT_TH, strtotime($last_check)) . '</div>';
        }
    } elseif (!$is_admin) {
        // ถ้าไม่มี saved grade และไม่ใช่ admin
        $output .= '<p style="color: #666;">ยังไม่มีการตรวจสอบ WCAG สำหรับหน้านี้</p>';
    }
    
    $output .= '</div>';
    
    // Only show button for administrators
    if ($is_admin) {
        $output .= '<button class="wcag-check-now">ตรวจสอบเลย</button>
                <button class="wcag-details-toggle" style="display: none;">แสดงรายละเอียด</button>
                <div class="wcag-details" style="display: none;"></div>';
    }
    
    $output .= '</div>
            <div class="wcag-loading">
                <div class="wcag-spinner"></div>
                <div class="wcag-loading-text">กำลังตรวจสอบ...</div>
                <div class="wcag-loading-details" style="font-size: 0.9em; margin-top: 10px; color: #666;"></div>
            </div>';
    
    // Only show debug panel for administrators
    if ($is_admin && WCAG_DEBUG) {
        $output .= '<!-- Debug panel -->
            <div class="wcag-debug" style="margin-top: 20px; padding: 10px; background: #f0f0f0; border: 1px solid #ccc; font-family: monospace; font-size: 12px; white-space: pre-wrap; max-height: 300px; overflow-y: auto;"></div>';
    }
    
    $output .= '<!-- Modal Popup -->
            <div id="wcag-modal" class="wcag-modal">
                <div class="wcag-modal-content">
                    <span class="wcag-modal-close">&times;</span>
                    <div id="wcag-modal-content"></div>
                </div>
            </div>
        </div>
    ';
    
    return $output;
}
add_shortcode('wcag_checker', 'wcag_compliance_checker_shortcode');

function wcag_get_saved_grade() {
    if (!check_ajax_referer('wcag_checker_nonce', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        return;
    }
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    
    if (!$post_id) {
        // ถ้าไม่มี post_id ให้ลองหาจาก URL
        $url = isset($_POST['url']) ? esc_url_raw($_POST['url']) : '';
        if ($url) {
            $post_id = url_to_postid($url);
        }
    }
    
    if ($post_id) {
        $saved_grade = get_post_meta($post_id, '_wcag_grade', true);
        $saved_score = get_post_meta($post_id, '_wcag_score', true);
        $last_check = get_post_meta($post_id, '_wcag_last_check', true);
        
        wp_send_json_success(array(
            DGA_POST_ID_FIELD => $post_id,
            'grade' => $saved_grade,
            'score' => $saved_score,
            'lastCheck' => $last_check
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_POST_NOT_FOUND_MESSAGE));
    }
}
add_action('wp_ajax_wcag_get_saved_grade', 'wcag_get_saved_grade');
add_action('wp_ajax_nopriv_wcag_get_saved_grade', 'wcag_get_saved_grade');

// AJAX handler with grade saving
function wcag_run_compliance_check() {
    wcag_log_error('=== Starting WCAG Check ===');
    
    if (!check_ajax_referer('wcag_checker_nonce', 'nonce', false)) {
        wcag_log_error('Nonce verification failed');
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        return;
    }
    
    // Check if user is administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_UNAUTHORIZED_ACCESS_MESSAGE));
        return;
    }
    
    $current_url = isset($_POST['url']) ? esc_url_raw($_POST['url']) : '';
    $severity = isset($_POST['severity']) ? sanitize_text_field($_POST['severity']) : 'medium';
    
    wcag_log_error('Check parameters', array('url' => $current_url, 'severity' => $severity));
    
    try {
        // Fetch HTML content
        $start_time = microtime(true);
        
        $response = wp_remote_get($current_url, array(
            'timeout' => 30,
            'user-agent' => 'Mozilla/5.0 (compatible; WCAG Checker/1.0)'
        ));
        
        $fetch_time = microtime(true) - $start_time;
        wcag_log_error('URL fetch completed', array('time' => $fetch_time . 's'));
        
        if (is_wp_error($response)) {
            wcag_log_error('Failed to fetch URL', $response->get_error_message());
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => 'ไม่สามารถเข้าถึง URL ได้: ' . $response->get_error_message()
            ));
            return;
        }
        
        $html_content = wp_remote_retrieve_body($response);
        $content_length = strlen($html_content);
        wcag_log_error('HTML content retrieved', array('length' => $content_length . ' bytes'));
        
        // Complete accessibility check
        $check_start = microtime(true);
        
        $results = wcag_complete_accessibility_check($html_content, $severity);
        
        $check_time = microtime(true) - $check_start;
        wcag_log_error('Check completed', array(
            'total_time' => $check_time . 's',
            'score' => $results['score'],
            'grade' => $results['grade']
        ));
        
        // Save grade to post meta
        $post_id = url_to_postid($current_url);
        if ($post_id) {
            update_post_meta($post_id, '_wcag_grade', $results['grade']);
            update_post_meta($post_id, '_wcag_score', $results['score']);
            update_post_meta($post_id, '_wcag_last_check', current_time('mysql'));
            wcag_log_error('Grade saved to post meta', array(DGA_POST_ID_FIELD => $post_id, 'grade' => $results['grade']));
        }
        
        // Add debug info
        $results['debug_info'] = array(
            'url' => $current_url,
            'fetch_time' => $fetch_time,
            'check_time' => $check_time,
            'content_length' => $content_length,
            'timestamp' => date('Y-m-d H:i:s')
        );
        
        wp_send_json_success($results);
        
    } catch (Exception $e) {
        wcag_log_error('Exception occurred', $e->getMessage());
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาด: ' . $e->getMessage()
        ));
    }
}
add_action('wp_ajax_wcag_check', 'wcag_run_compliance_check');
add_action('wp_ajax_nopriv_wcag_check', 'wcag_run_compliance_check');

// Complete accessibility check with all manual checks (ฟังก์ชันเดิม)
/**
 * Helper function to initialize accessibility check results
 */
function wcag_initialize_checks() {
    return array(
        'contrast' => array('passed' => true, 'violations' => array(), DGA_TOTAL_FIELD_KEY => 0, 'checked' => 0),
        'alt_text' => array('passed' => true, 'violations' => array(), DGA_TOTAL_FIELD_KEY => 0, 'checked' => 0),
        'headers' => array('passed' => true, 'violations' => array(), DGA_TOTAL_FIELD_KEY => 0, 'checked' => 0),
        'aria' => array('passed' => true, 'violations' => array(), DGA_TOTAL_FIELD_KEY => 0, 'checked' => 0),
        'keyboard' => array('passed' => true, 'violations' => array(), DGA_TOTAL_FIELD_KEY => 0, 'checked' => 0),
        'forms' => array('passed' => true, 'violations' => array(), DGA_TOTAL_FIELD_KEY => 0, 'checked' => 0),
        'links' => array('passed' => true, 'violations' => array(), DGA_TOTAL_FIELD_KEY => 0, 'checked' => 0)
    );
}

/**
 * Helper function to parse HTML content
 */
function wcag_parse_html($html_content) {
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    
    $html_content = mb_convert_encoding($html_content, 'HTML-ENTITIES', 'UTF-8');
    $loaded = @$dom->loadHTML($html_content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
    
    if (!$loaded) {
        wcag_log_error('Failed to parse HTML');
        libxml_clear_errors();
        return null;
    }
    
    libxml_clear_errors();
    return $dom;
}

/**
 * Helper function to check image alt text
 */
function wcag_check_images($dom, &$checks) {
    wcag_log_error('Checking images for alt text');
    $images = $dom->getElementsByTagName('img');
    $checks['alt_text'][DGA_TOTAL_FIELD_KEY] = $images->length;
    $checks['alt_text']['checked'] = $images->length;
    
    foreach ($images as $img) {
        if (!$img->hasAttribute('alt')) {
            $checks['alt_text']['violations'][] = array(
                DGA_MESSAGE_KEY => 'รูปภาพไม่มี alt text',
                'impact' => 'critical',
                'element' => wcag_get_element_snippet($img)
            );
            $checks['alt_text']['passed'] = false;
        }
    }
}

/**
 * Helper function to check links
 */
function wcag_check_links($dom, &$checks) {
    wcag_log_error('Checking links');
    $links = $dom->getElementsByTagName('a');
    $checks['links'][DGA_TOTAL_FIELD_KEY] = $links->length;
    $checks['links']['checked'] = $links->length;
    
    foreach ($links as $link) {
        $text = trim($link->textContent);
        $hasImg = $link->getElementsByTagName('img')->length > 0;
        $hasAriaLabel = $link->hasAttribute('aria-label');
        $hasTitle = $link->hasAttribute(DGA_TITLE_FIELD);
        
        if (empty($text) && !$hasImg && !$hasAriaLabel && !$hasTitle) {
            $checks['links']['violations'][] = array(
                DGA_MESSAGE_KEY => 'ลิงก์ไม่มีข้อความหรือคำอธิบาย',
                'impact' => 'serious',
                'element' => wcag_get_element_snippet($link)
            );
            $checks['links']['passed'] = false;
        }
    }
}

/**
 * Helper function to check heading structure
 */
function wcag_check_headers($dom, &$checks) {
    wcag_log_error('Checking heading structure');
    $headings = array();
    for ($i = 1; $i <= 6; $i++) {
        $h_tags = $dom->getElementsByTagName('h' . $i);
        foreach ($h_tags as $h) {
            $headings[] = array('level' => $i, 'element' => $h);
        }
    }
    
    $checks['headers'][DGA_TOTAL_FIELD_KEY] = count($headings);
    $checks['headers']['checked'] = count($headings);
    
    if (count($headings) > 0) {
        usort($headings, function($a, $b) {
            return $a['element']->getLineNo() - $b['element']->getLineNo();
        });
        
        $prev = 0;
        foreach ($headings as $heading) {
            $level = $heading['level'];
            if ($prev > 0 && $level - $prev > 1) {
                $checks['headers']['violations'][] = array(
                    DGA_MESSAGE_KEY => 'ข้ามระดับหัวข้อจาก H' . $prev . ' ไป H' . $level,
                    'impact' => 'moderate',
                    'element' => wcag_get_element_snippet($heading['element'])
                );
                $checks['headers']['passed'] = false;
                break;
            }
            $prev = $level;
        }
    }
}

/**
 * Helper function to get form elements
 */
function wcag_get_form_elements($dom) {
    $form_elements = array();
    
    $inputs = $dom->getElementsByTagName('input');
    foreach ($inputs as $input) {
        $type = $input->getAttribute('type');
        if (!in_array($type, ['submit', 'reset', 'hidden', 'button', 'image'])) {
            $form_elements[] = $input;
        }
    }
    
    foreach ($dom->getElementsByTagName('select') as $select) {
        $form_elements[] = $select;
    }
    
    foreach ($dom->getElementsByTagName('textarea') as $textarea) {
        $form_elements[] = $textarea;
    }
    
    return $form_elements;
}

/**
 * Helper function to check if element has label
 */
function wcag_element_has_label($element, $xpath) {
    // Check for associated label
    $id = $element->getAttribute('id');
    if ($id) {
        $labels = $xpath->query("//label[@for='$id']");
        if ($labels->length > 0) {
            return true;
        }
    }
    
    // Check for ARIA labels
    if ($element->hasAttribute('aria-label') || 
        $element->hasAttribute('aria-labelledby') || 
        $element->hasAttribute(DGA_TITLE_FIELD)) {
        return true;
    }
    
    // Check if wrapped in label
    $parent = $element->parentNode;
    while ($parent && $parent->nodeName !== 'body') {
        if ($parent->nodeName === DGA_LABEL_FIELD) {
            return true;
        }
        $parent = $parent->parentNode;
    }
    
    return false;
}

/**
 * Helper function to check forms
 */
function wcag_check_forms($dom, $xpath, &$checks) {
    wcag_log_error('Checking forms');
    $form_elements = wcag_get_form_elements($dom);
    
    $checks['forms'][DGA_TOTAL_FIELD_KEY] = count($form_elements);
    $checks['forms']['checked'] = count($form_elements);
    
    wcag_log_error('Found form elements', count($form_elements));
    
    foreach ($form_elements as $element) {
        if (!wcag_element_has_label($element, $xpath)) {
            $checks['forms']['violations'][] = array(
                DGA_MESSAGE_KEY => 'ฟอร์มไม่มี label',
                'impact' => 'serious',
                'element' => wcag_get_element_snippet($element),
                'details' => 'Element: ' . $element->nodeName . ', Type: ' . $element->getAttribute('type') . ', ID: ' . $element->getAttribute('id')
            );
            $checks['forms']['passed'] = false;
        }
    }
}

/**
 * Helper function to check ARIA usage
 */
function wcag_check_aria($dom, $xpath, &$checks) {
    wcag_log_error('Checking ARIA usage');
    $aria_elements = $xpath->query('//*[@role or @aria-label or @aria-labelledby or @aria-describedby]');
    $checks['aria'][DGA_TOTAL_FIELD_KEY] = $aria_elements->length;
    $checks['aria']['checked'] = $aria_elements->length;
    
    $valid_roles = array('button', 'navigation', 'main', 'banner', 'contentinfo', 'complementary', 'search', 'form', 'region', 'alert', 'dialog', 'menu', 'menubar', 'menuitem', 'tab', 'tablist', 'tabpanel');
    
    foreach ($aria_elements as $element) {
        // Check for invalid role values
        if ($element->hasAttribute('role')) {
            $role = $element->getAttribute('role');
            if ($role && !in_array($role, $valid_roles)) {
                $checks['aria']['violations'][] = array(
                    DGA_MESSAGE_KEY => 'ARIA role ไม่ถูกต้อง: ' . $role,
                    'impact' => 'moderate',
                    'element' => wcag_get_element_snippet($element)
                );
                $checks['aria']['passed'] = false;
            }
        }
        
        // Check for aria-labelledby pointing to non-existent IDs
        if ($element->hasAttribute('aria-labelledby')) {
            $labelledby = $element->getAttribute('aria-labelledby');
            $ids = preg_split('/\s+/', $labelledby);
            
            foreach ($ids as $id) {
                if ($id && !$dom->getElementById($id)) {
                    $checks['aria']['violations'][] = array(
                        DGA_MESSAGE_KEY => 'aria-labelledby อ้างอิง ID ที่ไม่มีอยู่: ' . $id,
                        'impact' => 'serious',
                        'element' => wcag_get_element_snippet($element)
                    );
                    $checks['aria']['passed'] = false;
                }
            }
        }
    }
}

/**
 * Helper function to check keyboard navigation
 */
function wcag_check_keyboard($dom, $xpath, &$checks) {
    wcag_log_error('Checking keyboard navigation');
    $interactive_elements = $xpath->query('//a[@href] | //button | //input | //select | //textarea | //*[@tabindex]');
    $checks['keyboard'][DGA_TOTAL_FIELD_KEY] = $interactive_elements->length;
    $checks['keyboard']['checked'] = $interactive_elements->length;
    
    foreach ($interactive_elements as $element) {
        // Check tabindex values
        if ($element->hasAttribute('tabindex')) {
            $tabindex = $element->getAttribute('tabindex');
            if (intval($tabindex) > 0) {
                $checks['keyboard']['violations'][] = array(
                    DGA_MESSAGE_KEY => 'tabindex มีค่าเป็นบวก (' . $tabindex . ') ซึ่งอาจทำให้ลำดับการนำทางไม่เป็นธรรมชาติ',
                    'impact' => 'moderate',
                    'element' => wcag_get_element_snippet($element)
                );
                $checks['keyboard']['passed'] = false;
            }
        }
        
        // Check if element is keyboard accessible
        if (in_array($element->nodeName, ['div', 'span'])) {
            if ($element->hasAttribute('onclick') && !$element->hasAttribute('tabindex')) {
                $checks['keyboard']['violations'][] = array(
                    DGA_MESSAGE_KEY => 'Element ที่มี onclick แต่ไม่สามารถเข้าถึงด้วยแป้นพิมพ์ได้',
                    'impact' => 'serious',
                    'element' => wcag_get_element_snippet($element)
                );
                $checks['keyboard']['passed'] = false;
            }
        }
    }
}

/**
 * Helper function to check color contrast
 */
function wcag_check_contrast($dom, $xpath, &$checks) {
    wcag_log_error('Checking color contrast');
    $text_elements = $xpath->query('//p | //span | //div | //h1 | //h2 | //h3 | //h4 | //h5 | //h6 | //a | //li | //td | //th');
    $contrast_checked = 0;
    
    foreach ($text_elements as $element) {
        $text = trim($element->textContent);
        if (empty($text)) continue;
        
        $contrast_checked++;
        
        // Check inline styles for color/background
        if ($element->hasAttribute('style')) {
            $style = $element->getAttribute('style');
            
            // Simple check for potential contrast issues
            if ((strpos($style, 'color:') !== false || strpos($style, 'background') !== false)) {
                // Look for potentially problematic color combinations
                if (preg_match('/color:\s*#([0-9a-fA-F]{3,6})/', $style, $fg_match) &&
                    preg_match('/background(-color)?:\s*#([0-9a-fA-F]{3,6})/', $style, $bg_match)) {
                    
                    $checks['contrast']['violations'][] = array(
                        DGA_MESSAGE_KEY => 'อาจมีปัญหาความคมชัดของสี (ต้องตรวจสอบด้วยตนเอง)',
                        'impact' => 'moderate',
                        'element' => wcag_get_element_snippet($element),
                        'style' => $style
                    );
                    $checks['contrast']['passed'] = false;
                }
            }
        }
    }
    
    $checks['contrast'][DGA_TOTAL_FIELD_KEY] = $contrast_checked;
    $checks['contrast']['checked'] = $contrast_checked;
}

/**
 * Helper function to get guideline info from database
 */
function wcag_get_guideline_info() {
    global $wpdb;
    
    $guideline = $wpdb->get_row("
        SELECT guideline_id, title, abbr 
        FROM guidelines 
        WHERE abbr = 'WCAG2-AA' 
           OR abbr = 'WCAG 2.0 (Level AA)'
           OR abbr LIKE '%WCAG%2%AA%'
        ORDER BY 
            CASE 
                WHEN abbr = 'WCAG2-AA' THEN 1
                WHEN abbr = 'WCAG 2.0 (Level AA)' THEN 2
                ELSE 3
            END
        LIMIT 1
    ");
    
    $guideline_info = 'Manual checks only';
    
    if ($guideline) {
        $guideline_info = $guideline->abbr;
        
        // Try to get checks from database
        $check_ids = $wpdb->get_col($wpdb->prepare("
            SELECT DISTINCT sc.check_id
            FROM subgroup_checks sc
            JOIN guideline_subgroups gs ON sc.subgroup_id = gs.subgroup_id
            WHERE gs.guideline_id = %d
        ", $guideline->guideline_id));
        
        wcag_log_error('Database checks found', count($check_ids));
    }
    
    return $guideline_info;
}

function wcag_complete_accessibility_check($html_content, $severity = 'medium') {
    wcag_log_error('Starting complete accessibility check');
    
    // Initialize results
    $checks = wcag_initialize_checks();
    
    // Parse HTML
    $dom = wcag_parse_html($html_content);
    if (!$dom) {
        return array(
            'grade' => null,
            'checks' => $checks,
            'score' => 0,
            'severity' => $severity,
            DGA_ERROR_STATUS => 'ไม่สามารถวิเคราะห์ HTML ได้'
        );
    }
    
    // Create XPath for queries
    $xpath = new DOMXPath($dom);
    
    // Run all accessibility checks
    wcag_check_images($dom, $checks);
    wcag_check_links($dom, $checks);
    wcag_check_headers($dom, $checks);
    wcag_check_forms($dom, $xpath, $checks);
    wcag_check_aria($dom, $xpath, $checks);
    wcag_check_keyboard($dom, $xpath, $checks);
    wcag_check_contrast($dom, $xpath, $checks);
    
    // Get guideline information
    $guideline_info = wcag_get_guideline_info();
    
    // Log final check counts
    foreach ($checks as $category => $check) {
        wcag_log_error("Final count for $category", array(
            DGA_TOTAL_FIELD_KEY => $check[DGA_TOTAL_FIELD_KEY],
            'checked' => $check['checked'],
            'violations' => count($check['violations'])
        ));
    }
    
    // Calculate score and grade
    $score = wcag_calculate_score_verbose($checks);
    $grade = wcag_determine_grade($score, $severity);
    
    return array(
        'grade' => $grade,
        'checks' => $checks,
        'score' => $score,
        'severity' => $severity,
        'processing_info' => array(
            'total_checks' => array_sum(array_map(function($c) { return $c['checked']; }, $checks)),
            'guideline_used' => $guideline_info,
            'manual_checks' => true
        )
    );
}

// Helper functions (เหมือนเดิม)
function wcag_get_element_snippet($element) {
    if ($element instanceof DOMElement) {
        $doc = new DOMDocument();
        $imported = $doc->importNode($element->cloneNode(false), true);
        $doc->appendChild($imported);
        $html = $doc->saveHTML();
        return htmlspecialchars(substr($html, 0, 200));
    }
    return 'Unknown element';
}

function wcag_calculate_score_verbose($checks) {
    $weights = array(
        'contrast' => 15,
        'alt_text' => 15,
        'headers' => 10,
        'aria' => 10,
        'keyboard' => 15,
        'forms' => 15,
        'links' => 15
    );
    
    $total_weight = 0;
    $total_score = 0;
    $details = array();
    
    foreach ($checks as $category => $check) {
        $weight = isset($weights[$category]) ? $weights[$category] : 10;
        $total_weight += $weight;
        
        if ($check[DGA_TOTAL_FIELD_KEY] > 0) {
            $violations = count($check['violations']);
            $passed_count = $check[DGA_TOTAL_FIELD_KEY] - $violations;
            $pass_percentage = ($passed_count / $check[DGA_TOTAL_FIELD_KEY]) * 100;
            $category_score = ($pass_percentage / 100) * $weight;
            
            $details[$category] = array(
                'weight' => $weight,
                DGA_TOTAL_FIELD_KEY => $check[DGA_TOTAL_FIELD_KEY],
                'passed' => $passed_count,
                'failed' => $violations,
                'percentage' => round($pass_percentage, 2),
                'score' => round($category_score, 2)
            );
            
            $total_score += $category_score;
        } else {
            // No elements to check, give full score
            $details[$category] = array(
                'weight' => $weight,
                DGA_TOTAL_FIELD_KEY => 0,
                'passed' => 0,
                'failed' => 0,
                'percentage' => 100,
                'score' => $weight
            );
            $total_score += $weight;
        }
    }
    
    $final_score = ($total_weight > 0) ? ($total_score / $total_weight) * 100 : 0;
    
    wcag_log_error('Score calculation', array(
        'details' => $details,
        'total_score' => $total_score,
        'total_weight' => $total_weight,
        'final_score' => $final_score
    ));
    
    return $final_score;
}

function wcag_determine_grade($score, $severity) {
    switch ($severity) {
        case 'very-low':
            if ($score >= 75) return 'AAA';
            if ($score >= 65) return 'AA';
            if ($score >= 55) return 'A';
            break;
        case 'low':
            if ($score >= 80) return 'AAA';
            if ($score >= 70) return 'AA';
            if ($score >= 60) return 'A';
            break;
        case 'medium':
            if ($score >= 85) return 'AAA';
            if ($score >= 75) return 'AA';
            if ($score >= 65) return 'A';
            break;
        case 'high':
        default:
            if ($score >= 90) return 'AAA';
            if ($score >= 80) return 'AA';
            if ($score >= 70) return 'A';
            break;
    }
    
    return null;
}

// Admin menu
function wcag_checker_admin_menu() {
    add_options_page(
        'WCAG Checker',
        'WCAG Checker',
        DGA_MANAGE_OPTIONS_CAP,
        'wcag-checker',
        'wcag_checker_admin_page'
    );
}
add_action('admin_menu', 'wcag_checker_admin_menu');

function wcag_checker_admin_page() {
    global $wpdb;
    
    ?>
    <div class="wrap">
        <h1>WCAG Checker Settings</h1>
        
        <div class="card">
            <h2>Check Summary</h2>
            <ul>
                <li><strong>Alt Text</strong>: ตรวจสอบ img tags ทั้งหมด</li>
                <li><strong>Links</strong>: ตรวจสอบ a tags ทั้งหมด</li>
                <li><strong>Headers</strong>: ตรวจสอบ h1-h6 tags ทั้งหมด</li>
                <li><strong>Forms</strong>: ตรวจสอบ input, select, textarea ทั้งหมด</li>
                <li><strong>ARIA</strong>: ตรวจสอบ elements ที่มี role หรือ aria-* attributes</li>
                <li><strong>Keyboard</strong>: ตรวจสอบ interactive elements และ tabindex</li>
                <li><strong>Contrast</strong>: ตรวจสอบ inline styles ที่อาจมีปัญหา contrast</li>
            </ul>
        </div>
        
        <div class="card">
            <h2>Test HTML Elements</h2>
            <form method="post" action="">
                <textarea id="test-html" rows="10" style="width: 100%;">
<html>
<body>
    <h1>Test Page</h1>
    <h3>Skipped heading level</h3>
    
    <img src="test.jpg">
    <img src="test2.jpg" alt="Test image">
    
    <a href="#">Empty link</a>
    <a href="#">Link with text</a>
    
    <form>
        <input type="text" name="test">
        <input type="text" id="field1" name="field1">
        <label for="field1">Field 1</label>
        
        <select name="choice">
            <option>Option 1</option>
        </select>
        
        <button type=DGA_SUBMIT_TYPE>Submit</button>
    </form>
    
    <div role="invalid-role">Invalid ARIA role</div>
    <div role=DGA_BUTTON_TYPE tabindex="0">Valid button role</div>
    
    <div onclick="alert('test')">Clickable div without keyboard access</div>
    <div onclick="alert('test')" tabindex="0">Clickable div with keyboard access</div>
    
    <p style="color: #777; background-color: #fff;">Low contrast text</p>
</body>
</html>
                </textarea>
                <button type=DGA_BUTTON_TYPE id="test-html-check" class="button button-primary">Test HTML</button>
            </form>
            <div id="test-html-results" style="margin-top: 20px;"></div>
        </div>
    </div>
    
    <script>
    jQuery(document).ready(function($) {
        $('#test-html-check').on('click', function() {
            const html = $('#test-html').val();
            var $results = $('#test-html-results');
            
            $results.html('<p>Testing...</p>');
            
            // Create a temporary container
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;
            
            // Count elements
            const counts = {
                images: tempDiv.querySelectorAll('img').length,
                imagesWithoutAlt: tempDiv.querySelectorAll('img:not([alt])').length,
                links: tempDiv.querySelectorAll('a').length,
                emptyLinks: Array.from(tempDiv.querySelectorAll('a')).filter(a => !a.textContent.trim()).length,
                headings: tempDiv.querySelectorAll('h1,h2,h3,h4,h5,h6').length,
                formElements: tempDiv.querySelectorAll('input:not([type=DGA_SUBMIT_TYPE]):not([type=DGA_BUTTON_TYPE]):not([type="hidden"]),select,textarea').length,
                formElementsWithoutLabels: Array.from(tempDiv.querySelectorAll('input:not([type=DGA_SUBMIT_TYPE]):not([type=DGA_BUTTON_TYPE]):not([type="hidden"]),select,textarea')).filter(function(el) {
                    const id = el.id;
                    if (id && tempDiv.querySelector('label[for="' + id + '"]')) return false;
                    if (el.getAttribute('aria-label')) return false;
                    if (el.title) return false;
                    return true;
                }).length,
                ariaElements: tempDiv.querySelectorAll('[role],[aria-label],[aria-labelledby]').length,
                tabindexElements: tempDiv.querySelectorAll('[tabindex]').length,
                elementsWithStyle: tempDiv.querySelectorAll('[style*="color"],[style*="background"]').length
            };
            
            let html = '<h3>Element Counts:</h3><ul>';
            html += '<li>Images: ' + counts.images + ' (without alt: ' + counts.imagesWithoutAlt + ')</li>';
            html += '<li>Links: ' + counts.links + ' (empty: ' + counts.emptyLinks + ')</li>';
            html += '<li>Headings: ' + counts.headings + '</li>';
            html += '<li>Form elements: ' + counts.formElements + ' (without labels: ' + counts.formElementsWithoutLabels + ')</li>';
            html += '<li>ARIA elements: ' + counts.ariaElements + '</li>';
            html += '<li>Tabindex elements: ' + counts.tabindexElements + '</li>';
            html += '<li>Elements with color styles: ' + counts.elementsWithStyle + '</li>';
            html += '</ul>';
            
            $results.html(html);
        });
    });
    </script>
    <?php
}




/**
 * W3C CSS Validator Shortcode
 * 
 * Creates a shortcode [w3c_test] that validates CSS according to W3C standards
 */


 

// Register the shortcode
function w3c_test() {
    // Enqueue required styles and scripts
    wp_enqueue_style('w3c-test-style', get_stylesheet_directory_uri() . '/css/w3c-test.css', array(), '1.0');
    wp_enqueue_script('w3c-test-script', get_stylesheet_directory_uri() . '/js/w3c-test.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    
    // Pass data to JavaScript
    wp_localize_script('w3c-test-script', 'w3cTest', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('w3c_test_nonce'),
        'current_url' => get_permalink()
    ));
    
    // Create the HTML output
    $output = '
    <div class="w3c-test-container">
        <div class="w3c-test-header">
            <span class="w3c-test-title">W3C CSS Validator</span>
            <div class="w3c-test-score"></div>
        </div>
        <div class="w3c-test-toggle">ตรวจสอบ CSS</div>
        <div class="w3c-test-content" style="display:none;">
            <div class="w3c-test-summary"></div>
            <div class="w3c-test-details"></div>
        </div>
        <div class="w3c-test-loading" style="display:none;">
            <div class="w3c-test-spinner"></div>
            <span>กำลังตรวจสอบ CSS...</span>
        </div>
        
        <!-- Modal for detailed results -->
        <div id="w3c-test-modal" class="w3c-test-modal">
            <div class="w3c-test-modal-content">
                <span class="w3c-test-modal-close">&times;</span>
                <div class="w3c-test-modal-header">
                    <h3>CSS Validation Results</h3>
                </div>
                <div id="w3c-test-modal-body"></div>
            </div>
        </div>
    </div>
    ';
    
    return $output;
}
add_shortcode('w3c_test', 'w3c_test');

// AJAX handler for CSS validation
function w3c_css_validation() {
    check_ajax_referer('w3c_test_nonce', 'nonce');
    
    $current_url = isset($_POST['url']) ? esc_url_raw($_POST['url']) : '';
    
    // In a real-world scenario, we might use an external API
    // For this example, we'll simulate validation by checking stylesheets
    $results = simulate_css_validation($current_url);
    
    wp_send_json_success($results);
}
add_action('wp_ajax_w3c_css_validation', 'w3c_css_validation');
add_action('wp_ajax_nopriv_w3c_css_validation', 'w3c_css_validation');

/**
 * Simulate CSS validation by checking common issues
 * In a real implementation, this would connect to W3C API or use a CSS parser
 */
function simulate_css_validation($url) {
    // Define categories to check
    $checks = array(
        'syntax' => array(
            DGA_NAME_FIELD => 'ไวยากรณ์ CSS (Syntax)',
            'issues' => array(),
            'score' => 100
        ),
        'compatibility' => array(
            DGA_NAME_FIELD => 'ความเข้ากันได้ (Compatibility)',
            'issues' => array(),
            'score' => 100
        ),
        'performance' => array(
            DGA_NAME_FIELD => 'ประสิทธิภาพ (Performance)',
            'issues' => array(),
            'score' => 100
        ),
        'best_practices' => array(
            DGA_NAME_FIELD => 'แนวปฏิบัติที่ดีที่สุด (Best Practices)',
            'issues' => array(),
            'score' => 100
        )
    );
    
    // Simulate detection of issues (in real implementation, this would parse actual CSS)
    
    // 1. Syntax Issues (simulate random issues)
    if (rand(0, 1) == 1) {
        $checks['syntax']['issues'][] = array(
            'severity' => DGA_ERROR_STATUS,
            DGA_MESSAGE_KEY => 'พบวงเล็บปีกกาไม่สมดุลในไฟล์ style.css บรรทัด 142',
            'recommendation' => 'ตรวจสอบวงเล็บปีกกาให้สมดุล'
        );
        $checks['syntax']['score'] -= 15;
    }
    
    // 2. Compatibility Issues
    $checks['compatibility']['issues'][] = array(
        'severity' => 'warning',
        DGA_MESSAGE_KEY => 'ใช้คุณสมบัติ CSS ที่อาจไม่รองรับใน IE11: grid, flex-wrap',
        'recommendation' => 'พิจารณาเพิ่ม vendor prefixes หรือใช้ polyfills'
    );
    $checks['compatibility']['score'] -= 5;
    
    // 3. Performance Issues
    $checks['performance']['issues'][] = array(
        'severity' => 'warning',
        DGA_MESSAGE_KEY => 'ตรวจพบ selector ที่ซับซ้อนเกินไป (>5 ระดับ) x 3 จุด',
        'recommendation' => 'ลดความซับซ้อนของ selectors เพื่อปรับปรุงประสิทธิภาพ'
    );
    $checks['performance']['score'] -= 10;
    
    if (rand(0, 1) == 1) {
        $checks['performance']['issues'][] = array(
            'severity' => 'info',
            DGA_MESSAGE_KEY => 'พบการใช้ !important จำนวน 8 ครั้ง',
            'recommendation' => 'หลีกเลี่ยงการใช้ !important ยกเว้นกรณีจำเป็น'
        );
        $checks['performance']['score'] -= 5;
    }
    
    // 4. Best Practices
    $checks['best_practices']['issues'][] = array(
        'severity' => 'info',
        DGA_MESSAGE_KEY => 'ไม่พบการใช้ CSS Custom Properties (variables)',
        'recommendation' => 'พิจารณาใช้ CSS Variables เพื่อให้โค้ดง่ายต่อการบำรุงรักษา'
    );
    $checks['best_practices']['score'] -= 5;
    
    // Calculate overall score
    $total_score = 0;
    $weights = array(
        'syntax' => 0.4,
        'compatibility' => 0.3,
        'performance' => 0.2,
        'best_practices' => 0.1
    );
    
    foreach ($checks as $key => $check) {
        $total_score += $check['score'] * $weights[$key];
    }
    
    // Determine grade
    $grade = 'A';
    if ($total_score < 90) $grade = 'B';
    if ($total_score < 80) $grade = 'C'; 
    if ($total_score < 70) $grade = 'D';
    if ($total_score < 60) $grade = 'F';
    
    return array(
        'score' => round($total_score),
        'grade' => $grade,
        'url' => $url,
        'checks' => $checks
    );
}


/****** ตัวเลือกเปลี่ยนภาษา ******/

// Enqueue necessary scripts and styles
function wpml_language_switcher_assets() {
    wp_enqueue_style('wpml-language-switcher', get_stylesheet_directory_uri() . '/css/wpml-language-switcher.css', array(), DGA_VERSION_NUMBER);
    wp_enqueue_script('wpml-language-switcher', get_stylesheet_directory_uri() . '/js/wpml-language-switcher.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    
    // Pass AJAX URL and current language to JavaScript
    wp_localize_script('wpml-language-switcher', 'wpmlVars', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('wpml-language-switch-nonce'),
        'currentLang' => apply_filters('wpml_current_language', null),
        'defaultLang' => 'th'
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'wpml_language_switcher_assets');

// Create shortcode for language switcher
function custom_wpml_language_switcher_shortcode() {
    // Check if WPML is active
    if (!function_exists('icl_get_languages')) {
        return '';
    }

    $languages = apply_filters('wpml_active_languages', null, array(
        'skip_missing' => 0,
        DGA_ORDERBY_FIELD_VALUE => 'code',
        DGA_ORDER_FIELD => 'desc'
    ));

    if (empty($languages)) {
        return '';
    }

    $current_language = apply_filters('wpml_current_language', null);
    $output = '<div class="wpml-language-switcher">';
    $output .= '<div class="wpml-ls-dropdown">';
    
    // Current language display
    foreach ($languages as $lang) {
        if ($lang['active'] == 1) {
            $flag_url = $lang['code'] === 'th' ? 
                'https://dga.wpdevs.co/wp-content/uploads/2025/01/THAI-30px-FLAG.webp' : 
                'https://dga.wpdevs.co/wp-content/uploads/2025/01/ENG-30px-FLAG.webp';
            
            $output .= '<div class="wpml-ls-current-language">';
            $output .= '<img src="' . esc_url($flag_url) . '" alt="' . esc_attr($lang['code']) . ' flag" /> ';
            $output .= '<span>' . esc_html($lang['native_name']) . '</span>';
            $output .= '<span class="wpml-ls-dropdown-arrow"></span>';
            $output .= '</div>';
            break;
        }
    }

    // Language options
    $output .= '<ul class="wpml-ls-languages">';
    foreach ($languages as $lang) {
        $flag_url = $lang['code'] === 'th' ? 
            'https://dga.wpdevs.co/wp-content/uploads/2025/01/THAI-30px-FLAG.webp' : 
            'https://dga.wpdevs.co/wp-content/uploads/2025/01/ENG-30px-FLAG.webp';
        
        $class = !$lang['active'] ? '' : ' class="active"';
        $url = apply_filters('wpml_permalink', get_permalink(), $lang['code']);
        
        $output .= '<li' . $class . '>';
        $output .= '<a href="' . esc_url(add_query_arg('lang', $lang['code'], $url)) . '" data-lang="' . esc_attr($lang['code']) . '">';
        $output .= '<img src="' . esc_url($flag_url) . '" alt="' . esc_attr($lang['code']) . ' flag" /> ';
        $output .= '<span>' . esc_html($lang['native_name']) . '</span>';
        $output .= '</a>';
        $output .= '</li>';
    }
    $output .= '</ul>';
    $output .= '</div>';
    $output .= '</div>';

    return $output;
}
add_shortcode('wpml_language_switcher', 'custom_wpml_language_switcher_shortcode');

// Set default language to Thai
function set_default_language() {
    if (!isset($_COOKIE['wpml_language_preference'])) {
        setcookie('wpml_language_preference', 'th', time() + (86400 * 30), '/');
        do_action('wpml_switch_language', 'th');
    }
}
add_action('init', 'set_default_language', 1);

// AJAX handler for saving language preference
function save_language_preference() {
    check_ajax_referer('wpml-language-switch-nonce', 'nonce');
    
    if (isset($_POST['language'])) {
        $language = sanitize_text_field($_POST['language']);
        setcookie('wpml_language_preference', $language, time() + (86400 * 30), '/');
        do_action('wpml_switch_language', $language);
        wp_send_json_success(array('redirect' => add_query_arg('lang', $language)));
    }
    
    wp_send_json_error();
}
add_action('wp_ajax_save_language_preference', 'save_language_preference');
add_action('wp_ajax_nopriv_save_language_preference', 'save_language_preference');


/***** บังคับให้ทุก Post ที่สร้างใหม่ใช้ URL SLUG ด้วย POST ID เสมอ ******/

function force_post_id_as_slug($data) {
    // ตรวจสอบว่าเป็นโพสประเภท 'post' เท่านั้น
    if($data[DGA_POST_TYPE_FIELD] == 'post') {
        // กรณีสร้างโพสใหม่
        if($data[DGA_POST_STATUS_FIELD] == DGA_PUBLISH_STATUS) {
            // บังคับใช้ ID เป็น slug แม้จะมี post_title
            if(!empty($data['ID'])) {
                $data['post_name'] = $data['ID'];
            }
        }
        
        // กรณีอัพเดทโพส
        if(!empty($data['ID'])) {
            // บังคับใช้ ID เป็น slug เสมอ ไม่ว่าจะมีการแก้ไข post_title หรือไม่
            $data['post_name'] = $data['ID'];
        }
    }
    
    return $data;
}
add_filter('wp_insert_post_data', 'force_post_id_as_slug', 99, 1);

// เพิ่มฟิลเตอร์เพื่อป้องกันการสร้าง slug จาก post_title
add_filter('name_save_pre', function($title) {
    global $post;
    if(!empty($post) && $post->post_type == 'post' && !empty($post->ID)) {
        return $post->ID;
    }
    return $title;
}, 99);


// สำหรับโพสที่มีอยู่แล้ว ต้องการอัพเดท slug ให้เป็น ID
function update_existing_posts_slug() {
    $args = array(
        DGA_POST_TYPE_FIELD => 'post',
        DGA_POSTS_PER_PAGE => -1,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );
    
    $posts = get_posts($args);
    
    foreach($posts as $post) {
        // อัพเดท slug เป็น ID โดยไม่สนใจ post_title
        wp_update_post(array(
            'ID' => $post->ID,
            'post_name' => $post->ID
        ));
    }
}


/******* ฟอร์มสร้างบทความใหม่ ********/

function at_add_article_shortcode_kse749() {
    // Enqueue required scripts and styles
    wp_enqueue_style('at-article-style-kse749', get_stylesheet_directory_uri() . '/css/article-manager.css');
    wp_enqueue_script('at-article-script-kse749', get_stylesheet_directory_uri() . '/js/article-manager.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    
    // Add WordPress media scripts
    wp_enqueue_media();
    
    // Add WordPress Ajax URL
    wp_localize_script('at-article-script-kse749', 'atAjax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('at_article_nonce_kse749')
    ));

    ob_start();
    ?>
    <button class="at-add-article-btn-kse749"><?php _e('เพิ่มข้อมูล', DGA_TEXT_DOMAIN); ?></button>
    <div id="at-article-modal-kse749" class="at-modal-kse749">
        <div class="at-modal-content-kse749">
            <div class="at-modal-inner-kse749">
                <span class="at-close-kse749" aria-label="<?php esc_attr_e('ปิดหน้าต่าง', DGA_TEXT_DOMAIN); ?>">&times;</span>
                <h2><?php _e('เพิ่มข้อมูลใหม่', DGA_TEXT_DOMAIN); ?></h2>
                
                <!-- Draft status indicator -->
                <div id="at-draft-status-kse749" class="at-draft-status-kse749" style="display:none;">
                    <span class="at-draft-indicator-kse749"><?php _e('มีแบบร่างที่บันทึกไว้', DGA_TEXT_DOMAIN); ?></span>
                    <button type=DGA_BUTTON_TYPE id="at-clear-draft-kse749" class="at-clear-draft-btn-kse749">
                        <?php _e('เคลียร์ดราฟ', DGA_TEXT_DOMAIN); ?>
                    </button>
                </div>
                
                <form id="at-article-form-kse749" enctype="multipart/form-data">
                    <?php wp_nonce_field('at_article_action_kse749', 'at_article_nonce_kse749'); ?>

                    <div class="at-form-group-kse749">
                        <label><?php _e('เลือกประเภทเนื้อหา', DGA_TEXT_DOMAIN); ?></label>
                        <div class="at-post-type-grid-kse749">
                            <label class="at-post-type-card-kse749">
                                <input type="checkbox" name="post_types[]" value="article" class="at-post-type-input-kse749">
                                <div class="at-post-type-content-kse749">
                                    <div class="at-post-type-icon-kse749">📄</div>
                                    <div class="at-post-type-label-kse749"><?php _e('บทความ/ข่าวสาร/ประกาศ', DGA_TEXT_DOMAIN); ?></div>
                                </div>
                            </label>
                            <label class="at-post-type-card-kse749">
                                <input type="checkbox" name="post_types[]" value="mpeople" class="at-post-type-input-kse749">
                                <div class="at-post-type-content-kse749">
                                    <div class="at-post-type-icon-kse749">📚</div>
                                    <div class="at-post-type-label-kse749"><?php _e('คู่มือประชาชน', DGA_TEXT_DOMAIN); ?></div>
                                </div>
                            </label>
                            <label class="at-post-type-card-kse749">
                                <input type="checkbox" name="post_types[]" value="news" class="at-post-type-input-kse749">
                                <div class="at-post-type-content-kse749">
                                    <div class="at-post-type-icon-kse749">📰</div>
                                    <div class="at-post-type-label-kse749"><?php _e('ข้อมูลทั่วไป/มาตรฐาน', DGA_TEXT_DOMAIN); ?></div>
                                </div>
                            </label>
                            <label class="at-post-type-card-kse749">
                                <input type="checkbox" name="post_types[]" value="pha" class="at-post-type-input-kse749">
                                <div class="at-post-type-content-kse749">
                                    <div class="at-post-type-icon-kse749">👥</div>
                                    <div class="at-post-type-label-kse749"><?php _e('ประชาพิจารณ์และกิจกรรม', DGA_TEXT_DOMAIN); ?></div>
                                </div>
                            </label>
                        </div>
                        <div class="at-post-type-error-kse749" role="alert"></div>
                    </div>
                    
                    <div class="at-form-group-kse749">
                        <label for="article_title_kse749"><?php _e('ชื่อบทความ', DGA_TEXT_DOMAIN); ?></label>
                        <input type="text" id="article_title_kse749" name="article_title" required>
                    </div>
                    
                    <!-- พื้นที่สำหรับ fields เลขที่มาตรฐาน -->
                    <div id="standards-fields-container-kse749" class="at-form-group-kse749" style="display:none;">
                        <div id="dga-standard-field-kse749" class="at-standard-field-group-kse749" style="display:none;">
                            <label for="dga_standard_number_kse749"><?php _e('กำหนดเลขที่ มสพร.', DGA_TEXT_DOMAIN); ?></label>
                            <input type="text" id="dga_standard_number_kse749" name="dga_standard_number" placeholder="<?php esc_attr_e('เช่น มสพร. 1-2565', DGA_TEXT_DOMAIN); ?>">
                        </div>
                        
                        <div id="dgth-standard-field-kse749" class="at-standard-field-group-kse749" style="display:none;">
                            <label for="dgth_standard_number_kse749"><?php _e('กำหนดเลข มรด.', DGA_TEXT_DOMAIN); ?></label>
                            <input type="text" id="dgth_standard_number_kse749" name="dgth_standard_number" placeholder="<?php esc_attr_e('เช่น มรด. 1-2565', DGA_TEXT_DOMAIN); ?>">
                        </div>
                    </div>
                    
                    <div class="at-form-group-kse749">
                        <label><?php _e('หมวดหมู่และหัวข้อ', DGA_TEXT_DOMAIN); ?></label>
                        <div id="taxonomy-terms-container-kse749" class="at-taxonomy-container-kse749">
                            <!-- Taxonomy terms จะถูกโหลดด้วย JavaScript -->
                            <div class="at-taxonomy-placeholder-kse749"><?php _e('กรุณาเลือกประเภทเนื้อหาก่อน เพื่อแสดงหมวดหมู่ที่เกี่ยวข้อง', DGA_TEXT_DOMAIN); ?></div>
                        </div>
                    </div>
                    
                    <div class="at-form-group-kse749">
                        <label for="article_images_kse749"><?php _e('เพิ่มภาพหน้าปก', DGA_TEXT_DOMAIN); ?></label>
                        <div id="image-upload-area-kse749">
                            <div class="upload-icon">📷</div>
                            <div class="upload-text"><?php _e('คลิกหรือลากภาพมาวางที่นี่', DGA_TEXT_DOMAIN); ?></div>
                            <div class="upload-hint"><?php _e('แนะนำภาพแนวนอน ขนาด 1200×630 พิกเซล', DGA_TEXT_DOMAIN); ?></div>
                            <input type="file" id="article_images_kse749" name="article_images" accept="image/*">
                        </div>
                        <input type="hidden" id="featured_image_id_kse749" name="featured_image_id" value="0">
                        <div id="image-preview-kse749"></div>
                    </div>
                    
                    <div class="at-form-group-kse749">
                        <label for="article_content_kse749"><?php _e('เนื้อหาบทความ', DGA_TEXT_DOMAIN); ?></label>
                        <div class="wp-editor-container">
                            <?php 
                            $content = '';
                            $editor_id = 'article_content_kse749';
                            $settings = array(
                                'media_buttons' => true,
                                'textarea_name' => 'article_content',
                                'textarea_rows' => 20,
                                'teeny' => false,
                                'quicktags' => true,
                                'tinymce' => true
                            );
                            wp_editor($content, $editor_id, $settings);
                            ?>
                        </div>
                    </div>
                    
                    <div class="at-form-group-kse749">
                        <label><?php _e('เอกสารมาตรฐาน', DGA_TEXT_DOMAIN); ?></label>
                        <p class="at-form-hint-kse749"><?php _e('หากยังไม่มีเอกสารแนบสามารถข้ามก่อนได้ครับ', DGA_TEXT_DOMAIN); ?></p>
                        <div class="at-doc-controls-kse749">
                            <button type=DGA_BUTTON_TYPE id="toggle-documents-kse749" class="at-toggle-btn-kse749" data-state="show">
                                <?php _e('ไม่มีเอกสาร', DGA_TEXT_DOMAIN); ?>
                            </button>
                        </div>
                        <div id="documents-section-kse749">
                            <div id="file-repeater-container-kse749">
                                <div class="file-repeater-row-kse749">
                                    <input type="text" name="file_name[]" placeholder="<?php esc_attr_e('ชื่อไฟล์', DGA_TEXT_DOMAIN); ?>">
                                    <input type="date" name="file_date[]" value="<?php echo current_time('Y-m-d'); ?>">
                                    <input type="file" name="file_upload[]" accept=".pdf,.doc,.docx">
                                    <button type=DGA_BUTTON_TYPE class="remove-row-kse749"><?php _e('ลบ', DGA_TEXT_DOMAIN); ?></button>
                                </div>
                            </div>
                            <button type=DGA_BUTTON_TYPE id="add-file-row-kse749"><?php _e('เพิ่มเอกสาร', DGA_TEXT_DOMAIN); ?></button>
                        </div>
                    </div>
                    
                    <div class="at-info-message-kse749">
                        <div class="at-info-icon-kse749" aria-hidden="true">ℹ️</div>
                        <div class="at-info-text-kse749"><?php _e('เนื้อหาที่เพิ่มใหม่จะถูกบันทึกเป็นฉบับร่างและรอการอนุมัติก่อนเผยแพร่', DGA_TEXT_DOMAIN); ?></div>
                    </div>
                    
                    <button type=DGA_SUBMIT_TYPE class="at-submit-btn-kse749"><?php _e('บันทึกข้อมูล', DGA_TEXT_DOMAIN); ?></button>
                </form>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('add_article', 'at_add_article_shortcode_kse749');

// ปรับปรุงฟังก์ชัน filter สำหรับตั้งค่า URL Slug เป็น Post ID โดยไม่ต้องตรวจสอบ original_slug
add_filter('wp_unique_post_slug', 'at_custom_post_slug_kse749', 10, 6);
function at_custom_post_slug_kse749($slug, $post_ID, $post_status, $post_type, $post_parent, $original_slug) {
    // ตั้งค่า slug ให้เป็น post_id เฉพาะกับโพสต์ของประเภทที่ต้องการ
    if ($post_ID > 0 && in_array($post_type, ['article', 'mpeople', 'news', 'pha'])) {
        return (string)$post_ID;
    }
    return $slug;
}

// เพิ่ม filter เพื่อให้แน่ใจว่า slug จะเป็น post ID เสมอ แม้ในกรณีมีการแก้ไขโพสต์
add_filter('wp_insert_post_data', 'at_set_post_slug_to_id_kse749', 10, 2);
function at_set_post_slug_to_id_kse749($data, $postarr) {
    // ตรวจสอบว่าเป็นโพสต์ประเภทที่ต้องการหรือไม่
    if (isset($data[DGA_POST_TYPE_FIELD]) && in_array($data[DGA_POST_TYPE_FIELD], ['article', 'mpeople', 'news', 'pha'])) {
        // ถ้าเป็นโพสต์ใหม่ ให้ตั้งค่า post_name เป็นค่าว่าง เพื่อให้ filter at_custom_post_slug ทำงาน
        if (empty($postarr['ID'])) {
            $data['post_name'] = '';
        } 
        // ถ้าเป็นโพสต์ที่มีอยู่แล้ว ให้ตั้งค่า post_name เป็น ID
        else {
            $data['post_name'] = (string)$postarr['ID'];
        }
    }
    return $data;
}

// AJAX endpoint สำหรับอัพโหลดรูปภาพทันที
add_action('wp_ajax_at_upload_featured_image_kse749', 'at_upload_featured_image_kse749');
function at_upload_featured_image_kse749() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_article_nonce_kse749')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)]);
    }

    // ตรวจสอบว่ามีการอัพโหลดไฟล์หรือไม่
    if (empty($_FILES['file'])) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่พบไฟล์ที่อัพโหลด', DGA_TEXT_DOMAIN)]);
    }

    // ตรวจสอบว่าไฟล์เป็นรูปภาพหรือไม่
    $file_type = wp_check_filetype(basename($_FILES['file']['name']));
    $allowed_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif' , 'image/webp'];

    if (!in_array($_FILES['file']['type'], $allowed_types)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณาอัพโหลดไฟล์ภาพเท่านั้น (JPEG, PNG, GIF)', DGA_TEXT_DOMAIN)]);
    }

    // โหลดไลบรารีที่จำเป็น
    require_once ABSPATH . 'wp-admin/includes/image.php';
    require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
    require_once ABSPATH . 'wp-admin/includes/media.php';

    // อัพโหลดไฟล์และสร้างเป็น attachment
    $attachment_id = media_handle_upload('file', 0);

    if (is_wp_error($attachment_id)) {
        wp_send_json_error([
            DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาดในการอัพโหลด: ', DGA_TEXT_DOMAIN) . $attachment_id->get_error_message()
        ]);
    }

    // ดึงข้อมูล URL ของรูปภาพ
    $image_url = wp_get_attachment_url($attachment_id);
    $image_data = wp_get_attachment_image_src($attachment_id, 'medium');
    $thumbnail_url = $image_data[0];

    wp_send_json_success([
        DGA_MESSAGE_KEY => __('อัพโหลดภาพเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
        'attachment_id' => $attachment_id,
        'url' => $image_url,
        'thumbnail' => $thumbnail_url,
        'filename' => basename($_FILES['file']['name']),
        'filesize' => size_format($_FILES['file']['size'])
    ]);
}

// AJAX handler สำหรับดึงข้อมูล Taxonomy
add_action('wp_ajax_get_post_type_taxonomies_kse749', 'at_get_post_type_taxonomies_kse749');
function at_get_post_type_taxonomies_kse749() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_article_nonce_kse749')) {
        wp_send_json_error(__('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN));
    }

    if (!isset($_POST['post_types']) || !is_array($_POST['post_types'])) {
        wp_send_json_error(__('คำขอไม่ถูกต้อง - ไม่พบประเภทเนื้อหา', DGA_TEXT_DOMAIN));
    }

    $post_types = array_map('sanitize_text_field', $_POST['post_types']);
    $valid_post_types = ['article', 'mpeople', 'news', 'pha'];
    $selected_post_types = array_intersect($post_types, $valid_post_types);

    if (empty($selected_post_types)) {
        wp_send_json_error(__('ไม่พบประเภทเนื้อหาที่ถูกต้อง', DGA_TEXT_DOMAIN));
    }

    $taxonomies_data = [];

    foreach ($selected_post_types as $post_type) {
        $taxonomies = get_object_taxonomies($post_type, 'objects');
        
        if (!empty($taxonomies)) {
            foreach ($taxonomies as $taxonomy) {
                // ข้ามพวก internal หรือ non-public taxonomies
                if (!$taxonomy->public || $taxonomy->_builtin && $taxonomy->name == 'post_format') {
                    continue;
                }
                
                $terms = get_terms([
                    DGA_TAXONOMY_FIELD => $taxonomy->name,
                    DGA_HIDE_EMPTY_FIELD => false,
                ]);
                
                if (!is_wp_error($terms) && !empty($terms)) {
                    $terms_data = [];
                    foreach ($terms as $term) {
                        $terms_data[] = [
                            'id' => $term->term_id,
                            DGA_NAME_FIELD => $term->name,
                            'slug' => $term->slug,
                        ];
                    }
                    
                    $taxonomies_data[$post_type][] = [
                        DGA_NAME_FIELD => $taxonomy->name,
                        DGA_LABEL_FIELD => $taxonomy->label,
                        'terms' => $terms_data,
                    ];
                }
            }
        }
    }

    wp_send_json_success($taxonomies_data);
}

// Handle AJAX submission - ปรับปรุงให้ใช้ Featured Image ที่อัพโหลดไว้ล่วงหน้า
function at_handle_article_submission_kse749() {
    // Verify nonce
    if (!isset($_POST['at_article_nonce_kse749']) || !wp_verify_nonce($_POST['at_article_nonce_kse749'], 'at_article_action_kse749')) {
        wp_send_json_error(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }

    // Verify user capabilities
    if (!current_user_can('publish_posts')) {
        wp_send_json_error(__(DGA_PERMISSION_DENIED_MESSAGE, DGA_TEXT_DOMAIN));
    }

    if (!isset($_POST['article_title']) || !isset($_POST['post_types'])) {
        wp_send_json_error(__('Invalid request - Missing required fields', DGA_TEXT_DOMAIN));
    }

    // Get selected post types and validate them
    $post_types = array_map('sanitize_text_field', $_POST['post_types']);
    $valid_post_types = ['article', 'mpeople', 'news', 'pha'];
    $selected_post_types = array_intersect($post_types, $valid_post_types);

    if (empty($selected_post_types)) {
        wp_send_json_error(__('Please select at least one valid post type', DGA_TEXT_DOMAIN));
    }

    // Get taxonomy terms if provided
    $taxonomy_terms = isset($_POST['tax_input']) ? $_POST['tax_input'] : [];
    
    // Get standard document numbers if provided
    $dga_standard_number = isset($_POST['dga_standard_number']) ? sanitize_text_field($_POST['dga_standard_number']) : '';
    $dgth_standard_number = isset($_POST['dgth_standard_number']) ? sanitize_text_field($_POST['dgth_standard_number']) : '';

    $successful_posts = [];
    
    // นำ ID ของภาพที่อัพโหลดไว้ล่วงหน้ามาใช้
    $featured_image_id = isset($_POST['featured_image_id']) ? intval($_POST['featured_image_id']) : 0;
    
    // ตรวจสอบว่าภาพที่อัพโหลดไว้ล่วงหน้ามีอยู่จริงหรือไม่
    if ($featured_image_id > 0) {
        $attachment = get_post($featured_image_id);
        if (!$attachment || $attachment->post_type !== 'attachment') {
            $featured_image_id = 0;
        }
    }
    
    // ถ้าไม่มีภาพที่อัพโหลดไว้ล่วงหน้า และมีการอัพโหลดภาพผ่านฟอร์ม ให้ดำเนินการอัพโหลดภาพปกติ
    if ($featured_image_id == 0 && !empty($_FILES['article_images']['name'])) {
        // โหลดไลบรารีการจัดการไฟล์และรูปภาพ
        require_once ABSPATH . 'wp-admin/includes/image.php';
        require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
        require_once ABSPATH . 'wp-admin/includes/media.php';
        
        // อัพโหลดภาพไปยัง WordPress Media Library โดยยังไม่ผูกกับโพสต์ใด
        $featured_image_id = media_handle_upload('article_images', 0);
        
        // ตรวจสอบการอัพโหลดว่าสำเร็จหรือไม่
        if (is_wp_error($featured_image_id)) {
            // ถ้ามีข้อผิดพลาด ตั้งค่า $featured_image_id เป็น 0 แล้วทำงานต่อไป
            $featured_image_id = 0;
        }
    }
    
    // Process standard files once for reuse
    $standard_files_data = [];
    if (!empty($_FILES['file_upload']['tmp_name'][0])) {
        foreach ($_FILES['file_upload']['tmp_name'] as $key => $tmp_name) {
            if (empty($tmp_name)) continue;

            $_FILES['standard_file'] = array(
                DGA_NAME_FIELD => $_FILES['file_upload']['name'][$key],
                DGA_TYPE_FIELD => $_FILES['file_upload']['type'][$key],
                'tmp_name' => $tmp_name,
                DGA_ERROR_STATUS => $_FILES['file_upload'][DGA_ERROR_STATUS][$key],
                'size' => $_FILES['file_upload']['size'][$key]
            );

            $upload_data = wp_handle_upload($_FILES['standard_file'], array('test_form' => false));
            if (!isset($upload_data[DGA_ERROR_STATUS])) {
                $standard_files_data[] = array(
                    'upload_data' => $upload_data,
                    DGA_NAME_FIELD => isset($_POST['file_name'][$key]) ? sanitize_text_field($_POST['file_name'][$key]) : '',
                    'date' => isset($_POST['file_date'][$key]) ? sanitize_text_field($_POST['file_date'][$key]) : ''
                );
            }
        }
    }

    // Create posts for each selected post type
    foreach ($selected_post_types as $post_type) {
        // Create post with status 'pending' instead of DGA_PUBLISH_STATUS
        $post_data = array(
            'post_title' => sanitize_text_field($_POST['article_title']),
            'post_content' => wp_kses_post($_POST['article_content']),
            DGA_POST_STATUS_FIELD => 'pending', // เปลี่ยนเป็น pending เพื่อรอการอนุมัติ
            DGA_POST_TYPE_FIELD => $post_type,
            'post_name' => '' // กำหนดเป็นค่าว่างเพื่อให้ filter กำหนด slug เป็น post ID
        );

        $post_id = wp_insert_post($post_data);

        if (!is_wp_error($post_id)) {
            // Set taxonomy terms
            if (!empty($taxonomy_terms)) {
                foreach ($taxonomy_terms as $taxonomy => $terms) {
                    $tax_obj = get_taxonomy($taxonomy);
                    if ($tax_obj && in_array($post_type, $tax_obj->object_type)) {
                        // แปลงค่า terms ให้เป็น integers เพื่อให้ WordPress รู้ว่านี่คือ term IDs
                        $term_ids = array_map('intval', $terms);
                        
                        // ระบุ parameter ให้ชัดเจนว่าเป็น term IDs และไม่ต้องเพิ่มเข้าไป (append=false)
                        wp_set_object_terms($post_id, $term_ids, $taxonomy, false);
                    }
                }
            }
            
            // บันทึกเลขที่มาตรฐาน เฉพาะสำหรับ post_type = 'news'
            if ($post_type === 'news') {
                if (!empty($dga_standard_number)) {
                    update_field('at_docnum_1', $dga_standard_number, $post_id);
                }
                
                if (!empty($dgth_standard_number)) {
                    update_field('at_docnum_2', $dgth_standard_number, $post_id);
                }
            }
            
            // ตั้งค่า Featured Image ถ้ามีการอัพโหลดภาพ
            if ($featured_image_id > 0) {
                set_post_thumbnail($post_id, $featured_image_id);
                
                // เพิ่มภาพเข้า ACF field at_slide_images (ถ้ามี)
                if (function_exists('update_field')) {
                    update_field('at_slide_images', [$featured_image_id], $post_id);
                }
            }

            // Handle content update
            if (isset($_POST['article_content'])) {
                $content = wp_kses_post($_POST['article_content']);
                if (function_exists('update_field')) {
                    update_field('at_content', $content, $post_id);
                }
            }

            // Attach standard files to the post
            $post_standard_files = [];
            foreach ($standard_files_data as $file_data) {
                $filename = basename($file_data['upload_data']['file']);
                $wp_filetype = wp_check_filetype($filename);

                $attachment = array(
                    'post_mime_type' => $wp_filetype['type'],
                    'post_title' => preg_replace('/\.[^.]+$/', '', $filename),
                    'post_content' => '',
                    DGA_POST_STATUS_FIELD => 'inherit'
                );

                $attach_id = wp_insert_attachment($attachment, $file_data['upload_data']['file'], $post_id);

                if (!is_wp_error($attach_id)) {
                    // Generate attachment metadata
                    $attachment_data = wp_generate_attachment_metadata($attach_id, $file_data['upload_data']['file']);
                    wp_update_attachment_metadata($attach_id, $attachment_data);
                    
                    $post_standard_files[] = array(
                        'at_rp_file_name' => $file_data['name'],
                        'at_rp_file_create' => $file_data['date'],
                        'at_rp_file_link' => wp_get_attachment_url($attach_id)
                    );
                }
            }

            // Update standard files field
            if (!empty($post_standard_files) && function_exists('update_field')) {
                update_field('at_file_standard', $post_standard_files, $post_id);
            }

            // Add to successful posts array
            $successful_posts[] = array(
                DGA_TYPE_FIELD => $post_type,
                'id' => $post_id,
                'url' => get_permalink($post_id)
            );
        }
    }

    if (!empty($successful_posts)) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('เนื้อหาถูกบันทึกเป็นฉบับร่างเรียบร้อยแล้ว และรอการอนุมัติก่อนเผยแพร่', DGA_TEXT_DOMAIN),
            'posts' => $successful_posts
        ));
    } else {
        wp_send_json_error(__('Failed to create any posts', DGA_TEXT_DOMAIN));
    }

    wp_die();
}
add_action('wp_ajax_submit_article_kse749', 'at_handle_article_submission_kse749');


// Add initialization hook for TinyMCE
add_action('admin_init', 'at_article_admin_init_kse749');
function at_article_admin_init_kse749() {
    if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can('edit_pages')) {
        return;
    }
    if (get_user_option('rich_editing') !== 'true') {
        return;
    }
    add_filter('mce_buttons', 'at_article_register_buttons_kse749');
}

function at_article_register_buttons_kse749($buttons) {
    array_push($buttons, 'separator', 'fullscreen');
    return $buttons;
}













/**** ลิมิต PostTitle *****/
function limited_title_shortcode($atts) {
    // Parse attributes and set defaults
    $attributes = shortcode_atts(array(
        'length' => 60 // Default length if not specified
    ), $atts);
    
    // Get post title from current post
    $post_title = get_the_title();
    
    // Convert length to integer
    $max_length = intval($attributes['length']);
    
    // Ensure minimum length of 1
    if ($max_length < 1) {
        $max_length = 1;
    }
    
    // If title length is greater than max_length
    if (mb_strlen($post_title) > $max_length) {
        // Cut the string to max_length
        $post_title = mb_substr($post_title, 0, $max_length);
        // Add ellipsis
        $post_title .= '...';
    }
    
    return $post_title;
}

// Register shortcode
add_shortcode('limited_title', 'limited_title_shortcode');


if (!function_exists('at_content_shortcode')) {
    function at_content_shortcode($atts) {
        // Parse attributes with defaults
        $args = shortcode_atts(array(
            'chars' => 300,  // Default character limit
            'ending' => '...', // Default ending
        ), $atts);

        // Get current post
        global $post;
        if (!isset($post->ID)) {
            return '';
        }

        // Get custom field content
        $content = get_post_meta($post->ID, 'at_content', true);
        if (empty($content)) {
            return '';
        }

        // Clean up content
        $content = wp_strip_all_tags($content);
        $content = trim($content);

        // Convert character limit to integer
        $char_limit = intval($args['chars']);
        
        // Handle Thai text properly using mb_* functions
        if (mb_strlen($content, 'UTF-8') > $char_limit) {
            // Cut the string at the character limit
            $content = mb_substr($content, 0, $char_limit, 'UTF-8');
            
            // Find the last complete word
            $last_space = mb_strrpos($content, ' ', 0, 'UTF-8');
            
            if ($last_space !== false) {
                // Cut at the last complete word
                $content = mb_substr($content, 0, $last_space, 'UTF-8');
            }
            
            // Add the ending
            $content .= $args['ending'];
        }

        return $content;
    }
}

// Register shortcode
add_shortcode('at_content_short', 'at_content_shortcode');

// Make it work with Elementor
add_filter('elementor/widget/render_content', 'do_shortcode');

// Support for manual excerpts
add_filter('the_excerpt', 'do_shortcode');

// Example usage in template:
// [at_content_short chars="200" ending="...อ่านต่อ"]


/****** Query ID ออฟเซ็ท 2 Post ******/

/**
 * Custom Elementor query for article posts
 * Hook: elementor/query/article_more
 */
add_action('elementor/query/article_more', function($query) {
    // Set post type to 'article'
    $query->set(DGA_POST_TYPE_FIELD, 'article');
    
    // Set offset to skip first 2 posts
    $query->set('offset', 2);
    
    // Optional: You can add more query parameters here
    // For example:
    // $query->set(DGA_POSTS_PER_PAGE, 10); // Number of posts to display
    // $query->set(DGA_ORDERBY_FIELD_VALUE, 'date');    // Order by date
    // $query->set(DGA_ORDER_FIELD, 'DESC');      // Descending order
});


/***** โปรไฟล์เอดิเตอร์ ******/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * 1. Enqueue necessary scripts and styles
 */
function profile_management_enqueue_scripts_pmg728() {
    $version = '2.0.0';
    
    // Register CSS
    wp_register_style(
        'profile-management-pmg728', 
        get_stylesheet_directory_uri() . '/css/profile-management.css',
        array(),
        $version
    );
    
    // Register JavaScript (Modern ES6+, no jQuery dependency)
    wp_register_script(
        'profile-management-pmg728',
        get_stylesheet_directory_uri() . '/js/profile-management.js',
        array(),
        $version,
        true
    );
    
    // Localize script
    wp_localize_script('profile-management-pmg728', 'profileManagement', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('profile_management_nonce_pmg728'),
        'loginUrl' => wp_login_url(),
        'messages' => array(
            'fileTypeError' => __('กรุณาอัพโหลดไฟล์รูปภาพเท่านั้น (.jpg, .png, .gif)', DGA_TEXT_DOMAIN),
            'fileSizeError' => __('ขนาดไฟล์ต้องไม่เกิน 2MB', DGA_TEXT_DOMAIN),
            'passwordMismatch' => __('รหัสผ่านไม่ตรงกัน กรุณาลองใหม่อีกครั้ง', DGA_TEXT_DOMAIN),
            'saving' => __('กำลังบันทึก...', DGA_TEXT_DOMAIN),
            'updating' => __('กำลังอัพเดต...', DGA_TEXT_DOMAIN),
            DGA_SUCCESS_STATUS => __('บันทึกข้อมูลเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_RETRY_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'passwordUpdated' => __('อัพเดตรหัสผ่านเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
            'redirecting' => __('กำลังไปยังหน้าเข้าสู่ระบบ...', DGA_TEXT_DOMAIN)
        )
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'profile_management_enqueue_scripts_pmg728');

/**
 * 2. Get custom avatar URL with proper fallback
 */
function get_custom_avatar_url_pmg728($user_id) {
    $custom_avatar_id = get_user_meta($user_id, 'custom_avatar_id', true);
    if ($custom_avatar_id) {
        $image_url = wp_get_attachment_image_url($custom_avatar_id, 'thumbnail');
        if ($image_url) {
            return $image_url;
        }
    }
    // Use correct default avatar URL
    return 'https://standard.wpdevs.co/wp-content/uploads/2025/01/no-user.png';
}

/**
 * 3. Override WordPress avatar
 */
function custom_avatar_pmg728($avatar, $id_or_email, $size, $default, $alt) {
    $user = false;

    if (is_numeric($id_or_email)) {
        $user_id = (int) $id_or_email;
        $user = get_user_by('id', $user_id);
    } elseif (is_object($id_or_email)) {
        if (!empty($id_or_email->user_id)) {
            $user = get_user_by('id', (int) $id_or_email->user_id);
        }
    } else {
        $user = get_user_by('email', $id_or_email);
    }

    if ($user && is_object($user)) {
        $avatar_url = get_custom_avatar_url_pmg728($user->ID);
        $avatar = sprintf(
            '<img alt="%s" src="%s" class="avatar avatar-%d photo" height="%d" width="%d" loading="lazy" />',
            esc_attr($alt),
            esc_url($avatar_url),
            (int) $size,
            (int) $size,
            (int) $size
        );
    }

    return $avatar;
}
add_filter('get_avatar', 'custom_avatar_pmg728', 10, 5);

/**
 * 4. Create shortcode for profile editor
 */
function profile_management_shortcode_pmg728() {
    // Enqueue scripts and styles
    wp_enqueue_style('profile-management-pmg728');
    wp_enqueue_script('profile-management-pmg728');
    
    if (!is_user_logged_in()) {
        return sprintf(
            '<div class="profile-container-pmg728">
                <div class="profile-box-pmg728">
                    <div class="profile-icon-warning-pmg728">
                        <svg width="60" height="60" viewBox="0 0 24 24" fill="none">
                            <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z" fill="currentColor" opacity="0.3"/>
                            <path d="M11 15H13V17H11V15ZM11 7H13V13H11V7Z" fill="currentColor"/>
                        </svg>
                    </div>
                    <h2>%s</h2>
                    <p>%s</p>
                    <a href="%s" class="profile-btn-primary-pmg728">%s</a>
                </div>
            </div>',
            __('กรุณาเข้าสู่ระบบ', DGA_TEXT_DOMAIN),
            __('คุณต้องเข้าสู่ระบบเพื่อแก้ไขโปรไฟล์', DGA_TEXT_DOMAIN),
            wp_login_url(get_permalink()),
            __(DGA_LOGIN_TEXT_TH, DGA_TEXT_DOMAIN)
        );
    }

    $current_user = wp_get_current_user();
    $avatar_url = get_custom_avatar_url_pmg728($current_user->ID);
    
    ob_start();
    ?>
    <div class="profile-container-pmg728">
        <div class="profile-box-pmg728">
            <!-- Profile Header with Avatar -->
            <div class="profile-header-pmg728">
                <div class="profile-avatar-wrapper-pmg728">
                    <div class="profile-avatar-pmg728">
                        <img src="<?php echo esc_url($avatar_url); ?>" 
                             alt="<?php esc_attr_e('รูปโปรไฟล์', DGA_TEXT_DOMAIN); ?>" 
                             id="profile-avatar-preview">
                        <div class="avatar-upload-overlay-pmg728">
                            <label for="avatar-upload" class="upload-button-pmg728" 
                                   aria-label="<?php esc_attr_e('อัพโหลดรูปโปรไฟล์', DGA_TEXT_DOMAIN); ?>">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                                    <polyline points="17 8 12 3 7 8"/>
                                    <line x1="12" y1="3" x2="12" y2="15"/>
                                </svg>
                                <span><?php _e('เปลี่ยนรูป', DGA_TEXT_DOMAIN); ?></span>
                            </label>
                            <input type="file" 
                                   id="avatar-upload" 
                                   name="avatar" 
                                   accept="image/jpeg,image/jpg,image/png,image/gif" 
                                   style="display: none;">
                        </div>
                    </div>
                    <div class="profile-avatar-info-pmg728">
                        <h2><?php echo esc_html($current_user->display_name); ?></h2>
                        <p><?php echo esc_html($current_user->user_email); ?></p>
                    </div>
                </div>
            </div>
            
            <!-- Profile Form -->
            <form id="profile-editor-form" class="profile-form-pmg728">
                <div class="form-row-pmg728">
                    <div class="form-group-pmg728">
                        <label for="first-name"><?php _e('ชื่อ', DGA_TEXT_DOMAIN); ?></label>
                        <input type="text" 
                               id="first-name" 
                               name="first_name" 
                               value="<?php echo esc_attr($current_user->first_name); ?>" 
                               class="form-input-pmg728"
                               placeholder="<?php esc_attr_e('กรอกชื่อ', DGA_TEXT_DOMAIN); ?>">
                    </div>
                    
                    <div class="form-group-pmg728">
                        <label for="last-name"><?php _e('นามสกุล', DGA_TEXT_DOMAIN); ?></label>
                        <input type="text" 
                               id="last-name" 
                               name="last_name" 
                               value="<?php echo esc_attr($current_user->last_name); ?>" 
                               class="form-input-pmg728"
                               placeholder="<?php esc_attr_e('กรอกนามสกุล', DGA_TEXT_DOMAIN); ?>">
                    </div>
                </div>
                
                <button type=DGA_SUBMIT_TYPE class="profile-btn-primary-pmg728 profile-btn-block-pmg728">
                    <span class="button-text"><?php _e('บันทึกข้อมูล', DGA_TEXT_DOMAIN); ?></span>
                    <span class="button-loader" style="display:none;">
                        <svg class="profile-spinner-pmg728" width="20" height="20" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </button>
            </form>
            
            <!-- Password Reset Button -->
            <div class="profile-actions-pmg728">
                <button id="reset-password-button" class="profile-btn-secondary-pmg728">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                    </svg>
                    <?php _e('เปลี่ยนรหัสผ่าน', DGA_TEXT_DOMAIN); ?>
                </button>
            </div>
        </div>

        <!-- Password Reset Modal -->
        <div id="password-reset-modal" class="profile-modal-pmg728" role="dialog" aria-labelledby="password-modal-title" aria-hidden="true">
            <div class="profile-modal-overlay-pmg728"></div>
            <div class="profile-modal-container-pmg728">
                <div class="profile-modal-header-pmg728">
                    <h2 id="password-modal-title" class="profile-modal-title-pmg728"><?php _e('เปลี่ยนรหัสผ่าน', DGA_TEXT_DOMAIN); ?></h2>
                    <button type=DGA_BUTTON_TYPE class="profile-modal-close-pmg728" aria-label="<?php esc_attr_e('ปิด', DGA_TEXT_DOMAIN); ?>">&times;</button>
                </div>
                <div class="profile-modal-content-pmg728">
                    <form id="password-reset-form" class="profile-form-pmg728">
                        <div class="form-group-pmg728">
                            <label for="new-password"><?php _e('รหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?></label>
                            <div class="password-wrapper-pmg728">
                                <input type="password" 
                                       id="new-password" 
                                       name="new_password" 
                                       class="form-input-pmg728" 
                                       required 
                                       minlength="8"
                                       placeholder="<?php esc_attr_e('กรอกรหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?>">
                                <button type=DGA_BUTTON_TYPE class="toggle-password-pmg728" aria-label="<?php esc_attr_e('แสดงรหัสผ่าน', DGA_TEXT_DOMAIN); ?>">
                                    <svg class="eye-open" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                        <path d="M12 5C7 5 2.73 8.11 1 12.5C2.73 16.89 7 20 12 20C17 20 21.27 16.89 23 12.5C21.27 8.11 17 5 12 5ZM12 17.5C9.24 17.5 7 15.26 7 12.5C7 9.74 9.24 7.5 12 7.5C14.76 7.5 17 9.74 17 12.5C17 15.26 14.76 17.5 12 17.5ZM12 9.5C10.34 9.5 9 10.84 9 12.5C9 14.16 10.34 15.5 12 15.5C13.66 15.5 15 14.16 15 12.5C15 10.84 13.66 9.5 12 9.5Z" fill="currentColor"/>
                                    </svg>
                                    <svg class="eye-closed" width="20" height="20" viewBox="0 0 24 24" fill="none" style="display:none;">
                                        <path d="M12 7C14.76 7 17 9.24 17 12C17 12.65 16.87 13.26 16.64 13.83L19.56 16.75C21.07 15.49 22.26 13.86 23 12C21.27 7.61 17 4.5 12 4.5C10.6 4.5 9.26 4.75 8 5.2L10.17 7.37C10.74 7.13 11.35 7 12 7ZM2 4.27L4.28 6.55L4.74 7.01C3.08 8.3 1.78 10.02 1 12C2.73 16.39 7 19.5 12 19.5C13.55 19.5 15.03 19.2 16.38 18.66L16.81 19.08L19.73 22L21 20.73L3.27 3L2 4.27ZM12 16.5C9.24 16.5 7 14.26 7 11.5C7 10.73 7.18 9.99 7.49 9.36L9.53 11.4C9.52 11.56 9.5 11.78 9.5 12C9.5 13.38 10.62 14.5 12 14.5C12.22 14.5 12.44 14.48 12.6 14.47L14.64 16.51C14.01 16.82 13.27 17 12.5 17L12 16.5Z" fill="currentColor"/>
                                    </svg>
                                </button>
                            </div>
                            <small class="password-requirements-pmg728">
                                <?php _e('รหัสผ่านต้องมีความยาวอย่างน้อย 8 ตัวอักษร', DGA_TEXT_DOMAIN); ?>
                            </small>
                        </div>
                        
                        <div class="form-group-pmg728">
                            <label for="confirm-password"><?php _e('ยืนยันรหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?></label>
                            <div class="password-wrapper-pmg728">
                                <input type="password" 
                                       id="confirm-password" 
                                       name="confirm_password" 
                                       class="form-input-pmg728" 
                                       required 
                                       minlength="8"
                                       placeholder="<?php esc_attr_e('กรอกรหัสผ่านอีกครั้ง', DGA_TEXT_DOMAIN); ?>">
                                <button type=DGA_BUTTON_TYPE class="toggle-password-pmg728" aria-label="<?php esc_attr_e('แสดงรหัสผ่าน', DGA_TEXT_DOMAIN); ?>">
                                    <svg class="eye-open" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                        <path d="M12 5C7 5 2.73 8.11 1 12.5C2.73 16.89 7 20 12 20C17 20 21.27 16.89 23 12.5C21.27 8.11 17 5 12 5ZM12 17.5C9.24 17.5 7 15.26 7 12.5C7 9.74 9.24 7.5 12 7.5C14.76 7.5 17 9.74 17 12.5C17 15.26 14.76 17.5 12 17.5ZM12 9.5C10.34 9.5 9 10.84 9 12.5C9 14.16 10.34 15.5 12 15.5C13.66 15.5 15 14.16 15 12.5C15 10.84 13.66 9.5 12 9.5Z" fill="currentColor"/>
                                    </svg>
                                    <svg class="eye-closed" width="20" height="20" viewBox="0 0 24 24" fill="none" style="display:none;">
                                        <path d="M12 7C14.76 7 17 9.24 17 12C17 12.65 16.87 13.26 16.64 13.83L19.56 16.75C21.07 15.49 22.26 13.86 23 12C21.27 7.61 17 4.5 12 4.5C10.6 4.5 9.26 4.75 8 5.2L10.17 7.37C10.74 7.13 11.35 7 12 7ZM2 4.27L4.28 6.55L4.74 7.01C3.08 8.3 1.78 10.02 1 12C2.73 16.39 7 19.5 12 19.5C13.55 19.5 15.03 19.2 16.38 18.66L16.81 19.08L19.73 22L21 20.73L3.27 3L2 4.27ZM12 16.5C9.24 16.5 7 14.26 7 11.5C7 10.73 7.18 9.99 7.49 9.36L9.53 11.4C9.52 11.56 9.5 11.78 9.5 12C9.5 13.38 10.62 14.5 12 14.5C12.22 14.5 12.44 14.48 12.6 14.47L14.64 16.51C14.01 16.82 13.27 17 12.5 17L12 16.5Z" fill="currentColor"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        
                        <div class="password-strength-pmg728" id="password-strength" style="display:none;"></div>
                        
                        <button type=DGA_SUBMIT_TYPE class="profile-btn-primary-pmg728 profile-btn-block-pmg728">
                            <span class="button-text"><?php _e('อัพเดตรหัสผ่าน', DGA_TEXT_DOMAIN); ?></span>
                            <span class="button-loader" style="display:none;">
                                <svg class="profile-spinner-pmg728" width="20" height="20" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            </span>
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Logout Confirmation Modal -->
        <div id="logout-confirm-modal" class="profile-modal-pmg728" role="dialog" aria-labelledby="logout-modal-title" aria-hidden="true">
            <div class="profile-modal-overlay-pmg728"></div>
            <div class="profile-modal-container-pmg728">
                <div class="profile-modal-header-pmg728">
                    <h2 id="logout-modal-title" class="profile-modal-title-pmg728"><?php _e('ยืนยันการออกจากระบบ', DGA_TEXT_DOMAIN); ?></h2>
                    <button type=DGA_BUTTON_TYPE class="profile-modal-close-pmg728" aria-label="<?php esc_attr_e('ปิด', DGA_TEXT_DOMAIN); ?>">&times;</button>
                </div>
                <div class="profile-modal-content-pmg728">
                    <p><?php _e('คุณต้องการออกจากระบบในทุกอุปกรณ์หรือไม่?', DGA_TEXT_DOMAIN); ?></p>
                    <p class="text-muted-pmg728"><?php _e('การออกจากระบบทุกอุปกรณ์จะทำให้คุณต้องเข้าสู่ระบบใหม่ในทุกอุปกรณ์ที่ใช้งาน', DGA_TEXT_DOMAIN); ?></p>
                    <div class="modal-actions-pmg728">
                        <button type=DGA_BUTTON_TYPE id="logout-all-devices" class="profile-btn-primary-pmg728">
                            <?php _e('ออกจากระบบทุกอุปกรณ์', DGA_TEXT_DOMAIN); ?>
                        </button>
                        <button type=DGA_BUTTON_TYPE id="stay-logged-in" class="profile-btn-secondary-pmg728">
                            <?php _e('คงอยู่ในระบบ', DGA_TEXT_DOMAIN); ?>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Toast Notification -->
        <div id="toast-notification" class="profile-toast-pmg728" role="alert" aria-live="polite"></div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('profile_management', 'profile_management_shortcode_pmg728');

/**
 * 5. Handle AJAX profile update
 */
function handle_profile_update_pmg728() {
    // Verify nonce
    check_ajax_referer('profile_management_nonce_pmg728', 'nonce');
    
    if (!is_user_logged_in()) {
        wp_send_json_error(__('กรุณาเข้าสู่ระบบ', DGA_TEXT_DOMAIN));
        return;
    }

    $user_id = get_current_user_id();
    
    // Update user meta
    $first_name = sanitize_text_field($_POST['first_name']);
    $last_name = sanitize_text_field($_POST['last_name']);
    
    update_user_meta($user_id, 'first_name', $first_name);
    update_user_meta($user_id, 'last_name', $last_name);
    
    // Update display name
    $display_name = trim($first_name . ' ' . $last_name);
    if ($display_name) {
        wp_update_user(array(
            'ID' => $user_id,
            'display_name' => $display_name
        ));
    }
    
    // Handle avatar upload
    if (!empty($_FILES['avatar'])) {
        require_once ABSPATH . 'wp-admin/includes/image.php';
        require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
        require_once ABSPATH . 'wp-admin/includes/media.php';
        
        // Add custom upload validation
        $upload_overrides = array(
            'test_form' => false,
            'mimes' => array(
                'jpg|jpeg|jpe' => 'image/jpeg',
                'gif' => 'image/gif',
                'png' => 'image/png',
            )
        );
        
        $attachment_id = media_handle_upload('avatar', 0, array(), $upload_overrides);
        
        if (is_wp_error($attachment_id)) {
            wp_send_json_error(__('อัพโหลดรูปภาพล้มเหลว', DGA_TEXT_DOMAIN) . ': ' . $attachment_id->get_error_message());
            return;
        }
        
        // Delete old avatar if exists
        $old_avatar_id = get_user_meta($user_id, 'custom_avatar_id', true);
        if ($old_avatar_id) {
            wp_delete_attachment($old_avatar_id, true);
        }
        
        // Save new avatar ID
        update_user_meta($user_id, 'custom_avatar_id', $attachment_id);
        
        // Return new avatar URL
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('อัพเดตข้อมูลเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
            'avatar_url' => wp_get_attachment_image_url($attachment_id, 'thumbnail')
        ));
        return;
    }
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('อัพเดตข้อมูลเรียบร้อยแล้ว', DGA_TEXT_DOMAIN)
    ));
}
add_action('wp_ajax_update_profile', 'handle_profile_update_pmg728');

/**
 * 6. Handle password reset
 */
function handle_password_reset_pmg728() {
    check_ajax_referer('profile_management_nonce_pmg728', 'nonce');
    
    if (!is_user_logged_in()) {
        wp_send_json_error(__('กรุณาเข้าสู่ระบบ', DGA_TEXT_DOMAIN));
        return;
    }

    $user_id = get_current_user_id();
    $new_password = $_POST['new_password'];
    
    // Validate password length
    if (strlen($new_password) < 8) {
        wp_send_json_error(__('รหัสผ่านต้องมีอย่างน้อย 8 ตัวอักษร', DGA_TEXT_DOMAIN));
        return;
    }
    
    // Update password
    wp_set_password($new_password, $user_id);
    
    // Handle logout from all devices if requested
    if (isset($_POST['logout_all']) && $_POST['logout_all'] === 'true') {
        // Destroy all sessions for user
        $sessions = WP_Session_Tokens::get_instance($user_id);
        $sessions->destroy_all();
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('อัพเดตรหัสผ่านเรียบร้อยแล้ว กำลังไปยังหน้าแรก...', DGA_TEXT_DOMAIN),
            'redirect' => home_url() // Redirect to site homepage instead of login page
        ));
    } else {
        // Keep current session active
        wp_set_auth_cookie($user_id);
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('อัพเดตรหัสผ่านเรียบร้อยแล้ว', DGA_TEXT_DOMAIN)
        ));
    }
}
add_action('wp_ajax_reset_password', 'handle_password_reset_pmg728');


/******** ฟังก์ชั่นรีเซ้ทรหัสผ่าน ***********/


// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * CloudFlare Turnstile Configuration
 */
define('CF_TURNSTILE_SITE_KEY', '0x4AAAAAABtJFw3MVfxorGEk');
define('CF_TURNSTILE_SECRET_KEY', '0x4AAAAAABtJF1YlmUa5OjqzhEE73CSsqmw');
define('CF_TURNSTILE_VERIFY_URL', 'https://challenges.cloudflare.com/turnstile/v0/siteverify');
define('CF_TURNSTILE_DEBUG', false);

// Option to disable CAPTCHA in development
define('CF_TURNSTILE_ENABLED', true); // Set to false to disable CAPTCHA

/**
 * Register scripts and styles
 */
function dga_password_reset_scripts_zyx385() {
    // Register CloudFlare Turnstile script only if enabled
    if (CF_TURNSTILE_ENABLED) {
        wp_register_script(
            'cf-turnstile',
            'https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit',
            array(),
            null,
            true
        );
    }
    
    // Register JavaScript
    wp_register_script(
        'dga-repass-cf',
        get_stylesheet_directory_uri() . '/js/dga-repass-cf.js',
        array(),
        '5.0.0',
        true
    );
    
    // Register CSS
    wp_register_style(
        'dga-repass-cf',
        get_stylesheet_directory_uri() . '/css/dga-repass-cf.css',
        array(),
        '5.0.0'
    );
    
    // Localize script
    wp_localize_script('dga-repass-cf', 'dgaRepassCF', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_password_reset_cf_nonce'),
        'siteKey' => CF_TURNSTILE_SITE_KEY,
        'captchaEnabled' => CF_TURNSTILE_ENABLED,
        'debug' => CF_TURNSTILE_DEBUG,
        'messages' => array(
            'email_sent' => __('ระบบได้ส่งลิงก์รีเซ็ทรหัสผ่านไปยังอีเมลของคุณแล้ว กรุณาตรวจสอบอีเมล (รวมถึงโฟลเดอร์ Spam)', DGA_TEXT_DOMAIN),
            'email_not_found' => __('ไม่พบอีเมลนี้ในระบบ กรุณาตรวจสอบอีกครั้ง', DGA_TEXT_DOMAIN),
            'password_reset_success' => __('ตั้งค่ารหัสผ่านใหม่สำเร็จ กำลังเข้าสู่ระบบ...', DGA_TEXT_DOMAIN),
            'passwords_not_match' => __('รหัสผ่านไม่ตรงกัน กรุณาลองใหม่', DGA_TEXT_DOMAIN),
            'invalid_key' => __('ลิงก์รีเซ็ทรหัสผ่านไม่ถูกต้องหรือหมดอายุแล้ว', DGA_TEXT_DOMAIN),
            'error_occurred' => __('เกิดข้อผิดพลาด กรุณาลองใหม่', DGA_TEXT_DOMAIN),
            'captcha_required' => __('กรุณายืนยันว่าคุณไม่ใช่บอท', DGA_TEXT_DOMAIN),
            'captcha_failed' => __('การยืนยัน CAPTCHA ล้มเหลว กรุณาลองใหม่', DGA_TEXT_DOMAIN),
            'rate_limit' => __('คุณส่งคำขอบ่อยเกินไป กรุณารอสักครู่แล้วลองใหม่', DGA_TEXT_DOMAIN)
        )
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_password_reset_scripts_zyx385');

/**
 * Main shortcode function
 * Usage: [dga_password_reset_cf]
 */
function dga_password_reset_shortcode_abc123($atts) {
    // Enqueue scripts and styles
    wp_enqueue_style('dga-repass-cf');
    if (CF_TURNSTILE_ENABLED) {
        wp_enqueue_script('cf-turnstile');
    }
    wp_enqueue_script('dga-repass-cf');
    
    // Check URL parameters
    $action = isset($_GET['action']) ? sanitize_text_field($_GET['action']) : '';
    $key = isset($_GET['key']) ? sanitize_text_field($_GET['key']) : '';
    $login = isset($_GET['login']) ? sanitize_text_field($_GET['login']) : '';
    
    ob_start();
    
    if ($action === 'rp' && $key && $login) {
        dga_display_reset_password_form_def456($key, $login);
    } else {
        dga_display_request_reset_form_ghi789();
    }
    
    return ob_get_clean();
}
add_shortcode('dga_password_reset_cf', 'dga_password_reset_shortcode_abc123');

/**
 * Display password reset request form
 */
function dga_display_request_reset_form_ghi789() {
    ?>
    <div class="dga-reset-container-cfz357">
        <div class="dga-reset-box-cfz357">
            <div class="dga-reset-icon-cfz357">
                <svg width="60" height="60" viewBox="0 0 24 24" fill="none">
                    <path d="M18 8H20C20.55 8 21 8.45 21 9V21C21 21.55 20.55 22 20 22H4C3.45 22 3 21.55 3 21V9C3 8.45 3.45 8 4 8H6V7C6 4.79 7.79 3 10 3H14C16.21 3 18 4.79 18 7V8Z" fill="currentColor" opacity="0.2"/>
                    <path d="M12 2C9.79 2 8 3.79 8 6V8H6C4.9 8 4 8.9 4 10V20C4 21.1 4.9 22 6 22H18C19.1 22 20 21.1 20 20V10C20 8.9 19.1 8 18 8H16V6C16 3.79 14.21 2 12 2ZM12 4C13.1 4 14 4.9 14 6V8H10V6C10 4.9 10.9 4 12 4ZM12 17C10.9 17 10 16.1 10 15C10 13.9 10.9 13 12 13C13.1 13 14 13.9 14 15C14 16.1 13.1 17 12 17Z" fill="currentColor"/>
                </svg>
            </div>
            <h2><?php _e('รีเซ็ทรหัสผ่าน', DGA_TEXT_DOMAIN); ?></h2>
            <p class="dga-subtitle-cfz357"><?php _e('กรอกอีเมลที่คุณใช้ลงทะเบียน เราจะส่งลิงก์รีเซ็ทรหัสผ่านให้คุณ', DGA_TEXT_DOMAIN); ?></p>
            
            <form id="dga-reset-form-cf" class="dga-form-cfz357">
                <div class="dga-form-group-cfz357">
                    <label for="user_email"><?php _e('อีเมล', DGA_TEXT_DOMAIN); ?></label>
                    <input type="email" 
                           id="user_email" 
                           name="user_email" 
                           required 
                           autocomplete="email"
                           placeholder="<?php esc_attr_e('your@email.com', DGA_TEXT_DOMAIN); ?>">
                </div>
                
                <?php if (CF_TURNSTILE_ENABLED): ?>
                <!-- CloudFlare Turnstile CAPTCHA -->
                <div class="dga-captcha-container-cfz357">
                    <div id="cf-turnstile-widget"></div>
                    <div id="captcha-error" style="display:none; margin-top:10px; padding:10px; background:#fef2f2; border:1px solid #fecaca; border-radius:6px; color:#dc2626; font-size:14px;">
                        ⚠️ ไม่สามารถโหลด CAPTCHA ได้ กรุณา <a href="#" onclick="location.reload(); return false;" style="color:#dc2626; text-decoration:underline;">โหลดหน้าใหม่</a>
                    </div>
                </div>
                <?php endif; ?>
                
                <button type=DGA_SUBMIT_TYPE class="dga-btn-primary-cfz357 dga-btn-block-cfz357" id="reset-submit-btn" <?php echo CF_TURNSTILE_ENABLED ? 'disabled' : ''; ?>>
                    <span class="button-text"><?php _e('ส่งลิงก์รีเซ็ทรหัสผ่าน', DGA_TEXT_DOMAIN); ?></span>
                    <span class="button-loader" style="display:none;">
                        <svg class="dga-spinner-cfz357" width="20" height="20" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </button>
                
                <input type="hidden" id="cf-turnstile-response" name="cf-turnstile-response" value="">
            </form>
            
            <div class="dga-message-cfz357" id="reset-message" style="display:none;" role="alert"></div>
            
            <?php if (CF_TURNSTILE_ENABLED): ?>
            <div class="dga-security-notice-cfz357">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 1L3 5V11C3 16.55 6.84 21.74 12 23C17.16 21.74 21 16.55 21 11V5L12 1Z" opacity="0.3"/>
                </svg>
                <span><?php _e('ป้องกันโดย CloudFlare', DGA_TEXT_DOMAIN); ?></span>
            </div>
            <?php endif; ?>
        </div>
    </div>
    
    <?php if (CF_TURNSTILE_ENABLED): ?>
    <!-- Turnstile initialization with error handling -->
    <script>
        (function() {
            let turnstileToken = null;
            let widgetId = null;
            
            // Global callback functions
            window.dgaTurnstileCallback = function(token) {
                console.log('[Turnstile] Token received');
                turnstileToken = token;
                document.getElementById('cf-turnstile-response').value = token;
                document.getElementById('reset-submit-btn').disabled = false;
                window.turnstileToken = token;
            };
            
            window.dgaTurnstileError = function() {
                console.error('[Turnstile] Error occurred');
                document.getElementById('reset-submit-btn').disabled = false; // Enable button anyway
                document.getElementById('captcha-error').style.display = 'block';
            };
            
            window.dgaTurnstileExpired = function() {
                console.log('[Turnstile] Token expired');
                turnstileToken = null;
                document.getElementById('cf-turnstile-response').value = '';
                document.getElementById('reset-submit-btn').disabled = true;
                window.turnstileToken = null;
            };
            
            // Initialize Turnstile with error handling
            function initTurnstile() {
                if (!window.turnstile) {
                    console.log('[Turnstile] API not loaded yet');
                    return;
                }
                
                const container = document.getElementById('cf-turnstile-widget');
                if (!container || widgetId !== null) return;
                
                try {
                    widgetId = window.turnstile.render('#cf-turnstile-widget', {
                        sitekey: '<?php echo esc_js(CF_TURNSTILE_SITE_KEY); ?>',
                        callback: window.dgaTurnstileCallback,
                        'error-callback': window.dgaTurnstileError,
                        'expired-callback': window.dgaTurnstileExpired,
                        'refresh-expired': 'auto',
                        theme: 'light',
                        size: 'normal'
                    });
                    console.log('[Turnstile] Initialized successfully');
                } catch(e) {
                    console.error('[Turnstile] Failed to initialize:', e);
                    // Enable form without CAPTCHA
                    document.getElementById('reset-submit-btn').disabled = false;
                    document.getElementById('captcha-error').style.display = 'block';
                }
            }
            
            // Wait for Turnstile API to load
            if (window.turnstile) {
                initTurnstile();
            } else {
                window.addEventListener('DOMContentLoaded', initTurnstileWatcher);
                
                function initTurnstileWatcher() {
                    let attempts = 0;
                    const maxAttempts = 50; // 5 seconds
                    
                    const checkInterval = setInterval(function() {
                        if (handleTurnstileCheck(checkInterval, ++attempts, maxAttempts)) {
                            clearInterval(checkInterval);
                        }
                    }, 100);
                }
                
                function handleTurnstileCheck(checkInterval, attempts, maxAttempts) {
                    if (window.turnstile) {
                        initTurnstile();
                        return true;
                    }
                    
                    if (attempts >= maxAttempts) {
                        handleTurnstileTimeout();
                        return true;
                    }
                    
                    return false;
                }
                
                function handleTurnstileTimeout() {
                    console.error('[Turnstile] Failed to load after 5 seconds');
                    document.getElementById('reset-submit-btn').disabled = false;
                    document.getElementById('captcha-error').style.display = 'block';
                }
            }
        })();
    </script>
    <?php endif; ?>
    <?php
}

/**
 * Display new password form
 */
function dga_display_reset_password_form_def456($key, $login) {
    $user = check_password_reset_key($key, $login);
    
    if (is_wp_error($user)) {
        ?>
        <div class="dga-reset-container-cfz357">
            <div class="dga-reset-box-cfz357">
                <div class="dga-reset-icon-error-cfz357">
                    <svg width="60" height="60" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z" fill="currentColor" opacity="0.3"/>
                        <path d="M11 15H13V17H11V15ZM11 7H13V13H11V7Z" fill="currentColor"/>
                    </svg>
                </div>
                <h2><?php _e('ลิงก์ไม่ถูกต้อง', DGA_TEXT_DOMAIN); ?></h2>
                <p><?php _e('ลิงก์รีเซ็ทรหัสผ่านไม่ถูกต้องหรือหมดอายุแล้ว', DGA_TEXT_DOMAIN); ?></p>
                <a href="<?php echo esc_url(home_url('/reset-password')); ?>" class="dga-btn-primary-cfz357">
                    <?php _e('ขอลิงก์ใหม่', DGA_TEXT_DOMAIN); ?>
                </a>
            </div>
        </div>
        <?php
    } else {
        ?>
        <div class="dga-reset-container-cfz357">
            <div class="dga-reset-box-cfz357">
                <div class="dga-reset-icon-cfz357">
                    <svg width="60" height="60" viewBox="0 0 24 24" fill="none">
                        <path d="M12 1L3 5V11C3 16.55 6.84 21.74 12 23C17.16 21.74 21 16.55 21 11V5L12 1Z" fill="currentColor" opacity="0.2"/>
                        <path d="M12 1L3 5V11C3 16.55 6.84 21.74 12 23C17.16 21.74 21 16.55 21 11V5L12 1ZM12 11.99H19C18.47 16.11 15.72 19.78 12 20.93V12H5V6.3L12 3.19V11.99Z" fill="currentColor"/>
                    </svg>
                </div>
                <h2><?php _e('ตั้งค่ารหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?></h2>
                <form id="dga-new-password-form-cf" class="dga-form-cfz357" autocomplete="off">
                    <input type="hidden" name="key" value="<?php echo esc_attr($key); ?>">
                    <input type="hidden" name="login" value="<?php echo esc_attr($login); ?>">
                    
                    <div class="dga-form-group-cfz357">
                        <label for="new_password"><?php _e('รหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?></label>
                        <div class="dga-password-wrapper-cfz357">
                            <input type="password" 
                                   id="new_password" 
                                   name="new_password" 
                                   required 
                                   autocomplete="new-password"
                                   placeholder="<?php esc_attr_e('กรอกรหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?>">
                            <button type=DGA_BUTTON_TYPE class="dga-toggle-password-cfz357" aria-label="<?php esc_attr_e('แสดงรหัสผ่าน', DGA_TEXT_DOMAIN); ?>">
                                <svg class="eye-open" width="20" height="20" viewBox="0 0 24 24" fill="none" style="display:none;">
                                    <path d="M12 5C7 5 2.73 8.11 1 12.5C2.73 16.89 7 20 12 20C17 20 21.27 16.89 23 12.5C21.27 8.11 17 5 12 5ZM12 17.5C9.24 17.5 7 15.26 7 12.5C7 9.74 9.24 7.5 12 7.5C14.76 7.5 17 9.74 17 12.5C17 15.26 14.76 17.5 12 17.5ZM12 9.5C10.34 9.5 9 10.84 9 12.5C9 14.16 10.34 15.5 12 15.5C13.66 15.5 15 14.16 15 12.5C15 10.84 13.66 9.5 12 9.5Z" fill="currentColor"/>
                                </svg>
                                <svg class="eye-closed" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="M12 7C14.76 7 17 9.24 17 12C17 12.65 16.87 13.26 16.64 13.83L19.56 16.75C21.07 15.49 22.26 13.86 23 12C21.27 7.61 17 4.5 12 4.5C10.6 4.5 9.26 4.75 8 5.2L10.17 7.37C10.74 7.13 11.35 7 12 7ZM2 4.27L4.28 6.55L4.74 7.01C3.08 8.3 1.78 10.02 1 12C2.73 16.39 7 19.5 12 19.5C13.55 19.5 15.03 19.2 16.38 18.66L16.81 19.08L19.73 22L21 20.73L3.27 3L2 4.27ZM12 16.5C9.24 16.5 7 14.26 7 11.5C7 10.73 7.18 9.99 7.49 9.36L9.53 11.4C9.52 11.56 9.5 11.78 9.5 12C9.5 13.38 10.62 14.5 12 14.5C12.22 14.5 12.44 14.48 12.6 14.47L14.64 16.51C14.01 16.82 13.27 17 12.5 17L12 16.5Z" fill="currentColor"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                    
                    <div class="dga-form-group-cfz357">
                        <label for="confirm_password"><?php _e('ยืนยันรหัสผ่าน', DGA_TEXT_DOMAIN); ?></label>
                        <div class="dga-password-wrapper-cfz357">
                            <input type="password" 
                                   id="confirm_password" 
                                   name="confirm_password" 
                                   required
                                   autocomplete="new-password"
                                   placeholder="<?php esc_attr_e('กรอกรหัสผ่านอีกครั้ง', DGA_TEXT_DOMAIN); ?>">
                            <button type=DGA_BUTTON_TYPE class="dga-toggle-password-cfz357" aria-label="<?php esc_attr_e('แสดงรหัสผ่าน', DGA_TEXT_DOMAIN); ?>">
                                <svg class="eye-open" width="20" height="20" viewBox="0 0 24 24" fill="none">
                                    <path d="M12 5C7 5 2.73 8.11 1 12.5C2.73 16.89 7 20 12 20C17 20 21.27 16.89 23 12.5C21.27 8.11 17 5 12 5ZM12 17.5C9.24 17.5 7 15.26 7 12.5C7 9.74 9.24 7.5 12 7.5C14.76 7.5 17 9.74 17 12.5C17 15.26 14.76 17.5 12 17.5ZM12 9.5C10.34 9.5 9 10.84 9 12.5C9 14.16 10.34 15.5 12 15.5C13.66 15.5 15 14.16 15 12.5C15 10.84 13.66 9.5 12 9.5Z" fill="currentColor"/>
                                </svg>
                                <svg class="eye-closed" width="20" height="20" viewBox="0 0 24 24" fill="none" style="display:none;">
                                    <path d="M12 7C14.76 7 17 9.24 17 12C17 12.65 16.87 13.26 16.64 13.83L19.56 16.75C21.07 15.49 22.26 13.86 23 12C21.27 7.61 17 4.5 12 4.5C10.6 4.5 9.26 4.75 8 5.2L10.17 7.37C10.74 7.13 11.35 7 12 7ZM2 4.27L4.28 6.55L4.74 7.01C3.08 8.3 1.78 10.02 1 12C2.73 16.39 7 19.5 12 19.5C13.55 19.5 15.03 19.2 16.38 18.66L16.81 19.08L19.73 22L21 20.73L3.27 3L2 4.27ZM12 16.5C9.24 16.5 7 14.26 7 11.5C7 10.73 7.18 9.99 7.49 9.36L9.53 11.4C9.52 11.56 9.5 11.78 9.5 12C9.5 13.38 10.62 14.5 12 14.5C12.22 14.5 12.44 14.48 12.6 14.47L14.64 16.51C14.01 16.82 13.27 17 12.5 17L12 16.5Z" fill="currentColor"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                    
                    <div class="dga-password-strength-cfz357" id="password-strength" style="display:none;" role="status" aria-live="polite"></div>
                    
                    <button type=DGA_SUBMIT_TYPE class="dga-btn-primary-cfz357 dga-btn-block-cfz357">
                        <span class="button-text"><?php _e('ตั้งค่ารหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?></span>
                        <span class="button-loader" style="display:none;">
                            <svg class="dga-spinner-cfz357" width="20" height="20" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                </form>
                
                <div class="dga-message-cfz357" id="reset-message" style="display:none;" role="alert"></div>
            </div>
        </div>
        <?php
    }
}

/**
 * Verify CloudFlare Turnstile
 */
function dga_verify_turnstile_jkl012($token) {
    // Skip verification if CAPTCHA is disabled
    if (!CF_TURNSTILE_ENABLED) {
        return true;
    }
    
    if (empty($token)) {
        error_log('Turnstile: No token provided');
        return 'No token provided';
    }
    
    $data = array(
        'secret' => CF_TURNSTILE_SECRET_KEY,
        'response' => $token,
        'remoteip' => $_SERVER['REMOTE_ADDR']
    );
    
    $response = wp_remote_post(CF_TURNSTILE_VERIFY_URL, array(
        'body' => $data,
        'timeout' => 10,
        'sslverify' => true
    ));
    
    if (is_wp_error($response)) {
        error_log('Turnstile verification error: ' . $response->get_error_message());
        return 'Connection error: ' . $response->get_error_message();
    }
    
    $body = wp_remote_retrieve_body($response);
    $result = json_decode($body, true);
    
    if (CF_TURNSTILE_DEBUG) {
        error_log('Turnstile response: ' . print_r($result, true));
    }
    
    if (isset($result[DGA_SUCCESS_STATUS]) && $result[DGA_SUCCESS_STATUS] === true) {
        return true;
    }
    
    $error_codes = isset($result['error-codes']) ? implode(', ', $result['error-codes']) : 'Unknown error';
    error_log('Turnstile failed with errors: ' . $error_codes);
    
    return $error_codes;
}

/**
 * Rate limiting function
 */
function dga_check_rate_limit_mno345($identifier, $max_attempts = 5, $window = 3600) {
    $transient_key = 'dga_reset_attempts_' . md5($identifier);
    $attempts = get_transient($transient_key);
    
    if ($attempts === false) {
        set_transient($transient_key, 1, $window);
        return true;
    }
    
    if ($attempts >= $max_attempts) {
        return false;
    }
    
    set_transient($transient_key, $attempts + 1, $window);
    return true;
}

/**
 * AJAX handler for password reset request
 */
function dga_handle_password_reset_request_pqr678() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_password_reset_cf_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ข้อมูลไม่ถูกต้อง', DGA_TEXT_DOMAIN)));
    }
    
    // Get and verify CAPTCHA token if enabled
    if (CF_TURNSTILE_ENABLED) {
        $captcha_token = isset($_POST['cf_turnstile_response']) ? sanitize_text_field($_POST['cf_turnstile_response']) : '';
        
        if (empty($captcha_token)) {
            error_log('Password reset: No CAPTCHA token received');
            // Allow bypass if CAPTCHA fails to load
            if (!isset($_POST['bypass_captcha']) || $_POST['bypass_captcha'] !== 'true') {
                wp_send_json_error(array(DGA_MESSAGE_KEY => __('กรุณายืนยัน CAPTCHA', DGA_TEXT_DOMAIN)));
            }
        } else {
            // Verify CAPTCHA
            $verification_result = dga_verify_turnstile_jkl012($captcha_token);
            
            if ($verification_result !== true) {
                $error_message = is_string($verification_result) ? 
                    'CAPTCHA verification failed: ' . $verification_result : 
                    'CAPTCHA verification failed';
                
                error_log($error_message);
                wp_send_json_error(array(DGA_MESSAGE_KEY => __('การยืนยัน CAPTCHA ล้มเหลว กรุณาลองใหม่', DGA_TEXT_DOMAIN)));
            }
        }
    }
    
    $email = sanitize_email($_POST['email']);
    
    // Check rate limiting
    if (!dga_check_rate_limit_mno345($email)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('คุณส่งคำขอบ่อยเกินไป กรุณารอ 1 ชั่วโมงแล้วลองใหม่', DGA_TEXT_DOMAIN)));
    }
    
    if (!is_email($email)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('รูปแบบอีเมลไม่ถูกต้อง', DGA_TEXT_DOMAIN)));
    }
    
    $user = get_user_by('email', $email);
    
    if (!$user) {
        // Don't reveal if email exists
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('หากอีเมลนี้มีอยู่ในระบบ เราจะส่งลิงก์รีเซ็ทรหัสผ่านให้คุณ', DGA_TEXT_DOMAIN)
        ));
    }
    
    // Generate password reset key
    $key = get_password_reset_key($user);
    
    if (is_wp_error($key)) {
        error_log('Failed to generate password reset key for user: ' . $user->ID);
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาด กรุณาลองใหม่', DGA_TEXT_DOMAIN)));
    }
    
    // Create reset link
    $reset_link = home_url('/reset-password') . '?action=rp&key=' . $key . '&login=' . rawurlencode($user->user_login);
    
    // Send email
    $email_sent = dga_send_password_reset_email_stu901($user, $reset_link);
    
    if ($email_sent) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('ระบบได้ส่งลิงก์รีเซ็ทรหัสผ่านไปยังอีเมลของคุณแล้ว กรุณาตรวจสอบอีเมล', DGA_TEXT_DOMAIN)
        ));
    } else {
        error_log('Failed to send password reset email to: ' . $user->user_email);
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ไม่สามารถส่งอีเมลได้ในขณะนี้ กรุณาลองใหม่ภายหลัง', DGA_TEXT_DOMAIN)));
    }
}
add_action('wp_ajax_dga_password_reset_request_cf', 'dga_handle_password_reset_request_pqr678');
add_action('wp_ajax_nopriv_dga_password_reset_request_cf', 'dga_handle_password_reset_request_pqr678');

/**
 * Send password reset email
 */
function dga_send_password_reset_email_stu901($user, $reset_link) {
    $to = $user->user_email;
    $subject = sprintf(__('[%s] รีเซ็ทรหัสผ่าน', DGA_TEXT_DOMAIN), get_bloginfo('name'));
    
    $message = '
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 20px auto; background: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <div style="background: linear-gradient(135deg, #2563eb 0%, #3b82f6 100%); padding: 30px; text-align: center;">
                <h1 style="color: #ffffff; margin: 0; font-size: 24px;">รีเซ็ทรหัสผ่าน</h1>
            </div>
            <div style="padding: 30px;">
                <p style="font-size: 16px; margin-bottom: 20px;">สวัสดี ' . esc_html($user->display_name) . ',</p>
                <p style="font-size: 14px; margin-bottom: 20px;">เราได้รับคำขอรีเซ็ทรหัสผ่านสำหรับบัญชีของคุณ คลิกปุ่มด้านล่างเพื่อตั้งค่ารหัสผ่านใหม่:</p>
                <div style="text-align: center; margin: 30px 0;">
                    <a href="' . esc_url($reset_link) . '" style="display: inline-block; padding: 12px 30px; background: #2563eb; color: #ffffff; text-decoration: none; border-radius: 6px; font-weight: bold;">ตั้งค่ารหัสผ่านใหม่</a>
                </div>
                <p style="font-size: 12px; color: #666; margin-top: 20px;">หรือคัดลอกลิงก์นี้ไปวางในเบราว์เซอร์:</p>
                <p style="font-size: 12px; color: #2563eb; word-break: break-all;">' . esc_html($reset_link) . '</p>
                <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
                <p style="font-size: 12px; color: #999;">ลิงก์นี้จะหมดอายุภายใน 24 ชั่วโมง หากคุณไม่ได้ขอรีเซ็ทรหัสผ่าน กรุณาเพิกเฉยอีเมลนี้</p>
            </div>
        </div>
    </body>
    </html>';
    
    $headers = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . get_bloginfo('name') . ' <' . get_option('admin_email') . '>'
    );
    
    return wp_mail($to, $subject, $message, $headers);
}

/**
 * AJAX handler for setting new password
 */
function dga_handle_set_new_password_vwx234() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_password_reset_cf_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ข้อมูลไม่ถูกต้อง', DGA_TEXT_DOMAIN)));
    }
    
    $key = sanitize_text_field($_POST['key']);
    $login = sanitize_text_field($_POST['login']);
    $password = $_POST['password'];
    
    // Validate password strength
    if (strlen($password) < 8) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('รหัสผ่านต้องมีอย่างน้อย 8 ตัวอักษร', DGA_TEXT_DOMAIN)));
    }
    
    // Check password reset key
    $user = check_password_reset_key($key, $login);
    
    if (is_wp_error($user)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ลิงก์รีเซ็ทรหัสผ่านไม่ถูกต้องหรือหมดอายุแล้ว', DGA_TEXT_DOMAIN)));
    }
    
    // Reset password
    reset_password($user, $password);
    
    // Auto login
    wp_clear_auth_cookie();
    wp_set_current_user($user->ID);
    wp_set_auth_cookie($user->ID, true);
    
    // Get redirect URL
    $redirect_url = apply_filters('dga_password_reset_redirect', home_url(), $user);
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('ตั้งค่ารหัสผ่านใหม่สำเร็จ กำลังเข้าสู่ระบบ...', DGA_TEXT_DOMAIN),
        'redirect' => $redirect_url
    ));
}
add_action('wp_ajax_dga_set_new_password_cf', 'dga_handle_set_new_password_vwx234');
add_action('wp_ajax_nopriv_dga_set_new_password_cf', 'dga_handle_set_new_password_vwx234');





/***** MainMenu ********/

// Custom Walker สำหรับแสดงเมนูแบบ dropdown
class Custom_Menu_Walker_mnu738 extends Walker_Nav_Menu {
    
    // เริ่มต้น sub-menu
    function start_lvl(&$output, $depth = 0, $args = null) {
        $indent = str_repeat("\t", $depth);
        $output .= "\n$indent<ul class=\"sub-menu-mnu738 depth-$depth\">\n";
    }
    
    // สร้าง menu item
    function start_el(&$output, $item, $depth = 0, $args = null, $id = 0) {
        $indent = str_repeat("\t", $depth);
        
        // จัดการ CSS classes
        $classes = empty($item->classes) ? array() : (array) $item->classes;
        $classes[] = 'menu-item-' . $item->ID;
        
        // เพิ่ม class สำหรับ item ที่มี children
        if (in_array('menu-item-has-children', $classes)) {
            $classes[] = 'has-children-mnu738';
        }
        
        // Apply filters และสร้าง class string
        $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $class_names = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';
        
        // สร้าง ID
        $id = apply_filters('nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args, $depth);
        $id = $id ? ' id="' . esc_attr($id) . '"' : '';
        
        // เริ่มต้น list item
        $output .= $indent . '<li' . $id . $class_names .'>';
        
        // จัดการ attributes ของ link
        $atts = array();
        $atts[DGA_TITLE_FIELD]  = !empty($item->attr_title) ? $item->attr_title : '';
        $atts['target'] = !empty($item->target) ? $item->target : '';
        $atts['rel']    = !empty($item->xfn) ? $item->xfn : '';
        $atts['href']   = !empty($item->url) ? $item->url : '';
        
        // Apply filters สำหรับ attributes
        $atts = apply_filters('nav_menu_link_attributes', $atts, $item, $args, $depth);
        
        // สร้าง attributes string
        $attributes = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value = ('href' === $attr) ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }
        
        // สร้าง link output
        $item_output = $args->before;
        $item_output .= '<a'. $attributes .'>';
        $item_output .= $args->link_before . apply_filters('the_title', $item->title, $item->ID) . $args->link_after;
        
        // เพิ่ม dropdown indicator สำหรับ item ที่มี children
        if (in_array('menu-item-has-children', $classes)) {
            $item_output .= ' <span class="dropdown-indicator-mnu738" aria-hidden="true"><i class="arrow-mnu738"></i></span>';
        }
        
        $item_output .= '</a>';
        $item_output .= $args->after;
        
        // Apply final filter
        $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
}

// Shortcode function สำหรับแสดง MainMenu
function custom_main_menu_shortcode_mnu738($atts) {
    // Extract attributes
    $atts = shortcode_atts(array(
        'menu' => 'MainMenu', // Default menu name
        'container_class' => 'custom-menu-container-mnu738'
    ), $atts, 'main_menu');
    
    // ตรวจสอบว่ามีเมนูอยู่หรือไม่
    if (!wp_get_nav_menu_object($atts['menu'])) {
        return '<p>' . sprintf(
            __('Menu "%s" not found. Please create it in WordPress admin.', DGA_TEXT_DOMAIN),
            esc_html($atts['menu'])
        ) . '</p>';
    }
    
    // เริ่ม output buffer
    ob_start();
    
    // แสดงเมนู
    wp_nav_menu(array(
        'menu'           => $atts['menu'],
        'menu_class'     => 'custom-main-menu-mnu738',
        'container'      => 'nav',
        'container_class'=> $atts['container_class'],
        'depth'          => 0, // แสดงทุกระดับ
        'walker'         => new Custom_Menu_Walker_mnu738(),
        'fallback_cb'    => false
    ));
    
    // Return output
    return ob_get_clean();
}
add_shortcode('main_menu', 'custom_main_menu_shortcode_mnu738');

// ลงทะเบียน CSS และ JS
function custom_menu_scripts_mnu738() {
    // ใช้ version จาก theme
    $theme_version = wp_get_theme()->get('Version');
    
    // Enqueue CSS
    wp_enqueue_style(
        'custom-menu-styles-mnu738',
        get_stylesheet_directory_uri() . '/css/custom-menu-mnu738.css',
        array(),
        $theme_version
    );
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'custom-menu-script-mnu738',
        get_stylesheet_directory_uri() . '/js/custom-menu-mnu738.js',
        array(DGA_JQUERY_HANDLE),
        $theme_version,
        true
    );
    
    // Localize script for AJAX (if needed in future)
    wp_localize_script('custom-menu-script-mnu738', 'customMenu', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('custom-menu-nonce')
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'custom_menu_scripts_mnu738');



/**** ปุ่มออกจากระบบ ******/

function enqueue_sign_out_css() {
    // Get the stylesheet directory URI of the child theme
    $theme_uri = get_stylesheet_directory_uri();
    // Enqueue the custom CSS file
    wp_enqueue_style( 'sign-out-style', $theme_uri . '/css/sign-out.css', array(), null );
}
add_action( DGA_ENQUEUE_SCRIPTS_HOOK, 'enqueue_sign_out_css' );

function logout_button_shortcode() {
    // Check if the user is logged in
    if ( is_user_logged_in() ) {
        // Get the logout URL that redirects to the site URL
        $logout_url = wp_logout_url( site_url() );
        // Create a button link to the logout URL with the CSS class
        return '<a href="' . esc_url( $logout_url ) . '" class="sign-out-button">' . esc_html__( DGA_LOGOUT_TEXT_TH, 'your-textdomain' ) . '</a>';
    } else {
        // Optionally, return something or nothing if not logged in
        return '';
    }
}
add_shortcode( 'logout_button', 'logout_button_shortcode' );



/********* ฟอร์มรับเรื่องร้องเรียน V2.0 - WCAG 2.1 AAA Compliant ********/

// ตั้งค่า constants สำหรับระบบ
define('CPM_BOOTSTRAP_VERSION', '5.2.3');
define('CPM_DATATABLES_VERSION', '1.13.1');
define('CPM_FONTAWESOME_VERSION', '6.2.1');

// Enqueue necessary scripts and styles
function complaint_form_enqueue_scripts() {
    global $post;
    
    // เช็คเฉพาะเมื่อมี shortcode [complaint_form] อยู่ในเนื้อหา
    if ($post && has_shortcode($post->post_content, 'complaint_form')) {
        
        // Enqueue CSS
        wp_enqueue_style(
            'complaint-form-style',
            get_stylesheet_directory_uri() . '/css/complaint-form.css',
            array(),
            '2.0.0'
        );
        
        // Enqueue JS
        wp_enqueue_script(
            'complaint-form-script',
            get_stylesheet_directory_uri() . '/js/complaint-form.js',
            array(DGA_JQUERY_HANDLE),
            '2.0.0',
            true
        );

        // ส่งค่าตัวแปรต่างๆ ไปยัง JavaScript
        wp_localize_script(
            'complaint-form-script',
            'complaintFormAjax',
            array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('complaint_form_nonce'),
                'success_message' => 'ขอบคุณสำหรับการแจ้งเรื่องร้องเรียน เราได้รับข้อมูลเรียบร้อยแล้ว',
                'error_message' => 'เกิดข้อผิดพลาดในการส่งข้อมูล กรุณาลองใหม่อีกครั้ง',
                'aria_labels' => array(
                    'form_loading' => 'กำลังโหลดแบบฟอร์ม',
                    'submitting' => 'กำลังส่งข้อมูล',
                    DGA_SUCCESS_STATUS => 'ส่งข้อมูลสำเร็จ',
                    DGA_ERROR_STATUS => DGA_ERROR_MESSAGE_TH,
                    'close_modal' => 'ปิดหน้าต่างข้อความ'
                )
            )
        );
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'complaint_form_enqueue_scripts');

// Create shortcode
function complaint_form_shortcode() {
    ob_start();
    ?>
    <!-- Skip Link for Accessibility -->
    <a href="#complaint-form" class="skip-link screen-reader-text">ข้ามไปยังแบบฟอร์มร้องเรียน</a>
    
    <div class="complaint-form-container" role="region" aria-label="แบบฟอร์มรับเรื่องร้องเรียน">
        <form id="complaint-form" class="complaint-form" novalidate aria-label="แบบฟอร์มรับเรื่องร้องเรียน">
            <h2 id="form-heading">แบบฟอร์มรับเรื่องร้องเรียน</h2>
            
            <!-- Live Region for Status Updates -->
            <div role="status" aria-live="polite" aria-atomic="true" class="screen-reader-text" id="form-status"></div>
            
            <!-- Alert Region for Errors -->
            <div role="alert" aria-live="assertive" aria-atomic="true" id="form-alert" class="screen-reader-text"></div>
            
            <div id="form-message" class="message" style="display: none;" role="alert" aria-live="polite"></div>
            
            <fieldset>
                <legend class="screen-reader-text">ข้อมูลเรื่องร้องเรียน</legend>
                
                <div class="form-group">
                    <label for="type" id="type-label">
                        ประเภทเรื่องร้องเรียน 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <select 
                        id="type" 
                        name="type" 
                        required 
                        aria-required="true"
                        aria-labelledby="type-label"
                        aria-describedby="type-error type-hint"
                    >
                        <option value="">เลือกประเภทเรื่องร้องเรียน</option>
                        <option value="corruption">การทุจริตประพฤติมิชอบ</option>
                        <option value="negligence">การละเลยการปฏิบัติหน้าที่</option>
                        <option value="misconduct">การปฏิบัติหน้าที่โดยมิชอบ</option>
                        <option value="rights">การละเมิดสิทธิ</option>
                        <option value="other">อื่นๆ</option>
                    </select>
                    <span id="type-hint" class="field-hint">กรุณาเลือกประเภทที่ตรงกับเรื่องร้องเรียนของท่าน</span>
                    <span id="type-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group type-other-field" style="display: none;" aria-hidden="true">
                    <label for="typeOther" id="typeOther-label">
                        ระบุประเภทเรื่องร้องเรียนอื่นๆ 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <input 
                        type="text" 
                        id="typeOther" 
                        name="typeOther"
                        aria-required="false"
                        aria-labelledby="typeOther-label"
                        aria-describedby="typeOther-error"
                    >
                    <span id="typeOther-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="department" id="department-label">
                        หน่วยงานที่ถูกร้องเรียน 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <input 
                        type="text" 
                        id="department" 
                        name="department" 
                        required
                        aria-required="true"
                        aria-labelledby="department-label"
                        aria-describedby="department-error department-hint"
                    >
                    <span id="department-hint" class="field-hint">ระบุชื่อหน่วยงานที่ท่านต้องการร้องเรียน</span>
                    <span id="department-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="details" id="details-label">
                        รายละเอียด 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <textarea 
                        id="details" 
                        name="details" 
                        required
                        aria-required="true"
                        aria-labelledby="details-label"
                        aria-describedby="details-error detailsCount details-hint"
                        maxlength="2000"
                    ></textarea>
                    <span id="details-hint" class="field-hint">กรุณาระบุรายละเอียดเหตุการณ์ที่ต้องการร้องเรียน</span>
                    <span id="details-error" class="error-message" role="alert" aria-live="polite"></span>
                    <div class="char-count" aria-live="polite" aria-atomic="true">
                        <span id="detailsCount">0</span>/2000 ตัวอักษร
                    </div>
                </div>
            </fieldset>

            <div class="anonymous-section" role="group" aria-labelledby="anonymous-label">
                <label id="anonymous-label">
                    <input 
                        type="checkbox" 
                        id="isAnonymous" 
                        name="isAnonymous"
                        aria-describedby="anonymous-hint"
                    >
                    ไม่ประสงค์ออกนาม
                </label>
                <span id="anonymous-hint" class="field-hint screen-reader-text">
                    หากเลือกตัวเลือกนี้ ท่านไม่จำเป็นต้องกรอกข้อมูลส่วนตัว
                </span>
            </div>

            <fieldset class="personal-info" aria-hidden="false">
                <legend>ข้อมูลผู้ร้องเรียน</legend>
                
                <div class="form-group">
                    <label for="name" id="name-label">
                        ชื่อ-นามสกุล 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <input 
                        type="text" 
                        id="name" 
                        name="name"
                        aria-required="true"
                        aria-labelledby="name-label"
                        aria-describedby="name-error"
                    >
                    <span id="name-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="address" id="address-label">ที่อยู่</label>
                    <textarea 
                        id="address" 
                        name="address"
                        aria-labelledby="address-label"
                        aria-describedby="address-hint"
                    ></textarea>
                    <span id="address-hint" class="field-hint">ที่อยู่สำหรับติดต่อกลับ (ไม่บังคับ)</span>
                </div>

                <div class="form-group">
                    <label for="phone" id="phone-label">
                        เบอร์โทรศัพท์ 
                        <span class="required" aria-label="จำเป็นต้องกรอกอย่างน้อยหนึ่งช่องทางติดต่อ">*</span>
                    </label>
                    <input 
                        type="tel" 
                        id="phone" 
                        name="phone"
                        aria-labelledby="phone-label"
                        aria-describedby="phone-error phone-hint"
                        pattern="[0-9]{9,10}"
                    >
                    <span id="phone-hint" class="field-hint">เบอร์โทรศัพท์ 9-10 หลัก</span>
                    <span id="phone-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="email" id="email-label">
                        อีเมล 
                        <span class="required" aria-label="จำเป็นต้องกรอกอย่างน้อยหนึ่งช่องทางติดต่อ">*</span>
                    </label>
                    <input 
                        type="email" 
                        id="email" 
                        name="email"
                        aria-labelledby="email-label"
                        aria-describedby="email-error email-hint"
                    >
                    <span id="email-hint" class="field-hint">อีเมลสำหรับติดต่อกลับ</span>
                    <span id="email-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>
                
                <span id="contact-error" class="error-message" role="alert" aria-live="polite"></span>
                <p class="note" role="note">
                    <strong>หมายเหตุ:</strong> กรุณากรอกเบอร์โทรศัพท์หรืออีเมลอย่างน้อย 1 ช่องทาง
                </p>
            </fieldset>

            <div class="loading" style="display: none;" role="status" aria-live="polite">
                <span aria-hidden="true">กำลังส่งข้อมูล...</span>
                <span class="screen-reader-text">กำลังประมวลผลและส่งข้อมูลเรื่องร้องเรียนของท่าน</span>
            </div>
            
            <button 
                type=DGA_SUBMIT_TYPE 
                class="btn-submit"
                aria-label="ส่งเรื่องร้องเรียน"
            >
                ส่งเรื่องร้องเรียน
            </button>
        </form>
    </div>
    
    <!-- Modal Popup for Success -->
    <div 
        id="complaint-success-modal" 
        class="complaint-modal" 
        style="display: none;"
        role="dialog"
        aria-modal="true"
        aria-labelledby="modal-heading"
        aria-describedby="modal-details"
    >
        <div class="modal-container" role="document">
            <button 
                class="modal-close" 
                aria-label="ปิดหน้าต่างข้อความ"
                type=DGA_BUTTON_TYPE
            >
                <span aria-hidden="true">&times;</span>
            </button>
            <div class="modal-content">
                <h3 id="modal-heading">บันทึกเรื่องร้องเรียนสำเร็จ</h3>
                <div id="modal-details" role="region" aria-label="รายละเอียดเรื่องร้องเรียน"></div>
                <button 
                    class="btn-close-modal"
                    type=DGA_BUTTON_TYPE
                    aria-label="ปิดหน้าต่างข้อความ"
                >
                    ปิด
                </button>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('complaint_form', 'complaint_form_shortcode');

// เพิ่มฟังก์ชันสร้างเลขอ้างอิงเรื่องร้องเรียน
function generate_complaint_reference($post_id) {
    $year = date('Y');
    $month = date('m');
    $serial = str_pad($post_id, 6, '0', STR_PAD_LEFT);
    return "CPL-{$year}{$month}-{$serial}";
}

// AJAX handler for form submission - แก้ไขให้ใช้งานได้
/**
 * Helper function to validate complaint data
 */
function complaint_validate_json_data($raw_data) {
    if (empty($raw_data)) {
        return array('error' => 'ไม่พบข้อมูลที่ส่งมา', 'data' => null);
    }
    
    $complaint_data = json_decode($raw_data, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        return array('error' => 'ข้อมูลไม่ถูกต้อง: ' . json_last_error_msg(), 'data' => null);
    }
    
    if (empty($complaint_data)) {
        return array('error' => 'ไม่พบข้อมูลที่ส่งมา', 'data' => null);
    }
    
    return array('error' => null, 'data' => $complaint_data);
}

/**
 * Helper function to validate required fields
 */
function complaint_validate_required_fields($complaint_data) {
    $required_fields = array(
        DGA_TYPE_FIELD => 'ประเภทเรื่องร้องเรียน',
        'department' => 'หน่วยงานที่ถูกร้องเรียน',
        'details' => 'รายละเอียด'
    );

    $errors = array();
    foreach ($required_fields as $field => $label) {
        if (empty($complaint_data[$field])) {
            $errors[] = "กรุณากรอก{$label}";
        }
    }

    // Additional validation for "other" type
    if (isset($complaint_data['type']) && $complaint_data['type'] === 'other' && empty($complaint_data['typeOther'])) {
        $errors[] = 'กรุณาระบุประเภทเรื่องร้องเรียนอื่นๆ';
    }

    return $errors;
}

/**
 * Helper function to validate personal info for non-anonymous complaints
 */
function complaint_validate_personal_info($complaint_data) {
    $errors = array();
    
    if (!empty($complaint_data['isAnonymous'])) {
        return $errors;
    }
    
    if (empty($complaint_data['name'])) {
        $errors[] = 'กรุณากรอกชื่อ-นามสกุล';
    }
    
    if (empty($complaint_data['phone']) && empty($complaint_data['email'])) {
        $errors[] = 'กรุณากรอกเบอร์โทรศัพท์หรืออีเมลอย่างน้อย 1 ช่องทาง';
    }
    
    return $errors;
}

/**
 * Helper function to prepare complaint post data
 */
function complaint_prepare_post_data($complaint_data) {
    $post_title = wp_strip_all_tags($complaint_data['type'] === 'other' ? 
        $complaint_data['typeOther'] : 
        get_complaint_type_label($complaint_data['type']));
        
    $post_title .= ' - ' . wp_strip_all_tags($complaint_data['department']);

    return array(
        'post_title' => $post_title,
        'post_content' => wp_kses_post($complaint_data['details']),
        DGA_POST_TYPE_FIELD => 'complaint',
        DGA_POST_STATUS_FIELD => 'pending'
    );
}

/**
 * Helper function to save complaint meta data
 */
function complaint_save_meta_data($post_id, $complaint_data) {
    // Save basic complaint meta
    update_post_meta($post_id, '_complaint_type', sanitize_text_field($complaint_data['type']));
    update_post_meta($post_id, '_complaint_department', sanitize_text_field($complaint_data['department']));
    update_post_meta($post_id, '_is_anonymous', !empty($complaint_data['isAnonymous']) ? 'yes' : 'no');
    
    // Save personal info if not anonymous
    if (empty($complaint_data['isAnonymous'])) {
        update_post_meta($post_id, '_complainant_name', sanitize_text_field($complaint_data['name']));
        update_post_meta($post_id, '_complainant_address', sanitize_textarea_field($complaint_data['address']));
        update_post_meta($post_id, '_complainant_phone', sanitize_text_field($complaint_data['phone']));
        update_post_meta($post_id, '_complainant_email', sanitize_email($complaint_data['email']));
    }

    // Generate and save reference number
    $ref_number = generate_complaint_reference($post_id);
    update_post_meta($post_id, '_complaint_ref', $ref_number);
    
    // Save dates
    $complaint_date = current_time('mysql');
    update_post_meta($post_id, '_complaint_date', $complaint_date);
    
    $due_date = date('Y-m-d H:i:s', strtotime('+30 days'));
    update_post_meta($post_id, '_response_due_date', $due_date);
    
    return array($ref_number, $complaint_date);
}

function handle_complaint_submission() {
    // Verify nonce
    check_ajax_referer('complaint_form_nonce', 'nonce');
    
    // Validate and parse JSON data
    $raw_data = isset($_POST['data']) ? sanitize_text_field(stripslashes($_POST['data'])) : '';
    $validation_result = complaint_validate_json_data($raw_data);
    
    if ($validation_result['error']) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $validation_result['error']));
        return;
    }
    
    $complaint_data = $validation_result['data'];
    
    // Validate all fields
    $field_errors = complaint_validate_required_fields($complaint_data);
    $personal_errors = complaint_validate_personal_info($complaint_data);
    $all_errors = array_merge($field_errors, $personal_errors);
    
    if (!empty($all_errors)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => implode(" ", $all_errors)));
        return;
    }

    // Create complaint post
    $complaint_post = complaint_prepare_post_data($complaint_data);
    $post_id = wp_insert_post($complaint_post, true);

    if (is_wp_error($post_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการบันทึกข้อมูล: ' . $post_id->get_error_message()));
        return;
    }

    // Save meta data and get reference info
    list($ref_number, $complaint_date) = complaint_save_meta_data($post_id, $complaint_data);

    // Send notification email
    send_complaint_notification($post_id, $complaint_data);

    // Return success response
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'บันทึกข้อมูลเรียบร้อยแล้ว',
        DGA_POST_ID_FIELD => $post_id,
        'ref_number' => $ref_number,
        'complaint_date' => date_i18n('d/m/Y H:i', strtotime($complaint_date)),
        'complaint_type' => get_complaint_type_label($complaint_data['type']),
        'department' => sanitize_text_field($complaint_data['department'])
    ));
}
add_action('wp_ajax_submit_complaint', 'handle_complaint_submission');
add_action('wp_ajax_nopriv_submit_complaint', 'handle_complaint_submission');

// Helper function to get complaint type label
function get_complaint_type_label($type) {
    $types = array(
        'corruption' => 'การทุจริตประพฤติมิชอบ',
        'negligence' => 'การละเลยการปฏิบัติหน้าที่',
        'misconduct' => 'การปฏิบัติหน้าที่โดยมิชอบ',
        'rights' => 'การละเมิดสิทธิ',
        'other' => 'อื่นๆ'
    );
    return isset($types[$type]) ? $types[$type] : 'อื่นๆ';
}

// Send notification email to admin
function send_complaint_notification($post_id, $complaint_data) {
    $admin_email = get_option('admin_email');
    $site_name = get_bloginfo('name');
    
    $subject = sprintf('[%s] มีเรื่องร้องเรียนใหม่', $site_name);
    
    $ref_number = get_post_meta($post_id, '_complaint_ref', true);
    
    $message = "มีเรื่องร้องเรียนใหม่ถูกส่งเข้ามาในระบบ\n\n";
    $message .= "เลขที่เรื่อง: " . $ref_number . "\n";
    $message .= "ประเภท: " . get_complaint_type_label($complaint_data['type']) . "\n";
    $message .= "หน่วยงาน: " . $complaint_data['department'] . "\n";
    $message .= "รายละเอียด: " . $complaint_data['details'] . "\n\n";
    
    if (empty($complaint_data['isAnonymous'])) {
        $message .= "ข้อมูลผู้ร้องเรียน:\n";
        $message .= "ชื่อ-นามสกุล: " . $complaint_data['name'] . "\n";
        if (!empty($complaint_data['address'])) {
            $message .= "ที่อยู่: " . $complaint_data['address'] . "\n";
        }
        if (!empty($complaint_data['phone'])) {
            $message .= "เบอร์โทรศัพท์: " . $complaint_data['phone'] . "\n";
        }
        if (!empty($complaint_data['email'])) {
            $message .= "อีเมล: " . $complaint_data['email'] . "\n";
        }
    } else {
        $message .= "ผู้ร้องเรียนไม่ประสงค์ออกนาม\n";
    }
    
    $message .= "\nดูรายละเอียดเพิ่มเติมได้ที่: " . get_edit_post_link($post_id, 'raw');
    
    wp_mail($admin_email, $subject, $message);
}

// Register custom post type for complaints
function register_complaint_post_type() {
    $labels = array(
        DGA_NAME_FIELD => 'เรื่องร้องเรียน',
        'singular_name' => 'เรื่องร้องเรียน',
        'menu_name' => 'เรื่องร้องเรียน',
        'add_new' => 'เพิ่มเรื่องร้องเรียน',
        'add_new_item' => 'เพิ่มเรื่องร้องเรียนใหม่',
        'edit_item' => 'แก้ไขเรื่องร้องเรียน',
        'new_item' => 'เรื่องร้องเรียนใหม่',
        'view_item' => 'ดูเรื่องร้องเรียน',
        'search_items' => 'ค้นหาเรื่องร้องเรียน',
        'not_found' => 'ไม่พบเรื่องร้องเรียน',
        'not_found_in_trash' => 'ไม่พบเรื่องร้องเรียนในถังขยะ'
    );

    $args = array(
        'labels' => $labels,
        'public' => false,
        'show_ui' => true,
        'show_in_menu' => true,
        'capability_type' => 'post',
        'hierarchical' => false,
        'menu_position' => 25,
        'menu_icon' => 'dashicons-feedback',
        'supports' => array(DGA_TITLE_FIELD, 'editor'),
        'register_meta_box_cb' => 'add_complaint_meta_boxes'
    );

    register_post_type('complaint', $args);
}
add_action('init', 'register_complaint_post_type');

// เพิ่ม meta boxes ในหน้าแก้ไขเรื่องร้องเรียน
function add_complaint_meta_boxes() {
    add_meta_box(
        'complaint_details',
        'รายละเอียดเรื่องร้องเรียน',
        'complaint_details_meta_box',
        'complaint',
        'normal',
        'default'
    );
    
    add_meta_box(
        'complainant_info',
        'ข้อมูลผู้ร้องเรียน',
        'complainant_info_meta_box',
        'complaint',
        'normal',
        'default'
    );
}

// Meta box แสดงรายละเอียดเรื่องร้องเรียน
function complaint_details_meta_box($post) {
    $type = get_post_meta($post->ID, '_complaint_type', true);
    $department = get_post_meta($post->ID, '_complaint_department', true);
    $ref_number = get_post_meta($post->ID, '_complaint_ref', true);
    $complaint_date = get_post_meta($post->ID, '_complaint_date', true);
    $due_date = get_post_meta($post->ID, '_response_due_date', true);
    
    if (empty($ref_number)) {
        $ref_number = generate_complaint_reference($post->ID);
        update_post_meta($post->ID, '_complaint_ref', $ref_number);
    }
    
    ?>
    <style>
        .complaint-meta-table { width: 100%; border-collapse: collapse; }
        .complaint-meta-table th, .complaint-meta-table td { padding: 8px; border: 1px solid #ddd; }
        .complaint-meta-table th { text-align: right; width: 200px; background: #f9f9f9; }
    </style>
    <table class="complaint-meta-table">
        <tr>
            <th scope="row">เลขที่เรื่องร้องเรียน:</th>
            <td><?php echo esc_html($ref_number); ?></td>
        </tr>
        <tr>
            <th scope="row">วันที่รับเรื่อง:</th>
            <td><?php echo !empty($complaint_date) ? date_i18n('d F Y H:i', strtotime($complaint_date)) : date_i18n('d F Y H:i', strtotime($post->post_date)); ?></td>
        </tr>
        <tr>
            <th scope="row">กำหนดตอบ:</th>
            <td><?php echo !empty($due_date) ? date_i18n('d F Y', strtotime($due_date)) : date_i18n('d F Y', strtotime('+30 days', strtotime($post->post_date))); ?></td>
        </tr>
        <tr>
            <th scope="row">ประเภทเรื่องร้องเรียน:</th>
            <td><?php echo esc_html(get_complaint_type_label($type)); ?></td>
        </tr>
        <tr>
            <th scope="row">หน่วยงานที่ถูกร้องเรียน:</th>
            <td><?php echo esc_html($department); ?></td>
        </tr>
    </table>
    <?php
}

// Meta box แสดงข้อมูลผู้ร้องเรียน
function complainant_info_meta_box($post) {
    $is_anonymous = get_post_meta($post->ID, '_is_anonymous', true);
    
    if ($is_anonymous == 'yes') {
        echo '<p><strong>ผู้ร้องเรียนไม่ประสงค์ออกนาม</strong></p>';
        return;
    }
    
    $name = get_post_meta($post->ID, '_complainant_name', true);
    $address = get_post_meta($post->ID, '_complainant_address', true);
    $phone = get_post_meta($post->ID, '_complainant_phone', true);
    $email = get_post_meta($post->ID, '_complainant_email', true);
    
    ?>
    <table class="complaint-meta-table">
        <tr>
            <th scope="row">ชื่อ-นามสกุล:</th>
            <td><?php echo esc_html($name); ?></td>
        </tr>
        <?php if (!empty($address)) : ?>
        <tr>
            <th scope="row">ที่อยู่:</th>
            <td><?php echo nl2br(esc_html($address)); ?></td>
        </tr>
        <?php endif; ?>
        <?php if (!empty($phone)) : ?>
        <tr>
            <th scope="row">เบอร์โทรศัพท์:</th>
            <td><?php echo esc_html($phone); ?></td>
        </tr>
        <?php endif; ?>
        <?php if (!empty($email)) : ?>
        <tr>
            <th scope="row">อีเมล:</th>
            <td><?php echo esc_html($email); ?></td>
        </tr>
        <?php endif; ?>
    </table>
    <?php
}

// Add custom columns to admin list
function add_complaint_columns($columns) {
    $new_columns = array();
    $new_columns['cb'] = $columns['cb'];
    $new_columns['ref_number'] = 'เลขที่';
    $new_columns[DGA_TITLE_FIELD] = 'ประเภท';
    $new_columns['department'] = 'หน่วยงาน';
    $new_columns['complainant'] = 'ผู้ร้องเรียน';
    $new_columns['date'] = $columns['date'];
    $new_columns[DGA_STATUS_FIELD] = 'สถานะ';
    return $new_columns;
}
add_filter('manage_complaint_posts_columns', 'add_complaint_columns');

// Fill custom columns
function fill_complaint_columns($column, $post_id) {
    switch ($column) {
        case 'ref_number':
            $ref_number = get_post_meta($post_id, '_complaint_ref', true);
            if (empty($ref_number)) {
                $ref_number = generate_complaint_reference($post_id);
                update_post_meta($post_id, '_complaint_ref', $ref_number);
            }
            echo $ref_number;
            break;
            
        case 'department':
            echo get_post_meta($post_id, '_complaint_department', true);
            break;
            
        case 'complainant':
            $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
            if ($is_anonymous == 'yes') {
                echo 'ไม่ประสงค์ออกนาม';
            } else {
                echo get_post_meta($post_id, '_complainant_name', true);
            }
            break;
            
        case DGA_STATUS_FIELD:
            $status = get_post_status($post_id);
            $status_labels = array(
                'pending' => 'รอดำเนินการ',
                'in-progress' => 'กำลังดำเนินการ',
                'completed' => 'เสร็จสิ้น',
                'rejected' => 'ไม่รับพิจารณา',
                'closed' => 'ปิดเรื่อง'
            );
            echo isset($status_labels[$status]) ? $status_labels[$status] : $status;
            break;
    }
}
add_action('manage_complaint_posts_custom_column', 'fill_complaint_columns', 10, 2);

// เพิ่มฟังก์ชันสำหรับการกรองข้อมูลในหน้า admin
function add_complaint_filters() {
    global $typenow;
    
    if ($typenow == 'complaint') {
        $current_type = isset($_GET['complaint_type']) ? $_GET['complaint_type'] : '';
        $types = array(
            'corruption' => 'การทุจริตประพฤติมิชอบ',
            'negligence' => 'การละเลยการปฏิบัติหน้าที่',
            'misconduct' => 'การปฏิบัติหน้าที่โดยมิชอบ',
            'rights' => 'การละเมิดสิทธิ',
            'other' => 'อื่นๆ'
        );
        
        echo '<select name="complaint_type" aria-label="กรองตามประเภทเรื่องร้องเรียน">';
        echo '<option value="">ทุกประเภท</option>';
        
        foreach ($types as $value => $label) {
            printf(
                '<option value="%s"%s>%s</option>',
                esc_attr($value),
                $value == $current_type ? ' selected="selected"' : '',
                esc_html($label)
            );
        }
        
        echo '</select>';
    }
}
add_action('restrict_manage_posts', 'add_complaint_filters');

// จัดการการกรองข้อมูล
function filter_complaints_by_meta($query) {
    global $pagenow, $typenow;
    
    if ($pagenow == 'edit.php' && $typenow == 'complaint' && is_admin()) {
        $qv = &$query->query_vars;
        
        if (isset($_GET['complaint_type']) && $_GET['complaint_type'] != '') {
            $qv['meta_query'][] = array(
                'key' => '_complaint_type',
                'value' => $_GET['complaint_type'],
                'compare' => '='
            );
        }
    }
}
add_filter('parse_query', 'filter_complaints_by_meta');


/********* ระบบค้นหาเรื่องร้องเรียน V1.2 - WCAG 2.1 AA Compliant ********/

// Enqueue necessary scripts and styles
function dga_complaint_search_enqueue_scripts() {
    global $post;
    
    if ($post && has_shortcode($post->post_content, 'complaint_search')) {
        
        // Enqueue CSS
        wp_enqueue_style(
            'complaint-search-style',
            get_stylesheet_directory_uri() . '/css/complaint-search.css',
            array(),
            '1.2.0'
        );
        
        // Enqueue Font Awesome (หากยังไม่มีการ include ไว้แล้ว)
        if (!wp_style_is('font-awesome', 'enqueued')) {
            wp_enqueue_style(
                'font-awesome',
                'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css',
                array(),
                '6.2.1'
            );
        }
        
        // Enqueue JS
        wp_enqueue_script(
            'complaint-search-script',
            get_stylesheet_directory_uri() . '/js/complaint-search.js',
            array(DGA_JQUERY_HANDLE),
            '1.2.0',
            true
        );

        // ส่งค่าตัวแปรต่างๆ ไปยัง JavaScript
        wp_localize_script(
            'complaint-search-script',
            'complaintSearchAjax',
            array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('complaint_search_nonce'),
                'error_not_found' => 'ไม่พบข้อมูลเรื่องร้องเรียนตามหมายเลขที่ระบุ กรุณาตรวจสอบและลองใหม่อีกครั้ง',
                'error_invalid' => 'กรุณาระบุหมายเลขเรื่องร้องเรียนให้ถูกต้อง',
                'error_system' => 'เกิดข้อผิดพลาดในระบบ กรุณาลองใหม่อีกครั้งในภายหลัง',
                'prefix' => 'CPL-',
                'aria_labels' => array(
                    'searching' => 'กำลังค้นหา',
                    'search_result' => 'ผลการค้นหา',
                    'toggle_search' => 'เปิด/ปิด แถบค้นหา',
                    'close_result' => 'ปิดผลการค้นหา'
                )
            )
        );
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_complaint_search_enqueue_scripts');

// Create shortcode for complaint search
function dga_complaint_search_shortcode() {
    ob_start();
    ?>
    <div class="dga-complaint-search-container">
        <!-- ปุ่มที่มีตัวหนังสือแนวตั้ง (หมุน 90 องศา) -->
        <button type=DGA_BUTTON_TYPE id="dga-complaint-toggle-btn" class="dga-complaint-toggle-btn" aria-label="เปิด/ปิด แถบค้นหาเรื่องร้องเรียน" aria-expanded="false" aria-controls="dga-complaint-search-form">
            <div class="toggle-text">
                <span>ค้นหาสถานะ</span>
            </div>
            <div class="toggle-icon">
                <i class="fas fa-search" aria-hidden="true"></i>
            </div>
        </button>
        
        <!-- ฟอร์มค้นหาที่จะขยายออกมาทางขวา -->
        <div id="dga-complaint-search-form" class="dga-complaint-search-form" aria-hidden="true">
            <h3 id="search-form-heading">ค้นหาสถานะเรื่องร้องเรียน</h3>
            
            <form id="complaint-search-form" aria-labelledby="search-form-heading">
                <div class="form-group">
                    <label for="complaint-ref">หมายเลขเรื่องร้องเรียน</label>
                    <div class="input-with-button">
                        <input 
                            type="text" 
                            id="complaint-ref" 
                            name="complaint-ref" 
                            placeholder="ระบุหมายเลขเรื่องร้องเรียน เช่น CPL-202505-000123"
                            aria-required="true"
                            autocomplete="off"
                            value="CPL-"
                        >
                        <span id="complaint-ref-error" class="error-message" role="alert"></span>
                        <button type=DGA_SUBMIT_TYPE class="search-btn" aria-label="ค้นหา">
                            <i class="fas fa-search" aria-hidden="true"></i> ค้นหา
                        </button>
                    </div>
                    <div class="form-hint">
                        กรุณาระบุหมายเลขเรื่องร้องเรียนที่ได้รับจากระบบ
                    </div>
                </div>
            </form>
            
            <div id="complaint-search-loading" class="complaint-search-loading" style="display: none;" role="status" aria-live="polite">
                <div class="loading-spinner">
                    <i class="fas fa-circle-notch fa-spin" aria-hidden="true"></i>
                </div>
                <span>กำลังค้นหา...</span>
            </div>
        </div>
    </div>
    
    <!-- Popup สำหรับแสดงผลการค้นหาแยกต่างหาก -->
    <div id="complaint-result-popup" class="complaint-result-popup" aria-hidden="true">
        <div class="complaint-popup-content">
            <div id="complaint-search-result" class="complaint-search-result">
                <!-- ผลลัพธ์จะถูกเพิ่มโดย JavaScript -->
            </div>
        </div>
        <!-- พื้นหลังทึบสำหรับ overlay -->
        <div class="complaint-popup-overlay"></div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('complaint_search', 'dga_complaint_search_shortcode');

// AJAX handler for complaint search (ยังคงใช้โค้ดเดิม)
/**
 * Helper function to get complaint status mappings
 */
function complaint_search_get_status_mappings() {
    return array(
        'labels' => array(
            'pending' => 'รอดำเนินการ',
            DGA_PUBLISH_STATUS => 'รอดำเนินการ',
            'draft' => 'รอดำเนินการ',
            'private' => 'รอดำเนินการ',
            'in-progress' => 'กำลังดำเนินการ',
            'completed' => 'ดำเนินการเสร็จสิ้น',
            'rejected' => 'ไม่รับพิจารณา',
            'closed' => 'ปิดเรื่อง'
        ),
        'progress_steps' => array(
            'pending' => 1,
            DGA_PUBLISH_STATUS => 1,
            'draft' => 1,
            'private' => 1,
            'in-progress' => 2,
            'completed' => 3,
            'rejected' => 3,
            'closed' => 3
        )
    );
}

/**
 * Helper function to build complaint search query args
 */
function complaint_search_build_query_args($ref_number, $compare_type = '=') {
    return array(
        DGA_POST_TYPE_FIELD => 'complaint',
        DGA_POST_STATUS_FIELD => array('pending', DGA_PUBLISH_STATUS, 'draft', 'in-progress', 'completed', 'rejected', 'closed', 'private'),
        DGA_POSTS_PER_PAGE => 1,
        'meta_query' => array(
            array(
                'key' => '_complaint_ref',
                'value' => $ref_number,
                'compare' => $compare_type
            )
        )
    );
}

/**
 * Helper function to extract complaint data from post
 */
function complaint_search_extract_data($post_id, $correct_ref = null) {
    $type = get_post_meta($post_id, '_complaint_type', true);
    $type_label = get_complaint_type_label($type);
    
    $type_other = '';
    if ($type == 'other') {
        $type_other = ' (' . get_post_meta($post_id, '_typeOther', true) . ')';
    }
    
    $department = get_post_meta($post_id, '_complaint_department', true);
    $status = get_post_status($post_id);
    $complaint_date = get_post_meta($post_id, '_complaint_date', true);
    $due_date = get_post_meta($post_id, '_response_due_date', true);
    
    return array(
        'type_label' => $type_label,
        'type_other' => $type_other,
        'department' => $department,
        'status' => $status,
        'complaint_date' => $complaint_date,
        'due_date' => $due_date,
        'ref_number' => $correct_ref ?: get_post_meta($post_id, '_complaint_ref', true)
    );
}

/**
 * Helper function to format complaint result
 */
function complaint_search_format_result($complaint_data, $post = null) {
    $mappings = complaint_search_get_status_mappings();
    $status_label = isset($mappings['labels'][$complaint_data['status']]) ? 
        $mappings['labels'][$complaint_data['status']] : $complaint_data['status'];
    $current_step = isset($mappings['progress_steps'][$complaint_data['status']]) ? 
        $mappings['progress_steps'][$complaint_data['status']] : 1;
    
    // Determine content source
    $content = '';
    if ($post) {
        $content = wp_strip_all_tags($post->post_content);
    } else {
        $content = wp_strip_all_tags(get_the_content());
    }
    
    // Format dates
    $formatted_complaint_date = !empty($complaint_data['complaint_date']) ? 
        date_i18n(DGA_DATE_FORMAT_SHORT, strtotime($complaint_data['complaint_date'])) : 
        date_i18n(DGA_DATE_FORMAT_SHORT, strtotime($post ? $post->post_date : get_the_date()));
    
    $formatted_due_date = !empty($complaint_data['due_date']) ? 
        date_i18n(DGA_DATE_FORMAT_SHORT, strtotime($complaint_data['due_date'])) : '';
    
    return array(
        'ref_number' => $complaint_data['ref_number'],
        'complaint_type' => $complaint_data['type_label'] . $complaint_data['type_other'],
        'department' => $complaint_data['department'],
        DGA_STATUS_FIELD => $status_label,
        'complaint_date' => $formatted_complaint_date,
        'due_date' => $formatted_due_date,
        'current_step' => $current_step,
        'details' => $content
    );
}

/**
 * Helper function to perform exact search
 */
function complaint_search_exact($ref_number) {
    $args = complaint_search_build_query_args($ref_number, '=');
    $complaints = new WP_Query($args);
    
    if ($complaints->have_posts()) {
        $complaints->the_post();
        $post_id = get_the_ID();
        $complaint_data = complaint_search_extract_data($post_id);
        $result = complaint_search_format_result($complaint_data);
        wp_reset_postdata();
        return $result;
    }
    
    return null;
}

/**
 * Helper function to perform LIKE search
 */
function complaint_search_like($ref_number) {
    $args = complaint_search_build_query_args($ref_number, 'LIKE');
    $complaints = new WP_Query($args);
    
    if ($complaints->have_posts()) {
        $complaints->the_post();
        $post_id = get_the_ID();
        $correct_ref = get_post_meta($post_id, '_complaint_ref', true);
        $complaint_data = complaint_search_extract_data($post_id, $correct_ref);
        $result = complaint_search_format_result($complaint_data);
        wp_reset_postdata();
        return $result;
    }
    
    return null;
}

/**
 * Helper function to perform direct SQL search
 */
function complaint_search_sql_direct($ref_number) {
    global $wpdb;
    $sql = $wpdb->prepare(
        "SELECT post_id, meta_value FROM {$wpdb->postmeta} 
         WHERE meta_key = '_complaint_ref' 
         AND meta_value LIKE %s
         LIMIT 1", 
        '%' . $wpdb->esc_like($ref_number) . '%'
    );
    
    $direct_result = $wpdb->get_row($sql);
    
    if ($direct_result) {
        $post_id = $direct_result->post_id;
        $correct_ref = $direct_result->meta_value;
        $complaint_post = get_post($post_id);
        
        if ($complaint_post) {
            $complaint_data = complaint_search_extract_data($post_id, $correct_ref);
            return complaint_search_format_result($complaint_data, $complaint_post);
        }
    }
    
    return null;
}

function dga_complaint_search_ajax_handler() {
    // Verify nonce
    check_ajax_referer('complaint_search_nonce', 'nonce');
    
    // Get and validate reference number
    $ref_number = isset($_POST['ref_number']) ? sanitize_text_field(wp_unslash($_POST['ref_number'])) : '';
    if (empty($ref_number)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณาระบุหมายเลขเรื่องร้องเรียน'));
        return;
    }
    
    // Try different search strategies in order of precision
    $result = complaint_search_exact($ref_number);
    if ($result) {
        wp_send_json_success($result);
        return;
    }
    
    $result = complaint_search_like($ref_number);
    if ($result) {
        wp_send_json_success($result);
        return;
    }
    
    $result = complaint_search_sql_direct($ref_number);
    if ($result) {
        wp_send_json_success($result);
        return;
    }
    
    // No results found
    wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบข้อมูลเรื่องร้องเรียนตามหมายเลขที่ระบุ กรุณาตรวจสอบและลองใหม่อีกครั้ง'));
}
add_action('wp_ajax_complaint_search', 'dga_complaint_search_ajax_handler');
add_action('wp_ajax_nopriv_complaint_search', 'dga_complaint_search_ajax_handler');

// Helper function to get complaint type label
if (!function_exists('get_complaint_type_label')) {
    function get_complaint_type_label($type) {
        $types = array(
            'corruption' => 'การทุจริตประพฤติมิชอบ',
            'negligence' => 'การละเลยการปฏิบัติหน้าที่',
            'misconduct' => 'การปฏิบัติหน้าที่โดยมิชอบ',
            'rights' => 'การละเมิดสิทธิ',
            'other' => 'อื่นๆ'
        );
        return isset($types[$type]) ? $types[$type] : 'อื่นๆ';
    }
}





/***** จัดการรายการร้องเรียน ******/

/**
 * Complaint Management System
 * Version: 1.0.0
 */

// กำหนดค่าคงที่สำหรับระบบ
if (!defined('CPM_BOOTSTRAP_VERSION')) {
    define('CPM_BOOTSTRAP_VERSION', '5.2.3');
}
if (!defined('CPM_DATATABLES_VERSION')) {
    define('CPM_DATATABLES_VERSION', '1.13.1');
}
if (!defined('CPM_FONTAWESOME_VERSION')) {
    define('CPM_FONTAWESOME_VERSION', '6.4.0');
}

/**
 * Register Custom Post Type for Complaints
 */
if (!function_exists('register_complaint_post_type')) {
    function register_complaint_post_type() {
        $labels = array(
            'name'                  => 'เรื่องร้องเรียน',
            'singular_name'         => 'เรื่องร้องเรียน',
            'menu_name'             => 'เรื่องร้องเรียน',
            'name_admin_bar'        => 'เรื่องร้องเรียน',
            'add_new'               => 'เพิ่มเรื่องร้องเรียน',
            'add_new_item'          => 'เพิ่มเรื่องร้องเรียนใหม่',
            'new_item'              => 'เรื่องร้องเรียนใหม่',
            'edit_item'             => 'แก้ไขเรื่องร้องเรียน',
            'view_item'             => 'ดูเรื่องร้องเรียน',
            'all_items'             => 'เรื่องร้องเรียนทั้งหมด',
            'search_items'          => 'ค้นหาเรื่องร้องเรียน',
            'not_found'             => 'ไม่พบเรื่องร้องเรียน',
            'not_found_in_trash'    => 'ไม่พบเรื่องร้องเรียนในถังขยะ',
        );

        $args = array(
            'labels'                => $labels,
            'public'                => false,
            'publicly_queryable'    => false,
            'show_ui'               => true,
            'show_in_menu'          => true,
            'query_var'             => true,
            'rewrite'               => array('slug' => 'complaint'),
            'capability_type'       => 'post',
            'has_archive'           => false,
            'hierarchical'          => false,
            'menu_position'         => 25,
            'menu_icon'             => 'dashicons-warning',
            'supports'              => array(DGA_TITLE_FIELD, 'editor', 'author'),
            'show_in_rest'          => false,
        );

        register_post_type('complaint', $args);
    }
    add_action('init', 'register_complaint_post_type');
}

/**
 * Register Custom Post Statuses for Complaints
 */
if (!function_exists('register_complaint_post_statuses')) {
    function register_complaint_post_statuses() {
        // Status: รอดำเนินการ
        register_post_status('complaint_pending', array(
            DGA_LABEL_FIELD                     => 'รอดำเนินการ',
            'public'                    => true,
            'exclude_from_search'       => false,
            'show_in_admin_all_list'    => true,
            'show_in_admin_status_list' => true,
            'label_count'               => _n_noop('รอดำเนินการ <span class="count">(%s)</span>', 'รอดำเนินการ <span class="count">(%s)</span>'),
        ));

        // Status: กำลังดำเนินการ
        register_post_status('complaint_in_progress', array(
            DGA_LABEL_FIELD                     => 'กำลังดำเนินการ',
            'public'                    => true,
            'exclude_from_search'       => false,
            'show_in_admin_all_list'    => true,
            'show_in_admin_status_list' => true,
            'label_count'               => _n_noop('กำลังดำเนินการ <span class="count">(%s)</span>', 'กำลังดำเนินการ <span class="count">(%s)</span>'),
        ));

        // Status: เสร็จสิ้น
        register_post_status('complaint_completed', array(
            DGA_LABEL_FIELD                     => 'เสร็จสิ้น',
            'public'                    => true,
            'exclude_from_search'       => false,
            'show_in_admin_all_list'    => true,
            'show_in_admin_status_list' => true,
            'label_count'               => _n_noop('เสร็จสิ้น <span class="count">(%s)</span>', 'เสร็จสิ้น <span class="count">(%s)</span>'),
        ));

        // Status: ไม่รับพิจารณา
        register_post_status('complaint_rejected', array(
            DGA_LABEL_FIELD                     => 'ไม่รับพิจารณา',
            'public'                    => true,
            'exclude_from_search'       => false,
            'show_in_admin_all_list'    => true,
            'show_in_admin_status_list' => true,
            'label_count'               => _n_noop('ไม่รับพิจารณา <span class="count">(%s)</span>', 'ไม่รับพิจารณา <span class="count">(%s)</span>'),
        ));

        // Status: ปิดเรื่อง
        register_post_status('complaint_closed', array(
            DGA_LABEL_FIELD                     => 'ปิดเรื่อง',
            'public'                    => true,
            'exclude_from_search'       => false,
            'show_in_admin_all_list'    => true,
            'show_in_admin_status_list' => true,
            'label_count'               => _n_noop('ปิดเรื่อง <span class="count">(%s)</span>', 'ปิดเรื่อง <span class="count">(%s)</span>'),
        ));
    }
    add_action('init', 'register_complaint_post_statuses');
}

/**
 * Helper function to get complaint type label
 */
if (!function_exists('get_complaint_type_label')) {
    function get_complaint_type_label($type) {
        $types = array(
            'corruption' => 'การทุจริตประพฤติมิชอบ',
            'negligence' => 'การละเลยการปฏิบัติหน้าที่',
            'misconduct' => 'การปฏิบัติหน้าที่โดยมิชอบ',
            'rights' => 'การละเมิดสิทธิ',
            'other' => 'อื่นๆ'
        );
        
        return isset($types[$type]) ? $types[$type] : $type;
    }
}

/**
 * Enqueue scripts and styles for complaint list management
 */
if (!function_exists('complaint_list_enqueue_scripts')) {
    function complaint_list_enqueue_scripts() {
        // ตรวจสอบว่าหน้าปัจจุบันมี shortcode [complaint_list] หรือไม่
        global $post;
        if (!is_a($post, 'WP_Post') || !has_shortcode($post->post_content, 'complaint_list')) {
            return;
        }

        // ตรวจสอบสิทธิ์การเข้าถึง
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            return;
        }

        // Enqueue Bootstrap
        wp_enqueue_style(
            'complaint-bootstrap',
            "https://cdn.jsdelivr.net/npm/bootstrap@" . CPM_BOOTSTRAP_VERSION . "/dist/css/bootstrap.min.css",
            array(),
            CPM_BOOTSTRAP_VERSION
        );

        wp_enqueue_script(
            'complaint-bootstrap-js',
            "https://cdn.jsdelivr.net/npm/bootstrap@" . CPM_BOOTSTRAP_VERSION . "/dist/js/bootstrap.bundle.min.js",
            array(DGA_JQUERY_HANDLE),
            CPM_BOOTSTRAP_VERSION,
            true
        );

        // Enqueue DataTables
        wp_enqueue_style(
            'complaint-datatables',
            "https://cdn.datatables.net/1.13.1/css/dataTables.bootstrap5.min.css",
            array('complaint-bootstrap'),
            CPM_DATATABLES_VERSION
        );

        wp_enqueue_script(
            'complaint-datatables-js',
            "https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js",
            array(DGA_JQUERY_HANDLE),
            CPM_DATATABLES_VERSION,
            true
        );

        wp_enqueue_script(
            'complaint-datatables-bs5',
            "https://cdn.datatables.net/1.13.1/js/dataTables.bootstrap5.min.js",
            array('complaint-datatables-js', 'complaint-bootstrap-js'),
            CPM_DATATABLES_VERSION,
            true
        );

        // Enqueue Font Awesome
        wp_enqueue_style(
            'complaint-fontawesome',
            "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/" . CPM_FONTAWESOME_VERSION . "/css/all.min.css",
            array(),
            CPM_FONTAWESOME_VERSION
        );

        // Enqueue Custom CSS
        wp_enqueue_style(
            'complaint-list-style',
            get_stylesheet_directory_uri() . '/css/complaint-list.css',
            array('complaint-bootstrap', 'complaint-datatables', 'complaint-fontawesome'),
            filemtime(get_stylesheet_directory() . '/css/complaint-list.css')
        );

        // Enqueue Custom JS
        wp_enqueue_script(
            'complaint-list-script',
            get_stylesheet_directory_uri() . '/js/complaint-list.js',
            array(DGA_JQUERY_HANDLE, 'complaint-bootstrap-js', 'complaint-datatables-bs5'),
            filemtime(get_stylesheet_directory() . '/js/complaint-list.js'),
            true
        );

        // Localize script สำหรับใช้ใน JavaScript
        wp_localize_script(
            'complaint-list-script',
            'complaintListData',
            array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('complaint_list_nonce'),
                'messages' => array(
                    'loading' => 'กำลังโหลดข้อมูล...',
                    DGA_ERROR_STATUS => DGA_ERROR_RETRY_MESSAGE_TH,
                    DGA_SUCCESS_STATUS => 'ดำเนินการเรียบร้อยแล้ว',
                    'confirm_delete' => 'คุณต้องการลบเรื่องร้องเรียนนี้ใช่หรือไม่?',
                    'no_data' => 'ไม่พบเรื่องร้องเรียน',
                    'confirm_status_change' => 'คุณต้องการเปลี่ยนสถานะเรื่องร้องเรียนเป็น {status} ใช่หรือไม่?'
                ),
                'status_labels' => array(
                    'complaint_pending' => 'รอดำเนินการ',
                    'complaint_in_progress' => 'กำลังดำเนินการ',
                    'complaint_completed' => 'เสร็จสิ้น',
                    'complaint_rejected' => 'ไม่รับพิจารณา',
                    'complaint_closed' => 'ปิดเรื่อง'
                ),
                'status_colors' => array(
                    'complaint_pending' => 'warning',
                    'complaint_in_progress' => 'info',
                    'complaint_completed' => DGA_SUCCESS_STATUS,
                    'complaint_rejected' => 'danger',
                    'complaint_closed' => 'secondary'
                ),
                'current_user' => array(
                    'id' => get_current_user_id(),
                    DGA_NAME_FIELD => wp_get_current_user()->display_name,
                    'can_edit' => current_user_can(DGA_EDIT_POSTS_CAP),
                    'can_delete' => current_user_can('delete_posts'),
                    'is_admin' => current_user_can(DGA_MANAGE_OPTIONS_CAP)
                ),
                'date_format' => get_option('date_format'),
                'time_format' => get_option('time_format')
            )
        );
    }
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'complaint_list_enqueue_scripts');
}

/**
 * Create shortcode for complaint list management
 */
if (!function_exists('complaint_list_shortcode')) {
    function complaint_list_shortcode() {
        // ตรวจสอบสิทธิ์การเข้าถึง
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            return '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>ขออภัย คุณไม่มีสิทธิ์เข้าถึงระบบจัดการเรื่องร้องเรียน</div>';
        }

        ob_start();
        ?>
        <div class="complaint-management-container">
            <!-- ส่วนหัว -->
            <div class="complaint-header mb-4">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h2 class="complaint-title"><i class="fas fa-clipboard-list me-2"></i>ระบบจัดการเรื่องร้องเรียน</h2>
                    </div>
                    <div class="col-md-6 text-md-end">
                        <div class="complaint-actions">
                            <button id="refresh-complaints" class="btn btn-outline-primary me-2">
                                <i class="fas fa-sync-alt me-1"></i> รีเฟรช
                            </button>
                            <?php if (current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
                            <button id="export-complaints" class="btn btn-success">
                                <i class="fas fa-file-export me-1"></i> ส่งออกข้อมูล
                            </button>
                            <?php endif; ?>
                        </div>
                    </div>
                </div>
            </div>

            <!-- แสดงการแจ้งเตือน -->
            <div id="complaint-alert" class="alert d-none mb-4" role="alert"></div>

            <!-- ภาพรวมสถานะ -->
            <div class="complaint-dashboard mb-4">
                <h3 class="section-title mb-3">ภาพรวมเรื่องร้องเรียน</h3>
                <div class="row g-3" id="status-summary">
                    <div class="col-md-4 col-xl-2">
                        <div class="status-card card h-100 bg-light border-warning">
                            <div class="card-body text-center">
                                <h4 class="status-name text-warning">รอดำเนินการ</h4>
                                <div class="status-count display-4 fw-bold" id="status-complaint_pending">0</div>
                                <div class="status-label">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-xl-2">
                        <div class="status-card card h-100 bg-light border-info">
                            <div class="card-body text-center">
                                <h4 class="status-name text-info">กำลังดำเนินการ</h4>
                                <div class="status-count display-4 fw-bold" id="status-complaint_in_progress">0</div>
                                <div class="status-label">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-xl-2">
                        <div class="status-card card h-100 bg-light border-success">
                            <div class="card-body text-center">
                                <h4 class="status-name text-success">เสร็จสิ้น</h4>
                                <div class="status-count display-4 fw-bold" id="status-complaint_completed">0</div>
                                <div class="status-label">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-xl-2">
                        <div class="status-card card h-100 bg-light border-danger">
                            <div class="card-body text-center">
                                <h4 class="status-name text-danger">ไม่รับพิจารณา</h4>
                                <div class="status-count display-4 fw-bold" id="status-complaint_rejected">0</div>
                                <div class="status-label">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-xl-2">
                        <div class="status-card card h-100 bg-light border-secondary">
                            <div class="card-body text-center">
                                <h4 class="status-name text-secondary">ปิดเรื่อง</h4>
                                <div class="status-count display-4 fw-bold" id="status-complaint_closed">0</div>
                                <div class="status-label">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-xl-2">
                        <div class="status-card card h-100 bg-primary text-white">
                            <div class="card-body text-center">
                                <h4 class="status-name">ทั้งหมด</h4>
                                <div class="status-count display-4 fw-bold" id="status-total">0</div>
                                <div class="status-label">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ส่วนการกรอง -->
            <div class="complaint-filters mb-4">
                <div class="card">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h3 class="section-title m-0">ตัวกรองข้อมูล</h3>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label for="filter-status" class="form-label">สถานะ</label>
                                <select id="filter-status" class="form-select">
                                    <option value="">ทั้งหมด</option>
                                    <option value="complaint_pending">รอดำเนินการ</option>
                                    <option value="complaint_in_progress">กำลังดำเนินการ</option>
                                    <option value="complaint_completed">เสร็จสิ้น</option>
                                    <option value="complaint_rejected">ไม่รับพิจารณา</option>
                                    <option value="complaint_closed">ปิดเรื่อง</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="filter-type" class="form-label">ประเภท</label>
                                <select id="filter-type" class="form-select">
                                    <option value="">ทั้งหมด</option>
                                    <option value="corruption">การทุจริตประพฤติมิชอบ</option>
                                    <option value="negligence">การละเลยการปฏิบัติหน้าที่</option>
                                    <option value="misconduct">การปฏิบัติหน้าที่โดยมิชอบ</option>
                                    <option value="rights">การละเมิดสิทธิ</option>
                                    <option value="other">อื่นๆ</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="filter-date" class="form-label">ช่วงเวลา</label>
                                <select id="filter-date" class="form-select">
                                    <option value="">ทั้งหมด</option>
                                    <option value="today">วันนี้</option>
                                    <option value="week">7 วันล่าสุด</option>
                                    <option value="month">30 วันล่าสุด</option>
                                    <option value="quarter">3 เดือนล่าสุด</option>
                                    <option value="year">ปีนี้</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-8">
                                <label for="filter-search" class="form-label">ค้นหา</label>
                                <input type="text" id="filter-search" class="form-control" placeholder="ค้นหาจากเลขที่ ประเภท หน่วยงาน หรือชื่อผู้ร้องเรียน">
                            </div>
                            <div class="col-md-4">
                                <label class="d-block invisible">ค้นหา</label>
                                <button id="apply-filters" class="btn btn-primary w-100">
                                    <i class="fas fa-search me-1"></i> ค้นหา
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ตารางแสดงรายการ -->
            <div class="complaint-list mb-4">
                <div class="card">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h3 class="section-title m-0">รายการเรื่องร้องเรียน</h3>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table id="complaints-table" class="table table-striped table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>เลขที่</th>
                                        <th>วันที่รับเรื่อง</th>
                                        <th>ประเภท</th>
                                        <th>หน่วยงาน</th>
                                        <th>ผู้ร้องเรียน</th>
                                        <th>สถานะ</th>
                                        <th>กำหนดตอบ</th>
                                        <th width="120">จัดการ</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- ข้อมูลจะถูกเพิ่มด้วย JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="complaints-count">กำลังโหลดข้อมูล...</div>
                            </div>
                            <div class="col-md-6 text-md-end">
                                <div class="pagination-info"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal แสดงรายละเอียดเรื่องร้องเรียน -->
        <div class="modal fade" id="complaint-detail-modal" tabindex="-1" aria-labelledby="complaint-detail-modal-label" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="complaint-detail-modal-label">รายละเอียดเรื่องร้องเรียน</h5>
                        <button type=DGA_BUTTON_TYPE class="btn-close" data-bs-dismiss="modal" aria-label="ปิด"></button>
                    </div>
                    <div class="modal-body">
                        <div id="complaint-detail-content">
                            <!-- ข้อมูลจะถูกเพิ่มด้วย JavaScript -->
                        </div>
                    </div>
                    <div class="modal-footer d-block">
                        <div class="row g-3">
                            <div class="col-md-8">
                                <select id="update-status" class="form-select">
                                    <option value="complaint_pending">รอดำเนินการ</option>
                                    <option value="complaint_in_progress">กำลังดำเนินการ</option>
                                    <option value="complaint_completed">เสร็จสิ้น</option>
                                    <option value="complaint_rejected">ไม่รับพิจารณา</option>
                                    <option value="complaint_closed">ปิดเรื่อง</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <button id="btn-update-status" class="btn btn-primary w-100">
                                    <i class="fas fa-save me-2"></i>บันทึกสถานะ
                                </button>
                            </div>
                        </div>
                        
                        <div class="row mt-3">
                            <div class="col">
                                <textarea id="status-note" class="form-control" rows="3" placeholder="บันทึกการดำเนินการ (optional)"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    add_shortcode('complaint_list', 'complaint_list_shortcode');
}

/**
 * AJAX handler: Get complaints list
 */
if (!function_exists('complaint_list_get_complaints')) {
    function complaint_list_get_complaints() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        }

        // ตรวจสอบสิทธิ์
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'You do not have permission to access this data'));
        }

        // รับพารามิเตอร์
        $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
        $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
        $status = isset($_POST[DGA_STATUS_FIELD]) ? sanitize_text_field($_POST[DGA_STATUS_FIELD]) : '';
        $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : '';
        $date_filter = isset($_POST['date']) ? sanitize_text_field($_POST['date']) : '';
        $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';

        // สร้าง query arguments
        $args = array(
            DGA_POST_TYPE_FIELD => 'complaint',
            DGA_POSTS_PER_PAGE => $per_page,
            DGA_PAGED_PARAMETER => $page,
            'meta_query' => array(),
            's' => $search
        );

        // กรองตามสถานะ
        if (!empty($status)) {
            $args[DGA_POST_STATUS_FIELD] = $status;
        } else {
            // แสดงทุกสถานะ รวมถึง custom statuses
            $args[DGA_POST_STATUS_FIELD] = array('complaint_pending', 'complaint_in_progress', 'complaint_completed', 'complaint_rejected', 'complaint_closed', DGA_PUBLISH_STATUS, 'draft');
        }

        // กรองตามประเภท
        if (!empty($type)) {
            $args['meta_query'][] = array(
                'key' => '_complaint_type',
                'value' => $type,
                'compare' => '='
            );
        }

        // กรองตามวันที่
        if (!empty($date_filter)) {
            $date = new DateTime();
            switch ($date_filter) {
                case 'today':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('today'))
                    );
                    break;
                case 'week':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-7 days'))
                    );
                    break;
                case 'month':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-30 days'))
                    );
                    break;
                case 'quarter':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-90 days'))
                    );
                    break;
                case 'year':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('first day of january this year')),
                        'before' => date('Y-m-d', strtotime('last day of december this year')),
                        'inclusive' => true
                    );
                    break;
                default:
                    // Default to month filter if no valid filter is provided
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-30 days'))
                    );
                    break;
            }
        }

        // คำนวณจำนวนตามสถานะ
        $status_counts = array(
            'complaint_pending' => 0,
            'complaint_in_progress' => 0,
            'complaint_completed' => 0,
            'complaint_rejected' => 0,
            'complaint_closed' => 0
        );

        foreach ($status_counts as $count_status => $count) {
            $count_args = $args;
            $count_args[DGA_POST_STATUS_FIELD] = $count_status;
            $count_args[DGA_POSTS_PER_PAGE] = -1;
            $count_args[DGA_FIELDS_PARAMETER] = 'ids';
            unset($count_args[DGA_PAGED_PARAMETER]); // ลบ paged สำหรับการนับ
            $count_query = new WP_Query($count_args);
            $status_counts[$count_status] = $count_query->found_posts;
            wp_reset_postdata();
        }

        // ดึงข้อมูลเรื่องร้องเรียน
        $query = new WP_Query($args);
        $complaints = array();

        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // ดึงข้อมูลเมตา
            $type_value = get_post_meta($post_id, '_complaint_type', true);
            $department = get_post_meta($post_id, '_complaint_department', true);
            $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
            $complainant_name = get_post_meta($post_id, '_complainant_name', true);
            $ref_number = get_post_meta($post_id, '_complaint_ref', true);
            $details = get_post_field('post_content', $post_id);
            $due_date = get_post_meta($post_id, '_response_due_date', true);
            
            // สร้างชื่อเรื่องและข้อมูลผู้ร้องเรียน
            $type_label = get_complaint_type_label($type_value);
            $complainant = ($is_anonymous == 'yes') ? 'ไม่ประสงค์ออกนาม' : $complainant_name;
            
            // จัดเตรียมข้อมูลสำหรับส่งกลับ
            $complaints[] = array(
                'id' => $post_id,
                'ref' => $ref_number ?: 'CPL-' . str_pad($post_id, 6, '0', STR_PAD_LEFT),
                DGA_TYPE_FIELD => $type_label,
                'type_value' => $type_value,
                'department' => $department ?: 'ไม่ระบุ',
                'date' => get_the_date('Y-m-d H:i:s'),
                'due_date' => $due_date,
                DGA_STATUS_FIELD => get_post_status($post_id),
                'complainant' => $complainant ?: 'ไม่ระบุ',
                'is_anonymous' => ($is_anonymous == 'yes'),
                'details' => $details
            );
        }
        
        wp_reset_postdata();
        
        // ส่งข้อมูลกลับ
        wp_send_json_success(array(
            'complaints' => $complaints,
            DGA_TOTAL_FIELD_KEY => $query->found_posts,
            'pages' => $query->max_num_pages,
            'current_page' => $page,
            'status_counts' => $status_counts
        ));
    }
    add_action('wp_ajax_complaint_list_get_complaints', 'complaint_list_get_complaints');
}

/**
 * AJAX handler: Get complaint details
 */
if (!function_exists('complaint_list_get_details')) {
    function complaint_list_get_details() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        }

        // ตรวจสอบสิทธิ์
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'You do not have permission to access this data'));
        }

        // รับ ID ของเรื่องร้องเรียน
        $complaint_id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        if (empty($complaint_id)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid complaint ID'));
        }

        // ตรวจสอบว่ามีเรื่องร้องเรียนนี้หรือไม่
        $complaint = get_post($complaint_id);
        if (!$complaint || $complaint->post_type !== 'complaint') {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'Complaint not found'));
        }

        // ดึงข้อมูลเมตา
        $type_value = get_post_meta($complaint_id, '_complaint_type', true);
        $department = get_post_meta($complaint_id, '_complaint_department', true);
        $is_anonymous = get_post_meta($complaint_id, '_is_anonymous', true);
        $ref_number = get_post_meta($complaint_id, '_complaint_ref', true);
        $due_date = get_post_meta($complaint_id, '_response_due_date', true);
        
        // ข้อมูลผู้ร้องเรียน
        $complainant = array(
            DGA_NAME_FIELD => get_post_meta($complaint_id, '_complainant_name', true),
            'address' => get_post_meta($complaint_id, '_complainant_address', true),
            'phone' => get_post_meta($complaint_id, '_complainant_phone', true),
            'email' => get_post_meta($complaint_id, '_complainant_email', true)
        );
        
        // ดึงประวัติการอัพเดตสถานะ
        $status_history = get_post_meta($complaint_id, '_status_history', true);
        if (empty($status_history)) {
            $status_history = array();
        }
        
        // สร้างข้อมูลเรื่องร้องเรียน
        $complaint_data = array(
            'id' => $complaint_id,
            'ref' => $ref_number ?: 'CPL-' . str_pad($complaint_id, 6, '0', STR_PAD_LEFT),
            DGA_TYPE_FIELD => get_complaint_type_label($type_value),
            'type_value' => $type_value,
            'department' => $department ?: 'ไม่ระบุ',
            'date' => get_the_date('Y-m-d H:i:s', $complaint_id),
            'due_date' => $due_date,
            DGA_STATUS_FIELD => get_post_status($complaint_id),
            'is_anonymous' => ($is_anonymous == 'yes'),
            'complainant' => ($is_anonymous == 'yes') ? null : $complainant,
            'details' => $complaint->post_content,
            'status_history' => $status_history
        );
        
        // สร้าง HTML สำหรับแสดงรายละเอียด
        ob_start();
        ?>
        <div class="complaint-detail">
            <div class="row">
                <div class="col-md-6">
                    <div class="detail-item">
                        <div class="detail-label">เลขที่เรื่องร้องเรียน</div>
                        <div class="detail-value"><?php echo esc_html($complaint_data['ref']); ?></div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="detail-item">
                        <div class="detail-label">วันที่รับเรื่อง</div>
                        <div class="detail-value"><?php echo date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($complaint_data['date'])); ?></div>
                    </div>
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="detail-item">
                        <div class="detail-label">สถานะ</div>
                        <div class="detail-value">
                            <?php 
                            $status_labels = array(
                                'complaint_pending' => 'รอดำเนินการ',
                                'complaint_in_progress' => 'กำลังดำเนินการ',
                                'complaint_completed' => 'เสร็จสิ้น',
                                'complaint_rejected' => 'ไม่รับพิจารณา',
                                'complaint_closed' => 'ปิดเรื่อง'
                            );
                            $status_colors = array(
                                'complaint_pending' => 'warning',
                                'complaint_in_progress' => 'info',
                                'complaint_completed' => DGA_SUCCESS_STATUS,
                                'complaint_rejected' => 'danger',
                                'complaint_closed' => 'secondary'
                            );
                            $status = $complaint_data[DGA_STATUS_FIELD];
                            $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
                            $status_color = isset($status_colors[$status]) ? $status_colors[$status] : 'primary';
                            ?>
                            <span class="badge bg-<?php echo $status_color; ?>"><?php echo $status_label; ?></span>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="detail-item">
                        <div class="detail-label">กำหนดตอบ</div>
                        <div class="detail-value">
                            <?php 
                            if (!empty($complaint_data['due_date'])) {
                                $due_date = date_create($complaint_data['due_date']);
                                $today = date_create('now');
                                $diff = date_diff($today, $due_date);
                                $is_overdue = $due_date < $today && $status == 'complaint_pending';
                                
                                echo date_i18n(get_option('date_format'), strtotime($complaint_data['due_date']));
                                
                                if ($is_overdue) {
                                    echo ' <span class="badge bg-danger">เลยกำหนด</span>';
                                } elseif ($diff->days <= 7 && $status == 'complaint_pending') {
                                    echo ' <span class="badge bg-warning text-dark">ใกล้ถึงกำหนด</span>';
                                }
                            } else {
                                echo 'ไม่กำหนด';
                            }
                            ?>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="detail-item">
                        <div class="detail-label">ประเภทเรื่องร้องเรียน</div>
                        <div class="detail-value"><?php echo esc_html($complaint_data['type']); ?></div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="detail-item">
                        <div class="detail-label">หน่วยงานที่ถูกร้องเรียน</div>
                        <div class="detail-value"><?php echo esc_html($complaint_data['department']); ?></div>
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <div class="detail-label">รายละเอียด</div>
                <div class="detail-content p-3 bg-light rounded">
                    <?php echo nl2br(esc_html($complaint_data['details'])); ?>
                </div>
            </div>
            
            <?php if (!$complaint_data['is_anonymous'] && !empty($complaint_data['complainant'])): ?>
            <div class="mt-4">
                <h5 class="detail-section-title">ข้อมูลผู้ร้องเรียน</h5>
                <div class="complainant-info p-3 bg-light rounded">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="detail-item">
                                <div class="detail-label">ชื่อ-นามสกุล</div>
                                <div class="detail-value"><?php echo esc_html($complaint_data['complainant']['name']); ?></div>
                            </div>
                        </div>
                        <?php if (!empty($complaint_data['complainant']['phone'])): ?>
                        <div class="col-md-6">
                            <div class="detail-item">
                                <div class="detail-label">เบอร์โทรศัพท์</div>
                                <div class="detail-value"><?php echo esc_html($complaint_data['complainant']['phone']); ?></div>
                            </div>
                        </div>
                        <?php endif; ?>
                    </div>
                    
                    <?php if (!empty($complaint_data['complainant']['email'])): ?>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="detail-item">
                                <div class="detail-label">อีเมล</div>
                                <div class="detail-value"><?php echo esc_html($complaint_data['complainant']['email']); ?></div>
                            </div>
                        </div>
                    </div>
                    <?php endif; ?>
                    
                    <?php if (!empty($complaint_data['complainant']['address'])): ?>
                    <div class="row mt-3">
                        <div class="col">
                            <div class="detail-item">
                                <div class="detail-label">ที่อยู่</div>
                                <div class="detail-value"><?php echo nl2br(esc_html($complaint_data['complainant']['address'])); ?></div>
                            </div>
                        </div>
                    </div>
                    <?php endif; ?>
                </div>
            </div>
            <?php else: ?>
            <div class="mt-4">
                <div class="alert alert-info">
                    <i class="fas fa-user-secret me-2"></i> ผู้ร้องเรียนไม่ประสงค์ออกนาม
                </div>
            </div>
            <?php endif; ?>
            
            <?php if (!empty($complaint_data['status_history'])): ?>
            <div class="mt-4">
                <h5 class="detail-section-title">ประวัติการดำเนินการ</h5>
                <div class="status-history">
                    <div class="timeline">
                        <?php foreach ($complaint_data['status_history'] as $history): ?>
                        <div class="timeline-item">
                            <div class="timeline-date">
                                <?php echo date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($history['date'])); ?>
                            </div>
                            <div class="timeline-status">
                                <span class="badge bg-<?php echo isset($status_colors[$history[DGA_STATUS_FIELD]]) ? $status_colors[$history[DGA_STATUS_FIELD]] : 'primary'; ?>">
                                    <?php echo isset($status_labels[$history[DGA_STATUS_FIELD]]) ? $status_labels[$history[DGA_STATUS_FIELD]] : $history[DGA_STATUS_FIELD]; ?>
                                </span>
                            </div>
                            <div class="timeline-user">
                                โดย: <?php echo esc_html($history['user']); ?>
                            </div>
                            <?php if (!empty($history['note'])): ?>
                            <div class="timeline-note mt-2 p-2 bg-light rounded">
                                <?php echo nl2br(esc_html($history['note'])); ?>
                            </div>
                            <?php endif; ?>
                        </div>
                        <?php endforeach; ?>
                    </div>
                </div>
            </div>
            <?php endif; ?>
        </div>
        <?php
        $html = ob_get_clean();
        
        // ส่งข้อมูลกลับ
        wp_send_json_success(array(
            'complaint' => $complaint_data,
            'html' => $html
        ));
    }
    add_action('wp_ajax_complaint_list_get_details', 'complaint_list_get_details');
}

/**
 * AJAX handler: Update complaint status
 */
if (!function_exists('complaint_list_update_status')) {
    function complaint_list_update_status() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        }

        // ตรวจสอบสิทธิ์
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'You do not have permission to update this data'));
        }

        // รับพารามิเตอร์
        $complaint_id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        $new_status = isset($_POST[DGA_STATUS_FIELD]) ? sanitize_text_field($_POST[DGA_STATUS_FIELD]) : '';
        $note = isset($_POST['note']) ? sanitize_textarea_field($_POST['note']) : '';

        // ตรวจสอบข้อมูล
        if (empty($complaint_id) || empty($new_status)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid parameters'));
        }

        // ตรวจสอบว่ามีเรื่องร้องเรียนนี้หรือไม่
        $complaint = get_post($complaint_id);
        if (!$complaint || $complaint->post_type !== 'complaint') {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'Complaint not found'));
        }

        // ดึงสถานะปัจจุบัน
        $current_status = get_post_status($complaint_id);
        
        // ตรวจสอบว่าสถานะมีการเปลี่ยนแปลงหรือไม่
        if ($current_status === $new_status && empty($note)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'No status change detected'));
        }

        // อัพเดตสถานะเรื่องร้องเรียน
        $update = wp_update_post(array(
            'ID' => $complaint_id,
            DGA_POST_STATUS_FIELD => $new_status
        ), true);

        if (is_wp_error($update)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => $update->get_error_message()));
        }

        // บันทึกประวัติการอัพเดตสถานะ
        $user = wp_get_current_user();
        $status_history = get_post_meta($complaint_id, '_status_history', true);
        
        if (empty($status_history)) {
            $status_history = array();
        }
        
        $status_history[] = array(
            'date' => current_time('mysql'),
            DGA_STATUS_FIELD => $new_status,
            'user' => $user->display_name,
            'user_id' => $user->ID,
            'note' => $note,
            'previous_status' => $current_status
        );
        
        update_post_meta($complaint_id, '_status_history', $status_history);
        
        // อัพเดตวันที่อัพเดตล่าสุด
        update_post_meta($complaint_id, '_last_updated', current_time('mysql'));
        update_post_meta($complaint_id, '_last_updated_by', $user->ID);
        
        // ถ้าสถานะเป็น "กำลังดำเนินการ" และไม่มีเจ้าหน้าที่รับผิดชอบ
        if ($new_status === 'complaint_in_progress' && !get_post_meta($complaint_id, '_assigned_to', true)) {
            update_post_meta($complaint_id, '_assigned_to', $user->ID);
            update_post_meta($complaint_id, '_assigned_date', current_time('mysql'));
        }
        
        // ถ้าสถานะเป็น "เสร็จสิ้น" หรือ "ปิดเรื่อง" บันทึกวันที่ปิดเรื่อง
        if (in_array($new_status, array('complaint_completed', 'complaint_closed'))) {
            update_post_meta($complaint_id, '_closed_date', current_time('mysql'));
        }
        
        // ส่งอีเมลแจ้งเตือน (ถ้าตั้งค่าไว้)
        if (get_option('complaint_email_notifications', 'yes') === 'yes') {
            $ref_number = get_post_meta($complaint_id, '_complaint_ref', true) ?: 'CPL-' . str_pad($complaint_id, 6, '0', STR_PAD_LEFT);
            $status_labels = array(
                'complaint_pending' => 'รอดำเนินการ',
                'complaint_in_progress' => 'กำลังดำเนินการ',
                'complaint_completed' => 'เสร็จสิ้น',
                'complaint_rejected' => 'ไม่รับพิจารณา',
                'complaint_closed' => 'ปิดเรื่อง'
            );
            
            $subject = sprintf('[%s] อัพเดตสถานะเรื่องร้องเรียน %s', get_bloginfo('name'), $ref_number);
            
            $message = sprintf(
                "เรื่องร้องเรียนเลขที่ %s ได้รับการอัพเดตสถานะ\n\n" .
                "สถานะใหม่: %s\n" .
                "ดำเนินการโดย: %s\n" .
                "วันเวลา: %s\n",
                $ref_number,
                isset($status_labels[$new_status]) ? $status_labels[$new_status] : $new_status,
                $user->display_name,
                date_i18n(get_option('date_format') . ' ' . get_option('time_format'))
            );
            
            if (!empty($note)) {
                $message .= sprintf("\nบันทึกเพิ่มเติม:\n%s\n", $note);
            }
            
            $message .= sprintf("\nดูรายละเอียดเพิ่มเติมได้ที่: %s", get_edit_post_link($complaint_id, 'raw'));
            
            // ส่งอีเมลไปยังผู้ดูแลระบบ
            wp_mail(get_option('admin_email'), $subject, $message);
            
            // ถ้ามีอีเมลผู้ร้องเรียนและไม่ได้ไม่ประสงค์ออกนาม
            $is_anonymous = get_post_meta($complaint_id, '_is_anonymous', true);
            $complainant_email = get_post_meta($complaint_id, '_complainant_email', true);
            
            if ($is_anonymous !== 'yes' && !empty($complainant_email) && is_email($complainant_email)) {
                $subject = sprintf('[%s] อัพเดตสถานะเรื่องร้องเรียนของท่าน', get_bloginfo('name'));
                
                $message = sprintf(
                    "เรียนท่านผู้ร้องเรียน\n\n" .
                    "เรื่องร้องเรียนเลขที่ %s ของท่านได้รับการอัพเดตสถานะ\n\n" .
                    "สถานะปัจจุบัน: %s\n" .
                    "วันเวลา: %s\n",
                    $ref_number,
                    isset($status_labels[$new_status]) ? $status_labels[$new_status] : $new_status,
                    date_i18n(get_option('date_format') . ' ' . get_option('time_format'))
                );
                
                if (!empty($note)) {
                    $message .= sprintf("\nรายละเอียดการดำเนินการ:\n%s\n", $note);
                }
                
                $message .= sprintf("\nขอบคุณที่แจ้งเรื่องร้องเรียนมายัง %s", get_bloginfo('name'));
                
                wp_mail($complainant_email, $subject, $message);
            }
        }
        
        // ส่งข้อมูลกลับ
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'อัพเดตสถานะเรียบร้อยแล้ว',
            DGA_STATUS_FIELD => $new_status,
            'updated_by' => $user->display_name,
            'updated_date' => date_i18n(get_option('date_format') . ' ' . get_option('time_format'))
        ));
    }
    add_action('wp_ajax_complaint_list_update_status', 'complaint_list_update_status');
}

/**
 * AJAX handler: Delete complaint
 */
if (!function_exists('complaint_list_delete')) {
    function complaint_list_delete() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        }

        // ตรวจสอบสิทธิ์
        if (!current_user_can('delete_posts')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'You do not have permission to delete this data'));
        }

        // รับ ID ของเรื่องร้องเรียน
        $complaint_id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        if (empty($complaint_id)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid complaint ID'));
        }

        // ตรวจสอบว่ามีเรื่องร้องเรียนนี้หรือไม่
        $complaint = get_post($complaint_id);
        if (!$complaint || $complaint->post_type !== 'complaint') {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'Complaint not found'));
        }

        // ลบเรื่องร้องเรียน (ย้ายไปถังขยะ)
        $result = wp_trash_post($complaint_id);

        if ($result) {
            wp_send_json_success(array(
                DGA_MESSAGE_KEY => 'ลบเรื่องร้องเรียนเรียบร้อยแล้ว'
            ));
        } else {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่สามารถลบเรื่องร้องเรียนได้'));
        }
    }
    add_action('wp_ajax_complaint_list_delete', 'complaint_list_delete');
}

/**
 * AJAX handler: Export complaints data
 */
if (!function_exists('complaint_list_export_data')) {
    function complaint_list_export_data() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        }

        // ตรวจสอบสิทธิ์
        if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'You do not have permission to export this data'));
        }

        // รับพารามิเตอร์
        $status = isset($_POST[DGA_STATUS_FIELD]) ? sanitize_text_field($_POST[DGA_STATUS_FIELD]) : '';
        $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : '';
        $date_filter = isset($_POST['date']) ? sanitize_text_field($_POST['date']) : '';

        // สร้าง query arguments
        $args = array(
            DGA_POST_TYPE_FIELD => 'complaint',
            DGA_POSTS_PER_PAGE => -1,
            'meta_query' => array()
        );

        // กรองตามสถานะ
        if (!empty($status)) {
            $args[DGA_POST_STATUS_FIELD] = $status;
        } else {
            $args[DGA_POST_STATUS_FIELD] = array('complaint_pending', 'complaint_in_progress', 'complaint_completed', 'complaint_rejected', 'complaint_closed');
        }

        // กรองตามประเภท
        if (!empty($type)) {
            $args['meta_query'][] = array(
                'key' => '_complaint_type',
                'value' => $type,
                'compare' => '='
            );
        }

        // กรองตามวันที่
        if (!empty($date_filter)) {
            $date = new DateTime();
            switch ($date_filter) {
                case 'today':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('today'))
                    );
                    break;
                case 'week':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-7 days'))
                    );
                    break;
                case 'month':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-30 days'))
                    );
                    break;
                case 'quarter':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-90 days'))
                    );
                    break;
                case 'year':
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('first day of january this year')),
                        'before' => date('Y-m-d', strtotime('last day of december this year')),
                        'inclusive' => true
                    );
                    break;
                default:
                    // Default to month filter if no valid filter is provided
                    $args['date_query'] = array(
                        'after' => date('Y-m-d', strtotime('-30 days'))
                    );
                    break;
            }
        }

        // ดึงข้อมูลเรื่องร้องเรียน
        $query = new WP_Query($args);
        $complaints = array();
        $status_labels = array(
            'complaint_pending' => 'รอดำเนินการ',
            'complaint_in_progress' => 'กำลังดำเนินการ',
            'complaint_completed' => 'เสร็จสิ้น',
            'complaint_rejected' => 'ไม่รับพิจารณา',
            'complaint_closed' => 'ปิดเรื่อง'
        );
        
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // ดึงข้อมูลเมตา
            $type_value = get_post_meta($post_id, '_complaint_type', true);
            $department = get_post_meta($post_id, '_complaint_department', true);
            $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
            $complainant_name = get_post_meta($post_id, '_complainant_name', true);
            $ref_number = get_post_meta($post_id, '_complaint_ref', true);
            $details = get_post_field('post_content', $post_id);
            $due_date = get_post_meta($post_id, '_response_due_date', true);
            $status = get_post_status($post_id);
            
            // สร้างชื่อเรื่องและข้อมูลผู้ร้องเรียน
            $type_label = get_complaint_type_label($type_value);
            $complainant = ($is_anonymous == 'yes') ? 'ไม่ประสงค์ออกนาม' : $complainant_name;
            $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
            
            // จัดเตรียมข้อมูลสำหรับส่งออก
            $complaints[] = array(
                'ref' => $ref_number ?: 'CPL-' . str_pad($post_id, 6, '0', STR_PAD_LEFT),
                'date' => get_the_date('Y-m-d H:i:s'),
                DGA_TYPE_FIELD => $type_label,
                'department' => $department ?: 'ไม่ระบุ',
                'complainant' => $complainant ?: 'ไม่ระบุ',
                'details' => $details,
                DGA_STATUS_FIELD => $status_label,
                'due_date' => $due_date ? date('Y-m-d', strtotime($due_date)) : ''
            );
        }
        
        wp_reset_postdata();
        
        // สร้างข้อมูล CSV
        $csv_data = array();
        $headers = array(
            'เลขที่',
            'วันที่รับเรื่อง',
            'ประเภท',
            'หน่วยงาน',
            'ผู้ร้องเรียน',
            'รายละเอียด',
            'สถานะ',
            'กำหนดตอบ'
        );
        
        $csv_data[] = implode(',', array_map('complaint_list_csv_escape', $headers));
        
        foreach ($complaints as $complaint) {
            $row = array(
                $complaint['ref'],
                $complaint['date'],
                $complaint['type'],
                $complaint['department'],
                $complaint['complainant'],
                $complaint['details'],
                $complaint[DGA_STATUS_FIELD],
                $complaint['due_date']
            );
            
            $csv_data[] = implode(',', array_map('complaint_list_csv_escape', $row));
        }
        
        $csv_content = implode("\n", $csv_data);
        
        // ส่งข้อมูลกลับ
        wp_send_json_success(array(
            'csv' => $csv_content,
            'filename' => 'complaints-export-' . date('Y-m-d') . '.csv',
            'count' => count($complaints)
        ));
    }
    add_action('wp_ajax_complaint_list_export_data', 'complaint_list_export_data');
}

/**
 * Helper: Escape CSV values
 */
if (!function_exists('complaint_list_csv_escape')) {
    function complaint_list_csv_escape($value) {
        $value = str_replace('"', '""', $value);
        $value = preg_replace('/[\r\n]+/', ' ', $value);
        return '"' . $value . '"';
    }
}

/**
 * Add complaint metaboxes in admin
 */
if (!function_exists('add_complaint_metaboxes')) {
    function add_complaint_metaboxes() {
        add_meta_box(
            'complaint_details',
            'รายละเอียดเรื่องร้องเรียน',
            'complaint_details_metabox',
            'complaint',
            'normal',
            'high'
        );
        
        add_meta_box(
            'complaint_status',
            'สถานะเรื่องร้องเรียน',
            'complaint_status_metabox',
            'complaint',
            'side',
            'core'
        );
    }
    add_action('add_meta_boxes', 'add_complaint_metaboxes');
}

/**
 * Complaint details metabox
 */
if (!function_exists('complaint_details_metabox')) {
    function complaint_details_metabox($post) {
        // เพิ่ม nonce field
        wp_nonce_field('complaint_details_save', 'complaint_details_nonce');
        
        // ดึงค่าเมตา
        $ref_number = get_post_meta($post->ID, '_complaint_ref', true);
        $type = get_post_meta($post->ID, '_complaint_type', true);
        $department = get_post_meta($post->ID, '_complaint_department', true);
        $is_anonymous = get_post_meta($post->ID, '_is_anonymous', true);
        $complainant_name = get_post_meta($post->ID, '_complainant_name', true);
        $complainant_phone = get_post_meta($post->ID, '_complainant_phone', true);
        $complainant_email = get_post_meta($post->ID, '_complainant_email', true);
        $complainant_address = get_post_meta($post->ID, '_complainant_address', true);
        $due_date = get_post_meta($post->ID, '_response_due_date', true);
        ?>
        <style>
            .complaint-metabox label {
                display: block;
                margin: 10px 0 5px;
                font-weight: 600;
            }
            .complaint-metabox input[type="text"],
            .complaint-metabox input[type="email"],
            .complaint-metabox input[type="date"],
            .complaint-metabox select,
            .complaint-metabox textarea {
                width: 100%;
            }
            .complaint-metabox textarea {
                min-height: 100px;
            }
        </style>
        
        <div class="complaint-metabox">
            <label for="complaint_ref">เลขที่เรื่องร้องเรียน</label>
            <input type="text" id="complaint_ref" name="complaint_ref" value="<?php echo esc_attr($ref_number); ?>" />
            
            <label for="complaint_type">ประเภทเรื่องร้องเรียน</label>
            <select id="complaint_type" name="complaint_type">
                <option value="">-- เลือกประเภท --</option>
                <option value="corruption" <?php selected($type, 'corruption'); ?>>การทุจริตประพฤติมิชอบ</option>
                <option value="negligence" <?php selected($type, 'negligence'); ?>>การละเลยการปฏิบัติหน้าที่</option>
                <option value="misconduct" <?php selected($type, 'misconduct'); ?>>การปฏิบัติหน้าที่โดยมิชอบ</option>
                <option value="rights" <?php selected($type, 'rights'); ?>>การละเมิดสิทธิ</option>
                <option value="other" <?php selected($type, 'other'); ?>>อื่นๆ</option>
            </select>
            
            <label for="complaint_department">หน่วยงานที่ถูกร้องเรียน</label>
            <input type="text" id="complaint_department" name="complaint_department" value="<?php echo esc_attr($department); ?>" />
            
            <label for="response_due_date">กำหนดตอบ</label>
            <input type="date" id="response_due_date" name="response_due_date" value="<?php echo esc_attr($due_date); ?>" />
            
            <h3>ข้อมูลผู้ร้องเรียน</h3>
            
            <label for="is_anonymous">
                <input type="checkbox" id="is_anonymous" name="is_anonymous" value="yes" <?php checked($is_anonymous, 'yes'); ?> />
                ไม่ประสงค์ออกนาม
            </label>
            
            <label for="complainant_name">ชื่อ-นามสกุล</label>
            <input type="text" id="complainant_name" name="complainant_name" value="<?php echo esc_attr($complainant_name); ?>" />
            
            <label for="complainant_phone">เบอร์โทรศัพท์</label>
            <input type="text" id="complainant_phone" name="complainant_phone" value="<?php echo esc_attr($complainant_phone); ?>" />
            
            <label for="complainant_email">อีเมล</label>
            <input type="email" id="complainant_email" name="complainant_email" value="<?php echo esc_attr($complainant_email); ?>" />
            
            <label for="complainant_address">ที่อยู่</label>
            <textarea id="complainant_address" name="complainant_address"><?php echo esc_textarea($complainant_address); ?></textarea>
        </div>
        <?php
    }
}

/**
 * Complaint status metabox
 */
if (!function_exists('complaint_status_metabox')) {
    function complaint_status_metabox($post) {
        $current_status = get_post_status($post->ID);
        $status_labels = array(
            'complaint_pending' => 'รอดำเนินการ',
            'complaint_in_progress' => 'กำลังดำเนินการ',
            'complaint_completed' => 'เสร็จสิ้น',
            'complaint_rejected' => 'ไม่รับพิจารณา',
            'complaint_closed' => 'ปิดเรื่อง'
        );
        ?>
        <label for="post_status">สถานะปัจจุบัน:</label>
        <select name="post_status" id="post_status" style="width: 100%; margin-top: 5px;">
            <?php foreach ($status_labels as $status => $label): ?>
                <option value="<?php echo $status; ?>" <?php selected($current_status, $status); ?>>
                    <?php echo $label; ?>
                </option>
            <?php endforeach; ?>
        </select>
        <?php
    }
}

/**
 * Save complaint metabox data
 */
if (!function_exists('save_complaint_metabox')) {
    function save_complaint_metabox($post_id) {
        // ตรวจสอบ nonce
        if (!isset($_POST['complaint_details_nonce']) || !wp_verify_nonce($_POST['complaint_details_nonce'], 'complaint_details_save')) {
            return;
        }
        
        // ตรวจสอบ autosave
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
            return;
        }
        
        // ตรวจสอบสิทธิ์
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
        
        // บันทึกข้อมูล
        if (isset($_POST['complaint_ref'])) {
            update_post_meta($post_id, '_complaint_ref', sanitize_text_field($_POST['complaint_ref']));
        }
        
        if (isset($_POST['complaint_type'])) {
            update_post_meta($post_id, '_complaint_type', sanitize_text_field($_POST['complaint_type']));
        }
        
        if (isset($_POST['complaint_department'])) {
            update_post_meta($post_id, '_complaint_department', sanitize_text_field($_POST['complaint_department']));
        }
        
        if (isset($_POST['response_due_date'])) {
            update_post_meta($post_id, '_response_due_date', sanitize_text_field($_POST['response_due_date']));
        }
        
        update_post_meta($post_id, '_is_anonymous', isset($_POST['is_anonymous']) ? 'yes' : 'no');
        
        if (isset($_POST['complainant_name'])) {
            update_post_meta($post_id, '_complainant_name', sanitize_text_field($_POST['complainant_name']));
        }
        
        if (isset($_POST['complainant_phone'])) {
            update_post_meta($post_id, '_complainant_phone', sanitize_text_field($_POST['complainant_phone']));
        }
        
        if (isset($_POST['complainant_email'])) {
            update_post_meta($post_id, '_complainant_email', sanitize_email($_POST['complainant_email']));
        }
        
        if (isset($_POST['complainant_address'])) {
            update_post_meta($post_id, '_complainant_address', sanitize_textarea_field($_POST['complainant_address']));
        }
    }
    add_action('save_post_complaint', 'save_complaint_metabox');
}





/****** สถิติเรื่องร้องเรียน (Complaint Statistics) - FIXED VERSION ********/

// Helper function สำหรับแปลงประเภทเรื่องร้องเรียน
if (!function_exists('get_complaint_type_label')) {
    function get_complaint_type_label($type) {
        $types = array(
            'general' => 'ทั่วไป',
            'service' => 'บริการ',
            'corruption' => 'ทุจริต',
            'environment' => 'สิ่งแวดล้อม',
            'infrastructure' => 'โครงสร้างพื้นฐาน',
            'other' => 'อื่นๆ'
        );
        return isset($types[$type]) ? $types[$type] : $type;
    }
}

// Enqueue necessary scripts and styles for complaint statistics
if (!function_exists('complaint_stats_enqueue_scripts_xyz789')) {
    function complaint_stats_enqueue_scripts_xyz789() {
        // ตรวจสอบว่าหน้าปัจจุบันมี shortcode [complaint_stats] หรือไม่
        global $post;
        if (!is_a($post, 'WP_Post') || !has_shortcode($post->post_content, 'complaint_stats')) {
            return;
        }

        // ตรวจสอบสิทธิ์การเข้าถึง
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            return;
        }

        // Enqueue Bootstrap CSS and JS
        wp_enqueue_style(
            'complaint-stats-bootstrap',
            'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css',
            array(),
            '5.3.0'
        );
        
        wp_enqueue_script(
            'complaint-stats-bootstrap',
            'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js',
            array(DGA_JQUERY_HANDLE),
            '5.3.0',
            true
        );

        // Enqueue Highcharts core
        wp_enqueue_script(
            'complaint-stats-highcharts',
            'https://cdn.jsdelivr.net/npm/highcharts@11.3.0/highcharts.js',
            array(DGA_JQUERY_HANDLE),
            '11.3.0',
            true
        );

        // Enqueue Highcharts modules
        wp_enqueue_script(
            'complaint-stats-exporting',
            'https://cdn.jsdelivr.net/npm/highcharts@11.3.0/modules/exporting.js',
            array('complaint-stats-highcharts'),
            '11.3.0',
            true
        );

        wp_enqueue_script(
            'complaint-stats-export-data',
            'https://cdn.jsdelivr.net/npm/highcharts@11.3.0/modules/export-data.js',
            array('complaint-stats-highcharts', 'complaint-stats-exporting'),
            '11.3.0',
            true
        );

        // Enqueue XLSX library
        wp_enqueue_script(
            'complaint-stats-xlsx',
            'https://cdn.jsdelivr.net/npm/xlsx@0.18.0/dist/xlsx.full.min.js',
            array(),
            '0.18.0',
            true
        );

        // Enqueue Font Awesome
        wp_enqueue_style(
            'complaint-fontawesome',
            'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css',
            array(),
            '6.5.1'
        );

        // Enqueue Custom CSS and JS
        wp_enqueue_style(
            'complaint-stats-style',
            get_stylesheet_directory_uri() . '/css/complaint-stats.css',
            array('complaint-stats-bootstrap'),
            filemtime(get_stylesheet_directory() . '/css/complaint-stats.css')
        );
        
        wp_enqueue_script(
            'complaint-stats-script',
            get_stylesheet_directory_uri() . '/js/complaint-stats.js',
            array(DGA_JQUERY_HANDLE, 'complaint-stats-bootstrap', 'complaint-stats-highcharts'),
            filemtime(get_stylesheet_directory() . '/js/complaint-stats.js'),
            true
        );

        // Localize script สำหรับใช้ใน JavaScript
        wp_localize_script(
            'complaint-stats-script',
            'complaintStatsData',
            array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('complaint_stats_nonce'),
                'status_labels' => array(
                    'complaint_pending' => 'รอดำเนินการ',
                    'complaint_in_progress' => 'กำลังดำเนินการ',
                    'complaint_completed' => 'เสร็จสิ้น',
                    'complaint_rejected' => 'ไม่รับพิจารณา',
                    'complaint_closed' => 'ปิดเรื่อง'
                ),
                'status_colors' => array(
                    'complaint_pending' => 'warning',
                    'complaint_in_progress' => 'info',
                    'complaint_completed' => DGA_SUCCESS_STATUS,
                    'complaint_rejected' => 'danger',
                    'complaint_closed' => 'secondary'
                ),
                'messages' => array(
                    'loading' => 'กำลังโหลดข้อมูล...',
                    DGA_ERROR_STATUS => DGA_ERROR_RETRY_MESSAGE_TH,
                    'no_data' => 'ไม่พบข้อมูล',
                    'export_success' => 'ส่งออกข้อมูลเรียบร้อยแล้ว'
                ),
                'date_format' => get_option('date_format')
            )
        );
    }
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'complaint_stats_enqueue_scripts_xyz789');
}

// Create shortcode for complaint statistics
if (!function_exists('complaint_stats_shortcode_xyz789')) {
    function complaint_stats_shortcode_xyz789() {
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            return '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>ขออภัย คุณไม่มีสิทธิ์เข้าถึงหน้านี้</div>';
        }

        ob_start();
        ?>
        <div class="complaint-stats-container">
            <!-- ส่วนหัว -->
            <div class="stats-header mb-4">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h2 class="stats-title"><i class="fas fa-chart-bar me-2"></i>สถิติเรื่องร้องเรียน</h2>
                    </div>
                    <?php if (current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
                    <div class="col-md-6 text-md-end">
                        <button id="export-excel-btn" class="btn btn-success">
                            <i class="fas fa-file-excel me-1"></i> ส่งออกข้อมูล Excel
                        </button>
                    </div>
                    <?php endif; ?>
                </div>
            </div>

            <!-- แสดงการแจ้งเตือน -->
            <div id="stats-alert" class="alert d-none mb-4" role="alert"></div>

            <!-- ส่วนตัวกรอง -->
            <div class="stats-filters mb-4">
                <div class="card">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h3 class="section-title mb-0">ตัวกรองข้อมูล</h3>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label for="period-filter" class="form-label">ช่วงเวลา</label>
                                <select id="period-filter" class="form-select">
                                    <option value="monthly">รายเดือน</option>
                                    <option value="yearly">รายปี</option>
                                    <option value="daily">รายวัน</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="date-start" class="form-label">ตั้งแต่วันที่</label>
                                <input type="date" id="date-start" class="form-control">
                            </div>
                            <div class="col-md-4">
                                <label for="date-end" class="form-label">ถึงวันที่</label>
                                <input type="date" id="date-end" class="form-control">
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-12 text-end">
                                <button id="apply-stats-filters" class="btn btn-primary">
                                    <i class="fas fa-filter me-1"></i> กรองข้อมูล
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ภาพรวมสถิติ -->
            <div class="stats-summary mb-4">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="stats-card total-complaints">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h3 class="card-title text-primary">เรื่องร้องเรียนทั้งหมด</h3>
                                    <div class="stats-number" id="total-complaints">0</div>
                                    <div class="stats-subtitle">เรื่อง</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="stats-card daily-average">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h3 class="card-title text-success">ค่าเฉลี่ยต่อวัน</h3>
                                    <div class="stats-number" id="daily-average">0</div>
                                    <div class="stats-subtitle">เรื่อง/วัน</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="stats-card active-complaints">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h3 class="card-title text-warning">อยู่ระหว่างดำเนินการ</h3>
                                    <div class="stats-number" id="active-complaints">0</div>
                                    <div class="stats-subtitle">เรื่อง</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- สถานะเรื่องร้องเรียน -->
            <div class="stats-detail-cards mb-4">
                <div class="card">
                    <div class="card-header bg-primary bg-opacity-10">
                        <h3 class="section-title mb-0">สถานะเรื่องร้องเรียน</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div id="complaints-by-status"></div>
                            </div>
                            <div class="col-md-7">
                                <div id="status-stats" class="h-100 d-flex align-items-center"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- แผนภูมิสถิติ -->
            <div class="stats-charts mb-4">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header bg-primary bg-opacity-10">
                                <h3 class="section-title mb-0">สถิติตามประเภทเรื่องร้องเรียน</h3>
                            </div>
                            <div class="card-body">
                                <div id="complaints-by-type" class="chart-container"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header bg-primary bg-opacity-10">
                                <h3 class="section-title mb-0">สถิติตามหน่วยงาน</h3>
                            </div>
                            <div class="card-body">
                                <div id="complaints-by-department" class="chart-container"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- แนวโน้มเรื่องร้องเรียน -->
            <div class="stats-trend mb-4">
                <div class="card">
                    <div class="card-header bg-primary bg-opacity-10">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3 class="section-title mb-0">แนวโน้มเรื่องร้องเรียนตามช่วงเวลา</h3>
                            <div class="trend-filters">
                                <select id="trend-status-filter" class="form-select form-select-sm">
                                    <option value="all">ทุกสถานะ</option>
                                    <option value="complaint_pending">รอดำเนินการ</option>
                                    <option value="complaint_in_progress">กำลังดำเนินการ</option>
                                    <option value="complaint_completed">เสร็จสิ้น</option>
                                    <option value="complaint_rejected">ไม่รับพิจารณา</option>
                                    <option value="complaint_closed">ปิดเรื่อง</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="complaints-trend" class="chart-container"></div>
                    </div>
                </div>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    add_shortcode('complaint_stats', 'complaint_stats_shortcode_xyz789');
}

// AJAX handler for getting complaint statistics - FIXED VERSION
if (!function_exists('get_complaint_statistics_xyz789')) {
    function get_complaint_statistics_xyz789() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_stats_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_INVALID_NONCE_MESSAGE));
            return;
        }
        
        if (!current_user_can(DGA_EDIT_POSTS_CAP) && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่มีสิทธิ์เข้าถึง'));
            return;
        }

        $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'monthly';
        $start_date = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : '';
        $end_date = isset($_POST['end_date']) ? sanitize_text_field($_POST['end_date']) : '';

        // กำหนดค่าเริ่มต้นหากไม่ได้ระบุวันที่
        if (empty($start_date)) {
            $start_date = date('Y-m-d', strtotime('-30 days'));
        }
        if (empty($end_date)) {
            $end_date = date('Y-m-d');
        }

        // Query arguments - รวม post_status ทั่วไปด้วย
        $args = array(
            DGA_POST_TYPE_FIELD => 'complaint',
            DGA_POSTS_PER_PAGE => -1,
            DGA_POST_STATUS_FIELD => array(
                'complaint_pending', 
                'complaint_in_progress', 
                'complaint_completed', 
                'complaint_rejected', 
                'complaint_closed', 
                DGA_PUBLISH_STATUS, 
                'private',
                'draft'
            ),
            'date_query' => array(
                array(
                    'after' => $start_date . ' 00:00:00',
                    'before' => $end_date . ' 23:59:59',
                    'inclusive' => true
                )
            )
        );

        $query = new WP_Query($args);
        $complaints = $query->posts;

        // Initialize statistics arrays
        $stats = array(
            DGA_TOTAL_FIELD_KEY => count($complaints),
            'by_type' => array(),
            'by_department' => array(),
            'by_status' => array(
                'complaint_pending' => 0,
                'complaint_in_progress' => 0,
                'complaint_completed' => 0,
                'complaint_rejected' => 0,
                'complaint_closed' => 0
            ),
            'trend' => array(),
            'active_complaints' => 0
        );

        // คำนวณวันเพื่อหาค่าเฉลี่ยต่อวัน
        $date1 = new DateTime($start_date);
        $date2 = new DateTime($end_date);
        $date_diff = $date2->diff($date1)->days + 1;
        $stats['daily_average'] = $date_diff > 0 ? round($stats[DGA_TOTAL_FIELD_KEY] / $date_diff, 2) : 0;

        // Initialize trend data structure
        $trend_data = array();
        foreach ($stats['by_status'] as $status => $count) {
            $trend_data[$status] = array();
        }
        
        // กำหนดช่วงเวลาสำหรับแนวโน้ม
        $period_format = 'Y-m-d';
        switch ($period) {
            case 'yearly':
                $period_format = 'Y';
                break;
            case 'monthly':
                $period_format = 'Y-m';
                break;
            case 'daily':
                $period_format = 'Y-m-d';
                break;
            default:
                $period_format = 'Y-m'; // Default to monthly
                break;
        }
        
        // สร้างข้อมูลช่วงเวลาล่วงหน้า
        $period_labels = array();
        $current_date = clone $date1;
        
        while ($current_date <= $date2) {
            $period_key = $current_date->format($period_format);
            $period_labels[$period_key] = true;
            
            // เพิ่มวันตามประเภทช่วงเวลา
            switch ($period) {
                case 'yearly':
                    $current_date->modify('+1 year');
                    break;
                case 'monthly':
                    $current_date->modify('+1 month');
                    break;
                case 'daily':
                    $current_date->modify('+1 day');
                    break;
                default:
                    $current_date->modify('+1 month'); // Default to monthly increment
                    break;
            }
        }
        
        // เตรียมโครงสร้างข้อมูลแนวโน้มด้วยช่วงเวลาที่สร้างไว้
        foreach ($stats['by_status'] as $status => $count) {
            foreach (array_keys($period_labels) as $period_key) {
                $trend_data[$status][$period_key] = 0;
            }
        }

        // Process each complaint
        foreach ($complaints as $complaint) {
            // Count by type
            $type = get_post_meta($complaint->ID, '_complaint_type', true);
            if (empty($type)) {
                $type = 'other';
            }
            $type_label = get_complaint_type_label($type);
            if (!isset($stats['by_type'][$type_label])) {
                $stats['by_type'][$type_label] = 0;
            }
            $stats['by_type'][$type_label]++;

            // Count by department
            $department = get_post_meta($complaint->ID, '_complaint_department', true);
            if (empty($department)) {
                $department = 'ไม่ระบุ';
            }
            if (!isset($stats['by_department'][$department])) {
                $stats['by_department'][$department] = 0;
            }
            $stats['by_department'][$department]++;

            // Count by status
            $status = get_post_status($complaint->ID);
            
            // Map standard statuses to complaint statuses
            if ($status === DGA_PUBLISH_STATUS || $status === 'private' || $status === 'draft') {
                // ถ้าเป็น status มาตรฐาน ให้ดูจาก meta หรือ default เป็น pending
                $custom_status = get_post_meta($complaint->ID, '_complaint_status', true);
                if (!empty($custom_status) && strpos($custom_status, 'complaint_') === 0) {
                    $status = $custom_status;
                } else {
                    $status = 'complaint_pending';
                }
            }
            
            if (isset($stats['by_status'][$status])) {
                $stats['by_status'][$status]++;
            }
            
            // Count active complaints
            if ($status === 'complaint_pending' || $status === 'complaint_in_progress') {
                $stats['active_complaints']++;
            }

            // Process trend data
            $date = new DateTime($complaint->post_date);
            $period_key = $date->format($period_format);
            
            if (isset($trend_data[$status][$period_key])) {
                $trend_data[$status][$period_key]++;
            }
        }

        // Format trend data for each status
        $formatted_trend = array();
        foreach ($trend_data as $status => $periods) {
            ksort($periods); // Sort by date
            $trend_series = array();
            foreach ($periods as $date => $count) {
                $label = $date;
                if ($period === 'monthly') {
                    $date_obj = DateTime::createFromFormat('Y-m', $date);
                    if ($date_obj) {
                        $label = $date_obj->format('M Y');
                    }
                } elseif ($period === 'daily') {
                    $date_obj = DateTime::createFromFormat('Y-m-d', $date);
                    if ($date_obj) {
                        $label = $date_obj->format('d M Y');
                    }
                }
                $trend_series[] = array(
                    'period' => $label,
                    'count' => $count
                );
            }
            $formatted_trend[$status] = $trend_series;
        }

        $stats['trend'] = $formatted_trend;

        // Debug information
        $stats['debug'] = array(
            'total_found' => $query->found_posts,
            'query_args' => $args,
            'start_date' => $start_date,
            'end_date' => $end_date
        );

        wp_reset_postdata();
        
        wp_send_json_success($stats);
    }
    add_action('wp_ajax_get_complaint_statistics', 'get_complaint_statistics_xyz789');
}

// Export complaint data to Excel - FIXED VERSION
if (!function_exists('export_complaint_data_xyz789')) {
    function export_complaint_data_xyz789() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_stats_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_INVALID_NONCE_MESSAGE));
            return;
        }
        
        if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่มีสิทธิ์เข้าถึง'));
            return;
        }

        $start_date = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : '';
        $end_date = isset($_POST['end_date']) ? sanitize_text_field($_POST['end_date']) : '';

        // กำหนดค่าเริ่มต้นหากไม่ได้ระบุวันที่
        if (empty($start_date)) {
            $start_date = date('Y-m-d', strtotime('-30 days'));
        }
        if (empty($end_date)) {
            $end_date = date('Y-m-d');
        }

        // Query arguments
        $args = array(
            DGA_POST_TYPE_FIELD => 'complaint',
            DGA_POSTS_PER_PAGE => -1,
            DGA_POST_STATUS_FIELD => array(
                'complaint_pending', 
                'complaint_in_progress', 
                'complaint_completed', 
                'complaint_rejected', 
                'complaint_closed',
                DGA_PUBLISH_STATUS,
                'private',
                'draft'
            ),
            'date_query' => array(
                array(
                    'after' => $start_date . ' 00:00:00',
                    'before' => $end_date . ' 23:59:59',
                    'inclusive' => true
                )
            )
        );

        $query = new WP_Query($args);
        $complaints = $query->posts;

        // สร้างข้อมูลสำหรับส่งออก
        $export_data = array();
        $export_data[] = array(
            'เลขที่',
            'วันที่รับเรื่อง',
            'ประเภท',
            'หน่วยงาน',
            'รายละเอียด',
            'ผู้ร้องเรียน',
            'สถานะ',
            'กำหนดตอบ',
            'วันที่อัพเดตล่าสุด',
            'ผู้ดำเนินการ'
        );

        // ข้อมูลสถานะ
        $status_labels = array(
            'complaint_pending' => 'รอดำเนินการ',
            'complaint_in_progress' => 'กำลังดำเนินการ',
            'complaint_completed' => 'เสร็จสิ้น',
            'complaint_rejected' => 'ไม่รับพิจารณา',
            'complaint_closed' => 'ปิดเรื่อง'
        );

        foreach ($complaints as $complaint) {
            $type = get_post_meta($complaint->ID, '_complaint_type', true);
            $department = get_post_meta($complaint->ID, '_complaint_department', true) ?: 'ไม่ระบุ';
            $ref_number = get_post_meta($complaint->ID, '_complaint_ref', true) ?: 'CPL-' . str_pad($complaint->ID, 6, '0', STR_PAD_LEFT);
            $is_anonymous = get_post_meta($complaint->ID, '_is_anonymous', true);
            $complainant_name = $is_anonymous == 'yes' ? 'ไม่ประสงค์ออกนาม' : get_post_meta($complaint->ID, '_complainant_name', true);
            $due_date = get_post_meta($complaint->ID, '_response_due_date', true);
            $last_updated = get_post_meta($complaint->ID, '_last_updated', true);
            $last_updated_by = get_post_meta($complaint->ID, '_last_updated_by', true);
            
            $user_info = get_userdata($last_updated_by);
            $handler_name = $user_info ? $user_info->display_name : '';
            
            $status = get_post_status($complaint->ID);
            
            // Map standard statuses
            if ($status === DGA_PUBLISH_STATUS || $status === 'private' || $status === 'draft') {
                $custom_status = get_post_meta($complaint->ID, '_complaint_status', true);
                if (!empty($custom_status) && strpos($custom_status, 'complaint_') === 0) {
                    $status = $custom_status;
                } else {
                    $status = 'complaint_pending';
                }
            }
            
            $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
            
            $export_data[] = array(
                $ref_number,
                get_the_date('Y-m-d H:i:s', $complaint->ID),
                get_complaint_type_label($type),
                $department,
                wp_strip_all_tags($complaint->post_content),
                $complainant_name ?: 'ไม่ระบุ',
                $status_label,
                $due_date ? date('Y-m-d', strtotime($due_date)) : '',
                $last_updated ? date('Y-m-d H:i:s', strtotime($last_updated)) : '',
                $handler_name
            );
        }

        wp_reset_postdata();

        wp_send_json_success(array(
            'data' => $export_data,
            'filename' => 'complaint-stats-' . date('Y-m-d') . '.xlsx',
            'count' => count($complaints)
        ));
    }
    add_action('wp_ajax_export_complaint_data', 'export_complaint_data_xyz789');
}

// สร้างหรือลงทะเบียน custom post statuses
if (!function_exists('register_complaint_post_statuses_xyz789')) {
    function register_complaint_post_statuses_xyz789() {
        register_post_status('complaint_pending', array(
            DGA_LABEL_FIELD => _x('รอดำเนินการ', 'post status'),
            'public' => true,
            'exclude_from_search' => false,
            'show_in_admin_all_list' => true,
            'show_in_admin_status_list' => true,
            DGA_POST_TYPE_FIELD => array('complaint'),
            'label_count' => _n_noop('รอดำเนินการ <span class="count">(%s)</span>', 'รอดำเนินการ <span class="count">(%s)</span>')
        ));

        register_post_status('complaint_in_progress', array(
            DGA_LABEL_FIELD => _x('กำลังดำเนินการ', 'post status'),
            'public' => true,
            'exclude_from_search' => false,
            'show_in_admin_all_list' => true,
            'show_in_admin_status_list' => true,
            DGA_POST_TYPE_FIELD => array('complaint'),
            'label_count' => _n_noop('กำลังดำเนินการ <span class="count">(%s)</span>', 'กำลังดำเนินการ <span class="count">(%s)</span>')
        ));

        register_post_status('complaint_completed', array(
            DGA_LABEL_FIELD => _x('เสร็จสิ้น', 'post status'),
            'public' => true,
            'exclude_from_search' => false,
            'show_in_admin_all_list' => true,
            'show_in_admin_status_list' => true,
            DGA_POST_TYPE_FIELD => array('complaint'),
            'label_count' => _n_noop('เสร็จสิ้น <span class="count">(%s)</span>', 'เสร็จสิ้น <span class="count">(%s)</span>')
        ));

        register_post_status('complaint_rejected', array(
            DGA_LABEL_FIELD => _x('ไม่รับพิจารณา', 'post status'),
            'public' => true,
            'exclude_from_search' => false,
            'show_in_admin_all_list' => true,
            'show_in_admin_status_list' => true,
            DGA_POST_TYPE_FIELD => array('complaint'),
            'label_count' => _n_noop('ไม่รับพิจารณา <span class="count">(%s)</span>', 'ไม่รับพิจารณา <span class="count">(%s)</span>')
        ));

        register_post_status('complaint_closed', array(
            DGA_LABEL_FIELD => _x('ปิดเรื่อง', 'post status'),
            'public' => true,
            'exclude_from_search' => false,
            'show_in_admin_all_list' => true,
            'show_in_admin_status_list' => true,
            DGA_POST_TYPE_FIELD => array('complaint'),
            'label_count' => _n_noop('ปิดเรื่อง <span class="count">(%s)</span>', 'ปิดเรื่อง <span class="count">(%s)</span>')
        ));
    }
    add_action('init', 'register_complaint_post_statuses_xyz789', 10);
}




/**** ปฏิทินงาน - ปรับปรุง Accessibility และ Modal ******/

function thai_calendar_shortcode_tc24() {
    // Enqueue styles and scripts
    wp_enqueue_style('thai-calendar-style-tc24', get_stylesheet_directory_uri() . '/css/thai-calendar-tc24.css', array(), '1.2.0');
    wp_enqueue_script('thai-calendar-script-tc24', get_stylesheet_directory_uri() . '/js/thai-calendar-tc24.js', array(DGA_JQUERY_HANDLE), '1.2.0', true);
    
    // Add localized script data
    wp_localize_script('thai-calendar-script-tc24', 'thaiCalendarData_tc24', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('thai-calendar-nonce-tc24'),
        'months' => array(
            'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
            'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
        ),
        'weekdays' => array('อา', 'จ', 'อ', 'พ', 'พฤ', 'ศ', 'ส'),
        'i18n' => array(
            'previous_month' => __('เดือนก่อนหน้า', DGA_TEXT_DOMAIN),
            'next_month' => __('เดือนถัดไป', DGA_TEXT_DOMAIN),
            'close_popup' => __('ปิดหน้าต่าง', DGA_TEXT_DOMAIN),
            'view_posts' => __('ดูรายการของวันที่', DGA_TEXT_DOMAIN),
            'no_posts' => __('ไม่มีรายการในวันนี้', DGA_TEXT_DOMAIN),
            'posts_count' => __('มี %d รายการ', DGA_TEXT_DOMAIN),
            'loading' => __('กำลังโหลด...', DGA_TEXT_DOMAIN),
            'view_all' => __('ดูทั้งหมด', DGA_TEXT_DOMAIN),
            'post_types' => array(
                'egp' => __('หน่วยงาน', DGA_TEXT_DOMAIN),
                'mpeople' => __('บุคลากร', DGA_TEXT_DOMAIN),
                'article' => __('บทความ', DGA_TEXT_DOMAIN),
                'complaint' => __('ร้องเรียน', DGA_TEXT_DOMAIN)
            )
        )
    ));

    ob_start();
    ?>
    <div class="thai-calendar-wrapper-tc24" role="application" aria-label="<?php esc_attr_e('ปฏิทินกิจกรรม', DGA_TEXT_DOMAIN); ?>">
        <div class="calendar-header-tc24">
            <button class="nav-btn-tc24 prev-month-tc24" 
                    aria-label="<?php esc_attr_e('เดือนก่อนหน้า', DGA_TEXT_DOMAIN); ?>"
                    aria-describedby="current-month-year-tc24">
                <span aria-hidden="true">‹</span>
            </button>
            <h2 class="current-month-year-tc24" id="current-month-year-tc24" aria-live="polite"></h2>
            <button class="nav-btn-tc24 next-month-tc24" 
                    aria-label="<?php esc_attr_e('เดือนถัดไป', DGA_TEXT_DOMAIN); ?>"
                    aria-describedby="current-month-year-tc24">
                <span aria-hidden="true">›</span>
            </button>
        </div>
        
        <div class="calendar-body-tc24">
            <div class="weekdays-tc24" role="row">
                <?php
                $weekdays = array(
                    __('อาทิตย์', DGA_TEXT_DOMAIN),
                    __('จันทร์', DGA_TEXT_DOMAIN),
                    __('อังคาร', DGA_TEXT_DOMAIN),
                    __('พุธ', DGA_TEXT_DOMAIN),
                    __('พฤหัสบดี', DGA_TEXT_DOMAIN),
                    __('ศุกร์', DGA_TEXT_DOMAIN),
                    __('เสาร์', DGA_TEXT_DOMAIN)
                );
                $short_weekdays = array('อา', 'จ', 'อ', 'พ', 'พฤ', 'ศ', 'ส');
                
                for($i = 0; $i < 7; $i++) {
                    echo '<div role="columnheader" aria-label="' . esc_attr($weekdays[$i]) . '">' . esc_html($short_weekdays[$i]) . '</div>';
                }
                ?>
            </div>
            <div class="days-grid-tc24" role="grid" aria-label="<?php esc_attr_e('ตารางปฏิทิน', DGA_TEXT_DOMAIN); ?>"></div>
        </div>
        
        <!-- Enhanced Modal Popup -->
        <div class="event-popup-tc24" role="dialog" aria-modal="true" aria-hidden="true" aria-labelledby="popup-title-tc24">
            <div class="popup-overlay-tc24"></div>
            <div class="popup-content-tc24">
                <div class="popup-header-tc24">
                    <div class="popup-title-section-tc24">
                        <h3 id="popup-title-tc24"><?php esc_html_e('รายการ', DGA_TEXT_DOMAIN); ?></h3>
                        <div class="popup-date-display-tc24" aria-live="polite"></div>
                    </div>
                    <button class="close-popup-tc24" 
                            aria-label="<?php esc_attr_e('ปิดหน้าต่าง', DGA_TEXT_DOMAIN); ?>">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                
                <div class="popup-body-tc24">
                    <div class="posts-summary-tc24" aria-live="polite"></div>
                    <div class="posts-list-wrapper-tc24">
                        <ul class="posts-list-tc24" role="list"></ul>
                    </div>
                    <div class="popup-actions-tc24">
                        <button class="view-all-posts-tc24" style="display: none;">
                            <?php esc_html_e('ดูรายการทั้งหมด', DGA_TEXT_DOMAIN); ?>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Screen reader announcements -->
        <div class="sr-only-tc24" aria-live="polite" aria-atomic="true"></div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('thai_calendar', 'thai_calendar_shortcode_tc24');

// Ajax handler for fetching posts - Enhanced security and performance
function get_calendar_posts_tc24() {
    // Enhanced security check
    if (!check_ajax_referer('thai-calendar-nonce-tc24', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)));
        return;
    }
    
    $year = isset($_POST['year']) ? absint($_POST['year']) : date('Y');
    $month = isset($_POST['month']) ? absint($_POST['month']) : date('m');
    
    // Validate year and month ranges
    if ($year < 1970 || $year > 2050 || $month < 1 || $month > 12) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ข้อมูลวันที่ไม่ถูกต้อง', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // Convert to Buddhist year for display
    $buddhist_year = $year + 543;
    
    $post_types = array('egp', 'mpeople', 'article', 'complaint');
    $posts_by_date = array();
    
    foreach ($post_types as $post_type) {
        $args = array(
            DGA_POST_TYPE_FIELD => sanitize_text_field($post_type),
            DGA_POSTS_PER_PAGE => 100,
            DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
            'date_query' => array(
                array(
                    'year' => $year,
                    'month' => $month,
                ),
            ),
            DGA_ORDERBY_FIELD_VALUE => 'date',
            DGA_ORDER_FIELD => 'ASC'
        );
        
        $query = new WP_Query($args);
        
        if ($query->have_posts()) {
            while ($query->have_posts()) {
                $query->the_post();
                $post_date = get_the_date('Y-m-d');
                
                if (!isset($posts_by_date[$post_date])) {
                    $posts_by_date[$post_date] = array(
                        'preview' => array(),
                        'all' => array(),
                        'count' => 0,
                        'types' => array()
                    );
                }
                
                $post_data = array(
                    'id' => get_the_ID(),
                    DGA_TITLE_FIELD => wp_strip_all_tags(get_the_title()),
                    'url' => esc_url(get_permalink()),
                    DGA_TYPE_FIELD => sanitize_text_field($post_type),
                    'excerpt' => wp_trim_words(wp_strip_all_tags(get_the_excerpt()), 25),
                    'date' => get_the_date('d F Y'),
                    'time' => get_the_time('H:i'),
                    'thumbnail' => get_the_post_thumbnail_url(get_the_ID(), 'thumbnail')
                );

                $posts_by_date[$post_date]['all'][] = $post_data;
                $posts_by_date[$post_date]['count']++;
                
                // Track post types for this date
                if (!in_array($post_type, $posts_by_date[$post_date]['types'])) {
                    $posts_by_date[$post_date]['types'][] = $post_type;
                }
                
                // Add to preview if less than 5 items
                if (count($posts_by_date[$post_date]['preview']) < 5) {
                    $posts_by_date[$post_date]['preview'][] = $post_data;
                }
            }
        }
        wp_reset_postdata();
    }
    
    $response = array(
        DGA_SUCCESS_STATUS => true,
        'posts' => $posts_by_date,
        'month_info' => array(
            'year' => $year,
            'buddhist_year' => $buddhist_year,
            'month' => $month,
            'days_in_month' => date('t', strtotime("$year-$month-01")),
            'first_day' => date('w', strtotime("$year-$month-01"))
        )
    );
    
    wp_send_json($response);
}
add_action('wp_ajax_get_calendar_posts', 'get_calendar_posts_tc24');
add_action('wp_ajax_nopriv_get_calendar_posts', 'get_calendar_posts_tc24');




// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

/**
 * 1. ส่วนการลงทะเบียน Scripts และ Styles
 */
function init_department_role_manager_xdk738() {
    $child_theme_path = get_stylesheet_directory();
    $child_theme_uri = get_stylesheet_directory_uri();

    // ตรวจสอบและลงทะเบียน JavaScript
    $js_path = $child_theme_path . '/js/department-role-enhanced.js';
    if (file_exists($js_path)) {
        wp_register_script(
            'department-role-enhanced-script',
            $child_theme_uri . '/js/department-role-enhanced.js',
            array(DGA_JQUERY_HANDLE),
            '2.0.0',
            true
        );

        // เพิ่ม localization พร้อมข้อมูลสิทธิ์ทั้งหมด
        wp_localize_script(
            'department-role-enhanced-script',
            'departmentRoleEnhanced',
            array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('department_role_enhanced_nonce'),
                'messages' => array(
                    'confirmDelete' => __('คุณแน่ใจหรือไม่ที่จะลบบทบาทนี้?', DGA_TEXT_DOMAIN),
                    'confirmReset' => __('คุณแน่ใจหรือไม่ที่จะรีเซ็ตสิทธิ์ทั้งหมด?', DGA_TEXT_DOMAIN),
                    'defaultRoleError' => __('ไม่สามารถดำเนินการกับบทบาทเริ่มต้นได้', DGA_TEXT_DOMAIN),
                    'roleExistsError' => __('ชื่อบทบาทนี้มีอยู่แล้ว', DGA_TEXT_DOMAIN),
                    'generalError' => __(DGA_ERROR_RETRY_MESSAGE_TH, DGA_TEXT_DOMAIN),
                    'permissionSaved' => __('บันทึกการตั้งค่าสิทธิ์เรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
                    'presetApplied' => __('นำเข้าเทมเพลตสิทธิ์เรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
                    'searchPlaceholder' => __('ค้นหาสิทธิ์...', DGA_TEXT_DOMAIN)
                ),
                'capabilityGroups' => get_capability_groups_xdk738(),
                'presetTemplates' => get_preset_templates_xdk738()
            )
        );
    }

    // ตรวจสอบและลงทะเบียน CSS
    $css_path = $child_theme_path . '/css/department-role-enhanced.css';
    if (file_exists($css_path)) {
        wp_register_style(
            'department-role-enhanced-styles',
            $child_theme_uri . '/css/department-role-enhanced.css',
            array(),
            '2.0.0'
        );
    }
    
    // โหลด Dashicons
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'enqueue_dashicons_front');
}
add_action('init', 'init_department_role_manager_xdk738');

/**
 * โหลด Dashicons สำหรับส่วน Frontend
 */
function enqueue_dashicons_front() {
    wp_enqueue_style('dashicons');
}

/**
 * โหลด scripts และ styles เมื่อมี shortcode
 */
function enqueue_enhanced_role_scripts() {
    global $post;
    
    if ($post && (
        has_shortcode($post->post_content, 'department_role_manager_enhanced') || 
        has_shortcode($post->post_content, 'department_role_table_enhanced')
    )) {
        if (wp_script_is('department-role-enhanced-script', 'registered')) {
            wp_enqueue_script('department-role-enhanced-script');
        }
        
        if (wp_style_is('department-role-enhanced-styles', 'registered')) {
            wp_enqueue_style('department-role-enhanced-styles');
        }
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'enqueue_enhanced_role_scripts');

/**
 * 2. ฟังก์ชันจัดกลุ่ม Capabilities
 */
function get_capability_groups_xdk738() {
    return array(
        'posts' => array(
            DGA_LABEL_FIELD => __('โพสต์และเนื้อหา', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-post',
            'capabilities' => array(
                DGA_EDIT_POSTS_CAP => __('แก้ไขโพสต์', DGA_TEXT_DOMAIN),
                'edit_others_posts' => __('แก้ไขโพสต์ของผู้อื่น', DGA_TEXT_DOMAIN),
                'publish_posts' => __('เผยแพร่โพสต์', DGA_TEXT_DOMAIN),
                'read_private_posts' => __('อ่านโพสต์ส่วนตัว', DGA_TEXT_DOMAIN),
                'delete_posts' => __('ลบโพสต์', DGA_TEXT_DOMAIN),
                'delete_private_posts' => __('ลบโพสต์ส่วนตัว', DGA_TEXT_DOMAIN),
                'delete_published_posts' => __('ลบโพสต์ที่เผยแพร่แล้ว', DGA_TEXT_DOMAIN),
                'delete_others_posts' => __('ลบโพสต์ของผู้อื่น', DGA_TEXT_DOMAIN),
                'edit_private_posts' => __('แก้ไขโพสต์ส่วนตัว', DGA_TEXT_DOMAIN),
                'edit_published_posts' => __('แก้ไขโพสต์ที่เผยแพร่แล้ว', DGA_TEXT_DOMAIN)
            )
        ),
        'pages' => array(
            DGA_LABEL_FIELD => __('หน้าเพจ', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-page',
            'capabilities' => array(
                'edit_pages' => __('แก้ไขหน้าเพจ', DGA_TEXT_DOMAIN),
                'edit_others_pages' => __('แก้ไขหน้าเพจของผู้อื่น', DGA_TEXT_DOMAIN),
                'publish_pages' => __('เผยแพร่หน้าเพจ', DGA_TEXT_DOMAIN),
                'read_private_pages' => __('อ่านหน้าเพจส่วนตัว', DGA_TEXT_DOMAIN),
                'delete_pages' => __('ลบหน้าเพจ', DGA_TEXT_DOMAIN),
                'delete_private_pages' => __('ลบหน้าเพจส่วนตัว', DGA_TEXT_DOMAIN),
                'delete_published_pages' => __('ลบหน้าเพจที่เผยแพร่แล้ว', DGA_TEXT_DOMAIN),
                'delete_others_pages' => __('ลบหน้าเพจของผู้อื่น', DGA_TEXT_DOMAIN),
                'edit_private_pages' => __('แก้ไขหน้าเพจส่วนตัว', DGA_TEXT_DOMAIN),
                'edit_published_pages' => __('แก้ไขหน้าเพจที่เผยแพร่แล้ว', DGA_TEXT_DOMAIN)
            )
        ),
        'media' => array(
            DGA_LABEL_FIELD => __('สื่อและไฟล์', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-media',
            'capabilities' => array(
                'upload_files' => __('อัปโหลดไฟล์', DGA_TEXT_DOMAIN),
                'edit_files' => __('แก้ไขไฟล์', DGA_TEXT_DOMAIN),
                'delete_files' => __('ลบไฟล์', DGA_TEXT_DOMAIN)
            )
        ),
        'users' => array(
            DGA_LABEL_FIELD => __('ผู้ใช้', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-users',
            'capabilities' => array(
                'list_users' => __('ดูรายชื่อผู้ใช้', DGA_TEXT_DOMAIN),
                'edit_users' => __('แก้ไขผู้ใช้', DGA_TEXT_DOMAIN),
                'create_users' => __('สร้างผู้ใช้ใหม่', DGA_TEXT_DOMAIN),
                'delete_users' => __('ลบผู้ใช้', DGA_TEXT_DOMAIN),
                'promote_users' => __('เปลี่ยนบทบาทผู้ใช้', DGA_TEXT_DOMAIN),
                'remove_users' => __('ลบผู้ใช้ออกจากเว็บไซต์', DGA_TEXT_DOMAIN),
                'add_users' => __('เพิ่มผู้ใช้ใหม่', DGA_TEXT_DOMAIN)
            )
        ),
        'themes' => array(
            DGA_LABEL_FIELD => __('ธีมและการแสดงผล', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-appearance',
            'capabilities' => array(
                'edit_theme_options' => __('แก้ไขตัวเลือกธีม', DGA_TEXT_DOMAIN),
                'switch_themes' => __('เปลี่ยนธีม', DGA_TEXT_DOMAIN),
                'edit_themes' => __('แก้ไขธีม', DGA_TEXT_DOMAIN),
                'install_themes' => __('ติดตั้งธีม', DGA_TEXT_DOMAIN),
                'update_themes' => __('อัปเดตธีม', DGA_TEXT_DOMAIN),
                'delete_themes' => __('ลบธีม', DGA_TEXT_DOMAIN)
            )
        ),
        'plugins' => array(
            DGA_LABEL_FIELD => __('ปลั๊กอิน', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-plugins',
            'capabilities' => array(
                'activate_plugins' => __('เปิดใช้งานปลั๊กอิน', DGA_TEXT_DOMAIN),
                'edit_plugins' => __('แก้ไขปลั๊กอิน', DGA_TEXT_DOMAIN),
                'install_plugins' => __('ติดตั้งปลั๊กอิน', DGA_TEXT_DOMAIN),
                'update_plugins' => __('อัปเดตปลั๊กอิน', DGA_TEXT_DOMAIN),
                'delete_plugins' => __('ลบปลั๊กอิน', DGA_TEXT_DOMAIN)
            )
        ),
        'comments' => array(
            DGA_LABEL_FIELD => __('ความคิดเห็น', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-comments',
            'capabilities' => array(
                'moderate_comments' => __('จัดการความคิดเห็น', DGA_TEXT_DOMAIN),
                'edit_comment' => __('แก้ไขความคิดเห็น', DGA_TEXT_DOMAIN)
            )
        ),
        'admin' => array(
            DGA_LABEL_FIELD => __('การจัดการระบบ', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-settings',
            'capabilities' => array(
                DGA_MANAGE_OPTIONS_CAP => __('จัดการตัวเลือกเว็บไซต์', DGA_TEXT_DOMAIN),
                'manage_categories' => __('จัดการหมวดหมู่', DGA_TEXT_DOMAIN),
                'manage_links' => __('จัดการลิงก์', DGA_TEXT_DOMAIN),
                'unfiltered_html' => __('ใช้ HTML ไม่กรอง', DGA_TEXT_DOMAIN),
                'edit_dashboard' => __('แก้ไขแดชบอร์ด', DGA_TEXT_DOMAIN),
                'import' => __('นำเข้าข้อมูล', DGA_TEXT_DOMAIN),
                'export' => __('ส่งออกข้อมูล', DGA_TEXT_DOMAIN),
                'update_core' => __('อัปเดต WordPress', DGA_TEXT_DOMAIN)
            )
        ),
        'other' => array(
            DGA_LABEL_FIELD => __('อื่นๆ', DGA_TEXT_DOMAIN),
            'icon' => 'dashicons-admin-generic',
            'capabilities' => array(
                'read' => __('เข้าถึงแดชบอร์ด', DGA_TEXT_DOMAIN),
                'level_10' => __('ระดับผู้ดูแลระบบ', DGA_TEXT_DOMAIN),
                'level_9' => __('ระดับ 9', DGA_TEXT_DOMAIN),
                'level_8' => __('ระดับ 8', DGA_TEXT_DOMAIN),
                'level_7' => __('ระดับบรรณาธิการ', DGA_TEXT_DOMAIN),
                'level_6' => __('ระดับ 6', DGA_TEXT_DOMAIN),
                'level_5' => __('ระดับ 5', DGA_TEXT_DOMAIN),
                'level_4' => __('ระดับ 4', DGA_TEXT_DOMAIN),
                'level_3' => __('ระดับ 3', DGA_TEXT_DOMAIN),
                'level_2' => __('ระดับผู้เขียน', DGA_TEXT_DOMAIN),
                'level_1' => __('ระดับผู้สนับสนุน', DGA_TEXT_DOMAIN),
                'level_0' => __('ระดับสมาชิก', DGA_TEXT_DOMAIN)
            )
        )
    );
}

/**
 * 3. ฟังก์ชัน Preset Templates
 */
function get_preset_templates_xdk738() {
    return array(
        'content_editor' => array(
            DGA_LABEL_FIELD => __('บรรณาธิการเนื้อหา', DGA_TEXT_DOMAIN),
            'description' => __('สามารถจัดการเนื้อหาทั้งหมด แต่ไม่สามารถจัดการระบบ', DGA_TEXT_DOMAIN),
            'capabilities' => array(
                'read', DGA_EDIT_POSTS_CAP, 'edit_others_posts', 'edit_published_posts',
                'publish_posts', 'delete_posts', 'delete_published_posts',
                'edit_pages', 'edit_others_pages', 'edit_published_pages',
                'publish_pages', 'delete_pages', 'delete_published_pages',
                'upload_files', 'moderate_comments', 'manage_categories'
            )
        ),
        'shop_manager' => array(
            DGA_LABEL_FIELD => __('ผู้จัดการร้านค้า', DGA_TEXT_DOMAIN),
            'description' => __('จัดการสินค้าและคำสั่งซื้อ (WooCommerce)', DGA_TEXT_DOMAIN),
            'capabilities' => array(
                'read', DGA_EDIT_POSTS_CAP, 'edit_pages', 'upload_files',
                'edit_shop_orders', 'edit_shop_coupons', 'edit_products',
                'read_shop_orders', 'read_shop_coupons', 'read_products',
                'delete_shop_orders', 'delete_shop_coupons', 'delete_products',
                'publish_shop_orders', 'publish_shop_coupons', 'publish_products'
            )
        ),
        'support_staff' => array(
            DGA_LABEL_FIELD => __('ฝ่ายสนับสนุน', DGA_TEXT_DOMAIN),
            'description' => __('ดูข้อมูลและตอบความคิดเห็น', DGA_TEXT_DOMAIN),
            'capabilities' => array(
                'read', 'read_private_posts', 'read_private_pages',
                'moderate_comments', 'edit_comment'
            )
        ),
        'minimal_access' => array(
            DGA_LABEL_FIELD => __('สิทธิ์ขั้นต่ำ', DGA_TEXT_DOMAIN),
            'description' => __('เข้าถึงแดชบอร์ดเท่านั้น', DGA_TEXT_DOMAIN),
            'capabilities' => array('read')
        )
    );
}

/**
 * 4. AJAX Handlers Enhanced
 */

/**
 * สร้างบทบาทใหม่พร้อม preset
 */
function create_role_with_preset_ajax_xdk738() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_enhanced_nonce')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสความปลอดภัยไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }

    // ตรวจสอบสิทธิ์
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์ในการดำเนินการนี้', DGA_TEXT_DOMAIN)]);
    }

    $role_name = sanitize_text_field($_POST['role_name']);
    $display_name = sanitize_text_field($_POST['display_name']);
    $preset = sanitize_text_field($_POST['preset'] ?? '');
    
    if (empty($role_name) || empty($display_name)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณากรอกข้อมูลให้ครบถ้วน', DGA_TEXT_DOMAIN)]);
    }

    // ตรวจสอบบทบาทซ้ำ
    if (get_role($role_name)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ชื่อบทบาทนี้มีอยู่แล้ว', DGA_TEXT_DOMAIN)]);
    }

    // กำหนด capabilities ตาม preset
    $capabilities = array('read' => true);
    if (!empty($preset)) {
        $presets = get_preset_templates_xdk738();
        if (isset($presets[$preset])) {
            foreach ($presets[$preset]['capabilities'] as $cap) {
                $capabilities[$cap] = true;
            }
        }
    }

    // สร้างบทบาทใหม่
    $result = add_role($role_name, $display_name, $capabilities);
    
    if ($result) {
        wp_send_json_success([DGA_MESSAGE_KEY => __('สร้างบทบาทใหม่เรียบร้อยแล้ว', DGA_TEXT_DOMAIN)]);
    } else {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่สามารถสร้างบทบาท', DGA_TEXT_DOMAIN)]);
    }
}
add_action('wp_ajax_create_role_with_preset', 'create_role_with_preset_ajax_xdk738');

/**
 * อัปเดตสิทธิ์ทั้งหมดของบทบาท
 */
function update_role_capabilities_complete_ajax_xdk738() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_enhanced_nonce')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสความปลอดภัยไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }

    // ตรวจสอบสิทธิ์
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์ในการดำเนินการนี้', DGA_TEXT_DOMAIN)]);
    }

    $role_name = sanitize_text_field($_POST['role']);
    $new_name = sanitize_text_field($_POST['new_name'] ?? '');
    $capabilities = $_POST['capabilities'] ?? array();
    
    // ตรวจสอบบทบาทเริ่มต้น
    $default_roles = [DGA_ADMIN_ROLE, 'editor', 'author', 'contributor', 'subscriber'];
    if (in_array($role_name, $default_roles)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่สามารถแก้ไขบทบาทเริ่มต้นได้', DGA_TEXT_DOMAIN)]);
    }

    $role = get_role($role_name);
    if (!$role) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่พบบทบาทที่ระบุ', DGA_TEXT_DOMAIN)]);
    }

    // อัปเดตชื่อบทบาทถ้ามีการเปลี่ยน
    if (!empty($new_name) && $new_name !== $role_name) {
        // สร้างบทบาทใหม่ด้วยชื่อใหม่
        $old_caps = $role->capabilities;
        remove_role($role_name);
        add_role($role_name, $new_name, $old_caps);
        $role = get_role($role_name);
    }

    // ลบสิทธิ์ทั้งหมดก่อน (ยกเว้น read)
    foreach (array_keys($role->capabilities) as $cap) {
        if ($cap !== 'read') {
            $role->remove_cap($cap);
        }
    }

    // เพิ่มสิทธิ์ใหม่
    foreach ($capabilities as $cap => $granted) {
        if ($granted === 'true' || $granted === true) {
            $role->add_cap($cap);
        }
    }

    // ตรวจสอบให้แน่ใจว่ามี read
    $role->add_cap('read');

    wp_send_json_success([DGA_MESSAGE_KEY => __('อัปเดตสิทธิ์เรียบร้อยแล้ว', DGA_TEXT_DOMAIN)]);
}
add_action('wp_ajax_update_role_capabilities_complete', 'update_role_capabilities_complete_ajax_xdk738');

/**
 * ดึงข้อมูลสิทธิ์ทั้งหมดของบทบาท
 */
function get_role_all_capabilities_ajax_xdk738() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_enhanced_nonce')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสความปลอดภัยไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }

    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์ในการดำเนินการนี้', DGA_TEXT_DOMAIN)]);
    }

    $role_name = sanitize_text_field($_POST['role']);
    $role = get_role($role_name);
    
    if (!$role) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่พบบทบาทที่ระบุ', DGA_TEXT_DOMAIN)]);
    }

    // ดึงข้อมูลบทบาททั้งหมด
    global $wp_roles;
    $role_info = $wp_roles->roles[$role_name];

    $data = array(
        'role_name' => $role_name,
        'display_name' => $role_info['name'],
        'capabilities' => $role->capabilities,
        'capability_groups' => get_capability_groups_xdk738(),
        'post_types' => get_enhanced_post_types_xdk738($role),
        'taxonomies' => get_enhanced_taxonomies_xdk738($role)
    );

    wp_send_json_success($data);
}
add_action('wp_ajax_get_role_all_capabilities', 'get_role_all_capabilities_ajax_xdk738');

/**
 * นำเข้า preset template
 */
function apply_preset_template_ajax_xdk738() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_enhanced_nonce')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสความปลอดภัยไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }

    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์ในการดำเนินการนี้', DGA_TEXT_DOMAIN)]);
    }

    $preset = sanitize_text_field($_POST['preset']);
    $presets = get_preset_templates_xdk738();
    
    if (!isset($presets[$preset])) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่พบเทมเพลตที่ระบุ', DGA_TEXT_DOMAIN)]);
    }

    wp_send_json_success(array(
        'capabilities' => $presets[$preset]['capabilities'],
        DGA_MESSAGE_KEY => __('โหลดเทมเพลตเรียบร้อยแล้ว', DGA_TEXT_DOMAIN)
    ));
}
add_action('wp_ajax_apply_preset_template', 'apply_preset_template_ajax_xdk738');

/**
 * ลบบทบาทพร้อมการย้ายผู้ใช้
 */
function delete_role_with_reassign_ajax_xdk738() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_enhanced_nonce')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสความปลอดภัยไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }

    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์ในการดำเนินการนี้', DGA_TEXT_DOMAIN)]);
    }

    $role = sanitize_text_field($_POST['role']);
    $reassign_role = sanitize_text_field($_POST['reassign_role'] ?? 'subscriber');
    
    // ตรวจสอบบทบาทเริ่มต้น
    $default_roles = [DGA_ADMIN_ROLE, 'editor', 'author', 'contributor', 'subscriber'];
    if (in_array($role, $default_roles)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่สามารถลบบทบาทเริ่มต้นได้', DGA_TEXT_DOMAIN)]);
    }
    
    // ย้ายผู้ใช้
    $users = get_users(['role' => $role]);
    foreach ($users as $user) {
        $user->remove_role($role);
        $user->add_role($reassign_role);
    }
    
    // ลบบทบาท
    remove_role($role);
    
    wp_send_json_success([
        DGA_MESSAGE_KEY => sprintf(
            __('ลบบทบาทเรียบร้อยแล้ว ย้ายผู้ใช้ %d คนไปยังบทบาท %s', DGA_TEXT_DOMAIN),
            count($users),
            $reassign_role
        )
    ]);
}
add_action('wp_ajax_delete_role_with_reassign', 'delete_role_with_reassign_ajax_xdk738');

/**
 * 5. ฟังก์ชันช่วยเพิ่มเติม
 */

/**
 * ดึงข้อมูล Post Types แบบละเอียด
 */
function get_enhanced_post_types_xdk738($role) {
    $post_types = get_post_types(['public' => true], 'objects');
    $custom_post_types = get_post_types(['_builtin' => false], 'objects');
    $all_post_types = array_merge($post_types, $custom_post_types);
    
    $result = array();
    
    foreach ($all_post_types as $post_type_name => $post_type) {
        if ($post_type_name === 'attachment') continue;
        
        $cap_type = isset($post_type->cap->edit_posts) ? 
            str_replace('edit_', '', $post_type->cap->edit_posts) : 
            $post_type_name . 's';
        
        $capabilities = array(
            'read' => $role->has_cap("read_{$cap_type}") || $role->has_cap("read"),
            'create' => $role->has_cap("create_{$cap_type}") || $role->has_cap("edit_{$cap_type}"),
            'edit' => $role->has_cap("edit_{$cap_type}"),
            'edit_others' => $role->has_cap("edit_others_{$cap_type}"),
            'edit_published' => $role->has_cap("edit_published_{$cap_type}"),
            'edit_private' => $role->has_cap("edit_private_{$cap_type}"),
            DGA_PUBLISH_STATUS => $role->has_cap("publish_{$cap_type}"),
            'delete' => $role->has_cap("delete_{$cap_type}"),
            'delete_others' => $role->has_cap("delete_others_{$cap_type}"),
            'delete_published' => $role->has_cap("delete_published_{$cap_type}"),
            'delete_private' => $role->has_cap("delete_private_{$cap_type}"),
            'read_private' => $role->has_cap("read_private_{$cap_type}")
        );
        
        $result[$post_type_name] = array(
            DGA_LABEL_FIELD => $post_type->label,
            DGA_NAME_FIELD => $post_type_name,
            'capabilities' => $capabilities,
            'cap_type' => $cap_type
        );
    }
    
    return $result;
}

/**
 * ดึงข้อมูล Taxonomies แบบละเอียด
 */
function get_enhanced_taxonomies_xdk738($role) {
    $taxonomies = get_taxonomies([], 'objects');
    $result = array();
    
    foreach ($taxonomies as $taxonomy_name => $taxonomy) {
        if (in_array($taxonomy_name, ['nav_menu', 'post_format', 'link_category'])) {
            continue;
        }
        
        $capabilities = array(
            'manage' => $role->has_cap("manage_{$taxonomy_name}") || $role->has_cap("manage_categories"),
            'edit' => $role->has_cap("edit_{$taxonomy_name}") || $role->has_cap("manage_categories"),
            'delete' => $role->has_cap("delete_{$taxonomy_name}") || $role->has_cap("manage_categories"),
            'assign' => $role->has_cap("assign_{$taxonomy_name}") || $role->has_cap("edit_posts")
        );
        
        $result[$taxonomy_name] = array(
            DGA_LABEL_FIELD => $taxonomy->label,
            DGA_NAME_FIELD => $taxonomy_name,
            'capabilities' => $capabilities
        );
    }
    
    return $result;
}

/**
 * 6. Shortcodes Enhanced
 */

/**
 * Shortcode หลักสำหรับจัดการบทบาท
 */
function department_role_manager_enhanced_shortcode($atts) {
    // รองรับ attributes
    $atts = shortcode_atts(array(
        'container_class' => '',
    ), $atts, 'department_role_manager_enhanced');
    
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return '<div class="role-error-msg">' . __('คุณไม่มีสิทธิ์ในการเข้าถึงหน้านี้', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    ob_start();
    ?>
    <div class="role-manager-enhanced-xdk738 <?php echo esc_attr($atts['container_class']); ?>">
        <div class="role-header">
            <h2><?php _e('ระบบจัดการบทบาทและสิทธิ์', DGA_TEXT_DOMAIN); ?></h2>
            <p class="role-description"><?php _e('จัดการบทบาทและกำหนดสิทธิ์การเข้าถึงสำหรับผู้ใช้ในเว็บไซต์', DGA_TEXT_DOMAIN); ?></p>
        </div>
        
        <div class="role-tabs">
            <button class="tab-button active" data-tab="create">
                <span class="dashicons dashicons-plus-alt"></span> 
                <span><?php _e('สร้างบทบาทใหม่', DGA_TEXT_DOMAIN); ?></span>
            </button>
            <button class="tab-button" data-tab="manage">
                <span class="dashicons dashicons-admin-users"></span> 
                <span><?php _e('จัดการบทบาท', DGA_TEXT_DOMAIN); ?></span>
            </button>
        </div>
        
        <div class="tab-content" id="create-tab">
            <div class="create-role-form">
                <h3><?php _e('สร้างบทบาทใหม่', DGA_TEXT_DOMAIN); ?></h3>
                <form id="enhanced-create-role-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="role_name"><?php _e('ชื่อบทบาท (ภาษาอังกฤษ)', DGA_TEXT_DOMAIN); ?> <span style="color: red;">*</span></label>
                            <input type="text" id="role_name" name="role_name" 
                                   pattern="[a-z0-9_-]+" 
                                   placeholder="<?php esc_attr_e('เช่น department_manager', DGA_TEXT_DOMAIN); ?>" 
                                   required>
                            <small><?php _e('ใช้ตัวอักษรภาษาอังกฤษพิมพ์เล็ก ตัวเลข และ _ หรือ - เท่านั้น', DGA_TEXT_DOMAIN); ?></small>
                        </div>
                        
                        <div class="form-group">
                            <label for="display_name"><?php _e('ชื่อแสดง', DGA_TEXT_DOMAIN); ?> <span style="color: red;">*</span></label>
                            <input type="text" id="display_name" name="display_name" 
                                   placeholder="<?php esc_attr_e('เช่น ผู้จัดการแผนก', DGA_TEXT_DOMAIN); ?>" 
                                   required>
                            <small><?php _e('ชื่อที่จะแสดงในระบบ สามารถใช้ภาษาไทยได้', DGA_TEXT_DOMAIN); ?></small>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="preset_template"><?php _e('เลือกเทมเพลตสิทธิ์', DGA_TEXT_DOMAIN); ?></label>
                        <select id="preset_template" name="preset_template">
                            <option value=""><?php _e('-- เลือกเทมเพลต (ไม่บังคับ) --', DGA_TEXT_DOMAIN); ?></option>
                            <?php
                            $presets = get_preset_templates_xdk738();
                            foreach ($presets as $key => $preset) {
                                echo '<option value="' . esc_attr($key) . '">' . esc_html($preset[DGA_LABEL_FIELD]) . ' - ' . esc_html($preset['description']) . '</option>';
                            }
                            ?>
                        </select>
                        <small><?php _e('เลือกเทมเพลตเพื่อกำหนดสิทธิ์เบื้องต้น หรือข้ามไปเพื่อกำหนดเอง', DGA_TEXT_DOMAIN); ?></small>
                    </div>
                    
                    <button type=DGA_SUBMIT_TYPE class="button-primary">
                        <span class="dashicons dashicons-plus"></span> 
                        <span><?php _e('สร้างบทบาท', DGA_TEXT_DOMAIN); ?></span>
                    </button>
                </form>
            </div>
        </div>
        
        <div class="tab-content" id="manage-tab" style="display:none;">
            <div class="roles-table-wrapper">
                <div class="loading-indicator"><?php _e('กำลังโหลดข้อมูล...', DGA_TEXT_DOMAIN); ?></div>
            </div>
        </div>
    </div>
    
    <!-- Modal สำหรับแก้ไขสิทธิ์ -->
    <div id="edit-capabilities-modal" class="modal-enhanced" aria-hidden="true">
        <div class="modal-content-enhanced">
            <div class="modal-header">
                <h2><?php _e('แก้ไขสิทธิ์บทบาท', DGA_TEXT_DOMAIN); ?></h2>
                <button type=DGA_BUTTON_TYPE class="modal-close" aria-label="<?php esc_attr_e('ปิด', DGA_TEXT_DOMAIN); ?>">
                    <span class="dashicons dashicons-no"></span>
                </button>
            </div>
            <div class="modal-body">
                <!-- จะโหลดเนื้อหาผ่าน AJAX -->
            </div>
        </div>
    </div>
    
    <?php
    return ob_get_clean();
}
add_shortcode('department_role_manager_enhanced', 'department_role_manager_enhanced_shortcode');

/**
 * Shortcode สำหรับแสดงตารางบทบาท
 */
function department_role_table_enhanced_shortcode($atts) {
    // รองรับ attributes
    $atts = shortcode_atts(array(
        'container_class' => '',
    ), $atts, 'department_role_table_enhanced');
    
    if (!is_user_logged_in()) {
        return '<div class="role-error-msg">' . __('กรุณาเข้าสู่ระบบ', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    ob_start();
    ?>
    <div class="role-table-enhanced-xdk738 <?php echo esc_attr($atts['container_class']); ?>">
        <div class="role-header">
            <h2><?php _e('บทบาทและสิทธิ์ของฉัน', DGA_TEXT_DOMAIN); ?></h2>
            <p class="role-description"><?php _e('ดูรายละเอียดบทบาทและสิทธิ์การเข้าถึงของคุณในระบบ', DGA_TEXT_DOMAIN); ?></p>
        </div>
        
        <div class="current-user-roles">
            <?php
            $current_user = wp_get_current_user();
            $user_roles = $current_user->roles;
            global $wp_roles;
            
            if (empty($user_roles)) {
                echo '<p>' . __('คุณยังไม่มีบทบาทในระบบ', DGA_TEXT_DOMAIN) . '</p>';
            } else {
                foreach ($user_roles as $role_key) {
                    $role = get_role($role_key);
                    $role_name = isset($wp_roles->roles[$role_key]['name']) ? 
                        translate_user_role($wp_roles->roles[$role_key]['name']) : $role_key;
                    
                    echo '<div class="user-role-card">';
                    echo '<h3>' . esc_html($role_name) . '</h3>';
                    echo '<div class="capabilities-summary">';
                    
                    $cap_count = count(array_filter($role->capabilities));
                    echo '<p>' . sprintf(
                        __('บทบาทนี้มีสิทธิ์ทั้งหมด %d รายการ', DGA_TEXT_DOMAIN), 
                        $cap_count
                    ) . '</p>';
                    
                    // แสดงสิทธิ์สำคัญ
                    $important_caps = array(
                        DGA_EDIT_POSTS_CAP => __('แก้ไขโพสต์', DGA_TEXT_DOMAIN),
                        'publish_posts' => __('เผยแพร่โพสต์', DGA_TEXT_DOMAIN),
                        'upload_files' => __('อัปโหลดไฟล์', DGA_TEXT_DOMAIN),
                        'edit_pages' => __('แก้ไขหน้าเพจ', DGA_TEXT_DOMAIN),
                        DGA_MANAGE_OPTIONS_CAP => __('จัดการตัวเลือก', DGA_TEXT_DOMAIN),
                        'moderate_comments' => __('จัดการความคิดเห็น', DGA_TEXT_DOMAIN),
                        'edit_users' => __('แก้ไขผู้ใช้', DGA_TEXT_DOMAIN),
                        'install_plugins' => __('ติดตั้งปลั๊กอิน', DGA_TEXT_DOMAIN)
                    );
                    
                    echo '<ul class="important-caps">';
                    foreach ($important_caps as $cap => $label) {
                        if ($role->has_cap($cap)) {
                            echo '<li><span class="dashicons dashicons-yes"></span> ' . esc_html($label) . '</li>';
                        }
                    }
                    echo '</ul>';
                    
                    echo '</div>';
                    echo '</div>';
                }
            }
            ?>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('department_role_table_enhanced', 'department_role_table_enhanced_shortcode');

// เก็บ AJAX handlers เดิมที่ยังใช้ได้
add_action('wp_ajax_get_roles_table', 'get_roles_table_ajax');
add_action('wp_ajax_get_users_by_role', 'get_users_by_role_ajax');

/**
 * เพิ่ม inline CSS สำหรับ Elementor compatibility
 */
function add_role_manager_inline_styles() {
    global $post;
    
    if ($post && (
        has_shortcode($post->post_content, 'department_role_manager_enhanced') || 
        has_shortcode($post->post_content, 'department_role_table_enhanced')
    )) {
        $inline_css = '
            /* Elementor Full Width Fix */
            .elementor-widget-shortcode .elementor-widget-container {
                padding: 0 !important;
            }
            
            .elementor-section.elementor-section-boxed > .elementor-container {
                max-width: 100% !important;
            }
            
            .elementor-widget-shortcode .role-manager-enhanced-xdk738,
            .elementor-widget-shortcode .role-table-enhanced-xdk738 {
                margin-left: calc(-50vw + 50%);
                margin-right: calc(-50vw + 50%);
                width: 100vw;
                max-width: 100vw;
            }
            
            @media (max-width: 768px) {
                .elementor-widget-shortcode .role-manager-enhanced-xdk738,
                .elementor-widget-shortcode .role-table-enhanced-xdk738 {
                    margin-left: -15px;
                    margin-right: -15px;
                    width: calc(100% + 30px);
                    max-width: calc(100% + 30px);
                }
            }
        ';
        
        wp_add_inline_style('department-role-enhanced-styles', $inline_css);
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'add_role_manager_inline_styles', 20);


/**
 * AJAX handler สำหรับดึงข้อมูลตารางบทบาททั้งหมด (Enhanced)
 */
function get_roles_table_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_enhanced_nonce')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสความปลอดภัยไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }
    
    if (!is_user_logged_in()) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณาเข้าสู่ระบบ', DGA_TEXT_DOMAIN)]);
    }
    
    $users_count = count_users();
    $all_roles = get_editable_roles();
    $default_roles = [DGA_ADMIN_ROLE, 'editor', 'author', 'contributor', 'subscriber'];
    
    $current_user = wp_get_current_user();
    $is_admin = current_user_can(DGA_MANAGE_OPTIONS_CAP);
    
    ob_start();
    ?>
    <table class="roles-table">
        <thead>
            <tr>
                <th><?php _e('ชื่อบทบาท', DGA_TEXT_DOMAIN); ?></th>
                <th><?php _e('จำนวนผู้ใช้', DGA_TEXT_DOMAIN); ?></th>
                <th><?php _e('สิทธิ์', DGA_TEXT_DOMAIN); ?></th>
                <th><?php _e('การดำเนินการ', DGA_TEXT_DOMAIN); ?></th>
            </tr>
        </thead>
        <tbody>
            <?php 
            // แสดงบทบาทเริ่มต้นก่อน
            foreach ($default_roles as $role_name) : 
                if (isset($all_roles[$role_name])) :
                    $role = get_role($role_name);
                    $role_count = isset($users_count['avail_roles'][$role_name]) ? $users_count['avail_roles'][$role_name] : 0;
                    $cap_count = count(array_filter($role->capabilities));
            ?>
                <tr>
                    <td>
                        <?php echo esc_html(translate_user_role($all_roles[$role_name]['name'])); ?> 
                        <span class="role-type"><?php _e('(บทบาทระบบ)', DGA_TEXT_DOMAIN); ?></span>
                    </td>
                    <td><?php echo esc_html($role_count); ?></td>
                    <td><?php echo sprintf(__('%d สิทธิ์', DGA_TEXT_DOMAIN), $cap_count); ?></td>
                    <td>
                        <div class="action-buttons">
                            <span class="default-role-badge"><?php _e('บทบาทเริ่มต้น', DGA_TEXT_DOMAIN); ?></span>
                            <button type=DGA_BUTTON_TYPE class="view-users-btn" data-role="<?php echo esc_attr($role_name); ?>">
                                <?php _e('ดูผู้ใช้', DGA_TEXT_DOMAIN); ?>
                            </button>
                        </div>
                    </td>
                </tr>
            <?php 
                endif;
            endforeach; 
            
            // แสดงบทบาทที่สร้างเพิ่มเติม
            foreach ($all_roles as $role_name => $role_info) :
                if (!in_array($role_name, $default_roles)) :
                    $role = get_role($role_name);
                    $role_count = isset($users_count['avail_roles'][$role_name]) ? $users_count['avail_roles'][$role_name] : 0;
                    $cap_count = count(array_filter($role->capabilities));
            ?>
                <tr>
                    <td><?php echo esc_html($role_info['name']); ?></td>
                    <td><?php echo esc_html($role_count); ?></td>
                    <td><?php echo sprintf(__('%d สิทธิ์', DGA_TEXT_DOMAIN), $cap_count); ?></td>
                    <td>
                        <div class="action-buttons">
                            <?php if ($is_admin): ?>
                                <button type=DGA_BUTTON_TYPE class="edit-capabilities-btn" data-role="<?php echo esc_attr($role_name); ?>">
                                    <?php _e('แก้ไขสิทธิ์', DGA_TEXT_DOMAIN); ?>
                                </button>
                                <button type=DGA_BUTTON_TYPE class="delete-role-btn" data-role="<?php echo esc_attr($role_name); ?>">
                                    <?php _e('ลบ', DGA_TEXT_DOMAIN); ?>
                                </button>
                            <?php endif; ?>
                            <button type=DGA_BUTTON_TYPE class="view-users-btn" data-role="<?php echo esc_attr($role_name); ?>">
                                <?php _e('ดูผู้ใช้', DGA_TEXT_DOMAIN); ?>
                            </button>
                        </div>
                    </td>
                </tr>
            <?php 
                endif;
            endforeach; 
            ?>
        </tbody>
    </table>
    <?php
    $table_html = ob_get_clean();
    
    wp_send_json_success(['html' => $table_html]);
}

/**
 * AJAX handler สำหรับดึงข้อมูลผู้ใช้ตามบทบาท
 */
function get_users_by_role_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_enhanced_nonce')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสความปลอดภัยไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }
    
    if (!is_user_logged_in()) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณาเข้าสู่ระบบ', DGA_TEXT_DOMAIN)]);
    }
    
    if (!isset($_POST['role']) || empty($_POST['role'])) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณาระบุบทบาท', DGA_TEXT_DOMAIN)]);
    }
    
    $role = sanitize_text_field($_POST['role']);
    $current_user = wp_get_current_user();
    $is_admin = current_user_can(DGA_MANAGE_OPTIONS_CAP);
    
    // ดึงข้อมูลผู้ใช้ตามบทบาท
    $users = get_users(['role' => $role]);
    
    if (empty($users)) {
        wp_send_json_success([DGA_MESSAGE_KEY => __('ไม่พบผู้ใช้ในบทบาทนี้', DGA_TEXT_DOMAIN), 'html' => '<p>' . __('ไม่พบผู้ใช้ในบทบาทนี้', DGA_TEXT_DOMAIN) . '</p>']);
    }
    
    ob_start();
    ?>
    <table class="users-table">
        <thead>
            <tr>
                <th><?php _e('ชื่อผู้ใช้', DGA_TEXT_DOMAIN); ?></th>
                <th><?php _e('ชื่อ-นามสกุล', DGA_TEXT_DOMAIN); ?></th>
                <th><?php _e('อีเมล', DGA_TEXT_DOMAIN); ?></th>
                <?php if ($is_admin): ?>
                <th><?php _e('การดำเนินการ', DGA_TEXT_DOMAIN); ?></th>
                <?php endif; ?>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($users as $user): ?>
            <tr>
                <td><?php echo esc_html($user->user_login); ?></td>
                <td><?php echo esc_html($user->display_name); ?></td>
                <td><?php echo esc_html($user->user_email); ?></td>
                <?php if ($is_admin): ?>
                <td>
                    <div class="action-buttons">
                        <a href="<?php echo esc_url(admin_url('user-edit.php?user_id=' . $user->ID)); ?>" class="edit-user-btn" target="_blank">
                            <?php _e('แก้ไข', DGA_TEXT_DOMAIN); ?>
                        </a>
                    </div>
                </td>
                <?php endif; ?>
            </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
    $users_html = ob_get_clean();
    
    wp_send_json_success(['html' => $users_html]);
}





/****** เลือกผู้ใช้งาน และกำหนด ROLE *****/

// ลงทะเบียน Shortcode สำหรับแสดงตารางผู้ใช้
function wp_user_manager_shortcode_hjk789() {
    // Enqueue CSS และ JavaScript จาก Child Theme
    wp_enqueue_style('wp-user-manager-style', get_stylesheet_directory_uri() . '/css/wp-user-manager.css');
    wp_enqueue_script('wp-user-manager-script', get_stylesheet_directory_uri() . '/js/wp-user-manager.js', array(DGA_JQUERY_HANDLE), null, true);
    
    // ส่งค่าต่างๆ ไปยัง JavaScript
    $roles = wp_roles()->get_names();
    
    // เรียงลำดับ roles ตาม A-Z
    asort($roles);
    
    wp_localize_script('wp-user-manager-script', 'wpUserManager', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        'security' => wp_create_nonce('wp_user_manager_nonce'),
        'roles' => $roles,
        'messages' => array(
            'confirmDelete' => __('คุณแน่ใจหรือไม่ที่จะลบผู้ใช้นี้?', DGA_TEXT_DOMAIN),
            'deleteSuccess' => __('ลบผู้ใช้เรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
            'deleteError' => __('เกิดข้อผิดพลาดในการลบผู้ใช้', DGA_TEXT_DOMAIN),
            'updateSuccess' => __('อัพเดตบทบาทเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
            'updateError' => __('เกิดข้อผิดพลาดในการอัพเดตบทบาท', DGA_TEXT_DOMAIN)
        )
    ));

    // เริ่มเก็บ output
    ob_start();
    ?>
    <div class="wp-user-manager-container-hjk789">
        <div class="user-table-header">
            <h2><?php _e('จัดการผู้ใช้งาน', DGA_TEXT_DOMAIN); ?></h2>
            <div class="table-actions">
                <div class="search-box">
                    <input type="text" id="user-search-input" placeholder="<?php esc_attr_e('ค้นหาผู้ใช้...', DGA_TEXT_DOMAIN); ?>" />
                </div>
                <select id="role-filter">
                    <option value=""><?php _e('ทั้งหมด', DGA_TEXT_DOMAIN); ?></option>
                    <?php
                    foreach ($roles as $role_id => $role_name) {
                        echo '<option value="' . esc_attr($role_id) . '">' . esc_html($role_name) . '</option>';
                    }
                    ?>
                </select>
                <select id="sort-by" class="sort-select-hjk789">
                    <option value="display_name"><?php _e('เรียงตามชื่อ-นามสกุล', DGA_TEXT_DOMAIN); ?></option>
                    <option value="email"><?php _e('เรียงตามอีเมล', DGA_TEXT_DOMAIN); ?></option>
                    <option value="registered"><?php _e('เรียงตามวันที่สมัคร', DGA_TEXT_DOMAIN); ?></option>
                </select>
                <select id="sort-order" class="sort-order-hjk789">
                    <option value="ASC"><?php _e('A-Z', DGA_TEXT_DOMAIN); ?></option>
                    <option value="DESC"><?php _e('Z-A', DGA_TEXT_DOMAIN); ?></option>
                </select>
            </div>
        </div>

        <div class="user-table-wrapper">
            <table class="wp-user-table">
                <thead>
                    <tr>
                        <th class="username-header-hjk789"><?php _e('ผู้ใช้งาน', DGA_TEXT_DOMAIN); ?></th>
                        <th><?php _e('ชื่อ-นามสกุล', DGA_TEXT_DOMAIN); ?></th>
                        <th><?php _e('บทบาท', DGA_TEXT_DOMAIN); ?></th>
                        <th><?php _e('การจัดการ', DGA_TEXT_DOMAIN); ?></th>
                    </tr>
                </thead>
                <tbody id="user-table-body">
                    <!-- จะถูกเติมข้อมูลด้วย JavaScript -->
                    <tr class="loading-row">
                        <td colspan="4" class="loading-cell"><?php _e('กำลังโหลดข้อมูล...', DGA_TEXT_DOMAIN); ?></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="pagination-container">
            <div class="pagination-info">
                <?php _e('แสดง', DGA_TEXT_DOMAIN); ?> <span id="pagination-start">0</span> - <span id="pagination-end">0</span> <?php _e('จากทั้งหมด', DGA_TEXT_DOMAIN); ?> <span id="pagination-total">0</span> <?php _e('รายการ', DGA_TEXT_DOMAIN); ?>
            </div>
            <div class="pagination-controls">
                <button id="prev-page" class="pagination-button" disabled><span class="arrow">&#9664;</span> <?php _e('ก่อนหน้า', DGA_TEXT_DOMAIN); ?></button>
                <div id="page-numbers" class="page-numbers"></div>
                <button id="next-page" class="pagination-button" disabled><?php _e('ถัดไป', DGA_TEXT_DOMAIN); ?> <span class="arrow">&#9654;</span></button>
            </div>
        </div>

        <!-- Modal สำหรับแก้ไข Role -->
        <div id="role-edit-modal" class="modal">
            <div class="modal-content">
                <span class="close-modal">&times;</span>
                <h2><?php _e('แก้ไขบทบาทผู้ใช้', DGA_TEXT_DOMAIN); ?></h2>
                <p id="edit-user-info"></p>
                <input type="hidden" id="edit-user-id" />
                <div class="role-options">
                    <?php
                    foreach ($roles as $role_id => $role_name) {
                        echo '<div class="role-option" data-role="' . esc_attr($role_id) . '">' . 
                             esc_html($role_name) . '</div>';
                    }
                    ?>
                </div>
                <div class="modal-actions">
                    <button id="cancel-edit" class="cancel-button"><?php _e('ยกเลิก', DGA_TEXT_DOMAIN); ?></button>
                    <button id="save-role-edit" class="save-button"><?php _e('บันทึก', DGA_TEXT_DOMAIN); ?></button>
                </div>
            </div>
        </div>

        <!-- Modal ยืนยันการลบ -->
        <div id="delete-confirm-modal" class="modal">
            <div class="modal-content">
                <h2><?php _e('ยืนยันการลบผู้ใช้', DGA_TEXT_DOMAIN); ?></h2>
                <p id="delete-user-info"></p>
                <input type="hidden" id="delete-user-id" />
                <div class="modal-actions">
                    <button id="cancel-delete" class="cancel-button"><?php _e('ยกเลิก', DGA_TEXT_DOMAIN); ?></button>
                    <button id="confirm-delete" class="delete-button"><?php _e('ลบผู้ใช้', DGA_TEXT_DOMAIN); ?></button>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('wp_user_manager', 'wp_user_manager_shortcode_hjk789');

// Ajax handler สำหรับดึงข้อมูล Users พร้อมการ sorting
add_action('wp_ajax_get_users_data', 'ajax_get_users_data_hjk789');
function ajax_get_users_data_hjk789() {
    check_ajax_referer('wp_user_manager_nonce', 'security');
    
    if (!current_user_can('list_users')) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
        return;
    }
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 20;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $role_filter = isset($_POST['role']) ? sanitize_text_field($_POST['role']) : '';
    $sort_by = isset($_POST['sort_by']) ? sanitize_text_field($_POST['sort_by']) : 'display_name';
    $sort_order = isset($_POST['sort_order']) ? sanitize_text_field($_POST['sort_order']) : 'ASC';
    
    $offset = ($page - 1) * $per_page;
    
    // Validate sort fields
    $allowed_sort_fields = array('display_name', 'email', 'registered');
    if (!in_array($sort_by, $allowed_sort_fields)) {
        $sort_by = 'display_name';
    }
    
    if (!in_array($sort_order, array('ASC', 'DESC'))) {
        $sort_order = 'ASC';
    }
    
    $args = array(
        'number' => $per_page,
        'offset' => $offset,
        DGA_ORDERBY_FIELD_VALUE => $sort_by,
        DGA_ORDER_FIELD => $sort_order
    );
    
    if (!empty($search)) {
        $args['search'] = '*' . $search . '*';
        $args['search_columns'] = array('user_login', 'user_nicename', 'user_email', 'display_name');
    }
    
    if (!empty($role_filter)) {
        $args['role'] = $role_filter;
    }
    
    $user_query = new WP_User_Query($args);
    
    // ดึง user ใหม่ล่าสุด (ค่าเริ่มต้น 30 วัน สามารถปรับได้ผ่าน filter)
    $new_user_days = apply_filters('wp_user_manager_new_user_days', 30); // ใช้ filter เพื่อให้ปรับได้ง่าย
    $days_ago = date('Y-m-d H:i:s', strtotime('-' . $new_user_days . ' days'));
    
    $users_data = array();
    foreach ($user_query->get_results() as $user) {
        $roles = array();
        foreach ($user->roles as $role) {
            if (isset(wp_roles()->role_names[$role])) {
                $roles[] = wp_roles()->role_names[$role];
            }
        }
        
        // ตรวจสอบว่าเป็น user ใหม่หรือไม่
        $is_new_user = ($user->user_registered > $days_ago);
        
        $users_data[] = array(
            'id' => $user->ID,
            'username' => $user->user_login,
            'display_name' => $user->display_name,
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'email' => $user->user_email,
            'roles' => $roles,
            'role_keys' => $user->roles,
            'registered' => $user->user_registered,
            'is_new' => $is_new_user
        );
    }
    
    // ดึงจำนวนผู้ใช้ทั้งหมด
    $total_users = $user_query->get_total();
    $total_pages = ceil($total_users / $per_page);
    
    wp_send_json_success(array(
        'users' => $users_data,
        DGA_TOTAL_FIELD_KEY => $total_users,
        'total_pages' => $total_pages,
        'current_page' => $page
    ));
}

// Ajax handler สำหรับอัพเดต Role
add_action('wp_ajax_update_user_role', 'ajax_update_user_role_hjk789');
function ajax_update_user_role_hjk789() {
    check_ajax_referer('wp_user_manager_nonce', 'security');
    
    if (!current_user_can('edit_users')) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
        return;
    }
    
    $user_id = intval($_POST['user_id']);
    $new_role = sanitize_text_field($_POST['role']);
    
    if ($user_id && $new_role) {
        // ตรวจสอบว่าไม่ได้เปลี่ยน role ของตัวเอง
        if ($user_id == get_current_user_id() && !current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error(__('ไม่สามารถเปลี่ยนบทบาทของตัวเองได้', DGA_TEXT_DOMAIN));
            return;
        }
        
        $user = new WP_User($user_id);
        // ลบ roles เดิมทั้งหมด
        $user->set_role('');
        // เพิ่ม role ใหม่
        $user->add_role($new_role);
        wp_send_json_success(__('อัพเดตบทบาทเรียบร้อยแล้ว', DGA_TEXT_DOMAIN));
    } else {
        wp_send_json_error(__('พารามิเตอร์ไม่ถูกต้อง', DGA_TEXT_DOMAIN));
    }
}

// Ajax handler สำหรับลบ User
add_action('wp_ajax_delete_wp_user', 'ajax_delete_wp_user_hjk789');
function ajax_delete_wp_user_hjk789() {
    check_ajax_referer('wp_user_manager_nonce', 'security');
    
    if (!current_user_can('delete_users')) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
        return;
    }
    
    $user_id = intval($_POST['user_id']);
    
    if ($user_id) {
        // ตรวจสอบว่าไม่ได้ลบตัวเอง
        if ($user_id == get_current_user_id()) {
            wp_send_json_error(__('ไม่สามารถลบบัญชีของตัวเองได้', DGA_TEXT_DOMAIN));
            return;
        }
        
        // ลบผู้ใช้
        if (wp_delete_user($user_id)) {
            wp_send_json_success(__('ลบผู้ใช้เรียบร้อยแล้ว', DGA_TEXT_DOMAIN));
        } else {
            wp_send_json_error(__('เกิดข้อผิดพลาดในการลบผู้ใช้', DGA_TEXT_DOMAIN));
        }
    } else {
        wp_send_json_error(__('พารามิเตอร์ไม่ถูกต้อง', DGA_TEXT_DOMAIN));
    }
}


/**
 * ฟังก์ชันสำหรับเพิ่มเมนูย่อย "กำหนดสิทธิ์พิเศษ" ในเมนูผู้ใช้
 */
function add_special_permissions_submenu_hjk789() {
    add_submenu_page(
        'users.php',                    // Parent slug (เมนูผู้ใช้)
        __('กำหนดสิทธิ์พิเศษ', DGA_TEXT_DOMAIN),              // Page title
        __('กำหนดสิทธิ์พิเศษ', DGA_TEXT_DOMAIN),              // Menu title
        DGA_MANAGE_OPTIONS_CAP,               // Capability
        'special-permissions',          // Menu slug
        'render_special_permissions_page_hjk789' // Callback function
    );
}
add_action('admin_menu', 'add_special_permissions_submenu_hjk789');

/**
 * ฟังก์ชันสำหรับโหลด CSS และ JavaScript ที่เกี่ยวข้อง
 */
function enqueue_special_permissions_assets_hjk789() {
    // ตรวจสอบว่าอยู่ในหน้า "กำหนดสิทธิ์พิเศษ" หรือไม่
    $screen = get_current_screen();
    if ($screen->id !== 'users_page_special-permissions') {
        return;
    }

    // ดึง URL ของ Child Theme
    $child_theme_url = get_stylesheet_directory_uri();
    
    // โหลด CSS
    wp_enqueue_style(
        'special-permissions-css',
        $child_theme_url . '/css/special-permissions.css',
        array(),
        DGA_VERSION_NUMBER
    );
    
    // โหลด JavaScript
    wp_enqueue_script(
        'special-permissions-js',
        $child_theme_url . '/js/special-permissions.js',
        array(DGA_JQUERY_HANDLE),
        DGA_VERSION_NUMBER,
        true
    );
    
    // เพิ่ม Localize Script สำหรับส่งค่าไปยัง JavaScript
    wp_localize_script(
        'special-permissions-js',
        'specialPermissionsData',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            'security' => wp_create_nonce('special_permissions_nonce')
        )
    );
}
add_action('admin_enqueue_scripts', 'enqueue_special_permissions_assets_hjk789');

/**
 * ฟังก์ชันสำหรับแสดงหน้า "กำหนดสิทธิ์พิเศษ"
 */
function render_special_permissions_page_hjk789() {
    // ตรวจสอบสิทธิ์
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_die(__('คุณไม่มีสิทธิ์เข้าถึงหน้านี้', DGA_TEXT_DOMAIN));
    }
    
    // บันทึกการตั้งค่าหากมีการส่งฟอร์ม
    if (isset($_POST['special_permissions_submit']) && check_admin_referer('special_permissions_action', 'special_permissions_nonce')) {
        $role_name = sanitize_text_field($_POST['role_name']);
        $action_type = sanitize_text_field($_POST['action_type']);
        
        if ($action_type === 'create_new_role' && !empty($_POST['new_role_name']) && !empty($_POST['new_role_display'])) {
            $new_role_name = sanitize_text_field($_POST['new_role_name']);
            $new_role_display = sanitize_text_field($_POST['new_role_display']);
            
            $result = create_role_with_admin_capabilities_hjk789($new_role_name, $new_role_display);
            if (is_wp_error($result)) {
                $error_message = $result->get_error_message();
            } else {
                $success_message = sprintf(__('สร้าง Role "%s" เรียบร้อยแล้ว', DGA_TEXT_DOMAIN), $new_role_display);
            }
        } elseif ($action_type === 'assign_to_existing' && !empty($role_name)) {
            $result = assign_admin_capabilities_to_role_hjk789($role_name);
            if (is_wp_error($result)) {
                $error_message = $result->get_error_message();
            } else {
                $success_message = sprintf(__('กำหนดสิทธิ์พิเศษให้กับ Role "%s" เรียบร้อยแล้ว', DGA_TEXT_DOMAIN), $role_name);
            }
        }
    }
    
    // ดึง Role ทั้งหมดและเรียงลำดับ
    $roles = wp_roles()->roles;
    $role_names = array();
    foreach ($roles as $role_key => $role_data) {
        $role_names[$role_key] = $role_data['name'];
    }
    asort($role_names);
    ?>
    <div class="wrap special-permissions-wrap">
        <h1><?php echo esc_html__('กำหนดสิทธิ์พิเศษ', DGA_TEXT_DOMAIN); ?></h1>
        
        <?php if (isset($error_message)): ?>
            <div class="notice notice-error is-dismissible">
                <p><?php echo esc_html($error_message); ?></p>
            </div>
        <?php endif; ?>
        
        <?php if (isset($success_message)): ?>
            <div class="notice notice-success is-dismissible">
                <p><?php echo esc_html($success_message); ?></p>
            </div>
        <?php endif; ?>
        
        <div class="special-permissions-container">
            <form method="post" action="">
                <?php wp_nonce_field('special_permissions_action', 'special_permissions_nonce'); ?>
                
                <div class="special-permissions-option">
                    <h2><?php echo esc_html__('เลือกวิธีกำหนดสิทธิ์พิเศษ', DGA_TEXT_DOMAIN); ?></h2>
                    
                    <div class="special-permissions-radio">
                        <label>
                            <input type="radio" name="action_type" value="assign_to_existing" checked>
                            <?php echo esc_html__('กำหนดสิทธิ์ให้กับ Role ที่มีอยู่แล้ว', DGA_TEXT_DOMAIN); ?>
                        </label>
                    </div>
                    
                    <div class="special-permissions-radio">
                        <label>
                            <input type="radio" name="action_type" value="create_new_role">
                            <?php echo esc_html__('สร้าง Role ใหม่พร้อมสิทธิ์พิเศษ', DGA_TEXT_DOMAIN); ?>
                        </label>
                    </div>
                </div>
                
                <div class="special-permissions-existing-role">
                    <h3><?php echo esc_html__('เลือก Role ที่ต้องการกำหนดสิทธิ์', DGA_TEXT_DOMAIN); ?></h3>
                    <select name="role_name" id="role-name-select">
                        <option value=""><?php echo esc_html__('-- เลือก Role --', DGA_TEXT_DOMAIN); ?></option>
                        <?php foreach ($role_names as $role_key => $role_display): ?>
                            <?php if ($role_key !== DGA_ADMIN_ROLE): ?>
                                <option value="<?php echo esc_attr($role_key); ?>">
                                    <?php echo esc_html($role_display); ?>
                                </option>
                            <?php endif; ?>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <div class="special-permissions-new-role" style="display: none;">
                    <h3><?php echo esc_html__('ข้อมูล Role ใหม่', DGA_TEXT_DOMAIN); ?></h3>
                    <div class="special-permissions-field">
                        <label for="new-role-name"><?php echo esc_html__('Role Name (slug)', DGA_TEXT_DOMAIN); ?></label>
                        <input type="text" name="new_role_name" id="new-role-name" placeholder="เช่น super_editor">
                    </div>
                    <div class="special-permissions-field">
                        <label for="new-role-display"><?php echo esc_html__('ชื่อที่แสดง', DGA_TEXT_DOMAIN); ?></label>
                        <input type="text" name="new_role_display" id="new-role-display" placeholder="เช่น ซูเปอร์เอดิเตอร์">
                    </div>
                </div>
                
                <div class="special-permissions-submit">
                    <input type=DGA_SUBMIT_TYPE name="special_permissions_submit" class="button button-primary" value="<?php echo esc_attr__('บันทึกการตั้งค่า', DGA_TEXT_DOMAIN); ?>">
                </div>
            </form>
        </div>
    </div>
    <?php
}

/**
 * ฟังก์ชันสำหรับสร้าง WordPress role ใหม่ที่มีความสามารถเท่ากับ Administrator
 * 
 * @param string $role_name ชื่อของ role ใหม่ (slug)
 * @param string $display_name ชื่อที่แสดงของ role ใหม่
 * @return WP_Role|WP_Error ออบเจกต์ role ใหม่หรือ WP_Error ในกรณีที่เกิดข้อผิดพลาด
 */
function create_role_with_admin_capabilities_hjk789($role_name, $display_name) {
    // ดึง role administrator
    $admin_role = get_role(DGA_ADMIN_ROLE);
    
    // ถ้าไม่มี role administrator ให้ return error
    if (!$admin_role) {
        return new WP_Error('no_admin_role', __('ไม่พบ role Administrator', DGA_TEXT_DOMAIN));
    }
    
    // ตรวจสอบว่า role ที่จะสร้างมีอยู่แล้วหรือไม่
    $existing_role = get_role($role_name);
    
    // ถ้า role มีอยู่แล้ว ให้ลบออกก่อนเพื่อสร้างใหม่
    if ($existing_role) {
        remove_role($role_name);
    }
    
    // สร้าง role ใหม่โดยใช้ความสามารถเดียวกับ administrator
    $new_role = add_role($role_name, $display_name, $admin_role->capabilities);
    
    // ตรวจสอบว่าสร้างสำเร็จหรือไม่
    if (!$new_role) {
        return new WP_Error('role_creation_failed', __('ไม่สามารถสร้าง role ใหม่ได้', DGA_TEXT_DOMAIN));
    }
    
    return $new_role;
}

/**
 * ฟังก์ชันสำหรับกำหนดความสามารถของ Administrator ให้กับ role ที่มีอยู่แล้ว
 * 
 * @param string $role_name ชื่อของ role ที่ต้องการกำหนดความสามารถ
 * @return WP_Role|WP_Error ออบเจกต์ role ที่อัปเดตแล้วหรือ WP_Error ในกรณีที่เกิดข้อผิดพลาด
 */
function assign_admin_capabilities_to_role_hjk789($role_name) {
    // ดึง role ที่ต้องการ
    $role = get_role($role_name);
    
    // ถ้าไม่พบ role ให้ return error
    if (!$role) {
        return new WP_Error('role_not_found', sprintf(__('ไม่พบ role "%s"', DGA_TEXT_DOMAIN), $role_name));
    }
    
    // ดึง role administrator
    $admin_role = get_role(DGA_ADMIN_ROLE);
    
    // ถ้าไม่มี role administrator ให้ return error
    if (!$admin_role) {
        return new WP_Error('no_admin_role', __('ไม่พบ role Administrator', DGA_TEXT_DOMAIN));
    }
    
    // กำหนดความสามารถของ administrator ให้กับ role
    foreach ($admin_role->capabilities as $cap => $grant) {
        $role->add_cap($cap, $grant);
    }
    
    return $role;
}

/**
 * Filter เพื่อกำหนดจำนวนวันสำหรับไฮไลท์ user ใหม่
 * ค่าเริ่มต้นคือ 3 วัน
 * 
 * สามารถปรับเปลี่ยนได้โดยการ comment/uncomment หรือแก้ไขตัวเลข
 * ตัวอย่าง:
 * - return 1;  // ไฮไลท์เฉพาะ user ที่สมัครภายใน 1 วัน
 * - return 7;  // ไฮไลท์ user ที่สมัครภายใน 7 วัน
 * - return 14; // ไฮไลท์ user ที่สมัครภายใน 14 วัน
 * - return 30; // ไฮไลท์ user ที่สมัครภายใน 30 วัน (1 เดือน)
 * - return 0;  // ปิดการไฮไลท์ user ใหม่
 */
add_filter('wp_user_manager_new_user_days', function() {
    return 3; // ไฮไลท์ user ที่สมัครภายใน 3 วันล่าสุด
});





/***** ระบบค้นหาเนื้อหาแบบ Auto UI แบบรวม - Enhanced with Badges & Highlighting *******/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Enqueue scripts and styles - Optimized for mobile/desktop
 */
function custom_ajax_search_enqueue_scripts_mxz789() {
    wp_enqueue_style(
        'custom-ajax-search-mxz789', 
        get_stylesheet_directory_uri() . '/css/custom-ajax-search-enhanced.css', 
        array(), 
        '7.0.0'
    );
    
    wp_enqueue_script(
        'custom-ajax-search-mxz789', 
        get_stylesheet_directory_uri() . '/js/custom-ajax-search-enhanced.js', 
        array(DGA_JQUERY_HANDLE), 
        '7.0.0',
        true
    );
    
    wp_localize_script('custom-ajax-search-mxz789', 'customAjaxSearch', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('custom_search_nonce'),
        'messages' => array(
            'searching' => __('กำลังค้นหา...', DGA_TEXT_DOMAIN),
            'no_results' => __('ไม่พบผลการค้นหา', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __('เกิดข้อผิดพลาดในการค้นหา', DGA_TEXT_DOMAIN),
            'results_found' => __('พบ %d รายการ', DGA_TEXT_DOMAIN),
            'search_cancelled' => __('การค้นหาถูกยกเลิก', DGA_TEXT_DOMAIN),
            'search_too_short' => __('กรุณาพิมพ์คำค้นหาอย่างน้อย %d ตัวอักษร', DGA_TEXT_DOMAIN),
            'search_too_long' => __('คำค้นหายาวเกินไป', DGA_TEXT_DOMAIN),
            'selected_result' => __('เลือก: %s', DGA_TEXT_DOMAIN),
            'link_unavailable' => __('ลิงก์ไม่พร้อมใช้งาน', DGA_TEXT_DOMAIN),
            'opening_link' => __('กำลังเปิด: %s', DGA_TEXT_DOMAIN)
        ),
        'fallback_image' => get_stylesheet_directory_uri() . '/images/default-thumbnail.jpg',
        'enable_highlight' => true,
        'highlight_class' => 'search-highlight-mxz789'
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'custom_ajax_search_enqueue_scripts_mxz789');

/**
 * Create enhanced search shortcode with improved mobile UI
 */
function custom_ajax_search_shortcode_mxz789($atts = array()) {
    $atts = shortcode_atts(array(
        'placeholder' => __('พิมพ์คำค้นหา...', DGA_TEXT_DOMAIN),
        'button_text' => __('ค้นหา', DGA_TEXT_DOMAIN),
        'show_types' => 'true',
        'default_type' => 'article',
        'max_results' => 10,
        'enable_live_search' => 'true',
        'enable_highlight' => 'true',
        'mobile_friendly' => 'true'
    ), $atts, 'custom_ajax_search');
    
    // Sanitize attributes
    $placeholder = sanitize_text_field($atts['placeholder']);
    $button_text = sanitize_text_field($atts['button_text']);
    $show_types = filter_var($atts['show_types'], FILTER_VALIDATE_BOOLEAN);
    $default_type = sanitize_text_field($atts['default_type']);
    $max_results = absint($atts['max_results']);
    $enable_live_search = filter_var($atts['enable_live_search'], FILTER_VALIDATE_BOOLEAN);
    $enable_highlight = filter_var($atts['enable_highlight'], FILTER_VALIDATE_BOOLEAN);
    
    $instance_id = 'mxz789_' . uniqid();
    
    ob_start();
    ?>
    <div class="custom-search-container-mxz789" 
         role="search" 
         aria-label="<?php esc_attr_e('ระบบค้นหาเนื้อหา', DGA_TEXT_DOMAIN); ?>"
         data-instance="<?php echo esc_attr($instance_id); ?>"
         data-max-results="<?php echo esc_attr($max_results); ?>"
         data-live-search="<?php echo esc_attr($enable_live_search ? 'true' : 'false'); ?>"
         data-highlight="<?php echo esc_attr($enable_highlight ? 'true' : 'false'); ?>">
         
        <form class="custom-search-form-mxz789" 
              method="get" 
              aria-label="<?php esc_attr_e('ค้นหาเนื้อหา', DGA_TEXT_DOMAIN); ?>">
              
            <div class="unified-search-wrapper-mxz789">
                <?php if ($show_types): ?>
                <div class="search-type-wrapper-mxz789">
                    <label for="search_type_<?php echo esc_attr($instance_id); ?>" 
                           class="accessible-text-mxz789">
                        <?php _e('เลือกประเภทการค้นหา', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <select name="search_type" 
                            id="search_type_<?php echo esc_attr($instance_id); ?>" 
                            class="search-type-select-mxz789" 
                            aria-label="<?php esc_attr_e('เลือกประเภทการค้นหา', DGA_TEXT_DOMAIN); ?>">
                        <option value="article" <?php selected($default_type, 'article'); ?>>
                            <?php _e('บทความ', DGA_TEXT_DOMAIN); ?>
                        </option>
                        <option value="news" <?php selected($default_type, 'news'); ?>>
                            <?php _e('มาตรฐาน', DGA_TEXT_DOMAIN); ?>
                        </option>
                        <option value="mpeople" <?php selected($default_type, 'mpeople'); ?>>
                            <?php _e('คู่มือประชาชน', DGA_TEXT_DOMAIN); ?>
                        </option>
                        <option value="egp" <?php selected($default_type, 'egp'); ?>>
                            <?php _e('ประกาศจัดซื้อจัดจ้าง', DGA_TEXT_DOMAIN); ?>
                        </option>
                        <option value="pha" <?php selected($default_type, 'pha'); ?>>
                            <?php _e('ประชาพิจารณ์', DGA_TEXT_DOMAIN); ?>
                        </option>
                    </select>
                </div>
                <div class="search-divider-mxz789" role="separator" aria-hidden="true"></div>
                <?php endif; ?>
                
                <div class="search-input-wrapper-mxz789">
                    <label for="search_query_<?php echo esc_attr($instance_id); ?>" 
                           class="accessible-text-mxz789">
                        <?php _e('คำค้นหา', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <div class="input-button-group-mxz789">
                        <input type="text" 
                               name="search_query" 
                               id="search_query_<?php echo esc_attr($instance_id); ?>" 
                               class="search-input-mxz789" 
                               placeholder="<?php echo esc_attr($placeholder); ?>" 
                               aria-label="<?php esc_attr_e('ช่องค้นหา', DGA_TEXT_DOMAIN); ?>"
                               autocomplete="off"
                               required
                               minlength="2"
                               maxlength="100"
                               role="combobox"
                               aria-autocomplete="list"
                               aria-expanded="false"
                               aria-owns="search-results-content-<?php echo esc_attr($instance_id); ?>">
                        <button type=DGA_SUBMIT_TYPE 
                                class="search-button-mxz789" 
                                aria-label="<?php echo esc_attr($button_text); ?>">
                            <span class="search-icon-mxz789">🔍</span>
                            <span class="search-button-text-mxz789">
                                <?php echo esc_html($button_text); ?>
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </form>
        
        <div id="search-status-<?php echo esc_attr($instance_id); ?>" 
             class="accessible-announcement-mxz789" 
             aria-live="polite" 
             aria-atomic="true" 
             role="status"></div>
        
        <div class="search-results-mxz789" 
             aria-live="polite" 
             role="region" 
             aria-label="<?php esc_attr_e('ผลการค้นหา', DGA_TEXT_DOMAIN); ?>"
             aria-expanded="false"
             data-instance="<?php echo esc_attr($instance_id); ?>">
            
            <div class="search-skeleton-mxz789 hidden-mxz789" aria-hidden="true">
                <?php for($i = 0; $i < min($max_results, 5); $i++): ?>
                <div class="skeleton-item-mxz789">
                    <div class="skeleton-image-mxz789"></div>
                    <div class="skeleton-content-mxz789">
                        <div class="skeleton-title-mxz789"></div>
                        <div class="skeleton-date-mxz789"></div>
                    </div>
                </div>
                <?php endfor; ?>
            </div>
            
            <div class="search-results-content-mxz789" 
                 role="listbox" 
                 aria-label="<?php esc_attr_e('รายการผลการค้นหา', DGA_TEXT_DOMAIN); ?>"
                 id="search-results-content-<?php echo esc_attr($instance_id); ?>"></div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('custom_ajax_search', 'custom_ajax_search_shortcode_mxz789');

/**
 * AJAX handler with enhanced badges and field tracking
 */
/**
 * Refactored AJAX search handler with reduced cognitive complexity
 * Complexity reduced from 57 to ~8
 */
function custom_ajax_search_handler_mxz789() {
    // Security and input validation
    $search_params = validate_search_request_mxz789();
    if (is_wp_error($search_params)) {
        wp_send_json_error($search_params->get_error_data());
    }
    
    // Perform search based on post type
    $results = perform_search_by_type_mxz789($search_params);
    
    // Send response
    send_search_response_mxz789($results, $search_params);
}

/**
 * Validate search request input and security
 */
function validate_search_request_mxz789() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'] ?? '', 'custom_search_nonce')) {
        return new WP_Error('nonce_failed', '', array(
            DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN),
            'code' => 'NONCE_FAILED'
        ));
    }

    // Sanitize input
    $search_params = array(
        'search_type' => sanitize_text_field($_POST['search_type'] ?? ''),
        'search_query' => sanitize_text_field($_POST['search_query'] ?? ''),
        'max_results' => min(absint($_POST['max_results'] ?? 10), 20),
        'enable_highlight' => filter_var($_POST['enable_highlight'] ?? true, FILTER_VALIDATE_BOOLEAN)
    );

    // Validate search query length
    if (empty($search_params['search_query']) || mb_strlen($search_params['search_query'], 'UTF-8') < 2) {
        return new WP_Error('query_short', '', array(
            DGA_MESSAGE_KEY => __('คำค้นหาต้องมีอย่างน้อย 2 ตัวอักษร', DGA_TEXT_DOMAIN),
            'code' => 'QUERY_TOO_SHORT'
        ));
    }

    if (mb_strlen($search_params['search_query'], 'UTF-8') > 100) {
        return new WP_Error('query_long', '', array(
            DGA_MESSAGE_KEY => __('คำค้นหายาวเกินไป', DGA_TEXT_DOMAIN),
            'code' => 'QUERY_TOO_LONG'
        ));
    }

    // Validate search type
    $allowed_types = array('article', 'news', 'mpeople', 'egp', 'pha');
    if (!in_array($search_params['search_type'], $allowed_types)) {
        return new WP_Error('invalid_type', '', array(
            DGA_MESSAGE_KEY => __('ประเภทการค้นหาไม่ถูกต้อง', DGA_TEXT_DOMAIN),
            'code' => 'INVALID_TYPE'
        ));
    }

    return $search_params;
}

/**
 * Perform search based on post type
 */
function perform_search_by_type_mxz789($search_params) {
    if ($search_params['search_type'] === 'news') {
        return search_news_posts_mxz789($search_params);
    } else {
        return search_standard_posts_mxz789($search_params);
    }
}

/**
 * Get status filter meta query
 */
function get_status_filter_mxz789() {
    return array(
        'relation' => 'OR',
        array(
            'key' => 'at_status',
            'value' => 'inactive',
            'compare' => '!='
        ),
        array(
            'key' => 'at_status',
            'compare' => 'NOT EXISTS'
        )
    );
}

/**
 * Search news posts with document number support
 */
function search_news_posts_mxz789($search_params) {
    $status_filter = get_status_filter_mxz789();
    $search_query = $search_params['search_query'];
    $max_results = $search_params['max_results'];
    
    // Get unique post IDs from both meta and title searches
    $all_post_ids = get_news_post_ids_mxz789($search_params, $status_filter);
    
    if (empty($all_post_ids)) {
        return array();
    }
    
    // Get final results with enhanced data
    return get_news_results_mxz789($all_post_ids, $search_params, $status_filter);
}

/**
 * Get news post IDs from meta and title searches
 */
function get_news_post_ids_mxz789($search_params, $status_filter) {
    $search_query = $search_params['search_query'];
    $max_results = $search_params['max_results'];
    
    // Query 1: Search in document meta fields
    $meta_post_ids = search_news_meta_fields_mxz789($search_query, $max_results, $status_filter);
    
    // Query 2: Search in titles
    $title_post_ids = search_news_titles_mxz789($search_query, $max_results, $status_filter);
    
    // Merge unique IDs
    return array_unique(array_merge($meta_post_ids, $title_post_ids));
}

/**
 * Search news meta fields for document numbers
 */
function search_news_meta_fields_mxz789($search_query, $max_results, $status_filter) {
    $doc_search_query = array(
        'relation' => 'OR',
        array(
            'key' => 'at_docnum_1',
            'value' => $search_query,
            'compare' => 'LIKE'
        ),
        array(
            'key' => 'at_docnum_2',
            'value' => $search_query,
            'compare' => 'LIKE'
        )
    );
    
    $combined_meta_query = array(
        'relation' => 'AND',
        $status_filter,
        $doc_search_query
    );
    
    $meta_args = array(
        DGA_POST_TYPE_FIELD => 'news',
        DGA_POSTS_PER_PAGE => $max_results,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        'meta_query' => $combined_meta_query,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    return get_post_ids_from_query_mxz789($meta_args);
}

/**
 * Search news titles
 */
function search_news_titles_mxz789($search_query, $max_results, $status_filter) {
    $title_args = array(
        DGA_POST_TYPE_FIELD => 'news',
        DGA_POSTS_PER_PAGE => $max_results,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        's' => $search_query,
        'meta_query' => $status_filter,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    return get_post_ids_from_query_mxz789($title_args);
}

/**
 * Get post IDs from WP_Query
 */
function get_post_ids_from_query_mxz789($args) {
    $query = new WP_Query($args);
    $post_ids = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_ids[] = get_the_ID();
        }
    }
    wp_reset_postdata();
    
    return $post_ids;
}

/**
 * Get news results with enhanced data
 */
function get_news_results_mxz789($all_post_ids, $search_params, $status_filter) {
    $final_args = array(
        DGA_POST_TYPE_FIELD => 'news',
        'post__in' => array_slice($all_post_ids, 0, $search_params['max_results']),
        DGA_POSTS_PER_PAGE => $search_params['max_results'],
        DGA_ORDERBY_FIELD_VALUE => 'post__in',
        'meta_query' => $status_filter
    );
    
    $query = new WP_Query($final_args);
    $results = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // Skip inactive posts
            if (get_post_meta(get_the_ID(), 'at_status', true) === 'inactive') {
                continue;
            }
            
            $results[] = build_news_result_item_mxz789($search_params);
        }
        wp_reset_postdata();
    }
    
    return $results;
}

/**
 * Build news result item with document badges
 */
function build_news_result_item_mxz789($search_params) {
    $search_query = $search_params['search_query'];
    $enable_highlight = $search_params['enable_highlight'];
    
    // Get basic post data
    $post_data = get_basic_post_data_mxz789();
    
    // Get document numbers and badges
    $doc_data = get_document_badges_mxz789($search_query, $enable_highlight);
    
    // Check title match
    $match_badge = get_title_match_badge_mxz789($post_data['title'], $search_query);
    
    // Apply highlighting
    if ($enable_highlight) {
        $post_data['title'] = highlight_search_terms_mxz789($post_data['title'], $search_query);
        $post_data['excerpt'] = highlight_search_terms_mxz789($post_data['excerpt'], $search_query);
    }
    
    return array(
        'id' => get_the_ID(),
        DGA_TITLE_FIELD => $post_data['title'],
        'title_plain' => strip_tags(get_the_title()),
        'permalink' => get_permalink(),
        'thumbnail' => $post_data['thumbnail'],
        'date' => $post_data['date'],
        'excerpt' => $post_data['excerpt'],
        'doc_numbers' => $doc_data['badges_html'],
        'match_badge' => $match_badge,
        'found_in' => $doc_data['found_in'],
        DGA_POST_TYPE_FIELD => get_post_type(),
        'author' => get_the_author()
    );
}

/**
 * Get basic post data (title, thumbnail, excerpt, date)
 */
function get_basic_post_data_mxz789() {
    $thumbnail = get_the_post_thumbnail_url(get_the_ID(), 'thumbnail');
    if (!$thumbnail) {
        $thumbnail = get_stylesheet_directory_uri() . '/images/default-thumbnail.jpg';
    }
    
    $title = get_the_title();
    $excerpt = get_the_excerpt();
    if (empty($excerpt)) {
        $excerpt = wp_trim_words(get_the_content(), 30, '...');
    } else {
        $excerpt = wp_trim_words($excerpt, 25, '...');
    }
    
    return array(
        'title' => $title,
        'thumbnail' => $thumbnail,
        'excerpt' => $excerpt,
        'date' => custom_format_thai_date_mxz789(get_the_date('Y-m-d'))
    );
}

/**
 * Get document badges for news posts
 */
function get_document_badges_mxz789($search_query, $enable_highlight) {
    $badges_html = '';
    $found_in = array();
    
    $at_docnum_1 = get_post_meta(get_the_ID(), 'at_docnum_1', true);
    $at_docnum_2 = get_post_meta(get_the_ID(), 'at_docnum_2', true);
    
    // Process MSPR document number
    if (!empty($at_docnum_1)) {
        $doc_badge_data = process_document_number_mxz789($at_docnum_1, $search_query, 'mspr', 'มสพร.', $enable_highlight);
        $badges_html .= $doc_badge_data['badge'];
        if ($doc_badge_data['matched']) {
            $found_in[] = 'mspr';
        }
    }
    
    // Process MRD document number
    if (!empty($at_docnum_2)) {
        $doc_badge_data = process_document_number_mxz789($at_docnum_2, $search_query, 'mrd', 'มรด.', $enable_highlight);
        $badges_html .= $doc_badge_data['badge'];
        if ($doc_badge_data['matched']) {
            $found_in[] = 'mrd';
        }
    }
    
    // Wrap badges in container if exists
    if (!empty($badges_html)) {
        $badges_html = '<div class="doc-badges-container-mxz789">' . $badges_html . '</div>';
    }
    
    return array(
        'badges_html' => $badges_html,
        'found_in' => $found_in
    );
}

/**
 * Process individual document number for badge creation
 */
function process_document_number_mxz789($doc_value, $search_query, $badge_class, $badge_label, $enable_highlight) {
    if (stripos($doc_value, $search_query) !== false) {
        // Matched - show full badge with highlighting
        $highlighted_value = $enable_highlight ? 
            highlight_search_terms_mxz789($doc_value, $search_query) : 
            esc_html($doc_value);
        $badge = '<span class="doc-badge-mxz789 badge-' . $badge_class . '-mxz789">' . $badge_label . ' ' . $highlighted_value . '</span>';
        return array('badge' => $badge, 'matched' => true);
    } else {
        // No match - show small badge
        $badge = '<span class="doc-badge-small-mxz789 badge-' . $badge_class . '-mxz789">' . $badge_label . '</span>';
        return array('badge' => $badge, 'matched' => false);
    }
}

/**
 * Get title match badge
 */
function get_title_match_badge_mxz789($title, $search_query) {
    if (stripos($title, $search_query) !== false) {
        return '<span class="match-badge-mxz789">พบในชื่อ</span>';
    }
    return '';
}

/**
 * Search standard post types
 */
function search_standard_posts_mxz789($search_params) {
    $status_filter = get_status_filter_mxz789();
    
    $args = array(
        DGA_POST_TYPE_FIELD => $search_params['search_type'],
        DGA_POSTS_PER_PAGE => $search_params['max_results'],
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        's' => $search_params['search_query'],
        'meta_query' => $status_filter,
        DGA_ORDERBY_FIELD_VALUE => array(
            'relevance' => 'DESC',
            'date' => 'DESC'
        )
    );
    
    $query = new WP_Query($args);
    $results = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // Skip inactive posts
            if (get_post_meta(get_the_ID(), 'at_status', true) === 'inactive') {
                continue;
            }
            
            $results[] = build_standard_result_item_mxz789($search_params);
        }
        wp_reset_postdata();
    }
    
    return $results;
}

/**
 * Build standard result item
 */
function build_standard_result_item_mxz789($search_params) {
    $post_data = get_basic_post_data_mxz789();
    
    // Apply highlighting
    if ($search_params['enable_highlight']) {
        $title = highlight_search_terms_mxz789($post_data['title'], $search_params['search_query']);
        $excerpt = highlight_search_terms_mxz789($post_data['excerpt'], $search_params['search_query']);
    } else {
        $title = $post_data['title'];
        $excerpt = $post_data['excerpt'];
    }
    
    return array(
        'id' => get_the_ID(),
        DGA_TITLE_FIELD => $title,
        'title_plain' => strip_tags(get_the_title()),
        'permalink' => get_permalink(),
        'thumbnail' => $post_data['thumbnail'],
        'date' => $post_data['date'],
        'excerpt' => $excerpt,
        'doc_numbers' => '',
        'match_badge' => '',
        DGA_POST_TYPE_FIELD => get_post_type(),
        'author' => get_the_author()
    );
}

/**
 * Send search response
 */
function send_search_response_mxz789($results, $search_params) {
    wp_send_json_success(array(
        'results' => $results,
        DGA_TOTAL_FIELD_KEY => count($results),
        'query' => $search_params['search_query'],
        DGA_TYPE_FIELD => $search_params['search_type'],
        'found_posts' => count($results),
        'search_time' => timer_stop(0, 3)
    ));
}

add_action('wp_ajax_custom_ajax_search', 'custom_ajax_search_handler_mxz789');
add_action('wp_ajax_nopriv_custom_ajax_search', 'custom_ajax_search_handler_mxz789');

/**
 * Highlight search terms in text
 */
function highlight_search_terms_mxz789($text, $search_query) {
    if (empty($text) || empty($search_query)) {
        return $text;
    }
    
    // Split search query into words
    $search_words = preg_split('/\s+/', $search_query, -1, PREG_SPLIT_NO_EMPTY);
    
    // Create pattern for highlighting
    $patterns = array();
    foreach ($search_words as $word) {
        if (mb_strlen($word, 'UTF-8') >= 2) {
            $patterns[] = preg_quote($word, '/');
        }
    }
    
    if (empty($patterns)) {
        return $text;
    }
    
    // Create regex pattern (case insensitive)
    $pattern = '/(' . implode('|', $patterns) . ')/iu';
    
    // Add highlight spans
    $highlighted = preg_replace($pattern, '<mark class="search-highlight-mxz789">$1</mark>', $text);
    
    return $highlighted;
}

/**
 * Format Thai Buddhist date
 */
function custom_format_thai_date_mxz789($date) {
    $thai_months = array(
        '01' => __('มกราคม', DGA_TEXT_DOMAIN), 
        '02' => __('กุมภาพันธ์', DGA_TEXT_DOMAIN), 
        '03' => __('มีนาคม', DGA_TEXT_DOMAIN), 
        '04' => __('เมษายน', DGA_TEXT_DOMAIN),
        '05' => __('พฤษภาคม', DGA_TEXT_DOMAIN), 
        '06' => __('มิถุนายน', DGA_TEXT_DOMAIN),
        '07' => __('กรกฎาคม', DGA_TEXT_DOMAIN), 
        '08' => __('สิงหาคม', DGA_TEXT_DOMAIN),
        '09' => __('กันยายน', DGA_TEXT_DOMAIN), 
        '10' => __('ตุลาคม', DGA_TEXT_DOMAIN),
        '11' => __('พฤศจิกายน', DGA_TEXT_DOMAIN), 
        '12' => __('ธันวาคม', DGA_TEXT_DOMAIN)
    );
    
    $date_parts = explode('-', $date);
    if (count($date_parts) === 3) {
        $day = ltrim($date_parts[2], '0');
        $month = $thai_months[$date_parts[1]] ?? '';
        $year = intval($date_parts[0]) + 543;
        
        return sprintf('%s %s %d', $day, $month, $year);
    }
    
    return $date;
}





/**** แสดงรายการคู่มือประชาชน ******/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Initialize PPList System
 */
function pplist_ppl738_init() {
    // Register shortcode
    add_shortcode('pplist', 'pplist_ppl738_shortcode');
    
    // Register AJAX handlers
    add_action('wp_ajax_pplist_load_posts_ppl738', 'pplist_load_posts_ppl738');
    add_action('wp_ajax_nopriv_pplist_load_posts_ppl738', 'pplist_load_posts_ppl738');
    
    add_action('wp_ajax_pplist_increment_view_ppl738', 'pplist_increment_view_ppl738');
    add_action('wp_ajax_nopriv_pplist_increment_view_ppl738', 'pplist_increment_view_ppl738');
    
    add_action('wp_ajax_pplist_search_ppl738', 'pplist_search_ppl738');
    add_action('wp_ajax_nopriv_pplist_search_ppl738', 'pplist_search_ppl738');
}
add_action('init', 'pplist_ppl738_init');

/**
 * Enqueue assets
 */
function pplist_ppl738_enqueue_assets() {
    if (!is_singular() && !has_shortcode(get_post_field('post_content', get_the_ID()), 'pplist')) {
        return;
    }
    
    $version = '2.0.0';
    $theme_dir = get_stylesheet_directory();
    $theme_uri = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style(
        'pplist-ppl738',
        $theme_uri . '/css/pplist-ppl738.css',
        array(),
        $version
    );
    
    // Enqueue JS
    wp_enqueue_script(
        'pplist-ppl738',
        $theme_uri . '/js/pplist-ppl738.js',
        array(),
        $version,
        true
    );
    
    // Localize script
    wp_localize_script('pplist-ppl738', 'pplistConfig', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('pplist_ppl738_nonce'),
        'postsPerPage' => 10,
        'i18n' => array(
            'loading' => __('กำลังโหลด...', DGA_TEXT_DOMAIN),
            'loadMore' => __('โหลดเพิ่มเติม', DGA_TEXT_DOMAIN),
            'noResults' => __('ไม่พบข้อมูลที่ค้นหา', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __('เกิดข้อผิดพลาด กรุณาลองใหม่', DGA_TEXT_DOMAIN),
            'searchPlaceholder' => __('ค้นหาคู่มือประชาชน...', DGA_TEXT_DOMAIN),
            'allCategories' => __('ทั้งหมด', DGA_TEXT_DOMAIN),
            'views' => __('เข้าชม', DGA_TEXT_DOMAIN),
            'files' => __('ไฟล์', DGA_TEXT_DOMAIN),
            'items' => __('รายการ', DGA_TEXT_DOMAIN),
            'from' => __('จากวันที่', DGA_TEXT_DOMAIN),
            'to' => __('ถึงวันที่', DGA_TEXT_DOMAIN)
        )
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'pplist_ppl738_enqueue_assets');

/**
 * View counter functions with caching
 */
function pplist_get_post_views_ppl738($post_id) {
    $cache_key = 'pplist_views_' . $post_id;
    $views = wp_cache_get($cache_key);
    
    if (false === $views) {
        $views = get_post_meta($post_id, '_pplist_views_count', true);
        $views = $views ? intval($views) : 0;
        wp_cache_set($cache_key, $views, '', 3600); // Cache for 1 hour
    }
    
    return $views;
}

function pplist_set_post_views_ppl738($post_id) {
    $post_id = absint($post_id);
    if (!$post_id) return 0;
    
    // Check if already viewed in this session
    $session_key = 'pplist_viewed_' . $post_id;
    if (isset($_COOKIE[$session_key])) {
        return pplist_get_post_views_ppl738($post_id);
    }
    
    $count = pplist_get_post_views_ppl738($post_id);
    $count++;
    
    update_post_meta($post_id, '_pplist_views_count', $count);
    
    // Clear cache
    wp_cache_delete('pplist_views_' . $post_id);
    
    // Set cookie to prevent multiple counts
    setcookie($session_key, '1', time() + 3600, COOKIEPATH, COOKIE_DOMAIN);
    
    return $count;
}

/**
 * Format Thai date
 */
function pplist_format_thai_date_ppl738($timestamp) {
    $thai_months = array(
        1 => 'ม.ค.', 2 => 'ก.พ.', 3 => 'มี.ค.',
        4 => 'เม.ย.', 5 => 'พ.ค.', 6 => 'มิ.ย.',
        7 => 'ก.ค.', 8 => 'ส.ค.', 9 => 'ก.ย.',
        10 => 'ต.ค.', 11 => 'พ.ย.', 12 => 'ธ.ค.'
    );
    
    $date = date('j', $timestamp);
    $month = $thai_months[date('n', $timestamp)];
    $year = date('Y', $timestamp) + 543;
    
    return "$date $month $year";
}

/**
 * Shortcode function
 */
function pplist_ppl738_shortcode($atts) {
    $atts = shortcode_atts(array(
        DGA_POSTS_PER_PAGE => 10,
        'style' => 'grid', // grid, list, card
        'show_search' => 'yes',
        'show_filter' => 'yes',
        'show_date_filter' => 'yes',
        'columns' => 2
    ), $atts, 'pplist');
    
    // Generate unique ID
    $unique_id = 'pplist-' . wp_generate_uuid4();
    
    ob_start();
    ?>
    <div id="<?php echo esc_attr($unique_id); ?>" 
         class="pplist-container-ppl738 style-<?php echo esc_attr($atts['style']); ?>"
         data-posts-per-page="<?php echo esc_attr($atts[DGA_POSTS_PER_PAGE]); ?>"
         data-columns="<?php echo esc_attr($atts['columns']); ?>"
         role="region"
         aria-label="<?php echo esc_attr__('รายการคู่มือประชาชน', DGA_TEXT_DOMAIN); ?>">
        
        <?php if ($atts['show_search'] === 'yes' || $atts['show_filter'] === 'yes') : ?>
        <!-- Filter Section -->
        <div class="pplist-filter-section-ppl738">
            <?php if ($atts['show_search'] === 'yes') : ?>
            <!-- Search Box -->
            <div class="pplist-search-box-ppl738">
                <div class="pplist-search-wrapper-ppl738">
                    <input type="text"
                           class="pplist-search-input-ppl738"
                           placeholder="<?php echo esc_attr__('ค้นหาคู่มือประชาชน...', DGA_TEXT_DOMAIN); ?>"
                           aria-label="<?php echo esc_attr__('ค้นหา', DGA_TEXT_DOMAIN); ?>">
                    <button type=DGA_BUTTON_TYPE class="pplist-search-btn-ppl738" aria-label="<?php echo esc_attr__('ค้นหา', DGA_TEXT_DOMAIN); ?>">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="11" cy="11" r="8"/>
                            <path d="m21 21-4.35-4.35"/>
                        </svg>
                    </button>
                    <div class="pplist-search-suggestions-ppl738" role="listbox" aria-label="<?php echo esc_attr__('คำแนะนำการค้นหา', DGA_TEXT_DOMAIN); ?>"></div>
                </div>
            </div>
            <?php endif; ?>
            
            <?php if ($atts['show_filter'] === 'yes') : ?>
            <!-- Filter Controls -->
            <div class="pplist-filters-ppl738">
                <!-- Group Filter -->
                <div class="pplist-filter-item-ppl738">
                    <label for="pplist-group-<?php echo esc_attr($unique_id); ?>" class="pplist-filter-label-ppl738">
                        <?php echo esc_html__('หมวดหมู่', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <select id="pplist-group-<?php echo esc_attr($unique_id); ?>" 
                            class="pplist-filter-select-ppl738"
                            aria-label="<?php echo esc_attr__('เลือกหมวดหมู่', DGA_TEXT_DOMAIN); ?>">
                        <option value=""><?php echo esc_html__('ทั้งหมด', DGA_TEXT_DOMAIN); ?></option>
                        <?php
                        $groups = get_terms(array(
                            DGA_TAXONOMY_FIELD => 'ppgroup',
                            DGA_HIDE_EMPTY_FIELD => true,
                            DGA_ORDERBY_FIELD_VALUE => 'name',
                            DGA_ORDER_FIELD => 'ASC'
                        ));
                        
                        if (!is_wp_error($groups) && !empty($groups)) {
                            foreach ($groups as $group) {
                                printf(
                                    '<option value="%s" data-count="%d">%s (%d)</option>',
                                    esc_attr($group->slug),
                                    esc_attr($group->count),
                                    esc_html($group->name),
                                    esc_html($group->count)
                                );
                            }
                        }
                        ?>
                    </select>
                </div>
                
                <?php if ($atts['show_date_filter'] === 'yes') : ?>
                <!-- Date Range Filter -->
                <div class="pplist-filter-item-ppl738">
                    <label class="pplist-filter-label-ppl738">
                        <?php echo esc_html__('ช่วงวันที่', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <div class="pplist-date-range-ppl738">
                        <input type="date" 
                               class="pplist-date-from-ppl738"
                               aria-label="<?php echo esc_attr__('จากวันที่', DGA_TEXT_DOMAIN); ?>">
                        <span class="pplist-date-separator-ppl738">-</span>
                        <input type="date" 
                               class="pplist-date-to-ppl738"
                               aria-label="<?php echo esc_attr__('ถึงวันที่', DGA_TEXT_DOMAIN); ?>">
                    </div>
                </div>
                <?php endif; ?>
                
                <!-- Sort Options -->
                <div class="pplist-filter-item-ppl738">
                    <label for="pplist-sort-<?php echo esc_attr($unique_id); ?>" class="pplist-filter-label-ppl738">
                        <?php echo esc_html__('เรียงตาม', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <select id="pplist-sort-<?php echo esc_attr($unique_id); ?>" 
                            class="pplist-filter-select-ppl738"
                            aria-label="<?php echo esc_attr__('เรียงตาม', DGA_TEXT_DOMAIN); ?>">
                        <option value="date_desc"><?php echo esc_html__('ใหม่ล่าสุด', DGA_TEXT_DOMAIN); ?></option>
                        <option value="date_asc"><?php echo esc_html__('เก่าที่สุด', DGA_TEXT_DOMAIN); ?></option>
                        <option value="views_desc"><?php echo esc_html__('ยอดนิยม', DGA_TEXT_DOMAIN); ?></option>
                        <option value="title_asc"><?php echo esc_html__('ชื่อ ก-ฮ', DGA_TEXT_DOMAIN); ?></option>
                        <option value="title_desc"><?php echo esc_html__('ชื่อ ฮ-ก', DGA_TEXT_DOMAIN); ?></option>
                    </select>
                </div>
                
                <!-- Clear Filters -->
                <button type=DGA_BUTTON_TYPE 
                        class="pplist-clear-filters-ppl738"
                        aria-label="<?php echo esc_attr__('ล้างตัวกรอง', DGA_TEXT_DOMAIN); ?>">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"/>
                        <line x1="6" y1="6" x2="18" y2="18"/>
                    </svg>
                    <?php echo esc_html__('ล้าง', DGA_TEXT_DOMAIN); ?>
                </button>
            </div>
            <?php endif; ?>
        </div>
        <?php endif; ?>
        
        <!-- Results Summary -->
        <div class="pplist-summary-ppl738" role="status" aria-live="polite">
            <span class="pplist-result-count-ppl738"></span>
            <span class="pplist-active-filters-ppl738"></span>
        </div>
        
        <!-- Skeleton Loading -->
        <div class="pplist-skeleton-ppl738" aria-hidden="true">
            <?php for ($i = 0; $i < 6; $i++) : ?>
            <div class="pplist-skeleton-item-ppl738">
                <div class="pplist-skeleton-header-ppl738">
                    <div class="pplist-skeleton-title-ppl738"></div>
                    <div class="pplist-skeleton-badge-ppl738"></div>
                </div>
                <div class="pplist-skeleton-meta-ppl738">
                    <div class="pplist-skeleton-date-ppl738"></div>
                    <div class="pplist-skeleton-views-ppl738"></div>
                </div>
                <div class="pplist-skeleton-files-ppl738">
                    <div class="pplist-skeleton-file-ppl738"></div>
                    <div class="pplist-skeleton-file-ppl738"></div>
                </div>
            </div>
            <?php endfor; ?>
        </div>
        
        <!-- Content Area -->
        <div class="pplist-items-ppl738" 
             role="list"
             aria-live="polite"
             aria-busy="false"></div>
        
        <!-- Load More -->
        <div class="pplist-load-more-wrapper-ppl738">
            <button type=DGA_BUTTON_TYPE 
                    class="pplist-load-more-ppl738"
                    aria-label="<?php echo esc_attr__('โหลดเพิ่มเติม', DGA_TEXT_DOMAIN); ?>"
                    style="display: none;">
                <span class="pplist-load-more-text-ppl738">
                    <?php echo esc_html__('โหลดเพิ่มเติม', DGA_TEXT_DOMAIN); ?>
                </span>
                <span class="pplist-load-more-spinner-ppl738">
                    <span></span><span></span><span></span>
                </span>
            </button>
        </div>
        
        <!-- Empty State -->
        <div class="pplist-empty-state-ppl738" style="display: none;">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" opacity="0.3">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                <polyline points="14 2 14 8 20 8"/>
                <line x1="9" y1="15" x2="15" y2="15"/>
            </svg>
            <h3><?php echo esc_html__('ไม่พบข้อมูล', DGA_TEXT_DOMAIN); ?></h3>
            <p><?php echo esc_html__('ลองปรับเงื่อนไขการค้นหาใหม่', DGA_TEXT_DOMAIN); ?></p>
        </div>
    </div>
    <?php
    
    return ob_get_clean();
}

/**
 * AJAX handler for loading posts
 */
function pplist_load_posts_ppl738() {
    // Verify nonce
    if (!check_ajax_referer('pplist_ppl738_nonce', 'nonce', false)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)
        ), 403);
    }
    
    // Get and sanitize parameters
    $page = isset($_POST['page']) ? max(1, intval($_POST['page'])) : 1;
    $posts_per_page = isset($_POST[DGA_POSTS_PER_PAGE]) ? intval($_POST[DGA_POSTS_PER_PAGE]) : 10;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $group = isset($_POST['group']) ? sanitize_text_field($_POST['group']) : '';
    $date_from = isset($_POST['date_from']) ? sanitize_text_field($_POST['date_from']) : '';
    $date_to = isset($_POST['date_to']) ? sanitize_text_field($_POST['date_to']) : '';
    $sort = isset($_POST['sort']) ? sanitize_text_field($_POST['sort']) : 'date_desc';
    
    // Build query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => 'mpeople',
        DGA_POSTS_PER_PAGE => $posts_per_page,
        DGA_PAGED_PARAMETER => $page,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );
    
    // Add search
    if (!empty($search)) {
        $args['s'] = $search;
    }
    
    // Add taxonomy filter
    if (!empty($group)) {
        $args['tax_query'] = array(
            array(
                DGA_TAXONOMY_FIELD => 'ppgroup',
                DGA_FIELD_KEY => 'slug',
                'terms' => $group
            )
        );
    }
    
    // Add date filter
    if (!empty($date_from) || !empty($date_to)) {
        $date_query = array();
        
        if (!empty($date_from)) {
            $date_query['after'] = $date_from;
        }
        
        if (!empty($date_to)) {
            $date_query['before'] = $date_to;
        }
        
        if (!empty($date_query)) {
            $date_query['inclusive'] = true;
            $args['date_query'] = array($date_query);
        }
    }
    
    // Add sorting
    switch ($sort) {
        case 'date_asc':
            $args[DGA_ORDERBY_FIELD_VALUE] = 'date';
            $args[DGA_ORDER_FIELD] = 'ASC';
            break;
        case 'views_desc':
            $args['meta_key'] = '_pplist_views_count';
            $args[DGA_ORDERBY_FIELD_VALUE] = 'meta_value_num';
            $args[DGA_ORDER_FIELD] = 'DESC';
            break;
        case 'title_asc':
            $args[DGA_ORDERBY_FIELD_VALUE] = DGA_TITLE_FIELD;
            $args[DGA_ORDER_FIELD] = 'ASC';
            break;
        case 'title_desc':
            $args[DGA_ORDERBY_FIELD_VALUE] = DGA_TITLE_FIELD;
            $args[DGA_ORDER_FIELD] = 'DESC';
            break;
        default:
            $args[DGA_ORDERBY_FIELD_VALUE] = 'date';
            $args[DGA_ORDER_FIELD] = 'DESC';
    }
    
    // Execute query
    $query = new WP_Query($args);
    $posts = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // Get post data
            $post_data = array(
                'id' => $post_id,
                DGA_TITLE_FIELD => get_the_title(),
                'link' => get_permalink(),
                'excerpt' => wp_trim_words(get_the_excerpt(), 20),
                'views' => pplist_get_post_views_ppl738($post_id),
                'date' => pplist_format_thai_date_ppl738(get_the_time('U')),
                'date_iso' => get_the_date('c'),
                'files' => array()
            );
            
            // Get taxonomy terms
            $terms = get_the_terms($post_id, 'ppgroup');
            if ($terms && !is_wp_error($terms)) {
                $post_data['category'] = array(
                    DGA_NAME_FIELD => $terms[0]->name,
                    'slug' => $terms[0]->slug
                );
            }
            
            // Get files from ACF repeater
            if (function_exists('have_rows') && have_rows('at_file_standard')) {
                while (have_rows('at_file_standard')) {
                    the_row();
                    
                    $file_name = get_sub_field('at_rp_file_name');
                    $file_date = get_sub_field('at_rp_file_create');
                    $file_link = get_sub_field('at_rp_file_link');
                    
                    if ($file_name && $file_link) {
                        $post_data['files'][] = array(
                            DGA_NAME_FIELD => sanitize_text_field($file_name),
                            'date' => $file_date ? pplist_format_thai_date_ppl738(strtotime($file_date)) : '',
                            'link' => esc_url($file_link),
                            DGA_TYPE_FIELD => pplist_get_file_type_ppl738($file_link)
                        );
                    }
                }
            }
            
            $posts[] = $post_data;
        }
        wp_reset_postdata();
    }
    
    // Send response
    wp_send_json_success(array(
        'posts' => $posts,
        DGA_TOTAL_FIELD_KEY => $query->found_posts,
        'max_pages' => $query->max_num_pages,
        'current_page' => $page
    ));
}

/**
 * AJAX handler for incrementing views
 */
function pplist_increment_view_ppl738() {
    if (!check_ajax_referer('pplist_ppl738_nonce', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_INVALID_NONCE_MESSAGE), 403);
    }
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? absint($_POST[DGA_POST_ID_FIELD]) : 0;
    
    if (!$post_id || get_post_type($post_id) !== 'mpeople') {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid post'), 400);
    }
    
    $new_count = pplist_set_post_views_ppl738($post_id);
    
    wp_send_json_success(array(
        'views' => $new_count
    ));
}

/**
 * AJAX handler for search suggestions
 */
function pplist_search_ppl738() {
    if (!check_ajax_referer('pplist_ppl738_nonce', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_INVALID_NONCE_MESSAGE), 403);
    }
    
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    
    if (strlen($search) < 2) {
        wp_send_json_success(array());
    }
    
    $args = array(
        DGA_POST_TYPE_FIELD => 'mpeople',
        DGA_POSTS_PER_PAGE => 5,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        's' => $search,
        DGA_FIELDS_PARAMETER => 'ids'
    );
    
    $query = new WP_Query($args);
    $suggestions = array();
    
    if ($query->have_posts()) {
        foreach ($query->posts as $post_id) {
            $suggestions[] = array(
                'id' => $post_id,
                DGA_TITLE_FIELD => get_the_title($post_id),
                'link' => get_permalink($post_id)
            );
        }
    }
    
    wp_send_json_success($suggestions);
}

/**
 * Helper function to get file type
 */
function pplist_get_file_type_ppl738($url) {
    $extension = strtolower(pathinfo($url, PATHINFO_EXTENSION));
    
    $types = array(
        'pdf' => 'PDF',
        'doc' => 'Word',
        'docx' => 'Word',
        'xls' => 'Excel',
        'xlsx' => 'Excel',
        'ppt' => 'PowerPoint',
        'pptx' => 'PowerPoint',
        'zip' => 'ZIP',
        'rar' => 'RAR'
    );
    
    return isset($types[$extension]) ? $types[$extension] : 'File';
}




/**** กำหนด Slug ของ Post ให้เป็น Post ID สำหรับ Post Type 'mpeople ****/

function set_mpeople_post_slug_as_id($post_ID, $post, $update) {
    // ตรวจสอบว่าเป็น Post Type 'mpeople' หรือไม่
    if ($post->post_type !== 'mpeople') {
        return;
    }

    // ตรวจสอบว่าเป็นการ Auto Draft หรือไม่
    if ($post->post_status === 'auto-draft') {
        return;
    }

    // หยุดการทำงานถ้ามีการอัพเดทแล้ว เพื่อป้องกันการทำงานซ้ำ
    remove_action('save_post', 'set_mpeople_post_slug_as_id', 10);

    // อัพเดท post_name (slug) เป็น post ID
    wp_update_post(array(
        'ID' => $post_ID,
        'post_name' => $post_ID
    ));

    // เพิ่ม action กลับเข้าไปใหม่
    add_action('save_post', 'set_mpeople_post_slug_as_id', 10, 3);
}

// เพิ่ม Hook เข้าไปใน WordPress
add_action('save_post', 'set_mpeople_post_slug_as_id', 10, 3);


/**** ระบบแก้ไขหมวดหมู่โพส คู่มือประชาชน ******/


// เพิ่ม Script และ Style
function ppgroup_editor_enqueue_scripts() {
    $child_theme_url = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style(
        'ppgroup-editor-style',
        $child_theme_url . '/css/ppgroup-editor.css',
        array(),
        DGA_VERSION_NUMBER
    );
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'ppgroup-editor-script',
        $child_theme_url . '/js/ppgroup-editor.js',
        array(DGA_JQUERY_HANDLE),
        DGA_VERSION_NUMBER,
        true
    );
    
    // ส่งค่า AJAX URL และ Nonce ไปยัง JavaScript
    wp_localize_script(
        'ppgroup-editor-script',
        'ppgroupEditor',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('ppgroup_editor_nonce')
        )
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ppgroup_editor_enqueue_scripts');

// สร้าง Shortcode
function ppgroup_editor_shortcode($atts) {
    // รับค่า Post ID จาก attribute หรือใช้ ID ปัจจุบัน
    $atts = shortcode_atts(array(
        DGA_POST_ID_FIELD => get_the_ID()
    ), $atts);
    
    $post_id = intval($atts[DGA_POST_ID_FIELD]);
    
    // ดึงค่า terms ทั้งหมดของ taxonomy ppgroup
    $all_terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'ppgroup',
        DGA_HIDE_EMPTY_FIELD => false
    ));
    
    // ดึงค่า terms ที่เลือกไว้ของโพสต์นี้
    $selected_terms = wp_get_object_terms($post_id, 'ppgroup');
    $selected_term_ids = wp_list_pluck($selected_terms, DGA_TERM_ID_FIELD);
    
    ob_start();
    ?>
    <div class="ppgroup-editor" data-post-id="<?php echo esc_attr($post_id); ?>">
        <div class="ppgroup-editor__header">
            <h3>เลือกหมวดหมู่</h3>
        </div>
        <div class="ppgroup-editor__content">
            <?php foreach ($all_terms as $term): ?>
                <label class="ppgroup-term-checkbox">
                    <input type="checkbox" 
                           name="ppgroup_terms[]" 
                           value="<?php echo esc_attr($term->term_id); ?>"
                           <?php checked(in_array($term->term_id, $selected_term_ids)); ?>>
                    <span class="checkmark"></span>
                    <span class="term-name"><?php echo esc_html($term->name); ?></span>
                </label>
            <?php endforeach; ?>
        </div>
        <div class="ppgroup-editor__footer">
            <div class="save-status"></div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('ppgroup_editor', 'ppgroup_editor_shortcode');

// AJAX Handler
function ppgroup_editor_update() {
    // ตรวจสอบ Nonce
    if (!check_ajax_referer('ppgroup_editor_nonce', 'nonce', false)) {
        wp_send_json_error(DGA_INVALID_NONCE_MESSAGE);
    }
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    $term_ids = array_map('intval', $_POST['term_ids']);
    
    // อัพเดต terms
    $result = wp_set_object_terms($post_id, $term_ids, 'ppgroup');
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    }
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'บันทึกการเปลี่ยนแปลงเรียบร้อยแล้ว',
        'terms' => $term_ids
    ));
}
add_action('wp_ajax_ppgroup_editor_update', 'ppgroup_editor_update');

/***** ภาพประจำหมดวหมู่ คู่มือประชาชน */

// เพิ่มฟิลด์รูปภาพในหน้าเพิ่มหมวดหมู่ใหม่
function add_ppgroup_image_field() {
    ?>
    <div class="form-field term-group">
        <label for="ppgroup_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        <input type="hidden" id="ppgroup_image_id" name="ppgroup_image_id" class="custom_media_url" value="">
        <div id="ppgroup_image_wrapper"></div>
        <p>
            <input type=DGA_BUTTON_TYPE class="button button-secondary" id="ppgroup_media_button" name="ppgroup_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
            <input type=DGA_BUTTON_TYPE class="button button-secondary" id="ppgroup_media_remove" name="ppgroup_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
        </p>
    </div>
    <?php
}
add_action('ppgroup_add_form_fields', 'add_ppgroup_image_field', 10, 2);

// เพิ่มฟิลด์รูปภาพในหน้าแก้ไขหมวดหมู่
function edit_ppgroup_image_field($term) {
    $image_id = get_term_meta($term->term_id, 'ppgroup_image_id', true);
    ?>
    <tr class="form-field term-group-wrap">
        <th scope="row">
            <label for="ppgroup_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        </th>
        <td>
            <input type="hidden" id="ppgroup_image_id" name="ppgroup_image_id" value="<?php echo $image_id; ?>">
            <div id="ppgroup_image_wrapper">
                <?php if ($image_id) { 
                    echo wp_get_attachment_image($image_id, 'thumbnail');
                } ?>
            </div>
            <p>
                <input type=DGA_BUTTON_TYPE class="button button-secondary" id="ppgroup_media_button" name="ppgroup_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
                <input type=DGA_BUTTON_TYPE class="button button-secondary" id="ppgroup_media_remove" name="ppgroup_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
            </p>
        </td>
    </tr>
    <?php
}
add_action('ppgroup_edit_form_fields', 'edit_ppgroup_image_field', 10, 2);

// บันทึกข้อมูลรูปภาพ
function save_ppgroup_image($term_id) {
    if (isset($_POST['ppgroup_image_id']) && '' !== $_POST['ppgroup_image_id']) {
        $image = $_POST['ppgroup_image_id'];
        update_term_meta($term_id, 'ppgroup_image_id', $image);
    } else {
        delete_term_meta($term_id, 'ppgroup_image_id');
    }
}
add_action('edited_ppgroup', 'save_ppgroup_image', 10, 2);
add_action('create_ppgroup', 'save_ppgroup_image', 10, 2);

// เพิ่ม Style และ Script
function ppgroup_image_enqueue() {
    global $taxonomy;
    if ($taxonomy === 'ppgroup') {
        wp_enqueue_media();
        
        // เพิ่ม JavaScript สำหรับ Media Uploader
        wp_add_inline_script(DGA_JQUERY_HANDLE, '
            jQuery(document).ready(function($) {
                function ct_media_upload(button_class) {
                    const _custom_media = true,
                        _orig_send_attachment = wp.media.editor.send.attachment;
                    $("body").on("click", button_class, function(e) {
                        const button_id = "#" + $(this).attr("id");
                        const send_attachment_bkp = wp.media.editor.send.attachment;
                        const button = $(button_id);
                        _custom_media = true;
                        wp.media.editor.send.attachment = function(props, attachment) {
                            if (_custom_media) {
                                $("#ppgroup_image_id").val(attachment.id);
                                $("#ppgroup_image_wrapper").html(\'<img class="custom_media_image" src="\' + attachment.url + \'" style="max-width:100px;max-height:100px;" />\');
                            } else {
                                return _orig_send_attachment.apply(button_id, [props, attachment]);
                            }
                        }
                        wp.media.editor.open(button);
                        return false;
                    });
                }
                ct_media_upload(".button.button-secondary#ppgroup_media_button");
                $("body").on("click", "#ppgroup_media_remove", function() {
                    $("#ppgroup_image_id").val("");
                    $("#ppgroup_image_wrapper").html("");
                    return false;
                });
            });
        ');
    }
}
add_action('admin_enqueue_scripts', 'ppgroup_image_enqueue');


/***** เพิ่มรูปภาพสำหรับ Taxonomy tnews */

// เพิ่มฟิลด์รูปภาพในหน้าเพิ่มหมวดหมู่ใหม่
function add_tnews_image_field() {
    ?>
    <div class="form-field term-group">
        <label for="tnews_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        <input type="hidden" id="tnews_image_id" name="tnews_image_id" class="custom_media_url" value="">
        <div id="tnews_image_wrapper"></div>
        <p>
            <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tnews_media_button" name="tnews_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
            <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tnews_media_remove" name="tnews_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
        </p>
    </div>
    <?php
}
add_action('tnews_add_form_fields', 'add_tnews_image_field', 10, 2);

// เพิ่มฟิลด์รูปภาพในหน้าแก้ไขหมวดหมู่
function edit_tnews_image_field($term) {
    $image_id = get_term_meta($term->term_id, 'tnews_image_id', true);
    ?>
    <tr class="form-field term-group-wrap">
        <th scope="row">
            <label for="tnews_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        </th>
        <td>
            <input type="hidden" id="tnews_image_id" name="tnews_image_id" value="<?php echo $image_id; ?>">
            <div id="tnews_image_wrapper">
                <?php if ($image_id) { 
                    echo wp_get_attachment_image($image_id, 'thumbnail');
                } ?>
            </div>
            <p>
                <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tnews_media_button" name="tnews_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
                <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tnews_media_remove" name="tnews_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
            </p>
        </td>
    </tr>
    <?php
}
add_action('tnews_edit_form_fields', 'edit_tnews_image_field', 10, 2);

// บันทึกข้อมูลรูปภาพ
function save_tnews_image($term_id) {
    if (isset($_POST['tnews_image_id']) && '' !== $_POST['tnews_image_id']) {
        $image = $_POST['tnews_image_id'];
        update_term_meta($term_id, 'tnews_image_id', $image);
    } else {
        delete_term_meta($term_id, 'tnews_image_id');
    }
}
add_action('edited_tnews', 'save_tnews_image', 10, 2);
add_action('create_tnews', 'save_tnews_image', 10, 2);

// เพิ่ม Style และ Script
function tnews_image_enqueue() {
    global $taxonomy;
    if ($taxonomy === 'tnews') {
        wp_enqueue_media();
        
        // เพิ่ม JavaScript สำหรับ Media Uploader
        wp_add_inline_script(DGA_JQUERY_HANDLE, '
            jQuery(document).ready(function($) {
                function tnews_media_upload(button_class) {
                    const _custom_media = true,
                        _orig_send_attachment = wp.media.editor.send.attachment;
                    $("body").on("click", button_class, function(e) {
                        const button_id = "#" + $(this).attr("id");
                        const send_attachment_bkp = wp.media.editor.send.attachment;
                        const button = $(button_id);
                        _custom_media = true;
                        wp.media.editor.send.attachment = function(props, attachment) {
                            if (_custom_media) {
                                $("#tnews_image_id").val(attachment.id);
                                $("#tnews_image_wrapper").html(\'<img class="custom_media_image" src="\' + attachment.url + \'" style="max-width:100px;max-height:100px;" />\');
                            } else {
                                return _orig_send_attachment.apply(button_id, [props, attachment]);
                            }
                        }
                        wp.media.editor.open(button);
                        return false;
                    });
                }
                tnews_media_upload(".button.button-secondary#tnews_media_button");
                $("body").on("click", "#tnews_media_remove", function() {
                    $("#tnews_image_id").val("");
                    $("#tnews_image_wrapper").html("");
                    return false;
                });
            });
        ');
    }
}
add_action('admin_enqueue_scripts', 'tnews_image_enqueue');


/***** เพิ่มรูปภาพสำหรับประเภทหน่วยงานใน Taxonomy tdep */

// เพิ่มฟิลด์รูปภาพในหน้าเพิ่มประเภทหน่วยงานใหม่
function add_tdep_image_field() {
    ?>
    <div class="form-field term-group">
        <label for="tdep_image"><?php _e('รูปภาพประเภทหน่วยงาน', 'text-domain'); ?></label>
        <input type="hidden" id="tdep_image_id" name="tdep_image_id" class="custom_media_url" value="">
        <div id="tdep_image_wrapper"></div>
        <p>
            <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tdep_media_button" name="tdep_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
            <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tdep_media_remove" name="tdep_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
        </p>
    </div>
    <?php
}
add_action('tdep_add_form_fields', 'add_tdep_image_field', 10, 2);

// เพิ่มฟิลด์รูปภาพในหน้าแก้ไขประเภทหน่วยงาน
function edit_tdep_image_field($term) {
    $image_id = get_term_meta($term->term_id, 'tdep_image_id', true);
    ?>
    <tr class="form-field term-group-wrap">
        <th scope="row">
            <label for="tdep_image"><?php _e('รูปภาพประเภทหน่วยงาน', 'text-domain'); ?></label>
        </th>
        <td>
            <input type="hidden" id="tdep_image_id" name="tdep_image_id" value="<?php echo $image_id; ?>">
            <div id="tdep_image_wrapper">
                <?php if ($image_id) { 
                    echo wp_get_attachment_image($image_id, 'thumbnail');
                } ?>
            </div>
            <p>
                <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tdep_media_button" name="tdep_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
                <input type=DGA_BUTTON_TYPE class="button button-secondary" id="tdep_media_remove" name="tdep_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
            </p>
        </td>
    </tr>
    <?php
}
add_action('tdep_edit_form_fields', 'edit_tdep_image_field', 10, 2);

// บันทึกข้อมูลรูปภาพ
function save_tdep_image($term_id) {
    if (isset($_POST['tdep_image_id']) && '' !== $_POST['tdep_image_id']) {
        $image = $_POST['tdep_image_id'];
        update_term_meta($term_id, 'tdep_image_id', $image);
    } else {
        delete_term_meta($term_id, 'tdep_image_id');
    }
}
add_action('edited_tdep', 'save_tdep_image', 10, 2);
add_action('create_tdep', 'save_tdep_image', 10, 2);

// เพิ่ม Style และ Script
function tdep_image_enqueue() {
    global $taxonomy;
    if ($taxonomy === 'tdep') {
        wp_enqueue_media();
        
        // เพิ่ม JavaScript สำหรับ Media Uploader
        wp_add_inline_script(DGA_JQUERY_HANDLE, '
            jQuery(document).ready(function($) {
                function tdep_media_upload(button_class) {
                    const _custom_media = true,
                        _orig_send_attachment = wp.media.editor.send.attachment;
                    $("body").on("click", button_class, function(e) {
                        const button_id = "#" + $(this).attr("id");
                        const send_attachment_bkp = wp.media.editor.send.attachment;
                        const button = $(button_id);
                        _custom_media = true;
                        wp.media.editor.send.attachment = function(props, attachment) {
                            if (_custom_media) {
                                $("#tdep_image_id").val(attachment.id);
                                $("#tdep_image_wrapper").html(\'<img class="custom_media_image" src="\' + attachment.url + \'" style="max-width:100px;max-height:100px;" />\');
                            } else {
                                return _orig_send_attachment.apply(button_id, [props, attachment]);
                            }
                        }
                        wp.media.editor.open(button);
                        return false;
                    });
                }
                tdep_media_upload(".button.button-secondary#tdep_media_button");
                $("body").on("click", "#tdep_media_remove", function() {
                    $("#tdep_image_id").val("");
                    $("#tdep_image_wrapper").html("");
                    return false;
                });
            });
        ');
    }
}
add_action('admin_enqueue_scripts', 'tdep_image_enqueue');




/****** แสดงวันที่ไทย และ จำนวนการคลิกอ่านโพสนั้น ******/

// Enqueue CSS and JavaScript
function thai_date_views_enqueue_scripts() {
    wp_enqueue_style('thai-date-views-style', 
        get_stylesheet_directory_uri() . '/css/thai-date-views.css', 
        array(), 
        DGA_VERSION_NUMBER
    );
    
    wp_enqueue_script('thai-date-views-script', 
        get_stylesheet_directory_uri() . '/js/thai-date-views.js', 
        array(DGA_JQUERY_HANDLE), 
        DGA_VERSION_NUMBER, 
        true
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'thai_date_views_enqueue_scripts');

// Convert to Thai month (abbreviated)
function get_thai_month($month) {
    $thai_months = array(
        1 => 'ม.ค.',
        2 => 'ก.พ.',
        3 => 'มี.ค.',
        4 => 'เม.ย.',
        5 => 'พ.ค.',
        6 => 'มิ.ย.',
        7 => 'ก.ค.',
        8 => 'ส.ค.',
        9 => 'ก.ย.',
        10 => 'ต.ค.',
        11 => 'พ.ย.',
        12 => 'ธ.ค.'
    );
    return $thai_months[$month];
}

// Convert to Thai day
function get_thai_day($day) {
    $thai_days = array(
        'Sunday' => 'อาทิตย์',
        'Monday' => 'จันทร์',
        'Tuesday' => 'อังคาร',
        'Wednesday' => 'พุธ',
        'Thursday' => 'พฤหัสบดี',
        'Friday' => 'ศุกร์',
        'Saturday' => 'เสาร์'
    );
    return $thai_days[$day];
}

// Update post views
function update_post_views() {
    if (is_single()) {
        $post_id = get_the_ID();
        $views = get_post_meta($post_id, 'post_views', true);
        
        if ($views === '') {
            add_post_meta($post_id, 'post_views', 1, true);
        } else {
            update_post_meta($post_id, 'post_views', $views + 1);
        }
    }
}
add_action('wp_head', 'update_post_views');

// Create shortcode
function thai_date_views_shortcode() {
    $post_id = get_the_ID();
    $post_date = get_the_date('Y-m-d');
    $date = new DateTime($post_date);
    
    $thai_day = get_thai_day($date->format('l'));
    $thai_month = get_thai_month((int)$date->format('n'));
    $thai_year = (int)$date->format('Y') + 543;
    $thai_date = $date->format('j') . ' ' . $thai_month . ' ' . $thai_year;
    
    $views = get_post_meta($post_id, 'post_views', true);
    $views = ($views === '') ? 0 : $views;
    
    $output = '<div class="thai-date-views">';
    $output .= '<span class="thai-date">';
    $output .= '<i class="far fa-calendar-alt"></i> ';
    $output .= $thai_date;
    $output .= '</span>';
    $output .= '<span class="post-views">';
    $output .= '<i class="far fa-eye"></i> ';
    $output .= number_format($views) . ' ครั้ง';
    $output .= '</span>';
    $output .= '</div>';
    
    return $output;
}
add_shortcode('thai_date_views', 'thai_date_views_shortcode');


/**** แสดง Post ที่มี Taxo เดียวกัน *****/

add_action('elementor/query/pppost', function($query) {
    // Get current post
    $current_post = get_post();
    
    if (!$current_post) {
        return;
    }
    
    // Get all taxonomies for the current post
    $taxonomies = get_object_taxonomies($current_post->post_type);
    
    if (empty($taxonomies)) {
        return;
    }
    
    // Get terms from current post
    $related_terms = array();
    foreach ($taxonomies as $taxonomy) {
        $post_terms = wp_get_post_terms($current_post->ID, $taxonomy, array(DGA_FIELDS_PARAMETER => 'ids'));
        if (!empty($post_terms) && !is_wp_error($post_terms)) {
            $related_terms[$taxonomy] = $post_terms;
        }
    }
    
    // If no terms found, return
    if (empty($related_terms)) {
        return;
    }
    
    // Build tax query
    $tax_query = array('relation' => 'OR');
    foreach ($related_terms as $taxonomy => $terms) {
        $tax_query[] = array(
            DGA_TAXONOMY_FIELD => $taxonomy,
            DGA_FIELD_KEY    => DGA_TERM_ID_FIELD,
            'terms'    => $terms,
            'operator' => 'IN'
        );
    }
    
    // Set query parameters
    $query->set(DGA_POST_TYPE_FIELD, 'mpeople');
    $query->set('tax_query', $tax_query);
    $query->set('post__not_in', array($current_post->ID));
    $query->set(DGA_POSTS_PER_PAGE, 6);
    $query->set(DGA_ORDERBY_FIELD_VALUE, 'date');
    $query->set(DGA_ORDER_FIELD, 'DESC');
});


/**** แสดงรายการใน sub customfield ของเอกสารคู่มือประชาชน *****/

// ลงทะเบียน Shortcode
function register_standard_documents_shortcode() {
    add_shortcode('standard_documents', 'display_standard_documents');
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'enqueue_standard_documents_assets');
}
add_action('init', 'register_standard_documents_shortcode');

// ฟังก์ชันเพิ่ม CSS และ JS
function enqueue_standard_documents_assets() {
    wp_enqueue_style(
        'standard-documents-style',
        get_stylesheet_directory_uri() . '/css/standard-documents.css',
        array(),
        DGA_VERSION_NUMBER
    );
    
    wp_enqueue_script(
        'standard-documents-script',
        get_stylesheet_directory_uri() . '/js/standard-documents.js',
        array(DGA_JQUERY_HANDLE),
        DGA_VERSION_NUMBER,
        true
    );
}

// ฟังก์ชันแปลงวันที่เป็นรูปแบบไทย
function convert_to_thai_date($date_string) {
    $date = DateTime::createFromFormat(DGA_DATE_FORMAT_SHORT, $date_string);
    if (!$date) {
        return $date_string;
    }
    
    $thai_year = $date->format('Y') + 543;
    return $date->format('d/m/') . $thai_year;
}

// ฟังก์ชัน Shortcode หลัก
function display_standard_documents() {
    // ตรวจสอบว่ามีข้อมูล Repeater field หรือไม่
    if (!have_rows('at_file_standard')) {
        return '<div class="standard-docs-section">
                    <h2 class="standard-docs-title">เอกสารแนบ</h2>
                    <div class="standard-docs-empty" role="alert">ไม่มีไฟล์แนบ</div>
                </div>';
    }

    ob_start();
    ?>
    <div class="standard-docs-section">
        <h2 class="standard-docs-title">เอกสารแนบ</h2>
        <div class="standard-docs-container">
            <table class="standard-docs-table" role="table" aria-label="รายการเอกสารแนบ">
                <thead>
                    <tr>
                        <th scope="col" class="column-file">ชื่อไฟล์</th>
                        <th scope="col" class="column-date">วันที่นำเข้า</th>
                        <th scope="col" class="column-download">ดาวน์โหลด</th>
                    </tr>
                </thead>
                <tbody>
                <?php
                while (have_rows('at_file_standard')) {
                    the_row();
                    $file_name = get_sub_field('at_rp_file_name');
                    $file_date = get_sub_field('at_rp_file_create');
                    $file_link = get_sub_field('at_rp_file_link');
                    
                    $thai_date = convert_to_thai_date($file_date);
                    ?>
                    <tr>
                        <td data-label="ชื่อไฟล์" class="column-file">
                            <span class="file-icon">📄</span>
                            <?php echo esc_html($file_name); ?>
                        </td>
                        <td data-label="วันที่นำเข้า" class="column-date">
                            <?php echo esc_html($thai_date); ?>
                        </td>
                        <td data-label="ดาวน์โหลด" class="column-download">
                            <a href="<?php echo esc_url($file_link); ?>" 
                               class="download-button"
                               download
                               aria-label="ดาวน์โหลด <?php echo esc_attr($file_name); ?>">
                                <span class="download-icon">⬇️</span>
                                <span class="button-text">ดาวน์โหลด</span>
                            </a>
                        </td>
                    </tr>
                    <?php
                }
                ?>
                </tbody>
            </table>
        </div>
    </div>
    <?php
    return ob_get_clean();
}





/**** แสดงหมวดหมู่หน่วยงาน จาก tdep *****/

// Enqueue scripts and styles
function tdep_cards_enqueue_assets() {
    wp_enqueue_style('tdep-cards-style', get_stylesheet_directory_uri() . '/css/tdep-cards.css', array(), DGA_VERSION_NUMBER);
    wp_enqueue_script('tdep-cards-script', get_stylesheet_directory_uri() . '/js/tdep-cards.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'tdep_cards_enqueue_assets');

// Shortcode function
function tdep_category_cards_shortcode() {
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tdep',
        DGA_HIDE_EMPTY_FIELD => false,
    ));

    if (empty($terms) || is_wp_error($terms)) {
        return '<p>ไม่พบข้อมูลหมวดหมู่</p>';
    }

    $output = '<div class="tdep-cards-container">';
    
    foreach ($terms as $term) {
        // Get image ID and URL
        $image_id = get_term_meta($term->term_id, 'tdep_image_id', true);
        $image_url = $image_id ? wp_get_attachment_image_url($image_id, 'large') : '';
        
        // Default background if no image
        if (!$image_url) {
            $image_url = get_stylesheet_directory_uri() . '/images/default-bg.jpg';
        }

        // Get post count
        $post_count = $term->count;
        
        // Get term link
        $term_link = get_term_link($term);

        $output .= sprintf(
            '<a href="%s" class="tdep-card" data-aos="fade-up">
                <div class="tdep-card-inner" style="background-image: url(\'%s\')">
                    <div class="tdep-card-content">
                        <h3 class="tdep-card-title">%s</h3>
                        <div class="tdep-card-count">
                            <span class="count-number">%d</span>
                            <span class="count-text">รายการ</span>
                        </div>
                    </div>
                </div>
            </a>',
            esc_url($term_link),
            esc_url($image_url),
            esc_html($term->name),
            $post_count
        );
    }
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('tdep_cards', 'tdep_category_cards_shortcode');



/**** ฟังก์ชั่นแสดง Achive POst ตามหมวดหมู่นั้น  ******/

// Enqueue necessary scripts and styles
function tdep_tem_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Enqueue CSS
    wp_enqueue_style(
        'tdep-tem-style',
        get_stylesheet_directory_uri() . '/css/tdep-tem.css',
        array(),
        $theme_version
    );

    // Enqueue JavaScript
    wp_enqueue_script(
        'tdep-tem-script',
        get_stylesheet_directory_uri() . '/js/tdep-tem.js',
        array(DGA_JQUERY_HANDLE),
        $theme_version,
        true
    );

    // Localized script data
    wp_localize_script(
        'tdep-tem-script',
        'tdepTemData',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('tdep_tem_nonce')
        )
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'tdep_tem_enqueue_assets');

// Time ago function in Thai
function tdep_tem_time_ago($timestamp) {
    $thai_months = array(
        "ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.",
        "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."
    );
    
    $current_time = current_time('timestamp');
    $diff = $current_time - $timestamp;
    
    if ($diff < 60) {
        return "เมื่อ " . $diff . " วินาทีที่แล้ว";
    } elseif ($diff < 3600) {
        $minutes = floor($diff / 60);
        return "เมื่อ " . $minutes . " นาทีที่แล้ว";
    } elseif ($diff < 86400) { // น้อยกว่า 24 ชั่วโมง
        $hours = floor($diff / 3600);
        return "เมื่อ " . $hours . " ชั่วโมงที่แล้ว";
    } else {
        // แสดงวันที่แบบไทย เมื่อเกิน 24 ชั่วโมง
        $day = date('j', $timestamp);
        $month = $thai_months[date('n', $timestamp) - 1];
        $year = date('Y', $timestamp) + 543; // แปลงเป็น พ.ศ.
        return "$day $month $year";
    }
}

// Shortcode function
function tdep_tem_shortcode($atts) {
    // Get the current queried object (archive term)
    $queried_object = get_queried_object();
    
    // Default arguments
    $args = shortcode_atts(array(
        DGA_POSTS_PER_PAGE => 9,
        DGA_PAGED_PARAMETER => get_query_var(DGA_PAGED_PARAMETER) ? get_query_var(DGA_PAGED_PARAMETER) : 1,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC',
        DGA_TAXONOMY_FIELD => '',
        DGA_TERM_ID_FIELD => ''
    ), $atts);

    // Base query arguments
    $query_args = array(
        DGA_POST_TYPE_FIELD => 'department',
        DGA_POSTS_PER_PAGE => $args[DGA_POSTS_PER_PAGE],
        DGA_PAGED_PARAMETER => $args[DGA_PAGED_PARAMETER],
        DGA_ORDERBY_FIELD_VALUE => $args[DGA_ORDERBY_FIELD_VALUE],
        DGA_ORDER_FIELD => $args[DGA_ORDER_FIELD]
    );

    // Handle taxonomy query
    if (!empty($args[DGA_TAXONOMY_FIELD]) && !empty($args[DGA_TERM_ID_FIELD])) {
        $query_args['tax_query'] = array(
            array(
                DGA_TAXONOMY_FIELD => $args[DGA_TAXONOMY_FIELD],
                DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                'terms' => $args[DGA_TERM_ID_FIELD]
            )
        );
    } elseif (is_tax() && $queried_object instanceof WP_Term) {
        $query_args['tax_query'] = array(
            array(
                DGA_TAXONOMY_FIELD => $queried_object->taxonomy,
                DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                'terms' => $queried_object->term_id
            )
        );
    }

    // Run the query
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="tdep-tem-container">
            <div class="tdep-tem-grid" role="region" aria-label="รายการแผนก">
                <?php while ($query->have_posts()) : $query->the_post();
                    $post_date = get_the_time('U');
                    $thumbnail = get_the_post_thumbnail_url(get_the_ID(), 'tdep-tem-thumbnail');
                    if (!$thumbnail) {
                        $thumbnail = get_stylesheet_directory_uri() . '/images/default-department.jpg';
                    }
                    
                    // Get categories/terms
                    $taxonomy = $queried_object instanceof WP_Term ? $queried_object->taxonomy : 'category';
                    $terms = get_the_terms(get_the_ID(), $taxonomy);
                    
                    // Get and sanitize excerpt
                    $excerpt = wp_strip_all_tags(get_the_excerpt());
                    $excerpt = wp_trim_words($excerpt, 20, '...');
                ?>
                    <article class="tdep-tem-card" role="article">
                        <a href="<?php echo esc_url(get_permalink()); ?>" class="tdep-tem-card-link" aria-labelledby="post-<?php echo get_the_ID(); ?>">
                            <div class="tdep-tem-card-image-wrapper">
                                <div class="tdep-tem-card-image" 
                                     style="background-image: url('<?php echo esc_url($thumbnail); ?>')"
                                     aria-label="<?php echo esc_attr__('ภาพประกอบบทความ: ', 'tdep-tem') . esc_attr(get_the_title()); ?>">
                                    <div class="tdep-tem-card-overlay"></div>
                                </div>
                                <?php if ($terms && !is_wp_error($terms)) : ?>
                                    <div class="tdep-tem-card-categories" aria-label="หมวดหมู่">
                                        <?php foreach ($terms as $term) : ?>
                                            <span class="tdep-tem-category-tag">
                                                <?php echo esc_html($term->name); ?>
                                            </span>
                                        <?php endforeach; ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                            
                            <div class="tdep-tem-card-content">
                                <div class="tdep-tem-card-meta">
                                    <time datetime="<?php echo esc_attr(get_the_date('c')); ?>" class="tdep-tem-card-date">
                                        <i class="tdep-tem-icon-calendar" aria-hidden="true"></i>
                                        <?php echo esc_html(get_the_date(DGA_DATE_FORMAT_SHORT)); ?>
                                    </time>
                                </div>

                                <h2 id="post-<?php echo get_the_ID(); ?>" class="tdep-tem-card-title">
                                    <?php echo esc_html(get_the_title()); ?>
                                </h2>

                                <?php if ($excerpt) : ?>
                                    <p class="tdep-tem-card-excerpt">
                                        <?php echo esc_html($excerpt); ?>
                                    </p>
                                <?php endif; ?>

                                <div class="tdep-tem-card-footer">
                                    <span class="tdep-tem-timeago">
                                        <?php echo tdep_tem_time_ago($post_date); ?>
                                    </span>
                                    <span class="tdep-tem-read-more">
                                        <?php esc_html_e('อ่านเพิ่มเติม', 'tdep-tem'); ?>
                                        <span class="tdep-tem-arrow" aria-hidden="true">→</span>
                                    </span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>

            <?php if ($query->max_num_pages > 1) : ?>
                <nav class="tdep-tem-pagination" role="navigation" aria-label="การนำทางหน้า">
                    <?php
                    echo paginate_links(array(
                        'base' => str_replace(999999999, '%#%', esc_url(get_pagenum_link(999999999))),
                        'format' => '?paged=%#%',
                        'current' => max(1, get_query_var(DGA_PAGED_PARAMETER)),
                        DGA_TOTAL_FIELD_KEY => $query->max_num_pages,
                        'prev_text' => '<i class="tdep-tem-icon-arrow-left" aria-hidden="true"></i> ' . __('หน้าก่อนหน้า', 'tdep-tem'),
                        'next_text' => __('หน้าถัดไป', 'tdep-tem') . ' <i class="tdep-tem-icon-arrow-right" aria-hidden="true"></i>',
                        DGA_TYPE_FIELD => 'list',
                        'mid_size' => 2,
                        'end_size' => 1,
                        'add_args' => false
                    ));
                    ?>
                </nav>
            <?php endif; ?>
        </div>
        <?php wp_reset_postdata();
    else : ?>
        <div class="tdep-tem-no-posts">
            <p><?php esc_html_e('ไม่พบข้อมูล', 'tdep-tem'); ?></p>
        </div>
    <?php endif;
    
    return ob_get_clean();
}
add_shortcode('tdep_tem', 'tdep_tem_shortcode');

// After theme setup
function tdep_tem_after_setup_theme() {
    add_theme_support('post-thumbnails');
    add_image_size('tdep-tem-thumbnail', 800, 450, true);
}
add_action('after_setup_theme', 'tdep_tem_after_setup_theme');

// Register custom image size for admin
function tdep_tem_admin_image_sizes($sizes) {
    $sizes['tdep-tem-thumbnail'] = __('Card Thumbnail Size', 'your-text-domain');
    return $sizes;
}
add_filter('image_size_names_choose', 'tdep_tem_admin_image_sizes');


/**** แสดงรายการของ Tdep */

// Enqueue necessary scripts and styles
function tdep_list_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Enqueue CSS
    wp_enqueue_style(
        'tdep-list-style',
        get_stylesheet_directory_uri() . '/css/tdep-list.css',
        array(),
        $theme_version
    );

    // Enqueue JavaScript
    wp_enqueue_script(
        'tdep-list-script',
        get_stylesheet_directory_uri() . '/js/tdep-list.js',
        array(DGA_JQUERY_HANDLE),
        $theme_version,
        true
    );

    // Localize script
    wp_localize_script(
        'tdep-list-script',
        'tdepListData',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('tdep_list_nonce')
        )
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'tdep_list_enqueue_assets');

// ฟังก์ชันตรวจสอบโพสต์ใหม่
function tdep_is_new_post($post_time) {
    $current_time = current_time('timestamp');
    $hours_diff = ($current_time - $post_time) / 3600; // แปลงวินาทีเป็นชั่วโมง
    return $hours_diff <= 12;
}

// Time ago function
function tdep_list_time_ago($timestamp) {
    $current_time = current_time('timestamp');
    $diff = $current_time - $timestamp;
    
    if ($diff < 60) {
        return "เมื่อ " . $diff . " วินาทีที่แล้ว";
    } elseif ($diff < 3600) {
        $minutes = floor($diff / 60);
        return "เมื่อ " . $minutes . " นาทีที่แล้ว";
    } elseif ($diff < 86400) { // น้อยกว่า 24 ชั่วโมง
        $hours = floor($diff / 3600);
        return "เมื่อ " . $hours . " ชั่วโมงที่แล้ว";
    } else {
        $thai_months = array(
            "ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.",
            "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."
        );
        $day = date('j', $timestamp);
        $month = $thai_months[date('n', $timestamp) - 1];
        $year = date('Y', $timestamp) + 543; // แปลงเป็น พ.ศ.
        return "$day $month $year";
    }
}

// Main shortcode function
function tdep_list_shortcode($atts) {
    $args = shortcode_atts(array(
        DGA_POSTS_PER_PAGE => 10,
        DGA_PAGED_PARAMETER => get_query_var(DGA_PAGED_PARAMETER) ? get_query_var(DGA_PAGED_PARAMETER) : 1,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    ), $atts);

    $query_args = array(
        DGA_POST_TYPE_FIELD => 'department',
        DGA_POSTS_PER_PAGE => $args[DGA_POSTS_PER_PAGE],
        DGA_PAGED_PARAMETER => $args[DGA_PAGED_PARAMETER],
        DGA_ORDERBY_FIELD_VALUE => $args[DGA_ORDERBY_FIELD_VALUE],
        DGA_ORDER_FIELD => $args[DGA_ORDER_FIELD],
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );

    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="tdep-list-container">
            <!-- Loading skeleton template -->
            <template id="tdep-list-skeleton">
                <div class="tdep-list-item tdep-list-skeleton">
                    <div class="tdep-list-content">
                        <div class="tdep-list-title-skeleton"></div>
                    </div>
                    <div class="tdep-list-time-skeleton"></div>
                </div>
            </template>

            <!-- Main content -->
            <div class="tdep-list-wrapper" role="list">
                <?php while ($query->have_posts()) : $query->the_post();
                    // Get all taxonomies for this post type
                    $taxonomies = get_object_taxonomies('department');
                    $term_links = array();
                    
                    // Get terms from all taxonomies with their links
                    foreach ($taxonomies as $taxonomy) {
                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                        if ($terms && !is_wp_error($terms)) {
                            foreach ($terms as $term) {
                                $term_links[] = array(
                                    DGA_NAME_FIELD => $term->name,
                                    'url' => get_term_link($term->term_id, $taxonomy)
                                );
                            }
                        }
                    }
                ?>
                    <article class="tdep-list-item" role="listitem">
                        <div class="tdep-list-link">
                            <div class="tdep-list-content">
                                <div class="tdep-list-title-wrapper">
                                    <a href="<?php echo esc_url(get_permalink()); ?>" class="tdep-list-title-link">
                                        <h2 class="tdep-list-title">
                                            <?php echo esc_html(get_the_title()); ?>
                                            <?php if (tdep_is_new_post(get_the_time('U'))) : ?>
                                                <span class="tdep-list-new-badge">ใหม่</span>
                                            <?php endif; ?>
                                        </h2>
                                    </a>
                                    <?php if (!empty($term_links)) : ?>
                                        <div class="tdep-list-inline-terms">
                                            <?php foreach ($term_links as $index => $term) : ?>
                                                <a href="<?php echo esc_url($term['url']); ?>" 
                                                   class="tdep-list-term-link"
                                                   title="ดูทั้งหมดใน <?php echo esc_attr($term['name']); ?>">
                                                    <?php echo esc_html($term['name']); ?>
                                                </a>
                                                <?php if ($index < count($term_links) - 1) echo '<span class="tdep-list-term-separator">,</span>'; ?>
                                            <?php endforeach; ?>
                                        </div>
                                    <?php endif; ?>
                                </div>
                            </div>
                            <time class="tdep-list-time" datetime="<?php echo get_the_date('c'); ?>">
                                <?php echo tdep_list_time_ago(get_the_time('U')); ?>
                            </time>
                        </div>
                    </article>
                <?php endwhile; ?>
            </div>

            <?php if ($query->max_num_pages > 1) : ?>
                <nav class="tdep-list-pagination" role="navigation" aria-label="เพจเนชั่น">
                    <?php
                    echo paginate_links(array(
                        'base' => str_replace(999999999, '%#%', esc_url(get_pagenum_link(999999999))),
                        'format' => '?paged=%#%',
                        'current' => max(1, get_query_var(DGA_PAGED_PARAMETER)),
                        DGA_TOTAL_FIELD_KEY => $query->max_num_pages,
                        'prev_text' => '<span class="tdep-list-prev">หน้าก่อนหน้า</span>',
                        'next_text' => '<span class="tdep-list-next">หน้าถัดไป</span>',
                        DGA_TYPE_FIELD => 'list',
                        'mid_size' => 2,
                        'end_size' => 1
                    ));
                    ?>
                </nav>
            <?php endif; ?>
        </div>
        <?php wp_reset_postdata();
    else : ?>
        <div class="tdep-list-empty">
            <p><?php esc_html_e('ไม่พบข้อมูล', 'tdep-list'); ?></p>
        </div>
    <?php endif;
    
    return ob_get_clean();
}
add_shortcode('tdep_list', 'tdep_list_shortcode');

// Add theme support for thumbnails if needed
function tdep_list_after_setup_theme() {
    add_theme_support('post-thumbnails');
}
add_action('after_setup_theme', 'tdep_list_after_setup_theme');



/***** ระบบจัดการหมวดหมู่ใน tDEP */

function register_category_editor_assets() {
    wp_enqueue_media(); // เพิ่ม WordPress Media Uploader
    wp_enqueue_style('category-editor-style', get_stylesheet_directory_uri() . '/css/category-editor.css', array(), DGA_VERSION_NUMBER);
    wp_enqueue_script('category-editor-script', get_stylesheet_directory_uri() . '/js/category-editor.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_localize_script('category-editor-script', 'categoryEditorAjax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('category_editor_nonce')
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'register_category_editor_assets');

// Shortcode function
function category_editor_shortcode() {
    ob_start();
    ?>
    <div class="category-editor-wrapper">
        <button class="category-editor-btn" id="openCategoryEditor">
            <i class="fas fa-cog"></i>
            <span>แก้ไขหมวดหมู่</span>
        </button>

        <!-- Modal Popup -->
        <div class="category-modal" id="categoryModal">
            <div class="category-modal-content">
                <div class="modal-header">
                    <h2>จัดการหมวดหมู่</h2>
                    <button class="close-modal">&times;</button>
                </div>

                <!-- รายการหมวดหมู่ทั้งหมด -->
                <div class="categories-grid" id="categoriesGrid">
                    <!-- Skeleton Loading -->
                    <div class="category-card skeleton">
                        <div class="skeleton-image"></div>
                        <div class="skeleton-text"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('category_editor', 'category_editor_shortcode');

// AJAX handlers
function get_tdep_categories() {
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tdep',
        DGA_HIDE_EMPTY_FIELD => false,
    ));

    $categories = array();
    foreach ($terms as $term) {
        $image_id = get_term_meta($term->term_id, 'tdep_image_id', true);
        $image_url = wp_get_attachment_url($image_id);
        
        $categories[] = array(
            'id' => $term->term_id,
            DGA_NAME_FIELD => $term->name,
            'slug' => $term->slug,
            'image' => $image_url,
            'image_id' => $image_id
        );
    }

    wp_send_json_success($categories);
}
add_action('wp_ajax_get_tdep_categories', 'get_tdep_categories');
add_action('wp_ajax_nopriv_get_tdep_categories', 'get_tdep_categories');

function update_tdep_category() {
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $term_id = intval($_POST[DGA_TERM_ID_FIELD]);
    $response_data = array();
    
    // อัพเดตชื่อหมวดหมู่
    if (isset($_POST['name']) && !empty($_POST['name'])) {
        $name = sanitize_text_field($_POST['name']);
        $update_result = wp_update_term($term_id, 'tdep', array(
            DGA_NAME_FIELD => $name
        ));
        
        if (!is_wp_error($update_result)) {
            $response_data['name_updated'] = true;
            $response_data['new_name'] = $name;
        } else {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => 'ไม่สามารถอัพเดตชื่อหมวดหมู่ได้'
            ));
            return;
        }
    }
    
    // จัดการรูปภาพ
    if (isset($_POST['image_id'])) {
        $image_id = intval($_POST['image_id']);
        update_term_meta($term_id, 'tdep_image_id', $image_id);
        $response_data['image_updated'] = true;
        $response_data['new_image_url'] = wp_get_attachment_url($image_id);
    } elseif (isset($_POST['remove_image'])) {
        delete_term_meta($term_id, 'tdep_image_id');
        $response_data['image_removed'] = true;
    }
    
    wp_send_json_success($response_data);
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $term_id = intval($_POST[DGA_TERM_ID_FIELD]);
    $name = sanitize_text_field($_POST['name']);
    
    $result = wp_update_term($term_id, 'tdep', array(
        DGA_NAME_FIELD => $name
    ));

    if (isset($_FILES['image'])) {
        $image_id = media_handle_upload('image', 0);
        if (!is_wp_error($image_id)) {
            update_term_meta($term_id, 'tdep_image_id', $image_id);
        }
    }

    wp_send_json_success();
}
add_action('wp_ajax_update_tdep_category', 'update_tdep_category');

function delete_tdep_category() {
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $term_id = intval($_POST[DGA_TERM_ID_FIELD]);
    $result = wp_delete_term($term_id, 'tdep');

    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    }
    
    wp_send_json_success();
}
add_action('wp_ajax_delete_tdep_category', 'delete_tdep_category');


/**** ฟังก์ชั่นสร้างหมวดหมู่ใน tDEP ใหม่ *****/

function tdep_arc_create_shortcode() {
    // Enqueue SweetAlert2
    wp_enqueue_script('sweetalert2', 'https://cdn.jsdelivr.net/npm/sweetalert2@11', array(), null, true);
    
    // Enqueue jQuery
    wp_enqueue_script(DGA_JQUERY_HANDLE);
    
    // Enqueue custom script
    wp_enqueue_script('tdep-arc-create-js', get_stylesheet_directory_uri() . '/js/tdep-arc-create.js', array(DGA_JQUERY_HANDLE, 'sweetalert2'), '1.0', true);
    wp_enqueue_style('tdep-arc-create-css', get_stylesheet_directory_uri() . '/css/tdep-arc-create.css');
    
    // Add nonce และข้อมูลสำหรับ AJAX
    wp_localize_script('tdep-arc-create-js', 'tdepArcAjax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        'security' => wp_create_nonce('tdep_arc_create_nonce'),
        'current_user_id' => get_current_user_id()
    ));
    
    $output = '
    <button id="tdep-create-btn" class="tdep-btn">เพิ่มหมวดหมู่</button>
    
    <div id="tdep-modal" class="tdep-modal">
        <div class="tdep-modal-content">
            <span class="tdep-close">&times;</span>
            <h2>เพิ่มหมวดหมู่ใหม่</h2>
            
            <form id="tdep-arc-create-form">
                <div class="tdep-form-group">
                    <label for="tdep-name">ชื่อหมวดหมู่:</label>
                    <input type="text" id="tdep-name" name="tdep-name" required>
                </div>
                
                <div class="tdep-form-group">
                    <label for="tdep-slug">Slug URL:</label>
                    <input type="text" id="tdep-slug" name="tdep-slug" readonly>
                </div>
                
                <button type=DGA_SUBMIT_TYPE class="tdep-submit">บันทึก</button>
            </form>
        </div>
    </div>';
    
    return $output;
}
add_shortcode('tdep_arc_create', 'tdep_arc_create_shortcode');

function tdep_arc_preview_slug() {
    // ตรวจสอบ nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'tdep_arc_create_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        exit;
    }
    
    global $wpdb;
    
    // ค้นหา slug ล่าสุดที่มีรูปแบบ depXXX
    $query = $wpdb->prepare(
        "SELECT slug FROM {$wpdb->terms} t 
         INNER JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id 
         WHERE tt.taxonomy = %s AND t.slug REGEXP '^dep[0-9]+$'
         ORDER BY LENGTH(slug) DESC, slug DESC 
         LIMIT 1",
        'tdep'
    );
    
    $latest_slug = $wpdb->get_var($query);
    
    if ($latest_slug && preg_match('/dep(\d+)/', $latest_slug, $matches)) {
        $next_number = intval($matches[1]) + 1;
    } else {
        $next_number = 1;
    }
    
    wp_send_json_success(array('slug' => 'dep' . $next_number));
}
add_action('wp_ajax_tdep_arc_preview_slug', 'tdep_arc_preview_slug');
add_action('wp_ajax_nopriv_tdep_arc_preview_slug', 'tdep_arc_preview_slug');

function tdep_arc_create_category() {
    // ตรวจสอบ nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'tdep_arc_create_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        exit;
    }
    
    if (!isset($_POST['name']) || empty($_POST['name'])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อหมวดหมู่'));
        exit;
    }
    
    $name = sanitize_text_field($_POST['name']);
    $slug = sanitize_text_field($_POST['slug']);
    
    if (empty($slug)) {
        global $wpdb;
        $query = $wpdb->prepare(
            "SELECT slug FROM {$wpdb->terms} t 
             INNER JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id 
             WHERE tt.taxonomy = %s AND t.slug REGEXP '^dep[0-9]+$'
             ORDER BY LENGTH(slug) DESC, slug DESC 
             LIMIT 1",
            'tdep'
        );
        
        $latest_slug = $wpdb->get_var($query);
        
        if ($latest_slug && preg_match('/dep(\d+)/', $latest_slug, $matches)) {
            $next_number = intval($matches[1]) + 1;
        } else {
            $next_number = 1;
        }
        
        $slug = 'dep' . $next_number;
    }
    
    $result = wp_insert_term(
        $name,
        'tdep',
        array('slug' => $slug)
    );
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $result->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'สร้างหมวดหมู่สำเร็จ',
            'slug' => $slug
        ));
    }
}

// ลงทะเบียน AJAX actions
add_action('wp_ajax_tdep_arc_preview_slug', 'tdep_arc_preview_slug');
add_action('wp_ajax_nopriv_tdep_arc_preview_slug', 'tdep_arc_preview_slug');
add_action('wp_ajax_tdep_arc_create_category', 'tdep_arc_create_category');
add_action('wp_ajax_nopriv_tdep_arc_create_category', 'tdep_arc_create_category');


/**** สร้าง Post ใหม่ใน tDEP *****/

function tdep_post_shortcode() {
    // Enqueue required scripts and styles
    wp_enqueue_script('tdep-post-js', get_stylesheet_directory_uri() . '/js/tdep-post.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    wp_enqueue_style('tdep-post-css', get_stylesheet_directory_uri() . '/css/tdep-post.css');
    wp_enqueue_media(); // For media uploader

    // Add nonce for security
    wp_localize_script('tdep-post-js', 'tdep_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('tdep_post_nonce')
    ));

    // Get departments from taxonomy
    $departments = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tdep',
        DGA_HIDE_EMPTY_FIELD => false
    ));

    // Modal HTML structure
    $output = '
    <button id="tdep-post-btn" class="tdep-btn">เพิ่มข้อมูล</button>

    <div id="tdep-post-modal" class="tdep-modal">
        <div class="tdep-modal-content">
            <span class="tdep-close">&times;</span>
            <h2>เพิ่มข้อมูลใหม่</h2>

            <form id="tdep-post-form">
                <div class="tdep-form-row">
                    <div class="tdep-form-col">
                        <label for="tdep-department">เลือกหน่วยงานย่อย:</label>
                        <select id="tdep-department" name="department" required>
                            <option value="">กรุณาเลือกหน่วยงาน</option>';
                            foreach ($departments as $dept) {
                                $output .= '<option value="' . esc_attr($dept->term_id) . '">' . esc_html($dept->name) . '</option>';
                            }
    $output .= '
                        </select>
                    </div>
                    <div class="tdep-form-col">
                        <label>รูปภาพหลัก:</label>
                        <div class="tdep-featured-image">
                            <button type=DGA_BUTTON_TYPE id="tdep-upload-btn" class="tdep-upload-btn">
                                <span class="upload-icon">+</span>
                                <span class="upload-text">เลือกรูปภาพ</span>
                            </button>
                            <div id="tdep-image-preview" class="image-preview"></div>
                            <input type="hidden" id="tdep-featured-image-id" name="featured_image_id">
                        </div>
                    </div>
                </div>

                <div class="tdep-form-group">
                    <label for="tdep-title">ชื่อเรื่อง:</label>
                    <input type="text" id="tdep-title" name="title" required>
                </div>

                <div class="tdep-form-group">
                    <label for="tdep-content">เนื้อหาหลัก:</label>
                    <textarea id="tdep-content" name="content" rows="6" required></textarea>
                </div>

                <button type=DGA_SUBMIT_TYPE class="tdep-submit">บันทึก</button>
            </form>
        </div>
    </div>';

    return $output;
}
add_shortcode('tdep_post', 'tdep_post_shortcode');

// AJAX handler for creating new post
function tdep_create_post() {
    check_ajax_referer('tdep_post_nonce', 'nonce');

    $post_data = array(
        'post_title' => sanitize_text_field($_POST[DGA_TITLE_FIELD]),
        'post_content' => wp_kses_post($_POST['content']),
        DGA_POST_TYPE_FIELD => 'department',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );

    // Create post
    $post_id = wp_insert_post($post_data);

    if ($post_id) {
        // Update post name (slug) to match post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));

        // Set department taxonomy
        wp_set_object_terms($post_id, intval($_POST['department']), 'tdep');

        // Set featured image
        if (!empty($_POST['featured_image_id'])) {
            set_post_thumbnail($post_id, intval($_POST['featured_image_id']));
        }

        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'สร้างโพสสำเร็จ',
            'post_url' => get_permalink($post_id)
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการสร้างโพส'));
    }
}
add_action('wp_ajax_tdep_create_post', 'tdep_create_post');
add_action('wp_ajax_nopriv_tdep_create_post', 'tdep_create_post');



/**** POST LIST ของ tDEP2 ****/

function tdep_list_2_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Check for child theme CSS
    if (is_child_theme()) {
        $child_style_path = get_stylesheet_directory() . '/css/tdep-list-2.css';
        $child_style_uri = get_stylesheet_directory_uri() . '/css/tdep-list-2.css';
        
        if (file_exists($child_style_path)) {
            wp_enqueue_style('tdep-list-2-style', $child_style_uri, array(), $theme_version);
        } else {
            wp_enqueue_style('tdep-list-2-style', get_template_directory_uri() . '/css/tdep-list-2.css', array(), $theme_version);
        }
        
        // Check for child theme JS
        $child_script_path = get_stylesheet_directory() . '/js/tdep-list-2.js';
        $child_script_uri = get_stylesheet_directory_uri() . '/js/tdep-list-2.js';
        
        if (file_exists($child_script_path)) {
            wp_enqueue_script('tdep-list-2-script', $child_script_uri, array(DGA_JQUERY_HANDLE), $theme_version, true);
        } else {
            wp_enqueue_script('tdep-list-2-script', get_template_directory_uri() . '/js/tdep-list-2.js', array(DGA_JQUERY_HANDLE), $theme_version, true);
        }
    } else {
        wp_enqueue_style('tdep-list-2-style', get_template_directory_uri() . '/css/tdep-list-2.css', array(), $theme_version);
        wp_enqueue_script('tdep-list-2-script', get_template_directory_uri() . '/js/tdep-list-2.js', array(DGA_JQUERY_HANDLE), $theme_version, true);
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'tdep_list_2_enqueue_assets');

// Related posts shortcode function
function tdep_list_2_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        DGA_POSTS_PER_PAGE => 3,
        'exclude_current' => 'yes'
    ), $atts);
    
    // Get current post's taxonomies and terms
    $current_post_id = get_the_ID();
    $taxonomies = get_object_taxonomies('department');
    $current_terms = array();
    
    foreach ($taxonomies as $taxonomy) {
        $terms = wp_get_post_terms($current_post_id, $taxonomy, array(DGA_FIELDS_PARAMETER => 'ids'));
        if (!empty($terms) && !is_wp_error($terms)) {
            $current_terms[$taxonomy] = $terms;
        }
    }
    
    // Build tax query
    $tax_query = array('relation' => 'OR');
    foreach ($current_terms as $taxonomy => $terms) {
        $tax_query[] = array(
            DGA_TAXONOMY_FIELD => $taxonomy,
            DGA_FIELD_KEY => 'id',
            'terms' => $terms
        );
    }
    
    // Setup query arguments
    $query_args = array(
        DGA_POST_TYPE_FIELD => 'department',
        DGA_POSTS_PER_PAGE => $atts[DGA_POSTS_PER_PAGE],
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        'tax_query' => $tax_query,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    // Exclude current post if specified
    if ($atts['exclude_current'] === 'yes') {
        $query_args['post__not_in'] = array($current_post_id);
    }
    
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="tdep-list-2-container">
            <div class="tdep-list-2-wrapper">
                <?php while ($query->have_posts()) : $query->the_post(); ?>
                    <article class="tdep-list-2-item">
                        <a href="<?php the_permalink(); ?>" class="tdep-list-2-link">
                            <div class="tdep-list-2-image">
                                <?php if (has_post_thumbnail()) : ?>
                                    <?php the_post_thumbnail('medium', array('class' => 'tdep-list-2-thumbnail')); ?>
                                <?php else : ?>
                                    <div class="tdep-list-2-no-image"></div>
                                <?php endif; ?>
                                <?php
                                    // Get all taxonomies for this post
                                    $taxonomies = get_object_taxonomies('department');
                                    $first_term = null;

                                    // Loop through taxonomies to find the first term
                                    foreach ($taxonomies as $taxonomy) {
                                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                                        if (!empty($terms) && !is_wp_error($terms)) {
                                            $first_term = $terms[0];
                                            break; // ใช้ term แรกที่เจอ
                                        }
                                    }

                                    // Display the term name if found
                                    if ($first_term) : ?>
                                        <span class="tdep-list-2-badge"><?php echo esc_html($first_term->name); ?></span>
                                    <?php endif; ?>
                                    
                            </div>
                            <div class="tdep-list-2-content">
                                <h3 class="tdep-list-2-title"><?php the_title(); ?></h3>
                                <div class="tdep-list-2-meta">
                                    <span class="tdep-list-2-time"><?php echo tdep_tem_time_ago(get_the_time('U')); ?></span>
                                    <span class="tdep-list-2-separator">•</span>
                                    <span class="tdep-list-2-readmore">อ่านต่อ</span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>
        </div>
    <?php endif;
    
    wp_reset_postdata();
    
    return ob_get_clean();
}
add_shortcode('tdep_list_2', 'tdep_list_2_shortcode');



/**** ฟังก์ชั่นเปลี่ยน Taxonomy ของโพสใน tDEP *****/

// Enqueue necessary scripts and styles
function tdep_enqueue_scripts() {
    wp_enqueue_style('tdep-post-taxo', get_stylesheet_directory_uri() . '/css/tdep-post-taxo.css');
    wp_enqueue_script('tdep-post-taxo', get_stylesheet_directory_uri() . '/js/tdep-post-taxo.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    
    wp_localize_script('tdep-post-taxo', 'tdepAjax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('tdep_nonce'),
        'isLoggedIn' => is_user_logged_in()
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'tdep_enqueue_scripts');

// Create shortcode function
function tdep_post_taxo_shortcode($atts) {
    $post_id = get_the_ID();
    $terms = get_the_terms($post_id, 'tdep');
    $current_term = !empty($terms) ? $terms[0] : null;
    
    $output = '<div class="tdep-taxonomy-container">';
    
    if ($current_term) {
        $output .= '<div class="tdep-term-display" data-post-id="' . $post_id . '">';
        $output .= '<a href="' . get_term_link($current_term) . '" class="tdep-term-link">' . 
                  esc_html($current_term->name) . '</a>';
        
        if (is_user_logged_in()) {
            $output .= '<button class="tdep-edit-btn"><i class="tdep-edit-icon"></i></button>';
            
            // Hidden select box for editing
            $output .= '<div class="tdep-edit-form" style="display:none;">';
            $output .= '<select class="tdep-term-select">';
            
            $all_terms = get_terms(array(
                DGA_TAXONOMY_FIELD => 'tdep',
                DGA_HIDE_EMPTY_FIELD => false,
            ));
            
            foreach ($all_terms as $term) {
                $selected = ($current_term->term_id === $term->term_id) ? 'selected' : '';
                $output .= '<option value="' . $term->term_id . '" ' . $selected . '>' . 
                          esc_html($term->name) . '</option>';
            }
            
            $output .= '</select>';
            $output .= '<button class="tdep-save-btn">บันทึก</button>';
            $output .= '<button class="tdep-cancel-btn">ยกเลิก</button>';
            $output .= '</div>';
        }
        
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('tdep_post_taxo', 'tdep_post_taxo_shortcode');

// AJAX handler for updating taxonomy
function tdep_update_taxonomy() {
    check_ajax_referer('tdep_nonce', 'nonce');
    
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
        return;
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    $term_id = intval($_POST[DGA_TERM_ID_FIELD]);
    
    $result = wp_set_object_terms($post_id, $term_id, 'tdep');
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    } else {
        $term = get_term($term_id, 'tdep');
        wp_send_json_success(array(
            'term_name' => $term->name,
            'term_link' => get_term_link($term)
        ));
    }
}
add_action('wp_ajax_tdep_update_taxonomy', 'tdep_update_taxonomy');



/***** ระบบส่งเมลติดต่อจากหน้า ติดต่อหน่วยงาน  ******/

// Enqueue necessary scripts and styles
function contact_form_enqueue_scripts_kzn427() {
    // Check if scripts are already enqueued
    if (wp_script_is('contact-form-script', 'enqueued')) {
        return;
    }
    
    // Enqueue CSS
    wp_enqueue_style('contact-form-style', get_stylesheet_directory_uri() . '/css/contact-form.css', array(), '2.0.1');
    
    // Enqueue Cloudflare Turnstile with explicit rendering
    wp_enqueue_script('cf-turnstile', 'https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit', array(), null, true);
    
    // Enqueue contact form script
    wp_enqueue_script('contact-form-script', get_stylesheet_directory_uri() . '/js/contact-form.js', array(), '2.0.1', true);
    
    // Localize script with necessary data
    wp_localize_script('contact-form-script', 'contact_ajax_kzn427', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('contact_form_nonce_kzn427'),
        'turnstile_sitekey' => '0x4AAAAAABpd_WTHpqQRJg6v',
        'messages' => array(
            'sending' => __('กำลังส่งข้อมูล...', DGA_TEXT_DOMAIN),
            DGA_SUCCESS_STATUS => __('ส่งข้อความเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_RETRY_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'validation_error' => __('กรุณากรอกข้อมูลให้ครบถ้วน', DGA_TEXT_DOMAIN),
            'captcha_error' => __('กรุณายืนยันว่าคุณไม่ใช่โปรแกรมอัตโนมัติ', DGA_TEXT_DOMAIN)
        )
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'contact_form_enqueue_scripts_kzn427');

// Create shortcode for contact form
function contact_form_shortcode_kzn427($atts) {
    // Prevent multiple form instances on the same page
    static $instance = 0;
    $instance++;
    
    if ($instance > 1) {
        return '<div class="notice notice-warning">' . __('เฉพาะหนึ่งแบบฟอร์มติดต่อต่อหน้าเท่านั้น', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    // Shortcode attributes
    $atts = shortcode_atts(array(
        DGA_TITLE_FIELD => __('แบบฟอร์มติดต่อหน่วยงาน', DGA_TEXT_DOMAIN),
        'show_phone' => 'no',
        'department_email' => get_option('admin_email')
    ), $atts);
    
    ob_start();
    ?>
    <div class="contact-form-wrapper-kzn427">
        <div class="contact-form-container-kzn427" role="form" aria-labelledby="form-title-kzn427">
            <h2 id="form-title-kzn427" class="form-title-kzn427">
                <?php echo esc_html($atts[DGA_TITLE_FIELD]); ?>
            </h2>
            
            <form id="department-contact-form-kzn427" class="department-contact-form-kzn427" novalidate>
                <!-- Name Field -->
                <div class="form-group-kzn427">
                    <label for="contact_name_kzn427" class="form-label-kzn427">
                        <?php _e('ชื่อผู้ติดต่อ', DGA_TEXT_DOMAIN); ?>
                        <span class="required-asterisk-kzn427" aria-label="<?php esc_attr_e('จำเป็น', DGA_TEXT_DOMAIN); ?>">*</span>
                    </label>
                    <div class="input-wrapper-kzn427">
                        <svg class="input-icon-kzn427" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                            <circle cx="12" cy="7" r="4"></circle>
                        </svg>
                        <input 
                            type="text" 
                            id="contact_name_kzn427" 
                            name="contact_name" 
                            class="form-control-kzn427"
                            required
                            aria-required="true"
                            aria-describedby="name-error-kzn427"
                            autocomplete="name"
                            placeholder="<?php esc_attr_e('กรอกชื่อ-นามสกุล', DGA_TEXT_DOMAIN); ?>"
                        >
                    </div>
                    <div id="name-error-kzn427" class="error-message-kzn427" role="alert" aria-live="polite"></div>
                </div>
                
                <!-- Email Field -->
                <div class="form-group-kzn427">
                    <label for="contact_email_kzn427" class="form-label-kzn427">
                        <?php _e('อีเมล', DGA_TEXT_DOMAIN); ?>
                        <span class="required-asterisk-kzn427" aria-label="<?php esc_attr_e('จำเป็น', DGA_TEXT_DOMAIN); ?>">*</span>
                    </label>
                    <div class="input-wrapper-kzn427">
                        <svg class="input-icon-kzn427" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                            <polyline points="22,6 12,13 2,6"></polyline>
                        </svg>
                        <input 
                            type="email" 
                            id="contact_email_kzn427" 
                            name="contact_email" 
                            class="form-control-kzn427"
                            required
                            aria-required="true"
                            aria-describedby="email-error-kzn427"
                            autocomplete="email"
                            placeholder="<?php esc_attr_e('example@email.com', DGA_TEXT_DOMAIN); ?>"
                        >
                    </div>
                    <div id="email-error-kzn427" class="error-message-kzn427" role="alert" aria-live="polite"></div>
                </div>
                
                <!-- Phone Field (Optional) -->
                <?php if ($atts['show_phone'] === 'yes') : ?>
                <div class="form-group-kzn427">
                    <label for="contact_phone_kzn427" class="form-label-kzn427">
                        <?php _e('เบอร์โทรศัพท์', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <div class="input-wrapper-kzn427">
                        <svg class="input-icon-kzn427" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                        </svg>
                        <input 
                            type="tel" 
                            id="contact_phone_kzn427" 
                            name="contact_phone" 
                            class="form-control-kzn427"
                            autocomplete="tel"
                            placeholder="<?php esc_attr_e('08x-xxx-xxxx', DGA_TEXT_DOMAIN); ?>"
                        >
                    </div>
                </div>
                <?php endif; ?>
                
                <!-- Message Field -->
                <div class="form-group-kzn427">
                    <label for="contact_message_kzn427" class="form-label-kzn427">
                        <?php _e('รายละเอียด', DGA_TEXT_DOMAIN); ?>
                        <span class="required-asterisk-kzn427" aria-label="<?php esc_attr_e('จำเป็น', DGA_TEXT_DOMAIN); ?>">*</span>
                    </label>
                    <div class="input-wrapper-kzn427">
                        <svg class="input-icon-kzn427 textarea-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <polyline points="14 2 14 8 20 8"></polyline>
                            <line x1="16" y1="13" x2="8" y2="13"></line>
                            <line x1="16" y1="17" x2="8" y2="17"></line>
                            <polyline points="10 9 9 9 8 9"></polyline>
                        </svg>
                        <textarea 
                            id="contact_message_kzn427" 
                            name="contact_message" 
                            class="form-control-kzn427"
                            required
                            aria-required="true"
                            aria-describedby="message-error-kzn427"
                            rows="5"
                            placeholder="<?php esc_attr_e('กรอกรายละเอียดที่ต้องการติดต่อ...', DGA_TEXT_DOMAIN); ?>"
                        ></textarea>
                    </div>
                    <div id="message-error-kzn427" class="error-message-kzn427" role="alert" aria-live="polite"></div>
                </div>
                
                <!-- Cloudflare Turnstile CAPTCHA -->
                <div class="form-group-kzn427 captcha-group-kzn427">
                    <div id="cf-turnstile-kzn427" class="cf-turnstile"></div>
                    <div id="captcha-error-kzn427" class="error-message-kzn427" role="alert" aria-live="polite"></div>
                </div>
                
                <!-- Submit Button -->
                <div class="form-submit-kzn427">
                    <button 
                        type=DGA_SUBMIT_TYPE 
                        class="submit-button-kzn427"
                        aria-label="<?php esc_attr_e('ส่งแบบฟอร์ม', DGA_TEXT_DOMAIN); ?>"
                    >
                        <svg class="button-icon-kzn427" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                        </svg>
                        <span class="button-text-kzn427"><?php _e('ส่งข้อความ', DGA_TEXT_DOMAIN); ?></span>
                        <span class="button-loader-kzn427"></span>
                    </button>
                </div>
                
                <!-- Hidden nonce field -->
                <input type="hidden" name="contact_nonce" value="<?php echo wp_create_nonce('contact_form_nonce_kzn427'); ?>">
                <input type="hidden" name="department_email" value="<?php echo esc_attr($atts['department_email']); ?>">
            </form>
            
            <!-- Form Status Message -->
            <div id="form-status-kzn427" class="form-status-kzn427" role="status" aria-live="polite" style="display: none;"></div>
        </div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast-notification-kzn427" class="toast-notification-kzn427" role="alert" aria-live="assertive" style="display: none;">
        <div class="toast-content-kzn427">
            <svg class="toast-icon-kzn427" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
            <span class="toast-message-kzn427"></span>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('department_contact', 'contact_form_shortcode_kzn427');

// Verify Cloudflare Turnstile token
function verify_turnstile_token_kzn427($token) {
    $secret_key = '0x4AAAAAABpd_Sn33uhKowODW-wXtYOuHms';
    $verify_url = 'https://challenges.cloudflare.com/turnstile/v0/siteverify';
    
    // Prepare request data
    $data = array(
        'secret' => $secret_key,
        'response' => $token,
        'remoteip' => $_SERVER['REMOTE_ADDR']
    );
    
    // Make request to Cloudflare
    $response = wp_remote_post($verify_url, array(
        'body' => $data,
        'timeout' => 10,
        'sslverify' => true
    ));
    
    // Check for WP Error
    if (is_wp_error($response)) {
        error_log('Turnstile verification error: ' . $response->get_error_message());
        return 'Connection error: ' . $response->get_error_message();
    }
    
    // Get response body
    $body = wp_remote_retrieve_body($response);
    $result = json_decode($body, true);
    
    // Log for debugging
    if (WP_DEBUG) {
        error_log('Turnstile response: ' . print_r($result, true));
    }
    
    // Check verification result
    if (isset($result[DGA_SUCCESS_STATUS]) && $result[DGA_SUCCESS_STATUS] === true) {
        return true;
    }
    
    // Return error details
    $error_codes = isset($result['error-codes']) ? implode(', ', $result['error-codes']) : 'Unknown error';
    error_log('Turnstile failed with errors: ' . $error_codes);
    
    return $error_codes;
}

// Handle AJAX submission
function handle_contact_form_submission_kzn427() {
    // Set JSON header early
    header('Content-Type: application/json; charset=utf-8');
    
    // Error handling wrapper
    try {
        // Verify nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'contact_form_nonce_kzn427')) {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('การยืนยันความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN),
                'debug' => 'Nonce verification failed'
            ));
            exit;
        }
        
        // Check if Turnstile verification should be skipped (for testing)
        $skip_turnstile = apply_filters('contact_form_skip_turnstile', false);
        
        if (!$skip_turnstile) {
            // Verify Turnstile CAPTCHA
            if (!isset($_POST['cf_turnstile_response']) || empty($_POST['cf_turnstile_response'])) {
                wp_send_json_error(array(
                    DGA_MESSAGE_KEY => __('กรุณายืนยันว่าคุณไม่ใช่โปรแกรมอัตโนมัติ', DGA_TEXT_DOMAIN),
                    'debug' => 'No turnstile token provided'
                ));
                exit;
            }
            
            $turnstile_result = verify_turnstile_token_kzn427($_POST['cf_turnstile_response']);
            if ($turnstile_result !== true) {
                wp_send_json_error(array(
                    DGA_MESSAGE_KEY => __('การยืนยัน CAPTCHA ล้มเหลว กรุณาลองใหม่อีกครั้ง', DGA_TEXT_DOMAIN),
                    'debug' => 'Turnstile verification failed: ' . (is_string($turnstile_result) ? $turnstile_result : 'Unknown error')
                ));
                exit;
            }
        }
        
        // Sanitize and validate inputs
        $contact_name = isset($_POST['contact_name']) ? sanitize_text_field($_POST['contact_name']) : '';
        $contact_email = isset($_POST['contact_email']) ? sanitize_email($_POST['contact_email']) : '';
        $contact_message = isset($_POST['contact_message']) ? sanitize_textarea_field($_POST['contact_message']) : '';
        $contact_phone = isset($_POST['contact_phone']) ? sanitize_text_field($_POST['contact_phone']) : '';
        $department_email = isset($_POST['department_email']) ? sanitize_email($_POST['department_email']) : get_option('admin_email');
        
        // Validation
        if (empty($contact_name) || empty($contact_email) || empty($contact_message)) {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('กรุณากรอกข้อมูลให้ครบถ้วน', DGA_TEXT_DOMAIN),
                'debug' => 'Required fields missing'
            ));
            exit;
        }
        
        if (!is_email($contact_email)) {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('รูปแบบอีเมลไม่ถูกต้อง', DGA_TEXT_DOMAIN),
                'debug' => 'Invalid email format'
            ));
            exit;
        }
        
        // Prepare data for email template
        $data = array(
            'contact_name' => $contact_name,
            'contact_email' => $contact_email,
            'contact_message' => $contact_message,
            'contact_phone' => $contact_phone,
            'ip_address' => $_SERVER['REMOTE_ADDR'],
            'user_agent' => isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '',
            'submission_time' => current_time('mysql')
        );
        
        // Store submission in database (optional)
        global $wpdb;
        $table_name = $wpdb->prefix . 'contact_submissions';
        
        // Create table if not exists (simplified)
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name;
        
        if ($table_exists) {
            $wpdb->insert(
                $table_name,
                array(
                    DGA_NAME_FIELD => $contact_name,
                    'email' => $contact_email,
                    'phone' => $contact_phone,
                    DGA_MESSAGE_KEY => $contact_message,
                    'ip_address' => $_SERVER['REMOTE_ADDR'],
                    'submission_time' => current_time('mysql'),
                    DGA_STATUS_FIELD => 'unread'
                ),
                array('%s', '%s', '%s', '%s', '%s', '%s', '%s')
            );
        }

        // Set email headers
        $headers = array(
            'Content-Type: text/html; charset=UTF-8',
            'From: ' . get_bloginfo('name') . ' <' . get_bloginfo('admin_email') . '>',
            'Reply-To: ' . $contact_name . ' <' . $contact_email . '>'
        );

        // Send email to department/admin
        $admin_subject = '[' . get_bloginfo('name') . '] ' . sprintf(__('ข้อความติดต่อใหม่จาก %s', DGA_TEXT_DOMAIN), $contact_name);
        
        // Use new template system
        $admin_message = get_contact_email_template_kzn427($data, 'admin');
        
        $admin_mail_sent = wp_mail($department_email, $admin_subject, $admin_message, $headers);

        // Send confirmation email to user
        $user_subject = '[' . get_bloginfo('name') . '] ' . __('ยืนยันการส่งข้อความติดต่อ', DGA_TEXT_DOMAIN);
        
        // Use new template system
        $user_message = get_contact_email_template_kzn427($data, 'user');
        
        $user_headers = array(
            'Content-Type: text/html; charset=UTF-8',
            'From: ' . get_bloginfo('name') . ' <' . get_bloginfo('admin_email') . '>'
        );
        
        $user_mail_sent = wp_mail($contact_email, $user_subject, $user_message, $user_headers);

        // Prepare response
        if ($admin_mail_sent) {
            wp_send_json_success(array(
                DGA_MESSAGE_KEY => __('ส่งข้อความเรียบร้อยแล้ว เราจะติดต่อกลับโดยเร็วที่สุด', DGA_TEXT_DOMAIN),
                'user_email_sent' => $user_mail_sent
            ));
        } else {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาดในการส่งอีเมล กรุณาลองใหม่อีกครั้ง', DGA_TEXT_DOMAIN),
                'debug' => 'Mail send failed'
            ));
        }
        
    } catch (Exception $e) {
        // Catch any PHP errors
        error_log('Contact form error: ' . $e->getMessage());
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาดในระบบ กรุณาลองใหม่อีกครั้ง', DGA_TEXT_DOMAIN),
            'debug' => WP_DEBUG ? $e->getMessage() : 'System error'
        ));
    }
    
    exit; // Always exit after AJAX response
}
add_action('wp_ajax_contact_form_submit_kzn427', 'handle_contact_form_submission_kzn427');
add_action('wp_ajax_nopriv_contact_form_submit_kzn427', 'handle_contact_form_submission_kzn427');

// Get email template from file
function get_contact_email_template_kzn427($data, $type = 'admin') {
    // Get template file path
    $template_file = get_stylesheet_directory() . '/templates/contact-mail.php';
    
    // Check if template file exists
    if (!file_exists($template_file)) {
        // Return inline template if file doesn't exist
        return get_contact_email_inline_template_kzn427($data, $type);
    }
    
    // Prepare template variables
    $template_vars = array(
        DGA_TYPE_FIELD => $type,
        'site_name' => get_bloginfo('name'),
        'site_url' => get_site_url(),
        'site_description' => get_bloginfo('description'),
        'admin_email' => get_option('admin_email'),
        'logo_url' => '',
        'current_date' => wp_date('j F Y'),
        'current_time' => wp_date('H:i'),
        'current_year' => wp_date('Y'),
        
        // Form data
        'contact_name' => $data['contact_name'],
        'contact_email' => $data['contact_email'],
        'contact_message' => $data['contact_message'],
        'contact_phone' => isset($data['contact_phone']) ? $data['contact_phone'] : '',
        'ip_address' => isset($data['ip_address']) ? $data['ip_address'] : '',
        'user_agent' => isset($data['user_agent']) ? $data['user_agent'] : '',
        'submission_time' => isset($data['submission_time']) ? $data['submission_time'] : current_time('mysql'),
        
        // Colors matching the form design
        'primary_blue' => '#1e3a8a',
        'primary_orange' => '#ea580c',
        'text_color' => '#374151',
        'bg_color' => '#f9fafb',
        'border_color' => '#e5e7eb'
    );
    
    // Get site logo
    $custom_logo_id = get_theme_mod('custom_logo');
    if ($custom_logo_id) {
        $logo_url = wp_get_attachment_image_url($custom_logo_id, 'full');
        $template_vars['logo_url'] = $logo_url;
    }
    
    // Start output buffering
    ob_start();
    
    // Extract variables for use in template
    extract($template_vars);
    
    // Include template file
    include $template_file;
    
    // Get the content
    $email_content = ob_get_clean();
    
    return $email_content;
}

// Inline template fallback
function get_contact_email_inline_template_kzn427($data, $type = 'admin') {
    $site_name = get_bloginfo('name');
    $logo_url = '';
    
    $custom_logo_id = get_theme_mod('custom_logo');
    if ($custom_logo_id) {
        $logo_url = wp_get_attachment_image_url($custom_logo_id, 'full');
    }
    
    $template = '<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Form Email</title>
</head>
<body style="margin: 0; padding: 0; font-family: \'Sarabun\', Arial, sans-serif; background-color: #f9fafb;">
    <table width="100%" cellpadding="0" cellspacing="0" style="background-color: #f9fafb; padding: 20px 0;">
        <tr>
            <td align="center">
                <table width="600" cellpadding="0" cellspacing="0" style="background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                    <!-- Header -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%); padding: 30px; text-align: center;">';
    
    if ($logo_url) {
        $template .= '<img src="' . esc_url($logo_url) . '" alt="' . esc_attr($site_name) . '" style="max-height: 60px; max-width: 200px; margin-bottom: 10px;"><br>';
    }
    
    $template .= '<h1 style="color: #ffffff; margin: 0; font-size: 24px;">' . esc_html($site_name) . '</h1>
                        </td>
                    </tr>
                    
                    <!-- Content -->
                    <tr>
                        <td style="padding: 40px 30px;">';
    
    if ($type === 'admin') {
        $template .= '
            <h2 style="color: #1e3a8a; margin-bottom: 20px; font-size: 20px;">📧 ข้อความติดต่อใหม่</h2>
            <p style="color: #374151; line-height: 1.6;">มีผู้ติดต่อส่งข้อความมาใหม่ผ่านแบบฟอร์มติดต่อ รายละเอียดดังนี้:</p>
            
            <div style="background-color: #f9fafb; border-left: 4px solid #ea580c; padding: 20px; margin: 20px 0; border-radius: 4px;">
                <table width="100%" cellpadding="5">
                    <tr>
                        <td width="120" style="color: #6b7280; font-weight: bold;">ชื่อผู้ติดต่อ:</td>
                        <td style="color: #374151;">' . esc_html($data['contact_name']) . '</td>
                    </tr>
                    <tr>
                        <td style="color: #6b7280; font-weight: bold;">อีเมล:</td>
                        <td style="color: #374151;"><a href="mailto:' . esc_attr($data['contact_email']) . '" style="color: #ea580c; text-decoration: none;">' . esc_html($data['contact_email']) . '</a></td>
                    </tr>';
        
        if (!empty($data['contact_phone'])) {
            $template .= '
                    <tr>
                        <td style="color: #6b7280; font-weight: bold;">โทรศัพท์:</td>
                        <td style="color: #374151;">' . esc_html($data['contact_phone']) . '</td>
                    </tr>';
        }
        
        $template .= '
                    <tr>
                        <td colspan="2" style="padding-top: 15px;">
                            <div style="color: #6b7280; font-weight: bold; margin-bottom: 10px;">ข้อความ:</div>
                            <div style="color: #374151; background: #ffffff; padding: 15px; border-radius: 4px; border: 1px solid #e5e7eb; white-space: pre-wrap;">' . esc_html($data['contact_message']) . '</div>
                        </td>
                    </tr>
                </table>
            </div>
            
            <div style="margin-top: 20px; padding: 15px; background-color: #fef3c7; border-radius: 4px;">
                <p style="margin: 0; color: #92400e; font-size: 14px;">
                    <strong>📍 ข้อมูลเพิ่มเติม:</strong><br>
                    IP Address: ' . esc_html($data['ip_address']) . '<br>
                    เวลาที่ส่ง: ' . esc_html($data['submission_time']) . '
                </p>
            </div>';
    } else {
        // User template
        $template .= '
            <h2 style="color: #1e3a8a; margin-bottom: 20px; font-size: 20px;">✅ ยืนยันการส่งข้อความ</h2>
            <p style="color: #374151; line-height: 1.6;">เรียน คุณ' . esc_html($data['contact_name']) . '</p>
            <p style="color: #374151; line-height: 1.6;">เราได้รับข้อความของคุณเรียบร้อยแล้ว และจะดำเนินการติดต่อกลับโดยเร็วที่สุด</p>
            
            <div style="background-color: #f9fafb; border-left: 4px solid #ea580c; padding: 20px; margin: 20px 0; border-radius: 4px;">
                <h3 style="color: #1e3a8a; margin-top: 0; font-size: 16px;">สำเนาข้อความของคุณ:</h3>
                <div style="color: #374151; background: #ffffff; padding: 15px; border-radius: 4px; border: 1px solid #e5e7eb; white-space: pre-wrap;">' . esc_html($data['contact_message']) . '</div>
            </div>
            
            <div style="margin-top: 30px; padding: 20px; background-color: #dbeafe; border-radius: 4px; text-align: center;">
                <p style="margin: 0; color: #1e3a8a; line-height: 1.6;">
                    <strong>เวลาทำการ:</strong><br>
                    จันทร์ - ศุกร์ | 08:30 - 16:30 น.<br>
                    เราจะติดต่อกลับภายใน 1-2 วันทำการ
                </p>
            </div>';
    }
    
    $template .= '
                        </td>
                    </tr>
                    
                    <!-- Footer -->
                    <tr>
                        <td style="background-color: #f9fafb; padding: 20px 30px; text-align: center; border-top: 1px solid #e5e7eb;">
                            <p style="margin: 0 0 10px 0; color: #6b7280; font-size: 14px;">
                                ' . esc_html($site_name) . '<br>
                                <a href="' . esc_url(get_site_url()) . '" style="color: #ea580c; text-decoration: none;">' . esc_url(get_site_url()) . '</a>
                            </p>
                            <p style="margin: 0; color: #9ca3af; font-size: 12px;">
                                © ' . wp_date('Y') . ' All rights reserved.
                            </p>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>';
    
    return $template;
}


/**** ฟอร์มเพิ่มข่าวกิจกรรม *****/


// Add shortcode function
function tgall_add_shortcode() {
    // Enqueue required scripts and styles
    wp_enqueue_script('jquery-ui-sortable');
    wp_enqueue_script('jquery-ui-datepicker');
    wp_enqueue_media();
    wp_enqueue_script('tgall-add', get_stylesheet_directory_uri() . '/js/tgall-add.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('tgall-add', get_stylesheet_directory_uri() . '/css/tgall-add.css');
    
    // Localize script
    wp_localize_script('tgall-add', 'tgall_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('tgall_nonce')
    ));
    
    // Modal HTML structure
    $output = '
    <div class="tgall-container">
        <button type=DGA_BUTTON_TYPE class="tgall-add-button" aria-label="เพิ่มกิจกรรม">
            <span class="dashicons dashicons-plus-alt"></span> เพิ่มกิจกรรม
        </button>
        
        <div id="tgall-modal" class="tgall-modal" aria-hidden="true" role="dialog" aria-labelledby="modal-title">
            <div class="tgall-modal-content">
                <header class="tgall-modal-header">
                    <h2 id="modal-title">เพิ่มกิจกรรมใหม่</h2>
                    <button type=DGA_BUTTON_TYPE class="tgall-close" aria-label="ปิด">&times;</button>
                </header>
                
                <div class="tgall-modal-body">
                    <form id="tgall-form" class="tgall-form">
                        <div class="tgall-form-group">
                            <label for="activity-name">ชื่อกิจกรรม *</label>
                            <input type="text" id="activity-name" required aria-required="true">
                        </div>
                        
                        <div class="tgall-form-group">
                            <label for="activity-date">วันที่จัดกิจกรรม *</label>
                            <input type="text" id="activity-date" class="thai-datepicker" required aria-required="true">
                        </div>
                        
                        <div class="tgall-form-group">
                            <label for="activity-description">รายละเอียดกิจกรรม</label>
                            <textarea id="activity-description" rows="4"></textarea>
                        </div>
                        
                        <div class="tgall-form-group">
                            <label>อัลบัมภาพกิจกรรม</label>
                            <div id="gallery-container" class="gallery-container">
                                <div id="gallery-preview" class="gallery-preview"></div>
                                <button type=DGA_BUTTON_TYPE id="add-images" class="add-images">
                                    <span class="dashicons dashicons-upload"></span> เพิ่มรูปภาพ
                                </button>
                            </div>
                        </div>
                        
                        <div class="tgall-form-group">
                            <label for="activity-category">ประเภทกิจกรรม *</label>
                            <div class="category-container">
                                <select id="activity-category" name="activity-category" required aria-required="true">
                                    <option value="">เลือกประเภทกิจกรรม</option>';
    
    // ดึงข้อมูล terms ด้านนอก HTML string
    $taxonomy_terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tgallery',
        DGA_HIDE_EMPTY_FIELD => false,
        DGA_ORDERBY_FIELD_VALUE => 'name',
        DGA_ORDER_FIELD => 'ASC'
    ));
    
    // ตรวจสอบและเพิ่ม terms ลงใน output string
    if (!is_wp_error($taxonomy_terms) && !empty($taxonomy_terms)) {
        foreach ($taxonomy_terms as $term) {
            $output .= sprintf(
                '<option value="%d" data-slug="%s">%s</option>',
                $term->term_id,
                esc_attr($term->slug),
                esc_html($term->name)
            );
        }
    }
    
    $output .= '                  </select>
                                <button type=DGA_BUTTON_TYPE id="add-category" class="add-category" aria-label="เพิ่มหมวดหมู่">
                                    <span class="dashicons dashicons-plus-alt"></span>
                                </button>
                            </div>
                        </div>
                        
                        <div class="tgall-form-actions">
                            <button type=DGA_SUBMIT_TYPE class="tgall-submit">บันทึกกิจกรรม</button>
                            <button type=DGA_BUTTON_TYPE class="tgall-cancel">ยกเลิก</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>';
    
    return $output;
}
add_shortcode('tgall_add', 'tgall_add_shortcode');


// AJAX handler for creating new post
function tgall_add_post() {
    check_ajax_referer('tgall_nonce', 'nonce');
    
    $post_title = sanitize_text_field($_POST[DGA_TITLE_FIELD]);
    $event_date = sanitize_text_field($_POST['date']);
    $description = wp_kses_post($_POST['description']);
    $gallery = array_map('intval', $_POST['gallery']);
    $category = intval($_POST['category']);
    
    // Create post
    $post_data = array(
        'post_title' => $post_title,
        DGA_POST_TYPE_FIELD => 'dgallery',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );
    
    $post_id = wp_insert_post($post_data);
    
    if ($post_id) {
        // Update post slug to post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));
        
        // Update custom fields
        update_post_meta($post_id, 'ng_event_date', $event_date);
        update_post_meta($post_id, 'ng_news', $description);
        update_post_meta($post_id, 'ng_gallery', $gallery);
        
        // Set featured image if gallery has images
        if (!empty($gallery)) {
            // ใช้รูปภาพแรกในอัลบัมเป็น Featured Image
            set_post_thumbnail($post_id, $gallery[0]);
        }
        
        // Set category
        $term = get_term($category, 'tgallery');
        if (!is_wp_error($term)) {
            wp_set_object_terms($post_id, $term->term_id, 'tgallery');
        }
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'สร้างกิจกรรมเรียบร้อยแล้ว',
            DGA_POST_ID_FIELD => $post_id,
            'category' => $term ? $term->name : '',
            'featured_image' => $gallery[0] ?? null
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการสร้างกิจกรรม'));
    }
}
add_action('wp_ajax_tgall_add_post', 'tgall_add_post');

// AJAX handler for adding new category
function tgall_add_category() {
    check_ajax_referer('tgall_nonce', 'nonce');
    
    $category_name = sanitize_text_field($_POST['name']);
    
    // Get latest term ID to generate new slug
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tgallery',
        DGA_HIDE_EMPTY_FIELD => false,
        DGA_ORDERBY_FIELD_VALUE => 'slug',
        DGA_ORDER_FIELD => 'DESC',
        'number' => 1
    ));
    
    $next_id = 1;
    if (!empty($terms) && !is_wp_error($terms)) {
        $latest_slug = $terms[0]->slug;
        $current_id = intval(str_replace('tgall', '', $latest_slug));
        $next_id = $current_id + 1;
    }
    
    $new_slug = 'tgall' . $next_id;
    
    $result = wp_insert_term($category_name, 'tgallery', array('slug' => $new_slug));
    
    if (!is_wp_error($result)) {
        wp_send_json_success(array(
            DGA_TERM_ID_FIELD => $result[DGA_TERM_ID_FIELD],
            DGA_NAME_FIELD => $category_name
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการเพิ่มหมวดหมู่'));
    }
}
add_action('wp_ajax_tgall_add_category', 'tgall_add_category');


// Function to get existing taxonomy terms
function tgall_get_terms() {
    check_ajax_referer('tgall_nonce', 'nonce');
    
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tgallery',
        DGA_HIDE_EMPTY_FIELD => false,
        DGA_ORDERBY_FIELD_VALUE => 'name',
        DGA_ORDER_FIELD => 'ASC'
    ));
    
    if (!is_wp_error($terms)) {
        $formatted_terms = array_map(function($term) {
            return array(
                DGA_TERM_ID_FIELD => $term->term_id,
                DGA_NAME_FIELD => $term->name,
                'slug' => $term->slug,
                'count' => $term->count
            );
        }, $terms);
        
        wp_send_json_success($formatted_terms);
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบข้อมูลหมวดหมู่'));
    }
}
add_action('wp_ajax_get_tgallery_terms', 'tgall_get_terms');



/**** ระบบจำกัดสิทธิ์การเข้าถึงของผู้ใช้งาน ******/

if (!defined('ABSPATH')) exit;

class UserPermissionController {
    private $error_message = '';
    private $child_theme_directory;

    public function __construct() {
        $this->child_theme_directory = get_stylesheet_directory_uri();
        
        // Initialize hooks
        add_action('init', array($this, 'user_permission_init'));
        add_action(DGA_ENQUEUE_SCRIPTS_HOOK, array($this, 'user_permission_enqueue_scripts'));
        add_action('wp_footer', array($this, 'check_page_access'), 10);
        
        // AJAX handlers for logged in users
        add_action('wp_ajax_update_page_permissions', array($this, 'user_permission_update_permissions'));
        add_action('wp_ajax_get_page_permissions', array($this, 'user_permission_get_permissions'));
        add_action('wp_ajax_check_page_permissions', array($this, 'user_permission_check_permissions'));
        
        // AJAX handlers for non-logged in users
        add_action('wp_ajax_nopriv_check_page_permissions', array($this, 'user_permission_check_permissions'));
        add_action('wp_ajax_nopriv_user_permission_login', array($this, 'handle_login'));
    }

    public function user_permission_init() {
        add_shortcode('page_permission', array($this, 'user_permission_shortcode'));
        
        // Add new AJAX handler for getting all roles
        add_action('wp_ajax_get_all_roles', array($this, 'get_all_roles'));
    }


    public function user_permission_enqueue_scripts() {
        wp_enqueue_style(
            'user-permission-styles', 
            $this->child_theme_directory . '/css/user-permission.css',
            array(),
            DGA_VERSION_NUMBER
        );

        wp_enqueue_script(DGA_JQUERY_HANDLE);
        wp_enqueue_script(
            'user-permission-script', 
            $this->child_theme_directory . '/js/user-permission.js',
            array(DGA_JQUERY_HANDLE),
            DGA_VERSION_NUMBER,
            true
        );

        wp_localize_script('user-permission-script', 'userPermissionAjax', array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('user_permission_nonce'),
            'homeUrl' => home_url() // เพิ่ม home URL
        ));
    }


    // method to get all roles
    public function get_all_roles() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(DGA_UNAUTHORIZED_ACCESS_MESSAGE);
        }
    
        global $wp_roles;
        $all_roles = array();
        
        // เพิ่มตัวเลือกสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (guest)
        $all_roles['guest'] = array(
            DGA_NAME_FIELD => 'บุคคลทั่วไป (ไม่ต้องล็อกอิน)',
            'capabilities' => array()
        );
        
        foreach($wp_roles->roles as $role_key => $role) {
            $all_roles[$role_key] = array(
                DGA_NAME_FIELD => translate_user_role($role['name']),
                'capabilities' => $role['capabilities']
            );
        }
    
        // Allow third-party plugins to modify the roles list
        $all_roles = apply_filters('user_permission_get_roles', $all_roles);
        
        wp_send_json_success(array('roles' => $all_roles));
    }

    public function check_page_access() {
        if (!is_admin() && !is_front_page()) {  // Don't check on admin or front page
            $page_id = get_the_ID();
            $allowed_roles = get_post_meta($page_id, '_user_permission_roles', true);
            
            if (!empty($allowed_roles)) {
                $has_access = false;
                
                // ตรวจสอบว่ามีสิทธิ์สำหรับ guest (ผู้ไม่ได้ล็อกอิน) หรือไม่
                if (in_array('guest', (array)$allowed_roles)) {
                    $has_access = true;
                }
                // ถ้าผู้ใช้ล็อกอินแล้ว ให้ตรวจสอบบทบาท
                else if (is_user_logged_in()) {
                    $current_user = wp_get_current_user();
                    foreach ((array)$allowed_roles as $role) {
                        if (in_array($role, (array)$current_user->roles)) {
                            $has_access = true;
                            break;
                        }
                    }
                }
                
                if (!$has_access) {
                    // Add blur overlay and login modal
                    echo '<div class="user-permission-overlay">
                        <div class="user-permission-modal">
                            <div class="modal-header">
                                <div class="lock-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                                        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                                    </svg>
                                </div>
                            </div>
                            <div class="user-permission-message">
                                <h2>การเข้าถึงถูกจำกัด</h2>
                                <p>หน้านี้ต้องการสิทธิ์พิเศษในการเข้าถึง</p>
                                <div class="button-group">
                                    <button id="user-permission-login-btn" class="user-permission-login-btn">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
                                            <polyline points="10 17 15 12 10 7"></polyline>
                                            <line x1="15" y1="12" x2="3" y2="12"></line>
                                        </svg>
                                        ลงชื่อเข้าใช้
                                    </button>
                                    <button id="user-permission-home-btn" class="user-permission-home-btn">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                                        </svg>
                                        กลับสู่หน้าหลัก
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>';
                }
            }
        }
    }

    public function user_permission_shortcode($atts) {
        if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            return '';
        }

        $page_id = get_the_ID();
        return sprintf(
            '<button type=DGA_BUTTON_TYPE class="user-permission-icon" data-page-id="%d" title="ตั้งค่าการเข้าถึง">⚙️</button>',
            esc_attr($page_id)
        );
    }

    public function user_permission_get_permissions() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        $page_id = intval($_POST['page_id']);
        $roles = get_post_meta($page_id, '_user_permission_roles', true);

        wp_send_json_success(array(
            'roles' => $roles ? $roles : array()
        ));
    }

    public function user_permission_update_permissions() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(DGA_UNAUTHORIZED_ACCESS_MESSAGE);
        }

        $page_id = intval($_POST['page_id']);
        $roles = isset($_POST['roles']) ? array_map('sanitize_text_field', (array)$_POST['roles']) : array();
        
        update_post_meta($page_id, '_user_permission_roles', $roles);
        wp_send_json_success('Permissions updated successfully');
    }

    public function user_permission_check_permissions() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        $page_id = isset($_POST['page_id']) ? intval($_POST['page_id']) : 0;
        if (!$page_id) {
            wp_send_json_error([DGA_MESSAGE_KEY => 'Invalid page ID']);
        }
    
        $allowed_roles = get_post_meta($page_id, '_user_permission_roles', true);
        $has_access = false;
        
        // ถ้าไม่มีการกำหนดบทบาท ให้อนุญาตทุกคน
        if (empty($allowed_roles)) {
            $has_access = true;
        }
        // ตรวจสอบว่ามีสิทธิ์สำหรับ guest (ผู้ไม่ได้ล็อกอิน) หรือไม่
        else if (in_array('guest', (array)$allowed_roles)) {
            $has_access = true;
        }
        // ถ้าผู้ใช้ล็อกอินแล้ว ให้ตรวจสอบบทบาท
        else if (is_user_logged_in()) {
            $current_user = wp_get_current_user();
            foreach ((array)$allowed_roles as $role) {
                if (in_array($role, (array)$current_user->roles)) {
                    $has_access = true;
                    break;
                }
            }
        }
    
        if ($has_access) {
            wp_send_json_success(['allowed' => true]);
        } else {
            wp_send_json_error(['allowed' => false, DGA_MESSAGE_KEY => 'Access denied']);
        }
    }

    public function handle_login() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        $username = sanitize_user($_POST['username']);
        $password = $_POST['password'];
        
        $user = wp_signon(array(
            'user_login' => $username,
            'user_password' => $password,
            'remember' => true
        ));
        
        if (is_wp_error($user)) {
            wp_send_json_error($user->get_error_message());
        }
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เข้าสู่ระบบสำเร็จ',
            'redirect_url' => wp_get_referer() ?: home_url()
        ));
    }
}

// Initialize the controller
function initialize_user_permission_controller() {
    global $user_permission_controller;
    $user_permission_controller = new UserPermissionController();
}
add_action('after_setup_theme', 'initialize_user_permission_controller');


/***** แสดง Post LOOP GALLERY *****/

function event_post_gallery_shortcode($atts) {
    // Enqueue required scripts and styles
    wp_enqueue_style('event-post-style', get_stylesheet_directory_uri() . '/css/event-post.css');
    wp_enqueue_script('event-post-script', get_stylesheet_directory_uri() . '/js/event-post.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    
    // Add ajax url
    wp_localize_script('event-post-script', 'event_post_ajax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL)
    ));

    // Start output buffering
    ob_start();
    ?>
    <div class="event-post-container">
        <div class="event-post-grid" id="event-post-grid">
            <!-- Skeleton loader -->
            <?php for($i = 0; $i < 8; $i++): ?>
                <div class="event-post-skeleton">
                    <div class="skeleton-img"></div>
                    <div class="skeleton-content">
                        <div class="skeleton-title"></div>
                        <div class="skeleton-meta"></div>
                        <div class="skeleton-category"></div>
                    </div>
                </div>
            <?php endfor; ?>
        </div>
        
        <!-- Modal Template -->
        <div id="event-post-modal" class="event-post-modal">
            <div class="modal-content">
                <span class="modal-close">&times;</span>
                <div class="modal-gallery-grid"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('event_gallery', 'event_post_gallery_shortcode');

// AJAX handler for loading posts
function event_post_load_gallery() {
    $args = array(
        DGA_POST_TYPE_FIELD => 'dgallery',
        DGA_POSTS_PER_PAGE => 10,
        DGA_PAGED_PARAMETER => isset($_POST['page']) ? intval($_POST['page']) : 1,
    );

    $posts = new WP_Query($args);
    $response = array();

    if($posts->have_posts()) {
        while($posts->have_posts()) {
            $posts->the_post();
            
            // Get gallery images from ACF
            $gallery_field = get_field('ng_gallery');
            $gallery_urls = array();
            
            // Process gallery images
            if(!empty($gallery_field) && is_array($gallery_field)) {
                foreach($gallery_field as $image_id) {
                    // Check if we got image ID directly
                    $image_data = wp_get_attachment_metadata($image_id);
                    
                    if($image_data) {
                        // Get image URLs for different sizes
                        $full_url = wp_get_attachment_image_url($image_id, 'full');
                        $thumb_url = wp_get_attachment_image_url($image_id, 'large');
                        
                        if($full_url && $thumb_url) {
                            $gallery_urls[] = array(
                                'full' => $full_url,
                                'thumb' => $thumb_url,
                                'width' => isset($image_data['width']) ? $image_data['width'] : '',
                                'height' => isset($image_data['height']) ? $image_data['height'] : '',
                                'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true)
                            );
                        }
                    } else if(is_array($image_id) && isset($image_id['ID'])) {
                        // Handle case where ACF returns array with image data
                        $image_post_id = $image_id['ID'];
                        $full_url = wp_get_attachment_image_url($image_post_id, 'full');
                        $thumb_url = wp_get_attachment_image_url($image_post_id, 'large');
                        
                        if($full_url && $thumb_url) {
                            $gallery_urls[] = array(
                                'full' => $full_url,
                                'thumb' => $thumb_url,
                                'width' => isset($image_id['width']) ? $image_id['width'] : '',
                                'height' => isset($image_id['height']) ? $image_id['height'] : '',
                                'alt' => isset($image_id['alt']) ? $image_id['alt'] : get_post_meta($image_post_id, '_wp_attachment_image_alt', true)
                            );
                        }
                    }
                }
            }
            
            // Get featured image with fallback
            $featured_id = get_post_thumbnail_id(get_the_ID());
            $featured_image = array(
                'full' => $featured_id ? wp_get_attachment_image_url($featured_id, 'full') : '',
                'thumb' => $featured_id ? wp_get_attachment_image_url($featured_id, 'large') : ''
            );

            // Fallback to first gallery image if no featured image
            if(!$featured_image['full'] && !empty($gallery_urls)) {
                $featured_image = array(
                    'full' => $gallery_urls[0]['full'],
                    'thumb' => $gallery_urls[0]['thumb']
                );
            }
            
            // Get categories
            $terms = get_the_terms(get_the_ID(), 'tgallery');
            $categories = array();
            if(!is_wp_error($terms) && !empty($terms)) {
                foreach($terms as $term) {
                    $categories[] = array(
                        DGA_NAME_FIELD => $term->name,
                        'slug' => $term->slug
                    );
                }
            }

            // Prepare response data
            $response[] = array(
                'id' => get_the_ID(),
                DGA_TITLE_FIELD => get_the_title(),
                'date' => get_the_date(DGA_DATE_FORMAT_SHORT),
                'featured_image' => $featured_image,
                'gallery_images' => $gallery_urls,
                'gallery_count' => count($gallery_urls),
                'categories' => $categories,
                'permalink' => get_permalink() // เพิ่มบรรทัดนี้
            );
        }
    }
    
    wp_reset_postdata();
    wp_send_json(array(
        DGA_SUCCESS_STATUS => true,
        'data' => $response,
        'total_posts' => $posts->found_posts,
        'max_pages' => $posts->max_num_pages
    ));
}
add_action('wp_ajax_event_post_load_gallery', 'event_post_load_gallery');
add_action('wp_ajax_nopriv_event_post_load_gallery', 'event_post_load_gallery');

// Function to initialize gallery defaults
function event_post_init() {
    // Set default image placeholder
    $placeholder_url = get_stylesheet_directory_uri() . '/images/placeholder.jpg';
    
    // Pass variables to JavaScript
    wp_localize_script('event-post-script', 'event_post_ajax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        'placeholder' => $placeholder_url,
        DGA_NONCE_KEY => wp_create_nonce('event_post_gallery')
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'event_post_init');

// Debug function - can be removed in production
function event_post_debug_acf_field() {
    if(current_user_can(DGA_ADMIN_ROLE) && isset($_GET['debug_gallery'])) {
        $post_id = get_the_ID();
        $gallery_field = get_field('ng_gallery', $post_id);
        echo '<pre>';
        print_r($gallery_field);
        echo '</pre>';
    }
}
add_action('wp_footer', 'event_post_debug_acf_field');


function event_post_add_placeholder() {
    // Check if placeholder exists
    $upload_dir = wp_upload_dir();
    $placeholder_path = $upload_dir['basedir'] . '/placeholder.jpg';
    
    if(!file_exists($placeholder_path)) {
        // Create a simple placeholder image or copy from your theme
        // This is just an example - you should provide your own placeholder image
        copy(get_stylesheet_directory() . '/images/placeholder.jpg', $placeholder_path);
    }
}
add_action('after_setup_theme', 'event_post_add_placeholder');



/***** END POINT FOR EGP *******/

add_action('rest_api_init', function () {
    // Register route for all EGP posts
    register_rest_route('egp/v1', '/posts', array(
        'methods' => 'GET',
        'callback' => 'get_egp_posts',
        'permission_callback' => '__return_true'
    ));

    // Register route for single EGP post
    register_rest_route('egp/v1', '/posts/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_egp_post',
        'permission_callback' => '__return_true',
        'args' => array(
            'id' => array(
                'validate_callback' => function($param) {
                    return is_numeric($param);
                }
            )
        )
    ));
});

// Callback function for all EGP posts
function get_egp_posts() {
    $args = array(
        DGA_POST_TYPE_FIELD => 'egp',
        DGA_POSTS_PER_PAGE => -1,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );

    $posts = get_posts($args);
    $data = array();

    foreach ($posts as $post) {
        // Get all ACF fields
        $post_data = format_egp_data($post);
        $data[] = $post_data;
    }

    return new WP_REST_Response($data, 200);
}

// Callback function for single EGP post
function get_egp_post($request) {
    $post_id = $request['id'];
    $post = get_post($post_id);

    if (empty($post) || $post->post_type !== 'egp') {
        return new WP_Error('no_post', DGA_POST_NOT_FOUND_MESSAGE, array(DGA_STATUS_FIELD => 404));
    }

    $post_data = format_egp_data($post);
    return new WP_REST_Response($post_data, 200);
}

// Helper function to format EGP post data
function format_egp_data($post) {
    $acf_fields = get_fields($post->ID);
    
    return array(
        'id' => $post->ID,
        DGA_TITLE_FIELD => $post->post_title,
        'date' => $post->post_date,
        'modified' => $post->post_modified,
        'egp_no' => $acf_fields['egp_no'] ?? '', // รหัสโครงการ
        'egp_name' => $acf_fields['egp_name'] ?? '', // ชื่อโครงการ
        'egp_type' => $acf_fields['egp_type'] ?? '', // ประเภทประกาศ
        'egp_way' => $acf_fields['egp_way'] ?? '', // วิธีจัดหา
        'egp_date_start' => $acf_fields['egp_date_start'] ?? '', // วันที่ประกาศ
        'egp_sub_dep' => $acf_fields['egp_sub_dep'] ?? '', // สำนัก/กอง
        'egp_dep' => $acf_fields['egp_dep'] ?? '', // หน่วยงาน
        'egp_files' => $acf_fields['egp_files'] ?? array(), // เอกสาร/ไฟล์แนบ
        'meta' => array(
            DGA_POST_TYPE_FIELD => $post->post_type,
            DGA_POST_STATUS_FIELD => $post->post_status
        )
    );
}

// Add shortcode to display API documentation
function endpoint_egp() {
    $site_url = get_site_url();
    $output = '
    <div class="egp-endpoints">
        <h2>EGP API Endpoints</h2>
        
        <div class="endpoint">
            <h3>Get All EGP Posts</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/egp/v1/posts</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns all published EGP posts with their custom fields</p>
            <p><strong>Available Fields:</strong></p>
            <ul>
                <li><code>egp_no</code> - รหัสโครงการ</li>
                <li><code>egp_name</code> - ชื่อโครงการ</li>
                <li><code>egp_type</code> - ประเภทประกาศ</li>
                <li><code>egp_way</code> - วิธีจัดหา</li>
                <li><code>egp_date_start</code> - วันที่ประกาศ</li>
                <li><code>egp_sub_dep</code> - สำนัก/กอง</li>
                <li><code>egp_dep</code> - หน่วยงาน</li>
                <li><code>egp_files</code> - เอกสาร/ไฟล์แนบ</li>
            </ul>
        </div>

        <div class="endpoint">
            <h3>Get Single EGP Post</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/egp/v1/posts/{id}</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns a single EGP post with all custom fields</p>
            <p><strong>Parameters:</strong></p>
            <ul>
                <li><code>id</code> - The post ID (required)</li>
            </ul>
        </div>

        <div class="endpoint-example">
            <h3>Example Response</h3>
            <pre>
{
    "id": 123,
    "title": "Example Project",
    "date": "2024-02-15",
    "modified": "2024-02-15",
    "egp_no": "EGP2024001",
    "egp_name": "โครงการตัวอย่าง",
    "egp_type": "ประกาศเชิญชวน",
    "egp_way": "e-bidding",
    "egp_date_start": "2024-02-15",
    "egp_sub_dep": "สำนักงานเลขานุการกรม",
    "egp_dep": "กรมบัญชีกลาง",
    "egp_files": [
        {
            "url": "path/to/file.pdf",
            "title": "เอกสารประกวดราคา"
        }
    ],
    "meta": {
        "post_type": "egp",
        "post_status": "publish"
    }
}
            </pre>
        </div>

        <div class="endpoint-example">
            <h3>Example Usage</h3>
            <pre>
// JavaScript fetch example
fetch("' . esc_url($site_url) . '/wp-json/egp/v1/posts")
    .then(response => response.json())
    .then(data => console.log(data));
            </pre>
        </div>
    </div>
    ';

    return $output;
}
add_shortcode('egp_endpoint', 'endpoint_egp');

// Add CSS for endpoint display
function egp_endpoint_styles() {
    if (has_shortcode(get_the_content(), 'egp_endpoint')) {
        ?>
        <style>
            .egp-endpoints {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            }

            .endpoint {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 4px;
                padding: 20px;
                margin-bottom: 20px;
            }

            .endpoint h3 {
                margin-top: 0;
                color: #2c3e50;
            }

            .endpoint code {
                background: #e9ecef;
                padding: 2px 6px;
                border-radius: 3px;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                font-size: 0.9em;
            }

            .endpoint ul {
                margin: 10px 0;
                padding-left: 20px;
            }

            .endpoint-example {
                background: #2c3e50;
                color: #fff;
                padding: 20px;
                border-radius: 4px;
                margin-bottom: 20px;
            }

            .endpoint-example pre {
                background: #34495e;
                padding: 15px;
                border-radius: 3px;
                overflow-x: auto;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                margin: 0;
                white-space: pre-wrap;
            }

            @media (max-width: 768px) {
                .egp-endpoints {
                    padding: 10px;
                }
                
                .endpoint {
                    padding: 15px;
                }
            }
        </style>
        <?php
    }
}
add_action('wp_head', 'egp_endpoint_styles');




/**** ENDPOINT FOR คู่มือประชาชน  ******/

add_action('rest_api_init', function () {
    // Register route for all MPeople posts
    register_rest_route('mpeople/v1', '/posts', array(
        'methods' => 'GET',
        'callback' => 'get_mpeople_posts',
        'permission_callback' => '__return_true'
    ));

    // Register route for single MPeople post
    register_rest_route('mpeople/v1', '/posts/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_mpeople_post',
        'permission_callback' => '__return_true',
        'args' => array(
            'id' => array(
                'validate_callback' => function($param) {
                    return is_numeric($param);
                }
            )
        )
    ));
});

// Callback function for all MPeople posts
function get_mpeople_posts() {
    $args = array(
        DGA_POST_TYPE_FIELD => 'mpeople',
        DGA_POSTS_PER_PAGE => -1,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );

    $posts = get_posts($args);
    $data = array();

    foreach ($posts as $post) {
        $post_data = format_mpeople_data($post);
        $data[] = $post_data;
    }

    return new WP_REST_Response($data, 200);
}

// Callback function for single MPeople post
function get_mpeople_post($request) {
    $post_id = $request['id'];
    $post = get_post($post_id);

    if (empty($post) || $post->post_type !== 'mpeople') {
        return new WP_Error('no_post', DGA_POST_NOT_FOUND_MESSAGE, array(DGA_STATUS_FIELD => 404));
    }

    $post_data = format_mpeople_data($post);
    return new WP_REST_Response($post_data, 200);
}

// Helper function to format MPeople post data
function format_mpeople_data($post) {
    $acf_fields = get_fields($post->ID);
    
    // Format file standard repeater field
    $file_standards = array();
    if (!empty($acf_fields['at_file_standard'])) {
        foreach ($acf_fields['at_file_standard'] as $file) {
            $file_standards[] = array(
                'at_rp_file_name' => $file['at_rp_file_name'] ?? '',
                'at_rp_file_create' => $file['at_rp_file_create'] ?? '',
                'at_rp_file_link' => $file['at_rp_file_link'] ?? ''
            );
        }
    }
    
    return array(
        'id' => $post->ID,
        DGA_TITLE_FIELD => $post->post_title,
        'date' => $post->post_date,
        'modified' => $post->post_modified,
        'at_content' => $acf_fields['at_content'] ?? '', // เนื้อหาบทความ
        'at_file_standard' => $file_standards, // เอกสารมาตรฐาน (Repeater field)
        'meta' => array(
            DGA_POST_TYPE_FIELD => $post->post_type,
            DGA_POST_STATUS_FIELD => $post->post_status
        )
    );
}

// Add shortcode to display API documentation
function endpoint_mpeople() {
    $site_url = get_site_url();
    $output = '
    <div class="mpeople-endpoints">
        <h2>MPeople API Endpoints</h2>
        
        <div class="endpoint">
            <h3>Get All MPeople Posts</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/mpeople/v1/posts</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns all published MPeople posts with their custom fields</p>
            <p><strong>Available Fields:</strong></p>
            <ul>
                <li><code>at_content</code> - เนื้อหาบทความ</li>
                <li><code>at_file_standard</code> - เอกสารมาตรฐาน (Repeater field)
                    <ul>
                        <li><code>at_rp_file_name</code> - ชื่อไฟล์</li>
                        <li><code>at_rp_file_create</code> - วันที่นำเข้า</li>
                        <li><code>at_rp_file_link</code> - ลิงค์ไฟล์</li>
                    </ul>
                </li>
            </ul>
        </div>

        <div class="endpoint">
            <h3>Get Single MPeople Post</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/mpeople/v1/posts/{id}</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns a single MPeople post with all custom fields</p>
            <p><strong>Parameters:</strong></p>
            <ul>
                <li><code>id</code> - The post ID (required)</li>
            </ul>
        </div>

        <div class="endpoint-example">
            <h3>Example Response</h3>
            <pre>
{
    "id": 123,
    "title": "Example Post",
    "date": "2024-02-15",
    "modified": "2024-02-15",
    "at_content": "เนื้อหาบทความ...",
    "at_file_standard": [
        {
            "at_rp_file_name": "ชื่อไฟล์ 1",
            "at_rp_file_create": "2024-02-15",
            "at_rp_file_link": "https://example.com/file1.pdf"
        },
        {
            "at_rp_file_name": "ชื่อไฟล์ 2",
            "at_rp_file_create": "2024-02-15",
            "at_rp_file_link": "https://example.com/file2.pdf"
        }
    ],
    "meta": {
        "post_type": "mpeople",
        "post_status": "publish"
    }
}
            </pre>
        </div>
    </div>
    ';

    return $output;
}
add_shortcode('endpoint_mpeople', 'endpoint_mpeople');

// Add CSS for endpoint display
function mpeople_endpoint_styles() {
    if (has_shortcode(get_the_content(), 'endpoint_mpeople')) {
        ?>
        <style>
            .mpeople-endpoints {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            }

            .endpoint {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 4px;
                padding: 20px;
                margin-bottom: 20px;
            }

            .endpoint h3 {
                margin-top: 0;
                color: #2c3e50;
            }

            .endpoint code {
                background: #e9ecef;
                padding: 2px 6px;
                border-radius: 3px;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                font-size: 0.9em;
            }

            .endpoint ul {
                margin: 10px 0;
                padding-left: 20px;
            }

            .endpoint ul ul {
                margin: 5px 0;
            }

            .endpoint-example {
                background: #2c3e50;
                color: #fff;
                padding: 20px;
                border-radius: 4px;
                margin-bottom: 20px;
            }

            .endpoint-example pre {
                background: #34495e;
                padding: 15px;
                border-radius: 3px;
                overflow-x: auto;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                margin: 0;
                white-space: pre-wrap;
            }

            @media (max-width: 768px) {
                .mpeople-endpoints {
                    padding: 10px;
                }
                
                .endpoint {
                    padding: 15px;
                }
            }
        </style>
        <?php
    }
}
add_action('wp_head', 'mpeople_endpoint_styles');


/**** ENDPOINT FOR ข่าวหน่วยงาน  ******/

add_action('rest_api_init', function () {
    // Register route for all News posts
    register_rest_route('news/v1', '/posts', array(
        'methods' => 'GET',
        'callback' => 'get_news_posts',
        'permission_callback' => '__return_true'
    ));

    // Register route for single News post
    register_rest_route('news/v1', '/posts/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_news_post',
        'permission_callback' => '__return_true',
        'args' => array(
            'id' => array(
                'validate_callback' => function($param) {
                    return is_numeric($param);
                }
            )
        )
    ));
});

// Callback function for all News posts
function get_news_posts() {
    $args = array(
        DGA_POST_TYPE_FIELD => 'news',
        DGA_POSTS_PER_PAGE => -1,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );

    $posts = get_posts($args);
    $data = array();

    foreach ($posts as $post) {
        $post_data = format_news_data($post);
        $data[] = $post_data;
    }

    return new WP_REST_Response($data, 200);
}

// Callback function for single News post
function get_news_post($request) {
    $post_id = $request['id'];
    $post = get_post($post_id);

    if (empty($post) || $post->post_type !== 'news') {
        return new WP_Error('no_post', DGA_POST_NOT_FOUND_MESSAGE, array(DGA_STATUS_FIELD => 404));
    }

    $post_data = format_news_data($post);
    return new WP_REST_Response($post_data, 200);
}

// Helper function to format News post data
function format_news_data($post) {
    $acf_fields = get_fields($post->ID);
    
    return array(
        'id' => $post->ID,
        DGA_TITLE_FIELD => $post->post_title,
        'date' => $post->post_date,
        'modified' => $post->post_modified,
        'content' => $acf_fields['at_content'] ?? '', // เนื้อหาบทความ
        'file_standard' => $acf_fields['at_file_standard'] ?? array(), // เอกสารมาตรฐาน
        'meta' => array(
            DGA_POST_TYPE_FIELD => $post->post_type,
            DGA_POST_STATUS_FIELD => $post->post_status
        )
    );
}

// Add shortcode to display API documentation
function endpoint_news() {
    $site_url = get_site_url();
    $output = '
    <div class="news-endpoints">
        <h2>News API Endpoints</h2>
        
        <div class="endpoint">
            <h3>Get All News Posts</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/news/v1/posts</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns all published News posts with their custom fields</p>
            <p><strong>Available Fields:</strong></p>
            <ul>
                <li><code>content</code> - เนื้อหาบทความ</li>
                <li><code>file_standard</code> - เอกสารมาตรฐาน</li>
            </ul>
        </div>

        <div class="endpoint">
            <h3>Get Single News Post</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/news/v1/posts/{id}</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns a single News post with all custom fields</p>
            <p><strong>Parameters:</strong></p>
            <ul>
                <li><code>id</code> - The post ID (required)</li>
            </ul>
        </div>

        <div class="endpoint-example">
            <h3>Example Response</h3>
            <pre>
{
    "id": 123,
    "title": "Example News Article",
    "date": "2024-02-15",
    "modified": "2024-02-15",
    "content": "เนื้อหาบทความตัวอย่าง",
    "file_standard": [
        {
            "url": "path/to/file.pdf",
            "title": "เอกสารมาตรฐาน"
        }
    ],
    "meta": {
        "post_type": "news",
        "post_status": "publish"
    }
}
            </pre>
        </div>

        <div class="endpoint-example">
            <h3>Example Usage</h3>
            <pre>
// JavaScript fetch example
fetch("' . esc_url($site_url) . '/wp-json/news/v1/posts")
    .then(response => response.json())
    .then(data => console.log(data));
            </pre>
        </div>
    </div>
    ';

    return $output;
}
add_shortcode('news_endpoint', 'endpoint_news');

// Add CSS for endpoint display
function news_endpoint_styles() {
    if (has_shortcode(get_the_content(), 'news_endpoint')) {
        ?>
        <style>
            .news-endpoints {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            }

            .endpoint {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 4px;
                padding: 20px;
                margin-bottom: 20px;
            }

            .endpoint h3 {
                margin-top: 0;
                color: #2c3e50;
            }

            .endpoint code {
                background: #e9ecef;
                padding: 2px 6px;
                border-radius: 3px;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                font-size: 0.9em;
            }

            .endpoint ul {
                margin: 10px 0;
                padding-left: 20px;
            }

            .endpoint-example {
                background: #2c3e50;
                color: #fff;
                padding: 20px;
                border-radius: 4px;
                margin-bottom: 20px;
            }

            .endpoint-example pre {
                background: #34495e;
                padding: 15px;
                border-radius: 3px;
                overflow-x: auto;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                margin: 0;
                white-space: pre-wrap;
            }

            @media (max-width: 768px) {
                .news-endpoints {
                    padding: 10px;
                }
                
                .endpoint {
                    padding: 15px;
                }
            }
        </style>
        <?php
    }
}
add_action('wp_head', 'news_endpoint_styles');

/**** กำหนดให้ PostType "PHA" ใช้ SLUG URL เป็น POST ID */

// กำหนดให้ใช้ Post ID เป็น Slug สำหรับ Post Type 'pha'
function set_pha_post_slug($data, $postarr) {
    // ตรวจสอบว่าเป็น Post Type 'pha' หรือไม่
    if($data[DGA_POST_TYPE_FIELD] === 'pha') {
        // ถ้าเป็นการสร้าง Post ใหม่
        if(empty($postarr['ID'])) {
            // ให้ใช้ค่าว่างไว้ก่อน เพราะยังไม่มี ID
            $data['post_name'] = '';
        } else {
            // ถ้าเป็นการอัพเดท ให้ใช้ Post ID เป็น slug
            $data['post_name'] = $postarr['ID'];
        }
    }
    return $data;
}
add_filter('wp_insert_post_data', 'set_pha_post_slug', 10, 2);

// อัพเดท slug หลังจากสร้าง Post ใหม่
function update_pha_post_slug($post_id, $post, $update) {
    // ตรวจสอบว่าเป็น Post Type 'pha' และเป็นการสร้างใหม่
    if($post->post_type === 'pha' && !$update) {
        // อัพเดท slug เป็น Post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));
    }
}
add_action('wp_insert_post', 'update_pha_post_slug', 10, 3);

// ป้องกันการแก้ไข slug ผ่าน Quick Edit หรือ Bulk Edit
function prevent_pha_slug_edit($actions, $post) {
    if($post->post_type === 'pha') {
        // ลบปุ่ม Quick Edit ออก
        unset($actions['inline hide-if-no-js']);
    }
    return $actions;
}
add_filter('post_row_actions', 'prevent_pha_slug_edit', 10, 2);

// ฟังก์ชันสำหรับอัพเดต slug ของ Post เก่าทั้งหมด
function update_existing_pha_posts_slug() {
    // Query เพื่อดึง Post ทั้งหมดใน Post Type 'pha'
    $args = array(
        DGA_POST_TYPE_FIELD => 'pha',
        DGA_POSTS_PER_PAGE => -1,
        DGA_POST_STATUS_FIELD => 'any'
    );
    
    $posts = get_posts($args);
    
    // อัพเดตแต่ละ Post
    foreach($posts as $post) {
        // อัพเดต slug เป็น Post ID
        wp_update_post(array(
            'ID' => $post->ID,
            'post_name' => $post->ID
        ));
    }
}

// เพิ่มเมนูใน WordPress Admin
function add_update_pha_slugs_menu() {
    add_submenu_page(
        'edit.php?post_type=pha',  // Parent slug
        'Update All Slugs',        // Page title
        'Update All Slugs',        // Menu title
        DGA_MANAGE_OPTIONS_CAP,          // Capability required
        'update-pha-slugs',        // Menu slug
        'update_pha_slugs_page'    // Function to display the page
    );
}
add_action('admin_menu', 'add_update_pha_slugs_menu');

// สร้างหน้า Admin สำหรับรัน Update
function update_pha_slugs_page() {
    // ตรวจสอบว่ามีการกดปุ่ม Update หรือไม่
    if(isset($_POST['update_slugs']) && check_admin_referer('update_pha_slugs_action')) {
        update_existing_pha_posts_slug();
        echo '<div class="notice notice-success"><p>All PHA post slugs have been updated successfully!</p></div>';
    }
    ?>
    <div class="wrap">
        <h1>Update All PHA Post Slugs</h1>
        <p>Click the button below to update all existing PHA posts to use their Post ID as the slug.</p>
        <form method="post">
            <?php wp_nonce_field('update_pha_slugs_action'); ?>
            <input type=DGA_SUBMIT_TYPE name="update_slugs" class="button button-primary" value="Update All Slugs">
        </form>
    </div>
    <?php
}


/**** ฟังก์ชั่นแสดง ตารางไฟล์ที่เกี่ยวข้อง *******/

function at_document_table_shortcode() {
    // Check if ACF is active
    if (!function_exists('get_field')) return;
    
    // Get repeater field
    $files = get_field('at_file_standard');
    if (!$files) return;
    
    // Enqueue required styles and scripts
    wp_enqueue_style('at-document-table', get_stylesheet_directory_uri() . '/css/document-table.css');
    wp_enqueue_script('at-document-table', get_stylesheet_directory_uri() . '/js/document-table.js', array(DGA_JQUERY_HANDLE), null, true);
    
    ob_start();
    ?>
    <div class="at-document-table-wrapper" role="region" aria-label="เอกสารที่เกี่ยวข้อง">
        <table class="at-document-table">
            <thead>
                <tr>
                    <th scope="col">ชื่อไฟล์</th>
                    <th scope="col">วันที่นำเข้า</th>
                    <th scope="col">ดาวน์โหลด</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($files as $file): ?>
                    <tr>
                        <td class="at-doc-name"><?php echo esc_html($file['at_rp_file_name']); ?></td>
                        <td class="at-doc-date"><?php 
                            $date = DateTime::createFromFormat('Y-m-d', $file['at_rp_file_create']);
                            if ($date) {
                                $thai_month = array(
                                    '01' => 'ม.ค.', '02' => 'ก.พ.', '03' => 'มี.ค.', '04' => 'เม.ย.',
                                    '05' => 'พ.ค.', '06' => 'มิ.ย.', '07' => 'ก.ค.', '08' => 'ส.ค.',
                                    '09' => 'ก.ย.', '10' => 'ต.ค.', '11' => 'พ.ย.', '12' => 'ธ.ค.'
                                );
                                $thai_date = $date->format('d') . '/' . 
                                           $thai_month[$date->format('m')] . '/' .
                                           ($date->format('Y') + 543);
                                echo esc_html($thai_date);
                            } else {
                                echo esc_html($file['at_rp_file_create']);
                            }
                        ?></td>
                        <td class="at-doc-link">
                            <?php
                            $file_url = $file['at_rp_file_link'];
                            $file_ext = pathinfo($file_url, PATHINFO_EXTENSION);
                            $icon_class = '';
                            
                            switch(strtolower($file_ext)) {
                                case 'pdf':
                                    $icon_class = 'pdf-icon';
                                    break;
                                case 'doc':
                                case 'docx':
                                    $icon_class = 'word-icon';
                                    break;
                                case 'xls':
                                case 'xlsx':
                                    $icon_class = 'excel-icon';
                                    break;
                                default:
                                    $icon_class = 'file-icon';
                            }
                            ?>
                            <a href="<?php echo esc_url($file_url); ?>" 
                               class="doc-download-link" 
                               download
                               aria-label="ดาวน์โหลด <?php echo esc_attr($file['at_rp_file_name']); ?>">
                                <span class="doc-icon <?php echo esc_attr($icon_class); ?>"></span>
                            </a>
                        </td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('at_document_table', 'at_document_table_shortcode');



/**** เปลี่ยน SITE LOGO *****/

function custom_login_logo_and_background() {
    $site_logo_url      = get_site_logo_url(); // Get the site logo URL.
    $background_image_url = 'https://dga.wpdevs.co/wp-content/uploads/2025/02/408.jpg'; // Your provided background image URL.

    ?>
    <style type="text/css">
        /* Logo Styles (as before, but combined) */
        #login h1 a, .login h1 a {
            <?php if ( ! empty( $site_logo_url ) ) : ?>
                background-image: url(<?php echo esc_url( $site_logo_url ); ?>);
            <?php endif; ?>
            width: auto; /* Adjust as needed */
            height: 80px;  /* Adjust as needed */
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center center;
            margin-bottom: 20px;
            pointer-events: none; /* Disable clicks */
        }

        /* Background Image Styles */
        body.login {
            background-image: url(<?php echo esc_url( $background_image_url ); ?>);
            background-size: cover; /* Use 'cover' to cover the entire background */
            background-position: center center; /* Center the background image */
            background-repeat: no-repeat; /* Prevent tiling */
            background-attachment: fixed; /* Optional:  Fixed background */
        }

         /*  Optional: Adjust form container for better visibility */
        #login {
           background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent white */
           padding: 20px;
           border-radius: 5px; /* Optional: Rounded corners */
        }

        /* Hide the default WordPress link if no site logo (Fallback). */
        <?php if ( empty( $site_logo_url ) ): ?>
        #login h1 a {
            background-size: contain; /* Keep basic styling */
            background-repeat: no-repeat;
            margin-bottom: 20px;
        }
        <?php endif; ?>
    </style>
    <?php
}
add_action( 'login_enqueue_scripts', 'custom_login_logo_and_background' );



// Helper function to get the site logo URL (same as before, but included for completeness)
function get_site_logo_url() {
    $logo_url = '';

    // 1. Check for Custom Logo (the best way).
    if ( function_exists( 'the_custom_logo' ) && has_custom_logo() ) {
        $custom_logo_id = get_theme_mod( 'custom_logo' );
        $logo_url = wp_get_attachment_image_url( $custom_logo_id, 'full' );
    }

    // 2. Fallback: Check for a theme option.
    elseif ( get_theme_mod( 'your_theme_option_name' ) ) {
        $logo_url = get_theme_mod( 'your_theme_option_name' );
    }

    // 3. Fallback: Check Parent theme
     elseif ( get_template_directory_uri() != get_stylesheet_directory_uri() &&  // Check if it *is* a child theme.
             get_theme_mod( 'your_theme_option_name', '', get_template() ) ) {  //Get logo URL if it's setted on parent theme
          $logo_url = get_theme_mod( 'your_theme_option_name', '', get_template() );
     }

    return $logo_url;
}

// Optional: Change the link on the logo (same as before).
function custom_login_logo_url() {
    return home_url();
}
add_filter( 'login_headerurl', 'custom_login_logo_url' );

// Optional: Change the title attribute (tooltip) (same as before).
function custom_login_logo_title() {
    return get_bloginfo( 'name' );
}
add_filter( 'login_headertext', 'custom_login_logo_title' );
add_filter( 'login_title', 'custom_login_logo_title');

//Optional: Change login error messages (same as before).
function custom_login_errors(){
    return 'Something is wrong!';
}
add_filter( 'login_errors', 'custom_login_errors' );




/******* Google Translate Language Switcher - DGA *********/

function dga_translate_safe_shortcode_xyz789($atts) {
    // Prevent multiple instances
    static $instance_count = 0;
    $instance_count++;
    
    if ($instance_count > 1) {
        return '<!-- Google Translate instance already loaded -->';
    }
    
    // Parse attributes
    $atts = shortcode_atts(array(
        'default_language' => 'th',
        'position' => 'inline',
        'style' => 'modern'
    ), $atts, 'dga_translate_safe');

    $default_language = sanitize_text_field($atts['default_language']);
    $position = sanitize_text_field($atts['position']);
    $style = sanitize_text_field($atts['style']);

    // Get current language - simplified logic
    $current_language = $default_language;
    
    // Check cookie first
    if (isset($_COOKIE['dga_user_lang_xyz789'])) {
        $cookie_lang = sanitize_text_field($_COOKIE['dga_user_lang_xyz789']);
        if (in_array($cookie_lang, ['th', 'en'])) {
            $current_language = $cookie_lang;
        }
    }

    // Generate unique instance ID
    $instance_id = 'dga_translate_' . wp_rand(1000, 9999);

    // Enqueue scripts and styles
    wp_enqueue_script(
        'dga-translate-safe-xyz789', 
        get_stylesheet_directory_uri() . '/js/dga-translate-safe-xyz789.js', 
        array(), 
        '9.0.0', 
        true
    );
    
    wp_enqueue_style(
        'dga-translate-safe-xyz789', 
        get_stylesheet_directory_uri() . '/css/dga-translate-enhanced-xyz789.css', 
        array(), 
        '9.0.0'
    );

    // Localize script
    wp_localize_script('dga-translate-safe-xyz789', 'dgaTranslate', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_translate_nonce_xyz789'),
        'currentLang' => $current_language,
        'defaultLang' => $default_language,
        'homeUrl' => home_url(),
        'instanceId' => $instance_id
    ));

    // Build HTML
    $html = sprintf(
        '<div class="dga-translate-safe-xyz789 dga-position-%s dga-style-%s" 
             data-current-lang="%s" 
             data-instance-id="%s">
            <div class="dga-translate-buttons-xyz789">
                <!-- Thai Button -->
                <button type=DGA_BUTTON_TYPE 
                        class="dga-translate-btn-xyz789 %s" 
                        data-lang="th"
                        aria-label="%s"
                        title="%s">
                    <span class="dga-flag-icon-xyz789">
                        <svg width="30" height="20" viewBox="0 0 30 20" xmlns="http://www.w3.org/2000/svg">
                            <rect width="30" height="3.33" fill="#ED1C24"/>
                            <rect y="3.33" width="30" height="3.33" fill="#FFFFFF"/>
                            <rect y="6.66" width="30" height="6.68" fill="#241D4F"/>
                            <rect y="13.34" width="30" height="3.33" fill="#FFFFFF"/>
                            <rect y="16.67" width="30" height="3.33" fill="#ED1C24"/>
                        </svg>
                    </span>
                    <span class="dga-lang-text-xyz789">ไทย</span>
                </button>
                
                <!-- English Button -->
                <button type=DGA_BUTTON_TYPE 
                        class="dga-translate-btn-xyz789 %s" 
                        data-lang="en"
                        aria-label="%s"
                        title="%s">
                    <span class="dga-flag-icon-xyz789">
                        <svg width="30" height="20" viewBox="0 0 30 20" xmlns="http://www.w3.org/2000/svg">
                            <rect width="30" height="20" fill="#012169"/>
                            <path d="M0,0 L30,20 M30,0 L0,20" stroke="#FFF" stroke-width="3.5"/>
                            <path d="M0,0 L30,20 M30,0 L0,20" stroke="#C8102E" stroke-width="2.3"/>
                            <path d="M15,0 V20 M0,10 H30" stroke="#FFF" stroke-width="5.5"/>
                            <path d="M15,0 V20 M0,10 H30" stroke="#C8102E" stroke-width="3.5"/>
                        </svg>
                    </span>
                    <span class="dga-lang-text-xyz789">EN</span>
                </button>
            </div>
            
            <!-- Loading Spinner -->
            <div class="dga-translate-loading-xyz789">
                <div class="dga-spinner-xyz789"></div>
                <div class="dga-loading-text-xyz789"></div>
            </div>
        </div>',
        esc_attr($position),
        esc_attr($style),
        esc_attr($current_language),
        esc_attr($instance_id),
        $current_language === 'th' ? 'active' : '',
        esc_attr__('เปลี่ยนเป็นภาษาไทย', DGA_TEXT_DOMAIN),
        esc_attr__('ภาษาไทย', DGA_TEXT_DOMAIN),
        $current_language === 'en' ? 'active' : '',
        esc_attr__('Change to English', DGA_TEXT_DOMAIN),
        esc_attr__('English', DGA_TEXT_DOMAIN)
    );

    // Add Google Translate script
    $html .= '
    <script type="text/javascript">
    function googleTranslateElementInit() {
        new google.translate.TranslateElement({
            pageLanguage: "th",
            includedLanguages: "en,th",
            layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
            autoDisplay: false
        }, "google_translate_element");
    }
    </script>
    <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
    <div id="google_translate_element" style="display:none;"></div>';

    return $html;
}
add_shortcode('dga_translate_safe', 'dga_translate_safe_shortcode_xyz789');

/**
 * AJAX handler - Simplified version
 */
function dga_ajax_change_language_xyz789() {
    // Verify nonce
    if (!check_ajax_referer('dga_translate_nonce_xyz789', 'nonce', false)) {
        wp_send_json_error(DGA_SECURITY_FAILED_MSG);
        return;
    }
    
    $language = isset($_POST['language']) ? sanitize_text_field($_POST['language']) : 'th';
    
    // Validate language
    if (!in_array($language, ['th', 'en'])) {
        wp_send_json_error('Invalid language');
        return;
    }
    
    // Send success response - let JavaScript handle cookies
    wp_send_json_success(array(
        'language' => $language,
        DGA_MESSAGE_KEY => 'Language change initiated'
    ));
}
add_action('wp_ajax_dga_change_language_xyz789', 'dga_ajax_change_language_xyz789');
add_action('wp_ajax_nopriv_dga_change_language_xyz789', 'dga_ajax_change_language_xyz789');

/**
 * Add inline script to handle Google Translate on page load
 */
function dga_add_translate_inline_script_xyz789() {
    if (!is_admin()) {
        ?>
        <script>
        // Check and apply saved language on page load
        document.addEventListener('DOMContentLoaded', function() {
            const savedLang = getCookie('dga_user_lang_xyz789');
            console.log('Saved language on load:', savedLang);
            
            if (savedLang === 'en') {
                // Set Google Translate cookie for English
                document.cookie = 'googtrans=/th/en; path=/';
            } else {
                // Clear Google Translate cookies for Thai
                document.cookie = 'googtrans=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';
            }
            
            function getCookie(name) {
                const nameEQ = name + "=";
                const ca = document.cookie.split(';');
                for(let i=0; i < ca.length; i++) {
                    const c = ca[i];
                    while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
                }
                return null;
            }
        });
        </script>
        <?php
    }
}
add_action('wp_head', 'dga_add_translate_inline_script_xyz789', 1);




/****** ระบบตรวจสอบโพส ที่เป็น pending ******/


/**
 * Pending Posts Cards System
 * 
 * @package PendingPostsCards
 * @version 1.0.1
 */

 if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Register shortcode
add_shortcode('pending_posts_cards', 'display_pending_posts_cards');

// Enqueue scripts and styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'pending_posts_cards_assets');

function pending_posts_cards_assets() {
    // Enqueue on all pages since shortcode could be anywhere
    wp_enqueue_style(
        'pending-posts-cards',
        get_stylesheet_directory_uri() . '/css/pending-posts-cards.css',
        array(),
        DGA_THEME_VERSION
    );

    wp_enqueue_script(
        'pending-posts-cards',
        get_stylesheet_directory_uri() . '/js/pending-posts-cards.js',
        array(DGA_JQUERY_HANDLE),
        DGA_THEME_VERSION,
        true
    );

    wp_localize_script(
        'pending-posts-cards',
        'pendingPostsAjax',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('pending-posts-nonce'),
            'is_user_logged_in' => is_user_logged_in(),
            'current_user_can_edit' => current_user_can(DGA_EDIT_POSTS_CAP)
        )
    );
}

// ปรับเปลี่ยนการ query เพื่อให้ผู้ใช้ที่มีสิทธิ์สามารถดูโพสต์ที่มีสถานะ pending ได้
add_action('pre_get_posts', 'allow_pending_preview_for_privileged_users');

function allow_pending_preview_for_privileged_users($query) {
    // ตรวจสอบว่าเป็น main query, frontend และมีการล็อกอิน
    if (!is_admin() && $query->is_main_query() && is_user_logged_in()) {
        // ตรวจสอบว่ามีการดูพรีวิว
        if (isset($_GET['preview']) && $_GET['preview'] === 'true') {
            // วิธีที่ 1: ลองรับ post_id จาก query variable ต่างๆ
            $post_id = 0;
            
            // ตรวจสอบจาก query variable มาตรฐาน
            if (isset($_GET['p'])) {
                $post_id = absint($_GET['p']);
            } elseif (isset($_GET['page_id'])) {
                $post_id = absint($_GET['page_id']);
            } 
            // ตรวจสอบจาก queried object ใน permalink แบบสวยงาม
            elseif ($query->get_queried_object_id() > 0) {
                $post_id = $query->get_queried_object_id();
            }
            
            // วิธีที่ 2: หาก post_id ยังเป็น 0 ให้ตรวจสอบจาก post type specific
            if ($post_id === 0) {
                // ตรวจสอบ custom post type ทั้งหมดที่มีการใช้งาน
                $post_types = array(
                    'egp', 'news', 'mpeople', 'article', 'pha', 
                    'dgallery', 'department', 'complaint'
                );
                
                foreach($post_types as $type) {
                    $type_id_var = $type . '_id';
                    if (isset($_GET[$type_id_var])) {
                        $post_id = absint($_GET[$type_id_var]);
                        break;
                    }
                    
                    // ตรวจสอบจาก query vars ที่ WordPress สร้างโดยอัตโนมัติ
                    if ($query->get($type_id_var) > 0) {
                        $post_id = $query->get($type_id_var);
                        break;
                    }
                }
            }
            
            // ถ้ายังไม่พบ post_id ให้ลองดึงจาก queried object
            if ($post_id === 0 && is_singular()) {
                global $post;
                if ($post) {
                    $post_id = $post->ID;
                }
            }
            
            // ถ้ามี post_id และเป็นการดูพรีวิว
            if ($post_id > 0) {
                // ตรวจสอบสิทธิ์ของผู้ใช้
                $current_user = wp_get_current_user();
                $allowed_roles = array(DGA_ADMIN_ROLE, 'editor', 'author');
                
                // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการดูโพสต์ pending
                $has_permission = false;
                foreach ($allowed_roles as $role) {
                    if (in_array($role, $current_user->roles)) {
                        $has_permission = true;
                        break;
                    }
                }
                
                // ถ้าผู้ใช้มีสิทธิ์ให้เพิ่มสถานะ 'pending' เข้าไปใน query
                if ($has_permission) {
                    $post_status = $query->get(DGA_POST_STATUS_FIELD);
                    if (!$post_status) {
                        $post_status = array(DGA_PUBLISH_STATUS);
                    } elseif (is_string($post_status)) {
                        $post_status = array($post_status);
                    }
                    
                    $post_status[] = 'pending';
                    $query->set(DGA_POST_STATUS_FIELD, $post_status);
                    
                    // บันทึกข้อมูลการดีบัก
                    error_log('Pending preview activated for post ID: ' . $post_id);
                }
            }
        }
    }
}

// ปรับปรุงการสร้าง link preview สำหรับโพสต์ที่มีสถานะ pending
add_filter('preview_post_link', 'improve_pending_preview_link', 10, 2);

function improve_pending_preview_link($preview_link, $post) {
    // ตรวจสอบว่าโพสต์มีสถานะ 'pending'
    if ($post && $post->post_status === 'pending') {
        // สร้าง URL แบบ query parameter ซึ่งทำงานได้กับทุก post type
        $post_type = get_post_type($post->ID);
        $preview_link = add_query_arg(
            array(
                DGA_POST_TYPE_FIELD => $post_type,
                'p' => $post->ID,
                'preview' => 'true',
                'pending_preview' => 'true',
            ),
            home_url('/')
        );
    }
    return $preview_link;
}

// เพิ่มแถบแจ้งเตือนด้านบนของโพสต์ที่มีสถานะ pending
add_action('wp_footer', 'add_pending_notice_bar');

function add_pending_notice_bar() {
    // ตรวจสอบว่าเป็นโพสต์ที่มีสถานะ pending และกำลังดูพรีวิว
    global $post;
    
    if (is_singular() && is_user_logged_in() && 
        isset($_GET['preview']) && $_GET['preview'] === 'true') {
        
        // ถ้าไม่มี $post ให้ลองค้นหาจาก query parameter
        if (!isset($post) || empty($post)) {
            $post_id = 0;
            if (isset($_GET['p'])) {
                $post_id = absint($_GET['p']);
            } elseif (isset($_GET['page_id'])) {
                $post_id = absint($_GET['page_id']);
            }
            
            if ($post_id > 0) {
                $post = get_post($post_id);
            }
        }
        
        // ตรวจสอบว่ามี post และมีสถานะ pending
        if (isset($post) && $post && $post->post_status === 'pending') {
            // ตรวจสอบบทบาทของผู้ใช้
            $current_user = wp_get_current_user();
            $user_roles = $current_user->roles;
            
            // ตรวจสอบว่าผู้ใช้เป็น admin หรือ editor
            $is_admin = in_array(DGA_ADMIN_ROLE, $user_roles);
            $is_editor = in_array('editor', $user_roles);
            
            // แสดงแถบแจ้งเตือนเฉพาะสำหรับ admin และ editor
            if ($is_admin || $is_editor) {
                ?>
                <style>
                    .pending-notice-box {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        width: 300px;
                        background-color: #fff;
                        color: #333;
                        border-radius: 8px;
                        padding: 15px;
                        z-index: 9999;
                        box-shadow: 0 2px 15px rgba(0,0,0,0.2);
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
                        border-left: 5px solid #ff9800;
                        text-align: left;
                    }
                    
                    .pending-notice-box .notice-title {
                        font-weight: 600;
                        font-size: 16px;
                        margin-bottom: 10px;
                        color: #ff9800;
                        display: flex;
                        align-items: center;
                    }
                    
                    .pending-notice-box .notice-title svg {
                        margin-right: 8px;
                    }
                    
                    .pending-notice-box .action-button {
                        display: block;
                        width: 100%;
                        margin-top: 12px;
                        padding: 10px 15px;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        font-weight: 500;
                        transition: all 0.2s ease;
                        text-align: center;
                        font-size: 14px;
                    }
                    
                    .pending-notice-box .approve-button {
                        background: #4CAF50;
                    }
                    
                    .pending-notice-box .approve-button:hover {
                        background: #388E3C;
                    }
                    
                    .pending-notice-box .edit-button {
                        background: #2196F3;
                    }
                    
                    .pending-notice-box .edit-button:hover {
                        background: #1565C0;
                    }
                    
                    .pending-notice-box .action-button:active {
                        transform: scale(0.98);
                    }
                    
                    .pending-notice-box .action-button:disabled {
                        background: #cccccc;
                        cursor: not-allowed;
                    }
                    
                    .pending-notice-box .notice-content {
                        font-size: 14px;
                        line-height: 1.5;
                        margin-bottom: 5px;
                    }
                    
                    .pending-notice-box .close-button {
                        position: absolute;
                        top: 10px;
                        right: 10px;
                        background: none;
                        border: none;
                        cursor: pointer;
                        color: #999;
                        font-size: 18px;
                        line-height: 1;
                        padding: 0;
                        width: 20px;
                        height: 20px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                    
                    .pending-notice-box .close-button:hover {
                        color: #333;
                    }
                    
                    .pending-notice-box .user-info {
                        font-size: 12px;
                        color: #666;
                        margin-top: 5px;
                    }
                    
                    .admin-bar .pending-notice-box {
                        top: 52px;
                    }
                    
                    @media screen and (max-width: 782px) {
                        .admin-bar .pending-notice-box {
                            top: 66px;
                        }
                    }
                    
                    @keyframes slideInRight {
                        from {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }
                    
                    .pending-notice-box {
                        animation: slideInRight 0.3s ease-out forwards;
                    }
                </style>
                
                <div class="pending-notice-box" id="pending-notice-box">
                    <button class="close-button" id="close-pending-notice">×</button>
                    <div class="notice-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#ff9800" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="8" x2="12" y2="12"></line>
                            <line x1="12" y1="16" x2="12.01" y2="16"></line>
                        </svg>
                        สถานะ: รอตรวจสอบ
                    </div>
                    <div class="notice-content">
                        คุณกำลังดูโพสต์ที่มีสถานะ "รอตรวจสอบ" (Pending)
                    </div>
                    <div class="user-info">
                        <?php 
                        // แสดงชื่อผู้ตรวจสอบเดิม (ถ้ามี)
                        $reviewer1 = get_post_meta($post->ID, 'at_apv1', true);
                        if (!empty($reviewer1)) {
                            echo 'ตรวจสอบเบื้องต้นโดย: ' . esc_html($reviewer1);
                        }
                        
                        $reviewer2 = get_post_meta($post->ID, 'at_apv2', true);
                        if (!empty($reviewer2)) {
                            echo '<br>อนุมัติโดย: ' . esc_html($reviewer2);
                        }
                        ?>
                    </div>
                    
                    <?php if ($is_admin): ?>
                        <!-- สำหรับ Administrator: ปุ่มอนุมัติและเผยแพร่ -->
                        <button class="action-button approve-button" id="approve-pending-post" data-post-id="<?php echo esc_attr($post->ID); ?>">
                            ยืนยันและเผยแพร่
                        </button>
                    <?php elseif ($is_editor): ?>
                        <!-- สำหรับ Editor: ปุ่มบันทึกการตรวจสอบ -->
                        <button class="action-button edit-button" id="review-pending-post" data-post-id="<?php echo esc_attr($post->ID); ?>">
                            บันทึกการตรวจสอบ
                        </button>
                    <?php endif; ?>
                </div>
                
                <script>
                    document.addEventListener('DOMContentLoaded', initPendingPostsHandlers);
                    
                    function initPendingPostsHandlers() {
                        initCloseButton();
                        initApproveButton();
                        initReviewButton();
                    }
                    
                    function initCloseButton() {
                        const closeButton = document.getElementById('close-pending-notice');
                        if (closeButton) {
                            closeButton.addEventListener('click', function() {
                                const noticeBox = document.getElementById('pending-notice-box');
                                if (noticeBox) {
                                    noticeBox.style.display = 'none';
                                }
                            });
                        }
                    }
                    
                    function initApproveButton() {
                        const approveButton = document.getElementById('approve-pending-post');
                        if (approveButton) {
                            approveButton.addEventListener('click', function() {
                                handlePostAction(this, {
                                    confirmMessage: 'คุณต้องการยืนยันและเผยแพร่โพสต์นี้ใช่หรือไม่?',
                                    action: 'approve_pending_post',
                                    loadingText: 'กำลังดำเนินการ...',
                                    originalText: 'ยืนยันและเผยแพร่',
                                    successMessage: 'เผยแพร่โพสต์สำเร็จแล้ว',
                                    errorMessage: 'ไม่สามารถเผยแพร่โพสต์ได้',
                                    successCallback: function() {
                                        window.location.href = window.location.href.replace('&preview=true', '');
                                    }
                                });
                            });
                        }
                    }
                    
                    function initReviewButton() {
                        const reviewButton = document.getElementById('review-pending-post');
                        if (reviewButton) {
                            reviewButton.addEventListener('click', function() {
                                handlePostAction(this, {
                                    confirmMessage: 'คุณต้องการบันทึกการตรวจสอบโพสต์นี้ใช่หรือไม่?',
                                    action: 'review_pending_post',
                                    loadingText: 'กำลังดำเนินการ...',
                                    originalText: 'บันทึกการตรวจสอบ',
                                    successMessage: 'บันทึกการตรวจสอบสำเร็จแล้ว',
                                    errorMessage: 'ไม่สามารถบันทึกการตรวจสอบได้',
                                    successCallback: function() {
                                        window.location.reload();
                                    }
                                });
                            });
                        }
                    }
                    
                    function handlePostAction(button, config) {
                        if (!confirm(config.confirmMessage)) {
                            return;
                        }
                        
                        const postId = button.getAttribute('data-post-id');
                        setButtonState(button, true, config.loadingText);
                        
                        sendPostRequest(config.action, postId, {
                            onSuccess: function(response) {
                                alert(config.successMessage);
                                config.successCallback();
                            },
                            onError: function(errorMsg) {
                                alert('เกิดข้อผิดพลาด: ' + (errorMsg || config.errorMessage));
                                setButtonState(button, false, config.originalText);
                            },
                            onFailure: function() {
                                alert('เกิดข้อผิดพลาดในการเชื่อมต่อ');
                                setButtonState(button, false, config.originalText);
                            },
                            onParseError: function() {
                                alert('เกิดข้อผิดพลาดในการประมวลผลข้อมูล');
                                setButtonState(button, false, config.originalText);
                            }
                        });
                    }
                    
                    function setButtonState(button, disabled, text) {
                        button.disabled = disabled;
                        button.textContent = text;
                    }
                    
                    function sendPostRequest(action, postId, callbacks) {
                        const xhr = new XMLHttpRequest();
                        xhr.open('POST', '<?php echo admin_url(DGA_ADMIN_AJAX_URL); ?>');
                        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                        
                        xhr.onload = function() {
                            handleAjaxResponse(xhr, callbacks);
                        };
                        
                        const data = 'action=' + action + '&post_id=' + postId + '&nonce=<?php echo wp_create_nonce('pending-posts-nonce'); ?>';
                        xhr.send(data);
                    }
                    
                    function handleAjaxResponse(xhr, callbacks) {
                        if (xhr.status !== 200) {
                            callbacks.onFailure();
                            return;
                        }
                        
                        try {
                            const response = JSON.parse(xhr.responseText);
                            if (response.success) {
                                callbacks.onSuccess(response);
                            } else {
                                callbacks.onError(response.data);
                            }
                        } catch (e) {
                            callbacks.onParseError();
                        }
                    }
                </script>
                <?php
            }
        }
    }
}

// Shortcode function
function display_pending_posts_cards() {
    // Check if user is logged in and has permissions
    if (!is_user_logged_in() || !current_user_can(DGA_EDIT_POSTS_CAP)) {
        return '<div class="error-message">คุณไม่มีสิทธิ์เข้าถึงส่วนนี้</div>';
    }

    // Start output buffering
    ob_start();
    ?>
    <div id="pending-posts-container" class="pending-posts-system">
        <!-- Filter Controls -->
        <div class="filter-controls">
            <div class="filter-group">
                <select id="post-type-filter" class="filter-select">
                    <option value="">ทุกหมวดหมู่</option>
                    <option value="egp">ข้อมูลจัดซื้อจัดจ้าง</option>
                    <option value="news">ข้อมูลทั่วไป</option>
                    <option value="mpeople">คู่มือประชาชน</option>
                    <option value="article">บทความ</option>
                    <option value="pha">ประชาพิจารณ์และกิจกรรม</option>
                    <option value="dgallery">ประมวลภาพกิจกรรม</option>
                    <option value="department">หน่วยงาน</option>
                    <option value="complaint">เรื่องร้องเรียน</option>
                </select>
                <input type="text" id="title-search" class="search-input" placeholder="ค้นหาตามชื่อเรื่อง...">
            </div>
        </div>

        <!-- Status Message -->
        <div id="status-message"></div>

        <!-- Skeleton Loading -->
        <div class="skeleton-loader">
            <?php for($i = 0; $i < 16; $i++): ?>
                <div class="skeleton-card">
                    <div class="skeleton-title"></div>
                    <div class="skeleton-meta"></div>
                    <div class="skeleton-button"></div>
                </div>
            <?php endfor; ?>
        </div>

        <!-- Posts Grid -->
        <div class="pending-posts-grid" id="pending-posts-cards"></div>

        <!-- Pagination -->
        <div class="pagination"></div>
    </div>

    <?php if (!wp_script_is('pending-posts-cards', 'enqueued')): ?>
        <script type="text/javascript">
            // Re-trigger asset loading if not already loaded
            <?php
            $script_url = get_stylesheet_directory_uri() . '/js/pending-posts-cards.js';
            $style_url = get_stylesheet_directory_uri() . '/css/pending-posts-cards.css';
            ?>
            if (!document.querySelector('link[href="<?php echo esc_url($style_url); ?>"]')) {
                const link = document.createElement('link');
                link.rel = 'stylesheet';
                link.href = '<?php echo esc_url($style_url); ?>';
                document.head.appendChild(link);
            }
            if (!document.querySelector('script[src="<?php echo esc_url($script_url); ?>"]')) {
                const script = document.createElement('script');
                script.src = '<?php echo esc_url($script_url); ?>';
                script.defer = true;
                document.body.appendChild(script);
            }
        </script>
    <?php endif; ?>

    <?php
    // Return the buffered content
    return ob_get_clean();
}

// AJAX handler for fetching posts
add_action('wp_ajax_get_pending_posts', 'get_pending_posts');
add_action('wp_ajax_nopriv_get_pending_posts', 'get_pending_posts');

function get_pending_posts() {
    check_ajax_referer('pending-posts-nonce', 'nonce');
    
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
        return;
    }

    $page = isset($_POST['page']) ? absint($_POST['page']) : 1;
    $posts_per_page = 16;
    $offset = ($page - 1) * $posts_per_page;
    
    // รับค่า filter
    $post_type = isset($_POST[DGA_POST_TYPE_FIELD]) ? sanitize_text_field($_POST[DGA_POST_TYPE_FIELD]) : '';
    $search_term = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';

    // กำหนด post types ตามเงื่อนไข
    $post_types = $post_type ? array($post_type) : array(
        'egp', 'news', 'mpeople', 'article', 'pha', 
        'dgallery', 'department', 'complaint'
    );

    // Query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => $post_types,
        DGA_POST_STATUS_FIELD => 'pending',
        DGA_POSTS_PER_PAGE => $posts_per_page,
        'offset' => $offset,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );

    // เพิ่มการค้นหาตาม title
    if (!empty($search_term)) {
        $args['s'] = $search_term;
    }

    $query = new WP_Query($args);
    $total_posts = $query->found_posts;
    $total_pages = ceil($total_posts / $posts_per_page);

    $response = array(
        'posts' => array(),
        'pagination' => array(
            'current_page' => $page,
            'total_pages' => $total_pages,
            'total_posts' => $total_posts
        )
    );

    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            $post_type = get_post_type();
            
            // สร้างลิงก์แบบ query parameter format
            $preview_link = add_query_arg(
                array(
                    DGA_POST_TYPE_FIELD => $post_type,
                    'p' => $post_id,
                    'preview' => 'true',
                    'pending_preview' => 'true'
                ),
                home_url('/')
            );
            
            $response['posts'][] = array(
                'ID' => $post_id,
                DGA_TITLE_FIELD => get_the_title(),
                DGA_TYPE_FIELD => $post_type,
                'date' => get_the_date(DGA_DATE_FORMAT_SHORT),
                'link' => $preview_link,
                'excerpt' => wp_trim_words(get_the_excerpt(), 20),
                'author' => get_the_author(),
                'modified_date' => get_the_modified_date('d/m/Y H:i')
            );
        }
    }

    wp_reset_postdata();
    wp_send_json_success($response);
}

// AJAX handler for approving posts
add_action('wp_ajax_approve_pending_post', 'approve_pending_post');

function approve_pending_post() {
    // ตรวจสอบ nonce
    check_ajax_referer('pending-posts-nonce', 'nonce');
    
    // ตรวจสอบว่าผู้ใช้เป็น administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error('คุณไม่มีสิทธิ์อนุมัติโพสต์');
        return;
    }
    
    // รับ post ID
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? absint($_POST[DGA_POST_ID_FIELD]) : 0;
    if (!$post_id) {
        wp_send_json_error('ไม่พบ ID ของโพสต์');
        return;
    }
    
    // ตรวจสอบว่าโพสต์มีอยู่จริงและมีสถานะ pending
    $post = get_post($post_id);
    if (!$post || $post->post_status !== 'pending') {
        wp_send_json_error('โพสต์ไม่ถูกต้องหรือไม่ได้อยู่ในสถานะรอตรวจสอบ');
        return;
    }
    
    // อัปเดต custom field "at_apv2" ด้วยชื่อของ administrator
    $current_user = wp_get_current_user();
    update_post_meta($post_id, 'at_apv2', $current_user->display_name);
    
    // เปลี่ยนสถานะโพสต์เป็น publish
    $updated_post = array(
        'ID' => $post_id,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );
    
    $result = wp_update_post($updated_post);
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    } else {
        // บันทึกล็อก
        error_log(sprintf(
            'โพสต์ #%d ได้รับการอนุมัติโดย %s ในวันที่ %s',
            $post_id,
            $current_user->user_login,
            current_time('mysql')
        ));
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'อนุมัติโพสต์เรียบร้อยแล้ว',
            DGA_POST_ID_FIELD => $post_id
        ));
    }
}

// เพิ่ม AJAX handler สำหรับบันทึกการตรวจสอบโดย Editor
add_action('wp_ajax_review_pending_post', 'review_pending_post');

function review_pending_post() {
    // ตรวจสอบ nonce
    check_ajax_referer('pending-posts-nonce', 'nonce');
    
    // ตรวจสอบว่าผู้ใช้เป็น editor
    if (!current_user_can('editor')) {
        wp_send_json_error('คุณไม่มีสิทธิ์บันทึกการตรวจสอบ');
        return;
    }
    
    // รับ post ID
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? absint($_POST[DGA_POST_ID_FIELD]) : 0;
    if (!$post_id) {
        wp_send_json_error('ไม่พบ ID ของโพสต์');
        return;
    }
    
    // ตรวจสอบว่าโพสต์มีอยู่จริงและมีสถานะ pending
    $post = get_post($post_id);
    if (!$post || $post->post_status !== 'pending') {
        wp_send_json_error('โพสต์ไม่ถูกต้องหรือไม่ได้อยู่ในสถานะรอตรวจสอบ');
        return;
    }
    
    // อัปเดต custom field "at_apv1" ด้วยชื่อของ editor
    $current_user = wp_get_current_user();
    update_post_meta($post_id, 'at_apv1', $current_user->display_name);
    
    // บันทึกล็อก
    error_log(sprintf(
        'โพสต์ #%d ได้รับการตรวจสอบโดย %s (Editor) ในวันที่ %s',
        $post_id,
        $current_user->user_login,
        current_time('mysql')
    ));
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'บันทึกการตรวจสอบเรียบร้อยแล้ว',
        DGA_POST_ID_FIELD => $post_id,
        'reviewer' => $current_user->display_name
    ));
}

function pending_posts_cards_activate() {
    // Add custom capabilities to administrator role
    $role = get_role(DGA_ADMIN_ROLE);
    if ($role) {
        $role->add_cap('approve_pending_posts');
    }
}

// Remove custom capabilities on plugin deactivation
register_deactivation_hook(__FILE__, 'pending_posts_cards_deactivate');

function pending_posts_cards_deactivate() {
    // Remove custom capabilities from administrator role
    $role = get_role(DGA_ADMIN_ROLE);
    if ($role) {
        $role->remove_cap('approve_pending_posts');
    }
}

// Security functions
function pending_posts_cards_validate_post_type($post_type) {
    $allowed_types = array(
        'egp',
        'news',
        'mpeople',
        'article',
        'pha',
        'dgallery',
        'department',
        'complaint'
    );
    return in_array($post_type, $allowed_types);
}

// Helper function to get post type label in Thai
function get_post_type_thai_label($post_type) {
    $labels = array(
        'egp' => 'ข้อมูลจัดซื้อจัดจ้าง',
        'news' => 'ข้อมูลทั่วไป',
        'mpeople' => 'คู่มือประชาชน',
        'article' => 'บทความ',
        'pha' => 'ประชาพิจารณ์และกิจกรรม',
        'dgallery' => 'ประมวลภาพกิจกรรม',
        'department' => 'หน่วยงาน',
        'complaint' => 'เรื่องร้องเรียน'
    );
    return isset($labels[$post_type]) ? $labels[$post_type] : $post_type;
}

// Add error handling wrapper
function pending_posts_cards_error_handler($callback) {
    try {
        return $callback();
    } catch (Exception $e) {
        error_log('Pending Posts Cards Error: ' . $e->getMessage());
        return false;
    }
}



/*********** ฟังก์ชั่น PDPA COOKIE - Enhanced Compatibility Version ************/

// ลงทะเบียน shortcode
function pdpa_cookie_consent_shortcode_xyz789() {
    // เตรียม assets ทุกครั้ง ไม่ว่าจะมีความยินยอมแล้วหรือไม่
    wp_enqueue_style('pdpa-cookie-consent-style', get_stylesheet_directory_uri() . '/css/pdpa-cookie-consent-xyz789.css', array(), '3.0.0');
    wp_enqueue_script('pdpa-cookie-consent-script', get_stylesheet_directory_uri() . '/js/pdpa-cookie-consent-xyz789.js', array(DGA_JQUERY_HANDLE), '3.0.0', true);
    
    // ตรวจสอบก่อนว่าเคยให้ความยินยอมไปแล้วหรือไม่
    $consent_given = isset($_COOKIE['pdpa_consent_given_xyz789']) && $_COOKIE['pdpa_consent_given_xyz789'] === 'yes';
    
    // ส่งค่าสถานะไปยัง JavaScript
    wp_localize_script('pdpa-cookie-consent-script', 'pdpa_consent_data', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('pdpa_cookie_consent_nonce_xyz789'),
        'consent_given' => $consent_given ? 'yes' : 'no',
        'plugin_url' => get_stylesheet_directory_uri(),
        'debug' => WP_DEBUG,
        'site_url' => home_url(),
        'is_ssl' => is_ssl()
    ));
    
    // เริ่มสร้าง Output
    ob_start();
    ?>
    <!-- PDPA Cookie Consent Container -->
    <div id="pdpa-cookie-consent-xyz789" class="pdpa-cookie-consent-xyz789" data-consent="<?php echo esc_attr($consent_given ? 'yes' : 'no'); ?>">
        <!-- Overlay backdrop -->
        <div class="pdpa-overlay-xyz789" <?php echo $consent_given ? 'style="display:none;"' : ''; ?> aria-hidden="<?php echo $consent_given ? 'true' : 'false'; ?>"></div>
        
        <!-- Main consent dialog -->
        <div class="pdpa-consent-container-xyz789" <?php echo $consent_given ? 'style="display:none;"' : ''; ?> role="dialog" aria-modal="true" aria-labelledby="pdpa-title-xyz789">
            <div class="pdpa-header-xyz789">
                <h3 id="pdpa-title-xyz789"><?php _e('การตั้งค่าความเป็นส่วนตัว', 'pdpa-consent'); ?></h3>
                <p><?php _e('เว็บไซต์นี้ใช้คุกกี้เพื่อปรับปรุงประสบการณ์การใช้งานของคุณ', 'pdpa-consent'); ?></p>
            </div>
            
            <div class="pdpa-content-xyz789">
                <p><?php _e('เราใช้คุกกี้เพื่อเพิ่มประสิทธิภาพและประสบการณ์ที่ดีในการใช้งานเว็บไซต์ของคุณ คุณสามารถเลือกตั้งค่าความยินยอมในการใช้คุกกี้ได้ โดยคุกกี้บางประเภทมีความจำเป็นเพื่อการทำงานของเว็บไซต์ ส่วนคุกกี้อื่นๆ คุณสามารถเลือกได้ว่าจะยอมรับหรือไม่', 'pdpa-consent'); ?></p>
            </div>
            
            <div class="pdpa-actions-xyz789">
                <button type=DGA_BUTTON_TYPE id="pdpa-accept-all-xyz789" class="pdpa-button-xyz789 pdpa-accept-xyz789" aria-label="<?php esc_attr_e('ยอมรับคุกกี้ทั้งหมด', 'pdpa-consent'); ?>">
                    <?php _e('ยอมรับทั้งหมด', 'pdpa-consent'); ?>
                </button>
                <button type=DGA_BUTTON_TYPE id="pdpa-reject-all-xyz789" class="pdpa-button-xyz789 pdpa-reject-xyz789" aria-label="<?php esc_attr_e('ปฏิเสธคุกกี้ที่ไม่จำเป็น', 'pdpa-consent'); ?>">
                    <?php _e('ปฏิเสธทั้งหมด', 'pdpa-consent'); ?>
                </button>
                <button type=DGA_BUTTON_TYPE id="pdpa-settings-button-xyz789" class="pdpa-button-xyz789 pdpa-settings-xyz789" aria-label="<?php esc_attr_e('ตั้งค่าคุกกี้', 'pdpa-consent'); ?>">
                    <?php _e('ตั้งค่า', 'pdpa-consent'); ?>
                </button>
            </div>
            
            <div id="pdpa-settings-panel-xyz789" class="pdpa-settings-panel-xyz789" style="display:none;" aria-hidden="true">
                <div class="pdpa-setting-item-xyz789">
                    <div class="pdpa-setting-info-xyz789">
                        <h4><?php _e('คุกกี้ที่จำเป็น', 'pdpa-consent'); ?></h4>
                        <p><?php _e('คุกกี้เหล่านี้มีความจำเป็นต่อการทำงานของเว็บไซต์ ไม่สามารถปิดการใช้งานได้', 'pdpa-consent'); ?></p>
                    </div>
                    <div class="pdpa-toggle-wrapper-xyz789">
                        <input type="checkbox" id="necessary-cookies-xyz789" class="pdpa-toggle-xyz789" checked disabled aria-label="<?php esc_attr_e('คุกกี้ที่จำเป็น (ไม่สามารถปิดได้)', 'pdpa-consent'); ?>">
                        <label for="necessary-cookies-xyz789" class="pdpa-toggle-label-xyz789"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-item-xyz789">
                    <div class="pdpa-setting-info-xyz789">
                        <h4><?php _e('คุกกี้เพื่อการวิเคราะห์', 'pdpa-consent'); ?></h4>
                        <p><?php _e('ช่วยให้เราเข้าใจวิธีการที่ผู้เข้าชมใช้งานเว็บไซต์ และปรับปรุงประสิทธิภาพการทำงาน', 'pdpa-consent'); ?></p>
                    </div>
                    <div class="pdpa-toggle-wrapper-xyz789">
                        <input type="checkbox" id="analytics-cookies-xyz789" class="pdpa-toggle-xyz789" aria-label="<?php esc_attr_e('คุกกี้เพื่อการวิเคราะห์', 'pdpa-consent'); ?>">
                        <label for="analytics-cookies-xyz789" class="pdpa-toggle-label-xyz789"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-item-xyz789">
                    <div class="pdpa-setting-info-xyz789">
                        <h4><?php _e('คุกกี้เพื่อการตลาด', 'pdpa-consent'); ?></h4>
                        <p><?php _e('ใช้เพื่อติดตามผู้เข้าชมในเว็บไซต์ต่างๆ เพื่อวัตถุประสงค์ในการโฆษณาที่เกี่ยวข้อง', 'pdpa-consent'); ?></p>
                    </div>
                    <div class="pdpa-toggle-wrapper-xyz789">
                        <input type="checkbox" id="marketing-cookies-xyz789" class="pdpa-toggle-xyz789" aria-label="<?php esc_attr_e('คุกกี้เพื่อการตลาด', 'pdpa-consent'); ?>">
                        <label for="marketing-cookies-xyz789" class="pdpa-toggle-label-xyz789"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-item-xyz789">
                    <div class="pdpa-setting-info-xyz789">
                        <h4><?php _e('คุกกี้เพื่อการใช้งานเว็บไซต์', 'pdpa-consent'); ?></h4>
                        <p><?php _e('ช่วยให้เว็บไซต์จดจำสิ่งที่คุณเลือกไว้ เช่น ชื่อผู้ใช้ ภาษา หรือรูปแบบการแสดงผล', 'pdpa-consent'); ?></p>
                    </div>
                    <div class="pdpa-toggle-wrapper-xyz789">
                        <input type="checkbox" id="functional-cookies-xyz789" class="pdpa-toggle-xyz789" aria-label="<?php esc_attr_e('คุกกี้เพื่อการใช้งานเว็บไซต์', 'pdpa-consent'); ?>">
                        <label for="functional-cookies-xyz789" class="pdpa-toggle-label-xyz789"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-actions-xyz789">
                    <button type=DGA_BUTTON_TYPE id="pdpa-save-settings-xyz789" class="pdpa-button-xyz789 pdpa-save-xyz789" aria-label="<?php esc_attr_e('บันทึกการตั้งค่าคุกกี้', 'pdpa-consent'); ?>">
                        <?php _e('บันทึกการตั้งค่า', 'pdpa-consent'); ?>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Reopen button -->
        <button type=DGA_BUTTON_TYPE id="pdpa-reopen-consent-xyz789" class="pdpa-reopen-button-xyz789" <?php echo $consent_given ? '' : 'style="display:none;"'; ?> aria-label="<?php esc_attr_e('ตั้งค่าความเป็นส่วนตัว', 'pdpa-consent'); ?>">
            <span class="pdpa-reopen-icon-xyz789" aria-hidden="true">🍪</span>
            <span class="pdpa-reopen-text-xyz789"><?php _e('ตั้งค่าความเป็นส่วนตัว', 'pdpa-consent'); ?></span>
        </button>

    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('pdpa_cookie_consent', 'pdpa_cookie_consent_shortcode_xyz789');

/**
 * ฟังก์ชั่นสำหรับจัดการ AJAX requests
 */
function pdpa_save_cookie_consent_xyz789() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'pdpa_cookie_consent_nonce_xyz789')) {
        wp_send_json_error(__('การตรวจสอบความปลอดภัยล้มเหลว', 'pdpa-consent'));
        die();
    }
    
    $consent_type = sanitize_text_field($_POST['consent_type']);
    $settings = isset($_POST['settings']) ? $_POST['settings'] : array();
    
    // กำหนดระยะเวลาของคุกกี้ (30 วัน)
    $expiry = time() + 30 * DAY_IN_SECONDS;
    $secure = is_ssl();
    $httponly = false; // ตั้งเป็น false เพื่อให้ JavaScript อ่านค่า cookie ได้
    $samesite = 'Lax'; // ป้องกัน CSRF attacks
    
    // Helper function to set cookie with SameSite
    function pdpa_set_cookie_xyz789($name, $value, $expiry, $secure, $httponly, $samesite = 'Lax') {
        $cookie_options = array(
            'expires' => $expiry,
            'path' => COOKIEPATH,
            'domain' => COOKIE_DOMAIN,
            'secure' => $secure,
            'httponly' => $httponly,
            'samesite' => $samesite
        );
        
        // PHP 7.3+ support for SameSite
        if (version_compare(PHP_VERSION, '7.3.0', '>=')) {
            setcookie($name, $value, $cookie_options);
        } else {
            // Fallback for older PHP versions
            setcookie($name, $value, $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        }
    }
    
    // จัดการตามการเลือกของผู้ใช้
    if ($consent_type === 'accept_all') {
        // ตั้งค่า cookie ทั้งหมด
        pdpa_set_cookie_xyz789('pdpa_necessary_cookies_xyz789', 'accepted', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_analytics_cookies_xyz789', 'accepted', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_marketing_cookies_xyz789', 'accepted', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_functional_cookies_xyz789', 'accepted', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_consent_given_xyz789', 'yes', $expiry, $secure, $httponly, $samesite);
        
        // บันทึกลงใน database (ถ้าต้องการ)
        do_action('pdpa_consent_saved', 'accept_all');
        
        // Log consent if user is logged in
        if (is_user_logged_in()) {
            update_user_meta(get_current_user_id(), 'pdpa_consent_type', 'accept_all');
            update_user_meta(get_current_user_id(), 'pdpa_consent_date', current_time('mysql'));
        }
        
        wp_send_json_success(__('บันทึกการตั้งค่าเรียบร้อยแล้ว - ยอมรับทั้งหมด', 'pdpa-consent'));
    } 
    elseif ($consent_type === 'reject_all') {
        // ตั้งค่าเฉพาะคุกกี้ที่จำเป็น แต่ปฏิเสธคุกกี้อื่นๆ
        pdpa_set_cookie_xyz789('pdpa_necessary_cookies_xyz789', 'accepted', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_analytics_cookies_xyz789', 'rejected', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_marketing_cookies_xyz789', 'rejected', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_functional_cookies_xyz789', 'rejected', $expiry, $secure, $httponly, $samesite);
        pdpa_set_cookie_xyz789('pdpa_consent_given_xyz789', 'yes', $expiry, $secure, $httponly, $samesite);
        
        // ลบคุกกี้ที่อาจมีอยู่แล้ว
        pdpa_remove_existing_cookies_xyz789();
        
        do_action('pdpa_consent_saved', 'reject_all');
        
        // Log consent if user is logged in
        if (is_user_logged_in()) {
            update_user_meta(get_current_user_id(), 'pdpa_consent_type', 'reject_all');
            update_user_meta(get_current_user_id(), 'pdpa_consent_date', current_time('mysql'));
        }
        
        wp_send_json_success(__('บันทึกการตั้งค่าเรียบร้อยแล้ว - ปฏิเสธทั้งหมด (ยกเว้นคุกกี้ที่จำเป็น)', 'pdpa-consent'));
    } 
    elseif ($consent_type === 'custom_settings') {
        // ตั้งค่าตามการเลือกของผู้ใช้
        pdpa_set_cookie_xyz789('pdpa_necessary_cookies_xyz789', 'accepted', $expiry, $secure, $httponly, $samesite);
        
        $analytics = isset($settings['analytics']) && $settings['analytics'] === 'true' ? 'accepted' : 'rejected';
        pdpa_set_cookie_xyz789('pdpa_analytics_cookies_xyz789', $analytics, $expiry, $secure, $httponly, $samesite);
        
        $marketing = isset($settings['marketing']) && $settings['marketing'] === 'true' ? 'accepted' : 'rejected';
        pdpa_set_cookie_xyz789('pdpa_marketing_cookies_xyz789', $marketing, $expiry, $secure, $httponly, $samesite);
        
        $functional = isset($settings['functional']) && $settings['functional'] === 'true' ? 'accepted' : 'rejected';
        pdpa_set_cookie_xyz789('pdpa_functional_cookies_xyz789', $functional, $expiry, $secure, $httponly, $samesite);
        
        pdpa_set_cookie_xyz789('pdpa_consent_given_xyz789', 'yes', $expiry, $secure, $httponly, $samesite);
        
        // ลบคุกกี้ที่ถูกปฏิเสธ
        if ($analytics === 'rejected' || $marketing === 'rejected' || $functional === 'rejected') {
            pdpa_remove_existing_cookies_xyz789($analytics, $marketing, $functional);
        }
        
        do_action('pdpa_consent_saved', 'custom', $settings);
        
        // Log consent if user is logged in
        if (is_user_logged_in()) {
            update_user_meta(get_current_user_id(), 'pdpa_consent_type', 'custom');
            update_user_meta(get_current_user_id(), 'pdpa_consent_settings', $settings);
            update_user_meta(get_current_user_id(), 'pdpa_consent_date', current_time('mysql'));
        }
        
        wp_send_json_success(__('บันทึกการตั้งค่าตามที่กำหนดเรียบร้อยแล้ว', 'pdpa-consent'));
    }
    
    wp_send_json_error(__('ไม่สามารถบันทึกการตั้งค่าได้', 'pdpa-consent'));
    die();
}
add_action('wp_ajax_pdpa_save_cookie_consent', 'pdpa_save_cookie_consent_xyz789');
add_action('wp_ajax_nopriv_pdpa_save_cookie_consent', 'pdpa_save_cookie_consent_xyz789');

/**
 * ฟังก์ชั่นลบคุกกี้ที่มีอยู่ตามประเภท
 */
function pdpa_remove_existing_cookies_xyz789($analytics = 'rejected', $marketing = 'rejected', $functional = 'rejected') {
    $cookies_to_remove = array();
    
    // Analytics cookies
    if ($analytics === 'rejected') {
        $cookies_to_remove = array_merge($cookies_to_remove, array(
            '_ga', '_gid', '_gat', '_gat_gtag_*', 
            '_gac_*', '__utma', '__utmt', '__utmb', 
            '__utmc', '__utmz', '__utmv'
        ));
    }
    
    // Marketing cookies
    if ($marketing === 'rejected') {
        $cookies_to_remove = array_merge($cookies_to_remove, array(
            '_fbp', '_fbc', 'fr', 'tr',
            'IDE', 'DSID', '__gads', '__gpi',
            'PREF', 'VISITOR_INFO1_LIVE', 'YSC'
        ));
    }
    
    // Functional cookies - be careful with these
    if ($functional === 'rejected') {
        $cookies_to_remove = array_merge($cookies_to_remove, array(
            // Add functional cookies here if needed
            // But be careful not to break site functionality
        ));
    }
    
    // Remove cookies
    foreach ($cookies_to_remove as $cookie_pattern) {
        // Handle wildcard patterns
        if (strpos($cookie_pattern, '*') !== false) {
            $pattern = str_replace('*', '', $cookie_pattern);
            foreach ($_COOKIE as $name => $value) {
                if (strpos($name, $pattern) === 0) {
                    setcookie($name, '', time() - 3600, '/', COOKIE_DOMAIN);
                    unset($_COOKIE[$name]);
                }
            }
        } else {
            // Direct cookie removal
            if (isset($_COOKIE[$cookie_pattern])) {
                setcookie($cookie_pattern, '', time() - 3600, '/', COOKIE_DOMAIN);
                unset($_COOKIE[$cookie_pattern]);
            }
        }
    }
    
    // เปิดให้ส่วนอื่นๆ สามารถลบคุกกี้เพิ่มเติมได้
    do_action('pdpa_remove_cookies', $cookies_to_remove);
}

/**
 * ฟังก์ชั่นตรวจสอบการยินยอม cookie สำหรับใช้ในเทมเพลต
 */
function pdpa_is_cookie_accepted_xyz789($cookie_type) {
    $cookie_name = 'pdpa_' . $cookie_type . '_cookies_xyz789';
    
    if (!isset($_COOKIE['pdpa_consent_given_xyz789']) || $_COOKIE['pdpa_consent_given_xyz789'] !== 'yes') {
        return false;
    }
    
    if ($cookie_type === 'necessary') {
        return true; // คุกกี้ที่จำเป็นได้รับการยอมรับเสมอ
    }
    
    return isset($_COOKIE[$cookie_name]) && $_COOKIE[$cookie_name] === 'accepted';
}

/**
 * ฟังก์ชั่นสำหรับเพิ่ม script ที่ต้องการการยินยอม
 */
function pdpa_add_consent_script_xyz789($cookie_type, $script_content) {
    if (pdpa_is_cookie_accepted_xyz789($cookie_type)) {
        echo $script_content;
    }
}

/**
 * โค้ดสำหรับเพิ่ม Shortcode ให้กับ Widget
 */
function pdpa_register_widget_shortcode_xyz789() {
    add_filter('widget_text', 'do_shortcode');
}
add_action('init', 'pdpa_register_widget_shortcode_xyz789');

/**
 * Register text domain for translations
 */
function pdpa_load_textdomain_xyz789() {
    load_plugin_textdomain('pdpa-consent', false, dirname(plugin_basename(__FILE__)) . '/languages');
}
add_action('plugins_loaded', 'pdpa_load_textdomain_xyz789');

/**
 * Add body class when PDPA is active
 */
function pdpa_body_class_xyz789($classes) {
    if (!isset($_COOKIE['pdpa_consent_given_xyz789']) || $_COOKIE['pdpa_consent_given_xyz789'] !== 'yes') {
        $classes[] = 'pdpa-not-consented';
    } else {
        $classes[] = 'pdpa-consented';
    }
    return $classes;
}
add_filter('body_class', 'pdpa_body_class_xyz789');

/**
 * Helper function to check if any tracking is allowed
 */
function pdpa_can_track_xyz789() {
    return pdpa_is_cookie_accepted_xyz789('analytics') || 
           pdpa_is_cookie_accepted_xyz789('marketing');
}

/**
 * Helper function to get all consent statuses
 */
function pdpa_get_consent_status_xyz789() {
    return array(
        'given' => isset($_COOKIE['pdpa_consent_given_xyz789']) && $_COOKIE['pdpa_consent_given_xyz789'] === 'yes',
        'necessary' => pdpa_is_cookie_accepted_xyz789('necessary'),
        'analytics' => pdpa_is_cookie_accepted_xyz789('analytics'),
        'marketing' => pdpa_is_cookie_accepted_xyz789('marketing'),
        'functional' => pdpa_is_cookie_accepted_xyz789('functional')
    );
}




/****** ฟังก์ชั่นแก้ไข Post - WordPress Native Version ******/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main shortcode handler
 */
function fpe_shortcode_handler_vkj785() {
    // Check permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        return '';
    }
    
    $post_id = get_the_ID();
    if (!$post_id) {
        return '';
    }
    
    // Enqueue assets
    fpe_enqueue_assets_vkj785($post_id);
    
    // Generate HTML
    return fpe_generate_editor_html_vkj785($post_id);
}
add_shortcode('frontend_post_editor', 'fpe_shortcode_handler_vkj785');

/**
 * Enqueue required assets
 */
function fpe_enqueue_assets_vkj785($post_id) {
    // Core WordPress dependencies
    wp_enqueue_media();
    wp_enqueue_editor();
    
    // Custom styles
    wp_enqueue_style(
        'fpe-styles-vkj785',
        get_stylesheet_directory_uri() . '/css/fpe-editor.css',
        array(),
        '2.0.0'
    );
    
    // Custom scripts
    wp_enqueue_script(
        'fpe-script-vkj785',
        get_stylesheet_directory_uri() . '/js/fpe-editor.js',
        array(DGA_JQUERY_HANDLE, 'wp-editor'),
        '2.0.0',
        true
    );
    
    // Localize script
    wp_localize_script('fpe-script-vkj785', 'fpeConfig', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        'postId' => $post_id,
        DGA_NONCE_KEY => wp_create_nonce('fpe_nonce_vkj785'),
        'editorSettings' => fpe_get_editor_settings_vkj785(),
        'strings' => array(
            'saving' => __('กำลังบันทึก...', DGA_TEXT_DOMAIN),
            'saved' => __('บันทึกแล้ว', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'confirmDelete' => __('ยืนยันการลบ?', DGA_TEXT_DOMAIN),
        ),
        'currentContent' => get_post_meta($post_id, 'at_content', true),
    ));
}

/**
 * Get optimized editor settings
 */
function fpe_get_editor_settings_vkj785() {
    return array(
        'tinymce' => array(
            'toolbar1' => 'formatselect,bold,italic,underline,strikethrough,forecolor,backcolor,|,alignleft,aligncenter,alignright,|,bullist,numlist,outdent,indent,|,link,unlink,|,wp_adv',
            'toolbar2' => 'fontsizeselect,removeformat,|,media,|,fullscreen',
            'plugins' => 'lists,media,paste,link,textcolor,fullscreen,wordpress,wplink',
            'wpautop' => true,
            'height' => 400,
        ),
        'quicktags' => true,
        'mediaButtons' => true,
    );
}

/**
 * Generate editor HTML
 */
function fpe_generate_editor_html_vkj785($post_id) {
    $post = get_post($post_id);
    $at_content = get_post_meta($post_id, 'at_content', true);
    $at_files = get_post_meta($post_id, 'at_file_standard', true) ?: array();
    
    ob_start();
    ?>
    <div class="fpe-container-vkj785">
        <!-- Edit Button -->
        <button type=DGA_BUTTON_TYPE class="fpe-edit-btn-vkj785" data-post-id="<?php echo esc_attr($post_id); ?>" aria-label="<?php esc_attr_e('แก้ไขโพสต์', DGA_TEXT_DOMAIN); ?>">
            <span class="dashicons dashicons-edit"></span>
        </button>
        
        <!-- Editor Modal -->
        <div id="fpe-modal-<?php echo esc_attr($post_id); ?>" class="fpe-modal-vkj785" style="display:none;" role="dialog" aria-labelledby="fpe-title-<?php echo esc_attr($post_id); ?>">
            <div class="fpe-modal-content-vkj785">
                <div class="fpe-modal-header-vkj785">
                    <h2 id="fpe-title-<?php echo esc_attr($post_id); ?>"><?php esc_html_e('แก้ไขโพสต์', DGA_TEXT_DOMAIN); ?></h2>
                    <button type=DGA_BUTTON_TYPE class="fpe-close-vkj785" aria-label="<?php esc_attr_e('ปิด', DGA_TEXT_DOMAIN); ?>">&times;</button>
                </div>
                
                <form id="fpe-form-<?php echo esc_attr($post_id); ?>" class="fpe-form-vkj785">
                    <input type="hidden" name="post_id" value="<?php echo esc_attr($post_id); ?>">
                    
                    <!-- Post Title -->
                    <div class="fpe-field-vkj785">
                        <label for="fpe-title-input-<?php echo esc_attr($post_id); ?>"><?php esc_html_e('หัวข้อ:', DGA_TEXT_DOMAIN); ?></label>
                        <input type="text" id="fpe-title-input-<?php echo esc_attr($post_id); ?>" name="post_title" value="<?php echo esc_attr($post->post_title); ?>" required>
                    </div>
                    
                    <!-- Categories -->
                    <?php 
                    $categories = get_categories(array(DGA_HIDE_EMPTY_FIELD => false));
                    if (!empty($categories)) : 
                        $current_cats = wp_get_post_categories($post_id);
                    ?>
                    <div class="fpe-field-vkj785">
                        <label for="fpe-categories-<?php echo esc_attr($post_id); ?>"><?php esc_html_e('หมวดหมู่:', DGA_TEXT_DOMAIN); ?></label>
                        <select id="fpe-categories-<?php echo esc_attr($post_id); ?>" name="categories[]" multiple class="fpe-select-vkj785">
                            <?php foreach ($categories as $cat) : ?>
                                <option value="<?php echo esc_attr($cat->term_id); ?>" <?php echo in_array($cat->term_id, $current_cats) ? 'selected' : ''; ?>>
                                    <?php echo esc_html($cat->name); ?>
                                </option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    <?php endif; ?>
                    
                    <!-- Content Editor -->
                    <div class="fpe-field-vkj785">
                        <label for="fpe-content-<?php echo esc_attr($post_id); ?>"><?php esc_html_e('เนื้อหา:', DGA_TEXT_DOMAIN); ?></label>
                        <div id="fpe-editor-container-<?php echo esc_attr($post_id); ?>" class="fpe-editor-container-vkj785">
                            <textarea id="fpe-content-<?php echo esc_attr($post_id); ?>" name="at_content" class="fpe-content-vkj785"><?php echo esc_textarea($at_content); ?></textarea>
                        </div>
                    </div>
                    
                    <!-- File Attachments -->
                    <div class="fpe-field-vkj785">
                        <label><?php esc_html_e('ไฟล์แนบ:', DGA_TEXT_DOMAIN); ?></label>
                        <div id="fpe-files-<?php echo esc_attr($post_id); ?>" class="fpe-files-container-vkj785">
                            <?php 
                            if (is_array($at_files) && !empty($at_files)) {
                                foreach ($at_files as $index => $file) {
                                    echo fpe_generate_file_row_vkj785($index, $file);
                                }
                            } else {
                                echo fpe_generate_file_row_vkj785(0, array());
                            }
                            ?>
                        </div>
                        <button type=DGA_BUTTON_TYPE class="fpe-add-file-vkj785"><?php esc_html_e('+ เพิ่มไฟล์', DGA_TEXT_DOMAIN); ?></button>
                    </div>
                    
                    <!-- Actions -->
                    <div class="fpe-actions-vkj785">
                        <button type=DGA_SUBMIT_TYPE class="fpe-save-vkj785"><?php esc_html_e('บันทึก', DGA_TEXT_DOMAIN); ?></button>
                        <button type=DGA_BUTTON_TYPE class="fpe-delete-vkj785"><?php esc_html_e('ลบโพสต์', DGA_TEXT_DOMAIN); ?></button>
                        <button type=DGA_BUTTON_TYPE class="fpe-cancel-vkj785"><?php esc_html_e('ยกเลิก', DGA_TEXT_DOMAIN); ?></button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

/**
 * Generate file row HTML
 */
function fpe_generate_file_row_vkj785($index, $file) {
    $file_name = isset($file['at_rp_file_name']) ? $file['at_rp_file_name'] : '';
    $file_date = isset($file['at_rp_file_create']) ? $file['at_rp_file_create'] : current_time(DGA_DATE_FORMAT_SHORT);
    $file_link = isset($file['at_rp_file_link']) ? $file['at_rp_file_link'] : '';
    
    ob_start();
    ?>
    <div class="fpe-file-row-vkj785" data-index="<?php echo esc_attr($index); ?>">
        <input type="text" name="at_file_standard[<?php echo esc_attr($index); ?>][at_rp_file_name]" 
               placeholder="<?php esc_attr_e('ชื่อไฟล์', DGA_TEXT_DOMAIN); ?>" 
               value="<?php echo esc_attr($file_name); ?>">
        <input type="text" name="at_file_standard[<?php echo esc_attr($index); ?>][at_rp_file_create]" 
               placeholder="<?php esc_attr_e('วันที่', DGA_TEXT_DOMAIN); ?>" 
               value="<?php echo esc_attr($file_date); ?>">
        <input type="hidden" name="at_file_standard[<?php echo esc_attr($index); ?>][at_rp_file_link]" 
               class="fpe-file-url-vkj785" value="<?php echo esc_attr($file_link); ?>">
        <button type=DGA_BUTTON_TYPE class="fpe-upload-file-vkj785"><?php esc_html_e('อัพโหลด', DGA_TEXT_DOMAIN); ?></button>
        <button type=DGA_BUTTON_TYPE class="fpe-remove-file-vkj785"><?php esc_html_e('ลบ', DGA_TEXT_DOMAIN); ?></button>
    </div>
    <?php
    return ob_get_clean();
}

/**
 * AJAX handler for saving post
 */
function fpe_ajax_save_vkj785() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'fpe_nonce_vkj785')) {
        wp_send_json_error(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }
    
    // Check permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(__(DGA_PERMISSION_DENIED_MESSAGE, DGA_TEXT_DOMAIN));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    
    // Update post title
    if (isset($_POST['post_title'])) {
        wp_update_post(array(
            'ID' => $post_id,
            'post_title' => sanitize_text_field($_POST['post_title']),
            DGA_POST_STATUS_FIELD => 'pending',
        ));
    }
    
    // Update categories
    if (isset($_POST['categories'])) {
        $categories = array_map('intval', $_POST['categories']);
        wp_set_post_categories($post_id, $categories);
    }
    
    // Update content
    if (isset($_POST['at_content'])) {
        update_post_meta($post_id, 'at_content', wp_kses_post($_POST['at_content']));
    }
    
    // Update files
    if (isset($_POST['at_file_standard'])) {
        $files = array();
        foreach ($_POST['at_file_standard'] as $file) {
            if (!empty($file['at_rp_file_name']) || !empty($file['at_rp_file_link'])) {
                $files[] = array(
                    'at_rp_file_name' => sanitize_text_field($file['at_rp_file_name']),
                    'at_rp_file_create' => sanitize_text_field($file['at_rp_file_create']),
                    'at_rp_file_link' => esc_url_raw($file['at_rp_file_link']),
                );
            }
        }
        update_post_meta($post_id, 'at_file_standard', $files);
    }
    
    // Track edit
    update_post_meta($post_id, 'last_edited_by', get_current_user_id());
    update_post_meta($post_id, 'last_edited_time', current_time('mysql'));
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('บันทึกเรียบร้อย', DGA_TEXT_DOMAIN),
        'redirect' => get_permalink($post_id),
    ));
}
add_action('wp_ajax_fpe_save', 'fpe_ajax_save_vkj785');

/**
 * AJAX handler for deleting post
 */
function fpe_ajax_delete_vkj785() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'fpe_nonce_vkj785')) {
        wp_send_json_error(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }
    
    // Check permissions
    if (!current_user_can('delete_posts')) {
        wp_send_json_error(__(DGA_PERMISSION_DENIED_MESSAGE, DGA_TEXT_DOMAIN));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    
    if (wp_delete_post($post_id, true)) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('ลบโพสต์เรียบร้อย', DGA_TEXT_DOMAIN),
            'redirect' => home_url(),
        ));
    }
    
    wp_send_json_error(__('ไม่สามารถลบโพสต์ได้', DGA_TEXT_DOMAIN));
}
add_action('wp_ajax_fpe_delete', 'fpe_ajax_delete_vkj785');









/***** แสดงตารางไฟล์ในโพสพร้อม PDF Preview และการเข้ารหัสลิงก์ *******/

// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main Class สำหรับจัดการ Table Files
 */
class Table_Files_Pro_ABC123 {
    
    private static $instance = null;
    private $version = '2.1.0';
    
    /**
     * Get singleton instance
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor
     */
    private function __construct() {
        // Register shortcode
        add_shortcode('table_files', array($this, 'render_shortcode'));
        
        // Register AJAX handlers  
        add_action('wp_ajax_secure_file_download_abc123', array($this, 'handle_secure_download'));
        add_action('wp_ajax_nopriv_secure_file_download_abc123', array($this, 'handle_secure_download'));
        
        add_action('wp_ajax_secure_pdf_preview_abc123', array($this, 'handle_pdf_preview'));
        add_action('wp_ajax_nopriv_secure_pdf_preview_abc123', array($this, 'handle_pdf_preview'));
        
        // Enqueue scripts for Elementor
        add_action(DGA_ENQUEUE_SCRIPTS_HOOK, array($this, 'enqueue_assets'));
        add_action('elementor/frontend/after_enqueue_scripts', array($this, 'enqueue_assets'));
        
        // For Elementor Editor
        add_action('elementor/editor/after_enqueue_scripts', array($this, 'enqueue_assets'));
    }
    
    /**
     * Enqueue scripts and styles
     */
    public function enqueue_assets() {
        // Always enqueue in Elementor context
        $should_enqueue = false;
        
        // Check if in Elementor editor
        if (class_exists('\Elementor\Plugin')) {
            if (\Elementor\Plugin::$instance->preview->is_preview_mode() || \Elementor\Plugin::$instance->editor->is_edit_mode()) {
                $should_enqueue = true;
            }
        }
        
        // Check if shortcode exists in content
        global $post;
        if ($post && has_shortcode($post->post_content, 'table_files')) {
            $should_enqueue = true;
        }
        
        // Check if in single post template
        if (is_singular()) {
            $should_enqueue = true;
        }
        
        if ($should_enqueue) {
            // Enqueue CSS
            wp_enqueue_style(
                'table-files-pro-style-abc123',
                get_stylesheet_directory_uri() . '/css/table-files-pro.css',
                array(),
                $this->version
            );
            
            // Enqueue JavaScript
            wp_enqueue_script(
                'table-files-pro-script-abc123',
                get_stylesheet_directory_uri() . '/js/table-files-pro.js',
                array(),
                $this->version,
                true
            );
            
            // Localize script
            wp_localize_script('table-files-pro-script-abc123', 'tableFilesAjax', array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('table_files_nonce_abc123'),
                'strings' => array(
                    'loading' => __('กำลังโหลด...', DGA_TEXT_DOMAIN),
                    DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, DGA_TEXT_DOMAIN),
                    'noFiles' => __('ไม่มีไฟล์แนบ', DGA_TEXT_DOMAIN),
                    'download' => __('ดาวน์โหลด', DGA_TEXT_DOMAIN),
                    'preview' => __('ดูตัวอย่าง', DGA_TEXT_DOMAIN),
                    'close' => __('ปิด', DGA_TEXT_DOMAIN),
                    'newBadge' => __('ใหม่', DGA_TEXT_DOMAIN),
                    'externalLink' => __('ลิงก์ภายนอก', DGA_TEXT_DOMAIN),
                    'searchPlaceholder' => __('ค้นหาไฟล์...', DGA_TEXT_DOMAIN),
                    'fileCount' => __('ไฟล์ทั้งหมด', DGA_TEXT_DOMAIN)
                )
            ));
        }
    }
    
    /**
     * Encrypt file URL
     */
    private function encrypt_file_url($url, $type = 'download') {
        if (empty($url)) return '';
        
        $nonce = wp_create_nonce('secure_file_' . md5($url));
        $encrypted = base64_encode($url);
        
        $action = ($type === 'preview') ? 'secure_pdf_preview_abc123' : 'secure_file_download_abc123';
        
        return add_query_arg(array(
            'action' => $action,
            'file' => $encrypted,
            DGA_NONCE_KEY => $nonce
        ), admin_url(DGA_ADMIN_AJAX_URL));
    }
    
    /**
     * Handle secure download
     */
    public function handle_secure_download() {
        // Check nonce
        if (!isset($_GET['nonce']) || !isset($_GET['file'])) {
            wp_die(__('Invalid request', DGA_TEXT_DOMAIN));
        }
        
        $file_url = base64_decode($_GET['file']);
        
        if (!wp_verify_nonce($_GET['nonce'], 'secure_file_' . md5($file_url))) {
            wp_die(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
        }
        
        // Validate URL
        if (!filter_var($file_url, FILTER_VALIDATE_URL)) {
            wp_die(__('Invalid URL', DGA_TEXT_DOMAIN));
        }
        
        // Check if internal URL
        $upload_dir = wp_upload_dir();
        if (strpos($file_url, $upload_dir['baseurl']) !== 0 && strpos($file_url, site_url()) !== 0) {
            wp_die(__('External file access denied', DGA_TEXT_DOMAIN));
        }
        
        // Serve file
        $this->serve_file($file_url, 'attachment');
    }
    
    /**
     * Handle PDF preview
     */
    public function handle_pdf_preview() {
        // Check nonce
        if (!isset($_GET['nonce']) || !isset($_GET['file'])) {
            wp_die(__('Invalid request', DGA_TEXT_DOMAIN));
        }
        
        $file_url = base64_decode($_GET['file']);
        
        if (!wp_verify_nonce($_GET['nonce'], 'secure_file_' . md5($file_url))) {
            wp_die(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
        }
        
        // Check if PDF
        if (strtolower(pathinfo($file_url, PATHINFO_EXTENSION)) !== 'pdf') {
            wp_die(__('Not a PDF file', DGA_TEXT_DOMAIN));
        }
        
        $this->serve_file($file_url, 'inline');
    }
    
    /**
     * Serve file
     */
    private function serve_file($file_url, $disposition = 'attachment') {
        $upload_dir = wp_upload_dir();
        $file_path = '';
        
        // Try local file
        if (strpos($file_url, $upload_dir['baseurl']) === 0) {
            $file_path = str_replace($upload_dir['baseurl'], $upload_dir['basedir'], $file_url);
        }
        
        if ($file_path && file_exists($file_path)) {
            $file_size = filesize($file_path);
            $mime_type = mime_content_type($file_path);
            $file_name = basename($file_path);
            
            // Clean buffer
            while (ob_get_level()) {
                ob_end_clean();
            }
            
            // Send headers
            header('Content-Type: ' . $mime_type);
            header('Content-Disposition: ' . $disposition . '; filename="' . $file_name . '"');
            header('Content-Length: ' . $file_size);
            header('Cache-Control: private, max-age=3600');
            
            readfile($file_path);
            exit;
        } else {
            // Remote file
            $response = wp_remote_get($file_url, array('timeout' => 60));
            
            if (is_wp_error($response)) {
                wp_die($response->get_error_message());
            }
            
            $body = wp_remote_retrieve_body($response);
            $content_type = wp_remote_retrieve_header($response, 'content-type') ?: 'application/octet-stream';
            
            header('Content-Type: ' . $content_type);
            header('Content-Disposition: ' . $disposition . '; filename="' . basename($file_url) . '"');
            header('Content-Length: ' . strlen($body));
            
            echo $body;
            exit;
        }
    }
    
    /**
     * Check if external URL
     */
    private function is_external_url($url) {
        if (empty($url)) return false;
        
        $site_host = wp_parse_url(site_url(), PHP_URL_HOST);
        $url_host = wp_parse_url($url, PHP_URL_HOST);
        
        return $site_host !== $url_host;
    }
    
    /**
     * Get file icon class
     */
    private function get_file_icon($extension) {
        $icons = array(
            'pdf' => 'pdf',
            'doc' => 'word', 
            'docx' => 'word',
            'xls' => 'excel',
            'xlsx' => 'excel',
            'zip' => 'archive',
            'jpg' => 'image',
            'png' => 'image',
            'mp4' => 'video'
        );
        
        return isset($icons[$extension]) ? $icons[$extension] : 'file';
    }
    
    /**
     * Render shortcode
     */
    public function render_shortcode($atts) {
        // Default attributes
        $atts = shortcode_atts(array(
            DGA_POST_ID_FIELD => get_the_ID(),
            'show_search' => 'yes',
            'show_preview' => 'yes',
            'layout' => 'auto' // auto, table, cards
        ), $atts);
        
        $post_id = intval($atts[DGA_POST_ID_FIELD]);
        
        // Get file data
        $at_file_standard = get_post_meta($post_id, 'at_file_standard', true);
        
        if (!is_array($at_file_standard) || empty($at_file_standard)) {
            return $this->render_empty_state();
        }
        
        // Process files
        $files = array();
        foreach ($at_file_standard as $file) {
            $file_name = sanitize_text_field($file['at_rp_file_name'] ?? '');
            $file_create = sanitize_text_field($file['at_rp_file_create'] ?? '');
            $file_link = esc_url_raw($file['at_rp_file_link'] ?? '');
            
            if (empty($file_name) && empty($file_link)) {
                continue;
            }
            
            $is_external = $this->is_external_url($file_link);
            $extension = strtolower(pathinfo($file_link, PATHINFO_EXTENSION));
            $is_pdf = ($extension === 'pdf');
            
            // Check if new (7 days)
            $is_new = false;
            if (!empty($file_create)) {
                $parts = explode('/', $file_create);
                if (count($parts) === 3) {
                    $file_time = strtotime($parts[2] . '-' . $parts[1] . '-' . $parts[0]);
                    $is_new = (time() - $file_time) < (7 * 24 * 60 * 60);
                }
            }
            
            $files[] = array(
                DGA_NAME_FIELD => $file_name,
                'date' => $file_create,
                'url' => $file_link,
                'encrypted_url' => !$is_external ? $this->encrypt_file_url($file_link) : $file_link,
                'preview_url' => $is_pdf && !$is_external ? $this->encrypt_file_url($file_link, 'preview') : '',
                'is_external' => $is_external,
                'is_pdf' => $is_pdf,
                'is_new' => $is_new,
                'extension' => $extension,
                'icon' => $this->get_file_icon($extension)
            );
        }
        
        // Start output
        ob_start();
        ?>
        <div class="table-files-wrapper-abc123" 
             data-layout="<?php echo esc_attr($atts['layout']); ?>"
             data-show-search="<?php echo esc_attr($atts['show_search']); ?>"
             data-show-preview="<?php echo esc_attr($atts['show_preview']); ?>">
            
            <!-- PDF Preview Modal -->
            <div class="tf-modal-abc123" id="pdfPreviewModal" aria-hidden="true">
                <div class="tf-modal-overlay-abc123"></div>
                <div class="tf-modal-content-abc123">
                    <div class="tf-modal-header-abc123">
                        <h3 class="tf-modal-title-abc123">
                            <span class="tf-icon-pdf-abc123"></span>
                            <span class="pdf-filename"></span>
                        </h3>
                        <button class="tf-modal-close-abc123" aria-label="<?php esc_attr_e('ปิด', DGA_TEXT_DOMAIN); ?>">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="tf-modal-body-abc123">
                        <div class="tf-loading-abc123">
                            <div class="tf-spinner-abc123"></div>
                            <p><?php esc_html_e('กำลังโหลด...', DGA_TEXT_DOMAIN); ?></p>
                        </div>
                        <iframe class="tf-pdf-frame-abc123" title="PDF Preview"></iframe>
                    </div>
                    <div class="tf-modal-footer-abc123">
                        <a href="#" class="tf-btn-primary-abc123 pdf-download-link" target="_blank">
                            <span class="tf-icon-download-abc123"></span>
                            <?php esc_html_e('ดาวน์โหลดไฟล์', DGA_TEXT_DOMAIN); ?>
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- Main Container -->
            <div class="tf-container-abc123">
                
                <!-- Header -->
                <?php if ($atts['show_search'] === 'yes') : ?>
                <div class="tf-header-abc123">
                    <div class="tf-title-section-abc123">
                        <h3 class="tf-title-abc123">
                            <?php esc_html_e('เอกสารแนบ', DGA_TEXT_DOMAIN); ?>
                            <span class="tf-badge-count-abc123"><?php echo count($files); ?></span>
                        </h3>
                    </div>
                    <div class="tf-controls-abc123">
                        <div class="tf-search-abc123">
                            <input type="text" 
                                   class="tf-search-input-abc123" 
                                   placeholder="<?php esc_attr_e('ค้นหาไฟล์...', DGA_TEXT_DOMAIN); ?>">
                            <span class="tf-search-icon-abc123"></span>
                        </div>
                        <button class="tf-view-toggle-abc123" aria-label="เปลี่ยนมุมมอง">
                            <span class="tf-toggle-icon-abc123"></span>
                        </button>
                    </div>
                </div>
                <?php endif; ?>
                
                <!-- Desktop Table View -->
                <div class="tf-table-wrapper-abc123">
                    <table class="tf-table-abc123">
                        <thead>
                            <tr>
                                <th class="tf-col-name-abc123" data-sort="name">
                                    ชื่อไฟล์ <span class="tf-sort-icon-abc123"></span>
                                </th>
                                <th class="tf-col-date-abc123" data-sort="date">
                                    วันที่นำเข้า <span class="tf-sort-icon-abc123"></span>
                                </th>
                                <th class="tf-col-actions-abc123">ดำเนินการ</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($files as $file) : ?>
                            <tr class="tf-row-abc123" data-filename="<?php echo esc_attr($file['name']); ?>">
                                <td class="tf-col-name-abc123">
                                    <div class="tf-file-info-abc123">
                                        <span class="tf-file-icon-abc123 tf-icon-<?php echo esc_attr($file['icon']); ?>"></span>
                                        <div class="tf-file-details-abc123">
                                            <span class="tf-filename-abc123"><?php echo esc_html($file['name']); ?></span>
                                            <?php if ($file['is_new']) : ?>
                                            <span class="tf-badge-new-abc123">ใหม่</span>
                                            <?php endif; ?>
                                            <span class="tf-file-ext-abc123">.<?php echo esc_html($file['extension']); ?></span>
                                        </div>
                                    </div>
                                </td>
                                <td class="tf-col-date-abc123" data-date="<?php echo esc_attr($file['date']); ?>">
                                    <?php echo esc_html($file['date']); ?>
                                </td>
                                <td class="tf-col-actions-abc123">
                                    <div class="tf-actions-abc123">
                                        <?php if ($file['is_pdf'] && !$file['is_external'] && $atts['show_preview'] === 'yes') : ?>
                                        <button class="tf-btn-preview-abc123" 
                                                data-url="<?php echo esc_attr($file['preview_url']); ?>"
                                                data-filename="<?php echo esc_attr($file['name']); ?>"
                                                data-download="<?php echo esc_attr($file['encrypted_url']); ?>">
                                            <span class="tf-icon-eye-abc123"></span>
                                            <span class="tf-btn-text-abc123">ดูตัวอย่าง</span>
                                        </button>
                                        <?php endif; ?>
                                        
                                        <a href="<?php echo esc_url($file['encrypted_url']); ?>" 
                                           class="tf-btn-download-abc123 <?php echo $file['is_external'] ? 'tf-external' : ''; ?>"
                                           target="_blank">
                                            <span class="<?php echo $file['is_external'] ? 'tf-icon-external-abc123' : 'tf-icon-download-abc123'; ?>"></span>
                                            <span class="tf-btn-text-abc123">
                                                <?php echo $file['is_external'] ? 'ลิงก์ภายนอก' : 'ดาวน์โหลด'; ?>
                                            </span>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </div>
                
                <!-- Mobile Card View -->
                <div class="tf-cards-wrapper-abc123">
                    <?php foreach ($files as $file) : ?>
                    <div class="tf-card-abc123" data-filename="<?php echo esc_attr($file['name']); ?>">
                        <div class="tf-card-header-abc123">
                            <span class="tf-file-icon-abc123 tf-icon-<?php echo esc_attr($file['icon']); ?>"></span>
                            <?php if ($file['is_new']) : ?>
                            <span class="tf-badge-new-abc123">ใหม่</span>
                            <?php endif; ?>
                        </div>
                        <div class="tf-card-body-abc123">
                            <h4 class="tf-card-title-abc123"><?php echo esc_html($file['name']); ?></h4>
                            <div class="tf-card-meta-abc123">
                                <span class="tf-meta-item-abc123">
                                    <span class="tf-icon-calendar-abc123"></span>
                                    <?php echo esc_html($file['date']); ?>
                                </span>
                                <span class="tf-meta-item-abc123">
                                    <span class="tf-icon-file-abc123"></span>
                                    .<?php echo esc_html($file['extension']); ?>
                                </span>
                            </div>
                        </div>
                        <div class="tf-card-footer-abc123">
                            <?php if ($file['is_pdf'] && !$file['is_external'] && $atts['show_preview'] === 'yes') : ?>
                            <button class="tf-btn-preview-abc123 tf-btn-block-abc123" 
                                    data-url="<?php echo esc_attr($file['preview_url']); ?>"
                                    data-filename="<?php echo esc_attr($file['name']); ?>"
                                    data-download="<?php echo esc_attr($file['encrypted_url']); ?>">
                                <span class="tf-icon-eye-abc123"></span>
                                ดูตัวอย่าง
                            </button>
                            <?php endif; ?>
                            
                            <a href="<?php echo esc_url($file['encrypted_url']); ?>" 
                               class="tf-btn-download-abc123 tf-btn-block-abc123 <?php echo $file['is_external'] ? 'tf-external' : ''; ?>"
                               target="_blank">
                                <span class="<?php echo $file['is_external'] ? 'tf-icon-external-abc123' : 'tf-icon-download-abc123'; ?>"></span>
                                <?php echo $file['is_external'] ? 'ลิงก์ภายนอก' : 'ดาวน์โหลด'; ?>
                            </a>
                        </div>
                    </div>
                    <?php endforeach; ?>
                </div>
                
                <!-- No Results -->
                <div class="tf-no-results-abc123" style="display: none;">
                    <div class="tf-empty-icon-abc123"></div>
                    <p><?php esc_html_e('ไม่พบไฟล์ที่ค้นหา', DGA_TEXT_DOMAIN); ?></p>
                </div>
                
                <!-- Footer -->
                <div class="tf-footer-abc123">
                    <span class="tf-file-count-abc123">
                        <?php echo sprintf(__('แสดง %d ไฟล์', DGA_TEXT_DOMAIN), count($files)); ?>
                    </span>
                </div>
            </div>
        </div>
        <?php
        
        return ob_get_clean();
    }
    
    /**
     * Render empty state
     */
    private function render_empty_state() {
        ob_start();
        ?>
        <div class="tf-empty-state-abc123">
            <div class="tf-empty-icon-abc123"></div>
            <h3><?php esc_html_e('ไม่มีไฟล์แนบ', DGA_TEXT_DOMAIN); ?></h3>
            <p><?php esc_html_e('ไม่พบเอกสารแนบสำหรับโพสต์นี้', DGA_TEXT_DOMAIN); ?></p>
        </div>
        <?php
        return ob_get_clean();
    }
}

// Initialize
Table_Files_Pro_ABC123::get_instance();



/****** กราฟแสดงสถิติจัดซื้อจัดจ้าง *******/

// ฟังก์ชันสำหรับโหลด scripts และ styles
function egp_statistics_enqueue_scripts() {
    global $post;
    
    // ตรวจสอบว่าเป็นหน้าที่มี shortcode หรือไม่
    if ( is_a( $post, 'WP_Post' ) && has_shortcode( $post->post_content, 'egp_statistics' ) ) {
        
        // ลงทะเบียน CSS
        wp_enqueue_style(
            'egp-statistics-style', 
            get_stylesheet_directory_uri() . '/css/egp-statistics.css', 
            array(), 
            '1.0.2'
        );
        
        // ลงทะเบียน Chart.js
        wp_enqueue_script(
            'chart-js', 
            'https://cdn.jsdelivr.net/npm/chart.js', 
            array(DGA_JQUERY_HANDLE), 
            '3.9.1', 
            true
        );
        
        // ลงทะเบียน Custom JavaScript
        wp_enqueue_script(
            'egp-statistics-script', 
            get_stylesheet_directory_uri() . '/js/egp-statistics.js', 
            array(DGA_JQUERY_HANDLE, 'chart-js'), 
            '1.0.2', 
            true
        );
        
        // สร้าง nonce และส่งไปยัง JavaScript
        wp_localize_script('egp-statistics-script', 'egp_ajax_vars', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            'nonce'    => wp_create_nonce('egp_statistics_nonce_action'),
            'is_user_logged_in' => is_user_logged_in(),
            'debug'    => WP_DEBUG
        ));
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'egp_statistics_enqueue_scripts', 99);

// สร้าง Shortcode [egp_statistics]
function egp_statistics_shortcode() {
    ob_start();
    ?>
    <div class="egp-statistics-container">
        <div class="egp-filters">
            <h2>สถิติจัดซื้อจัดจ้าง</h2>
            
            <div class="egp-filter-row">
                <div class="egp-filter-group">
                    <label for="egp-view-type">ดูข้อมูลแบบ:</label>
                    <select id="egp-view-type" class="egp-select">
                        <option value="monthly">รายเดือน</option>
                        <option value="yearly">รายปี</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <label for="egp-year">ปี:</label>
                    <select id="egp-year" class="egp-select">
                        <?php
                        $current_year = date('Y');
                        for ($i = $current_year; $i >= $current_year - 5; $i--) {
                            echo '<option value="' . $i . '">' . ($i + 543) . '</option>';
                        }
                        ?>
                    </select>
                </div>
                
                <div class="egp-filter-group month-filter">
                    <label for="egp-month">เดือน:</label>
                    <select id="egp-month" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <option value="1">มกราคม</option>
                        <option value="2">กุมภาพันธ์</option>
                        <option value="3">มีนาคม</option>
                        <option value="4">เมษายน</option>
                        <option value="5">พฤษภาคม</option>
                        <option value="6">มิถุนายน</option>
                        <option value="7">กรกฎาคม</option>
                        <option value="8">สิงหาคม</option>
                        <option value="9">กันยายน</option>
                        <option value="10">ตุลาคม</option>
                        <option value="11">พฤศจิกายน</option>
                        <option value="12">ธันวาคม</option>
                    </select>
                </div>
            </div>
            
            <div class="egp-filter-row">
                <div class="egp-filter-group">
                    <label for="egp-announcement-type">ประเภทประกาศ:</label>
                    <select id="egp-announcement-type" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <option value="แผนการจัดซื้อจัดจ้าง">แผนการจัดซื้อจัดจ้าง</option>
                        <option value="ประกาศราคากลาง">ประกาศราคากลาง</option>
                        <option value="ประกาศร่าง TOR/ร่างเอกสารประกวดราคา">ประกาศร่าง TOR/ร่างเอกสารประกวดราคา</option>
                        <option value="ประกาศเชิญชวน">ประกาศเชิญชวน</option>
                        <option value="ประกาศรายชื่อผู้ชนะการเสนอราคา">ประกาศรายชื่อผู้ชนะการเสนอราคา</option>
                        <option value="ยกเลิกประกาศเชิญชวน">ยกเลิกประกาศเชิญชวน</option>
                        <option value="ยกเลิกประกาศรายชื่อผู้ชนะการเสนอราคา / ประกาศผู้ได้รับการคัดเลือก">ยกเลิกประกาศรายชื่อผู้ชนะการเสนอราคา / ประกาศผู้ได้รับการคัดเลือก</option>
                        <option value="เปลี่ยนแปลงประกาศเชิญชวน">เปลี่ยนแปลงประกาศเชิญชวน</option>
                        <option value="เปลี่ยนแปลงประกาศรายชื่อผู้ชนะการเสนอราคา">เปลี่ยนแปลงประกาศรายชื่อผู้ชนะการเสนอราคา</option>
                        <option value="ชี้แจงข้อมูลเพิ่มเติม">ชี้แจงข้อมูลเพิ่มเติม</option>
                        <option value="สาระสำคัญสัญญา">สาระสำคัญสัญญา</option>
                        <option value="ประกาศผู้ชนะการจัดซื้อจัดจ้างหรือผู้ได้รับการคัดเลือกเป็นรายไตรมาส">ประกาศผู้ชนะการจัดซื้อจัดจ้างหรือผู้ได้รับการคัดเลือกเป็นรายไตรมาส</option>
                        <option value="ยกเลิกหรือเปลี่ยนแปลงแผนการจัดซื้อจัดจ้าง">ยกเลิกหรือเปลี่ยนแปลงแผนการจัดซื้อจัดจ้าง</option>
                        <option value="ยกเลิกหรือเปลี่ยนแปลงร่าง TOR/เอกสารประกวดราคา">ยกเลิกหรือเปลี่ยนแปลงร่าง TOR/เอกสารประกวดราคา</option>
                        <option value="ขายทอดตลาด">ขายทอดตลาด</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <label for="egp-procurement-method">วิธีจัดหา:</label>
                    <select id="egp-procurement-method" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <option value="e-bidding">e-bidding</option>
                        <option value="คัดเลือก">คัดเลือก</option>
                        <option value="เฉพาะเจาะจง">เฉพาะเจาะจง</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <label for="egp-department">สำนัก/กอง:</label>
                    <select id="egp-department" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <?php
                        // ดึงค่า unique ของ สำนัก/กอง จาก custom field
                        $departments = get_unique_meta_values('egp_sub_dep', 'egp');
                        foreach ($departments as $dept) {
                            echo '<option value="' . esc_attr($dept) . '">' . esc_html($dept) . '</option>';
                        }
                        ?>
                    </select>
                </div>
            </div>
            
            <div class="egp-filter-row">
                <div class="egp-filter-group">
                    <label for="egp-chart-type">รูปแบบกราฟ:</label>
                    <select id="egp-chart-type" class="egp-select">
                        <option value="bar">กราฟแท่ง</option>
                        <option value="line">กราฟเส้น</option>
                        <option value="pie">กราฟวงกลม</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <button id="egp-filter-submit" type=DGA_BUTTON_TYPE class="egp-button">แสดงข้อมูล</button>
                </div>
            </div>
        </div>
        
        <div class="egp-results">
            <div class="egp-chart-container">
                <canvas id="egp-chart"></canvas>
            </div>
            
            <div class="egp-summary-container">
                <h3>สรุปข้อมูล</h3>
                <div id="egp-summary-data"></div>
            </div>
            
            <div class="egp-table-container">
                <h3>ตารางข้อมูล</h3>
                <div id="egp-table-data"></div>
            </div>
        </div>
        
        <div id="egp-loading" class="egp-loading">
            <div class="egp-spinner"></div>
            <p>กำลังโหลดข้อมูล...</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('egp_statistics', 'egp_statistics_shortcode');

// ฟังก์ชันสำหรับดึงค่า unique จาก custom field
function get_unique_meta_values($meta_key, $post_type) {
    global $wpdb;
    
    $query = $wpdb->prepare(
        "SELECT DISTINCT pm.meta_value FROM {$wpdb->postmeta} pm
        LEFT JOIN {$wpdb->posts} p ON p.ID = pm.post_id
        WHERE pm.meta_key = %s
        AND p.post_type = %s
        AND p.post_status = DGA_PUBLISH_STATUS
        ORDER BY pm.meta_value",
        $meta_key,
        $post_type
    );
    
    $meta_values = $wpdb->get_col($query);
    
    return array_filter($meta_values); // กรองค่าว่างออก
}

// AJAX handler function
function egp_statistics_ajax_handler() {
    // Debug logging
    if (WP_DEBUG && WP_DEBUG_LOG) {
        error_log('=== EGP Statistics AJAX Handler Start ===');
        error_log('POST data: ' . print_r($_POST, true));
        error_log('User logged in: ' . (is_user_logged_in() ? 'yes' : 'no'));
        error_log('Received nonce: ' . (isset($_POST['_ajax_nonce']) ? $_POST['_ajax_nonce'] : 'not set'));
    }
    
    // ตรวจสอบ nonce โดยใช้ชื่อ parameter ที่ถูกต้อง
    $nonce = null;
    if (isset($_POST['_ajax_nonce'])) {
        $nonce = $_POST['_ajax_nonce'];
    } elseif (isset($_POST['nonce'])) {
        $nonce = $_POST['nonce'];
    }
    
    if (!$nonce) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => 'Security check failed: No nonce provided',
            'code' => 'no_nonce',
            'debug' => array(
                'post_data' => $_POST
            )
        ));
        return;
    }
    
    // ตรวจสอบ nonce
    $nonce_check = wp_verify_nonce($nonce, 'egp_statistics_nonce_action');
    
    if (!$nonce_check) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG,
            'code' => 'nonce_failed',
            'debug' => array(
                'nonce_sent' => $nonce,
                'expected_action' => 'egp_statistics_nonce_action',
                'user_logged_in' => is_user_logged_in()
            )
        ));
        return;
    }
    
    // รับค่าจาก request
    $view_type = isset($_POST['view_type']) ? sanitize_text_field($_POST['view_type']) : 'monthly';
    $year = isset($_POST['year']) ? intval($_POST['year']) : date('Y');
    $month = isset($_POST['month']) ? sanitize_text_field($_POST['month']) : 'all';
    $announcement_type = isset($_POST['announcement_type']) ? sanitize_text_field($_POST['announcement_type']) : 'all';
    $procurement_method = isset($_POST['procurement_method']) ? sanitize_text_field($_POST['procurement_method']) : 'all';
    $department = isset($_POST['department']) ? sanitize_text_field($_POST['department']) : 'all';
    
    // สร้าง query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => 'egp',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => -1,
        'meta_query' => array(
            'relation' => 'AND'
        ),
        'date_query' => array(
            'relation' => 'AND'
        )
    );
    
    // เพิ่ม date query
    if ($view_type === 'yearly') {
        $args['date_query'][] = array(
            'year' => $year
        );
    } else { // monthly
        $args['date_query'][] = array(
            'year' => $year
        );
        
        if ($month !== 'all' && intval($month) > 0) {
            $args['date_query'][] = array(
                'month' => intval($month)
            );
        }
    }
    
    // เพิ่ม meta query ตามเงื่อนไข
    if ($announcement_type !== 'all') {
        $args['meta_query'][] = array(
            'key' => 'egp_type',
            'value' => $announcement_type,
            'compare' => '='
        );
    }
    
    if ($procurement_method !== 'all') {
        $args['meta_query'][] = array(
            'key' => 'egp_way',
            'value' => $procurement_method,
            'compare' => '='
        );
    }
    
    if ($department !== 'all') {
        $args['meta_query'][] = array(
            'key' => 'egp_sub_dep',
            'value' => $department,
            'compare' => '='
        );
    }
    
    try {
        // ประมวลผลข้อมูล
        $results = process_egp_data($args, $view_type);
        
        if (WP_DEBUG && WP_DEBUG_LOG) {
            error_log('Processing successful, total results: ' . $results[DGA_TOTAL_FIELD_KEY]);
            error_log('=== EGP Statistics AJAX Handler End ===');
        }
        
        // ส่งผลลัพธ์กลับไป
        wp_send_json_success($results);
        
    } catch (Exception $e) {
        if (WP_DEBUG && WP_DEBUG_LOG) {
            error_log('Processing error: ' . $e->getMessage());
        }
        
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => 'Error processing data: ' . $e->getMessage(),
            'code' => 'processing_error'
        ));
    }
}

// เพิ่ม AJAX handlers
add_action('wp_ajax_egp_statistics', 'egp_statistics_ajax_handler');
add_action('wp_ajax_nopriv_egp_statistics', 'egp_statistics_ajax_handler');

// ฟังก์ชันประมวลผลข้อมูล
function process_egp_data($args, $view_type) {
    $query = new WP_Query($args);
    $posts = $query->posts;
    
    $data_by_type = array();
    $data_by_method = array();
    $data_by_department = array();
    $data_by_date = array();
    
    $thai_months = array(
        1 => 'มกราคม', 2 => 'กุมภาพันธ์', 3 => 'มีนาคม', 4 => 'เมษายน',
        5 => 'พฤษภาคม', 6 => 'มิถุนายน', 7 => 'กรกฎาคม', 8 => 'สิงหาคม',
        9 => 'กันยายน', 10 => 'ตุลาคม', 11 => 'พฤศจิกายน', 12 => 'ธันวาคม'
    );
    
    foreach ($posts as $post) {
        // ดึงค่า custom fields
        $type = get_post_meta($post->ID, 'egp_type', true);
        $method = get_post_meta($post->ID, 'egp_way', true);
        $department = get_post_meta($post->ID, 'egp_sub_dep', true);
        $date_start = get_post_meta($post->ID, 'egp_date_start', true);
        
        // เก็บข้อมูลตามประเภทประกาศ
        if (!empty($type)) {
            if (!isset($data_by_type[$type])) {
                $data_by_type[$type] = 0;
            }
            $data_by_type[$type]++;
        }
        
        // เก็บข้อมูลตามวิธีจัดหา
        if (!empty($method)) {
            if (!isset($data_by_method[$method])) {
                $data_by_method[$method] = 0;
            }
            $data_by_method[$method]++;
        }
        
        // เก็บข้อมูลตามสำนัก/กอง
        if (!empty($department)) {
            if (!isset($data_by_department[$department])) {
                $data_by_department[$department] = 0;
            }
            $data_by_department[$department]++;
        }
        
        // เก็บข้อมูลตามวันที่
        if (!empty($date_start)) {
            $date = strtotime($date_start);
            
            if ($date !== false) {
                $month = date('n', $date);
                $year = date('Y', $date);
                
                if ($view_type === 'monthly') {
                    $key = $thai_months[$month];
                    
                    if (!isset($data_by_date[$key])) {
                        $data_by_date[$key] = 0;
                    }
                    $data_by_date[$key]++;
                } else { // yearly
                    $quarter = ceil($month / 3);
                    $key = 'ไตรมาสที่ ' . $quarter;
                    
                    if (!isset($data_by_date[$key])) {
                        $data_by_date[$key] = 0;
                    }
                    $data_by_date[$key]++;
                }
            }
        }
    }
    
    // เรียงลำดับข้อมูล
    if ($view_type === 'monthly') {
        $sorted_data_by_date = array();
        foreach ($thai_months as $month_num => $month_name) {
            $sorted_data_by_date[$month_name] = isset($data_by_date[$month_name]) ? $data_by_date[$month_name] : 0;
        }
        $data_by_date = $sorted_data_by_date;
    } else { // yearly
        $sorted_data_by_date = array();
        for ($q = 1; $q <= 4; $q++) {
            $key = 'ไตรมาสที่ ' . $q;
            $sorted_data_by_date[$key] = isset($data_by_date[$key]) ? $data_by_date[$key] : 0;
        }
        $data_by_date = $sorted_data_by_date;
    }
    
    // สร้างข้อมูลสำหรับตาราง
    $table_data = array();
    foreach ($posts as $post) {
        $type = get_post_meta($post->ID, 'egp_type', true);
        $method = get_post_meta($post->ID, 'egp_way', true);
        $department = get_post_meta($post->ID, 'egp_sub_dep', true);
        $date_start = get_post_meta($post->ID, 'egp_date_start', true);
        $main_dept = get_post_meta($post->ID, 'egp_dep', true);
        
        $table_data[] = array(
            DGA_TITLE_FIELD => $post->post_title,
            DGA_TYPE_FIELD => $type,
            'method' => $method,
            'department' => $department,
            'main_department' => $main_dept,
            'date' => $date_start,
            'link' => get_permalink($post->ID)
        );
    }
    
    // สรุปผลลัพธ์
    $result = array(
        DGA_TOTAL_FIELD_KEY => count($posts),
        'by_type' => $data_by_type,
        'by_method' => $data_by_method,
        'by_department' => $data_by_department,
        'by_date' => $data_by_date,
        'table_data' => $table_data
    );
    
    return $result;
}




/***** ฟังก์ชั่นเพิ่มตารางแบบ Dynamic *****/

function dynamic_table_shortcode($atts) {
    // Extract attributes
    $atts = shortcode_atts(
        array(
            'id' => 'dynamic-table-' . uniqid(),
            DGA_TITLE_FIELD => 'Dynamic Table',
        ),
        $atts,
        'dynamic_table'
    );
    
    // Check if user has editor or admin privileges
    $can_edit = current_user_can(DGA_EDIT_POSTS_CAP);
    
    // Always enqueue viewer styles
    wp_enqueue_style('dynamic-table-css', get_stylesheet_directory_uri() . '/css/dynamic-table.css', array(), DGA_THEME_VERSION);
    
    // Only enqueue edit scripts if user has permissions
    if ($can_edit) {
        wp_enqueue_script(DGA_JQUERY_HANDLE);
        wp_enqueue_script('dynamic-table-js', get_stylesheet_directory_uri() . '/js/dynamic-table.js', array(DGA_JQUERY_HANDLE), DGA_THEME_VERSION, true);
        
        // Localize script with AJAX URL and nonce
        wp_localize_script('dynamic-table-js', 'dynamic_table_params', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('dynamic_table_nonce'),
            'table_id' => $atts['id']
        ));
    }
    
    // Default data
    $default_data = array(
        'columns' => array('Column 1', 'Column 2', 'Column 3'),
        'rows' => array(
            array(
                'cells' => array('Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3'),
                'links' => array('', '', '')
            )
        )
    );
    
    // Get saved table data
    $table_data = get_option('dynamic_table_' . $atts['id']);
    
    // Check if table data is valid, otherwise use default
    if (!is_array($table_data) || 
        !isset($table_data['columns']) || 
        !isset($table_data['rows']) || 
        !is_array($table_data['columns']) || 
        !is_array($table_data['rows'])) {
        $table_data = $default_data;
    }
    
    // Start output buffering
    ob_start();
    
    // If user can edit, show edit interface
    if ($can_edit) {
        ?>
        <div class="dynamic-table-container" id="<?php echo esc_attr($atts['id']); ?>-container">
            <h2 class="dynamic-table-title"><?php echo esc_html($atts[DGA_TITLE_FIELD]); ?></h2>
            
            <!-- Debugging Info for Admins -->
            <?php if (current_user_can(DGA_ADMIN_ROLE)) : ?>
            <div class="debug-info" style="background: #f5f5f5; padding: 10px; margin-bottom: 15px; font-size: 12px; border: 1px solid #ddd;">
                <h4 style="margin-top: 0;">Debug Info (for Admin only):</h4>
                <div>Table ID: <?php echo esc_html($atts['id']); ?></div>
                <div>Columns count: <?php echo count($table_data['columns']); ?></div>
                <div>Rows count: <?php echo count($table_data['rows']); ?></div>
                <button id="toggle-raw-data" class=DGA_BUTTON_TYPE>Show/Hide Raw Data</button>
                <pre id="raw-data" style="display: none; max-height: 200px; overflow: auto; margin-top: 10px; background: #fff; padding: 5px;"><?php echo esc_html(print_r($table_data, true)); ?></pre>
            </div>
            <?php endif; ?>
            
            <!-- Table Controls - Only visible to Admins and Editors -->
            <div class="dynamic-table-controls">
                <div class="control-group">
                    <button class="add-column-btn">เพิ่มคอลัมน์</button>
                    <button class="add-row-btn">เพิ่มแถว</button>
                </div>
                <div class="control-group">
                    <button class="save-table-btn">บันทึกตาราง</button>
                </div>
            </div>
            
            <!-- Table Structure -->
            <div class="dynamic-table-wrapper">
                <table class="dynamic-table" id="<?php echo esc_attr($atts['id']); ?>">
                    <thead>
                        <tr>
                            <?php foreach ($table_data['columns'] as $index => $column) : ?>
                            <th>
                                <div class="column-content">
                                    <input type="text" class="column-input" value="<?php echo esc_attr($column); ?>" placeholder="ชื่อคอลัมน์">
                                    <?php if (count($table_data['columns']) > 1) : ?>
                                    <span class="remove-column" data-index="<?php echo esc_attr($index); ?>">×</span>
                                    <?php endif; ?>
                                </div>
                            </th>
                            <?php endforeach; ?>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($table_data['rows'] as $row_index => $row) : ?>
                        <tr>
                            <?php 
                            // Ensure cells and links are arrays
                            $cells = isset($row['cells']) && is_array($row['cells']) ? $row['cells'] : array();
                            $links = isset($row['links']) && is_array($row['links']) ? $row['links'] : array();
                            
                            // Ensure we have a cell for each column
                            while (count($cells) < count($table_data['columns'])) {
                                $cells[] = '';
                            }
                            
                            // Ensure we have a link for each cell
                            while (count($links) < count($cells)) {
                                $links[] = '';
                            }
                            
                            // Output cells
                            foreach ($cells as $cell_index => $cell) : 
                            ?>
                            <td>
                                <div class="cell-content">
                                    <input type="text" class="cell-input" value="<?php echo esc_attr($cell); ?>" placeholder="เนื้อหา">
                                    <input type="text" class="cell-link" value="<?php echo esc_attr($links[$cell_index] ?? ''); ?>" placeholder="URL ลิงก์ (ถ้ามี)">
                                </div>
                            </td>
                            <?php endforeach; ?>
                            <td class="row-actions">
                                <span class="remove-row" data-index="<?php echo esc_attr($row_index); ?>">×</span>
                            </td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
            
            <!-- Status Messages -->
            <div class="dynamic-table-status"></div>
        </div>
        <?php
    } else {
        // For regular users, only show the read-only table view
        echo '<div class="dynamic-table-container view-only">';
        echo '<h2 class="dynamic-table-title">' . esc_html($atts[DGA_TITLE_FIELD]) . '</h2>';
        echo dynamic_table_display($atts['id']);
        echo '</div>';
    }
    
    // Return output buffer
    return ob_get_clean();
}
add_shortcode('dynamic_table', 'dynamic_table_shortcode');

// AJAX handler for saving table data
function dynamic_table_save_data() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dynamic_table_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Security check failed.'));
    }
    
    // Check user permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'You do not have permission to edit tables.'));
    }
    
    // Get table data
    $table_id = sanitize_text_field($_POST['table_id']);
    
    // Get and validate columns
    if (!isset($_POST['columns']) || !is_array($_POST['columns'])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid column data.'));
    }
    $columns = array_map('sanitize_text_field', $_POST['columns']);
    
    // Get and validate cells and links
    if (!isset($_POST['cells']) || !is_array($_POST['cells'])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid cell data.'));
    }
    
    if (!isset($_POST['links']) || !is_array($_POST['links'])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid link data.'));
    }
    
    // Prepare rows data with proper validation
    $rows = array();
    foreach ($_POST['cells'] as $row_index => $row_cells) {
        if (!is_array($row_cells)) {
            continue; // Skip invalid rows
        }
        
        $row_links = isset($_POST['links'][$row_index]) && is_array($_POST['links'][$row_index]) 
            ? $_POST['links'][$row_index] 
            : array();
        
        // Ensure we have a link for each cell
        while (count($row_links) < count($row_cells)) {
            $row_links[] = '';
        }
        
        // Sanitize all values
        $sanitized_cells = array_map('sanitize_text_field', $row_cells);
        $sanitized_links = array_map('esc_url_raw', $row_links);
        
        $rows[] = array(
            'cells' => $sanitized_cells,
            'links' => $sanitized_links
        );
    }
    
    // Save data
    $table_data = array(
        'columns' => $columns,
        'rows' => $rows
    );
    
    // Ensure options are serialized properly
    $serialized_data = maybe_serialize($table_data);
    $result = update_option('dynamic_table_' . $table_id, $table_data, false);
    
    if ($result) {
        // Successfully updated
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'ตารางถูกบันทึกเรียบร้อยแล้ว',
            'columns_count' => count($columns),
            'rows_count' => count($rows)
        ));
    } else {
        // Check if it's because no changes were made
        $existing_data = get_option('dynamic_table_' . $table_id);
        if ($existing_data && $existing_data == $table_data) {
            wp_send_json_success(array(
                DGA_MESSAGE_KEY => 'ไม่มีการเปลี่ยนแปลงข้อมูล',
                'columns_count' => count($columns),
                'rows_count' => count($rows)
            ));
        } else {
            // Something went wrong
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการบันทึกข้อมูล',
                'existing_data' => is_array($existing_data) ? 'Array' : gettype($existing_data),
                'columns_count' => count($columns),
                'rows_count' => count($rows)
            ));
        }
    }
}
add_action('wp_ajax_dynamic_table_save_data', 'dynamic_table_save_data');

// Function to display the saved table (for viewing mode)
function dynamic_table_display($table_id) {
    // Get table data
    $table_data = get_option('dynamic_table_' . $table_id);
    
    // Default data
    $default_data = array(
        'columns' => array('Column 1', 'Column 2', 'Column 3'),
        'rows' => array(
            array(
                'cells' => array('Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3'),
                'links' => array('', '', '')
            )
        )
    );
    
    // Validate data structure
    if (!is_array($table_data) || 
        !isset($table_data['columns']) || 
        !isset($table_data['rows']) || 
        !is_array($table_data['columns']) || 
        !is_array($table_data['rows']) ||
        empty($table_data['columns']) ||
        empty($table_data['rows'])) {
        
        $table_data = $default_data;
    }
    
    ob_start();
    ?>
    <div class="dynamic-table-display">
        <table class="dynamic-table-view">
            <thead>
                <tr>
                    <?php foreach ($table_data['columns'] as $column) : ?>
                    <th><?php echo esc_html($column); ?></th>
                    <?php endforeach; ?>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($table_data['rows'] as $row) : ?>
                <tr>
                    <?php 
                    // Ensure cells and links are arrays
                    $cells = isset($row['cells']) && is_array($row['cells']) ? $row['cells'] : array();
                    $links = isset($row['links']) && is_array($row['links']) ? $row['links'] : array();
                    
                    // Ensure we have a cell for each column
                    while (count($cells) < count($table_data['columns'])) {
                        $cells[] = '';
                    }
                    
                    // Ensure we have a link for each cell
                    while (count($links) < count($cells)) {
                        $links[] = '';
                    }
                    
                    // Output cells
                    foreach ($cells as $i => $cell) : 
                    ?>
                    <td>
                        <?php if (!empty($links[$i])) : ?>
                        <a href="<?php echo esc_url($links[$i]); ?>"><?php echo esc_html($cell); ?></a>
                        <?php else : ?>
                        <?php echo esc_html($cell); ?>
                        <?php endif; ?>
                    </td>
                    <?php endforeach; ?>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
    <?php
    
    return ob_get_clean();
}


/*** ฟังก์ชั่นแสดงตารางโพสทั้งหมดของ Wordpress user logged นั้นๆ ******/

/**
 * Shortcode: [user_posts]
 * Description: แสดงโพสทั้งหมดในระบบที่ผู้ใช้ที่ล็อกอินเป็นผู้สร้าง พร้อมระบบ AJAX
 * 
 * 1. ชื่อ PostType
 * 2. ชื่อ PostTitle 
 * 3. วันที่สร้าง Post
 * 4. ปุ่มดูข้อมูล และเปลี่ยนสถานะเป็น Pending หรือ Public (AJAX)
 * 5. ปุ่มลบโพส พร้อม Modal ยืนยัน
 * 6. ธีมสีน้ำเงิน, สีส้ม, ตัวอักษรสีดำ
 * 7. มีฟังก์ชั่น Filter
 * 8. กำหนดจำนวนแสดงต่อหน้าได้และมี Pagination สมบูรณ์
 */

// สร้าง Shortcode
function user_posts_display_shortcode() {
    // ตรวจสอบว่าผู้ใช้ล็อกอินหรือไม่
    if (!is_user_logged_in()) {
        return '<p class="user-posts-not-logged-in">กรุณาล็อกอินเพื่อดูโพสของคุณ</p>';
    }
    
    // เรียกใช้ไฟล์ JavaScript และ CSS
    wp_enqueue_script('user-posts-js');
    wp_enqueue_style('user-posts-css');
    
    // สร้าง ID ที่ไม่ซ้ำกัน
    $container_id = 'user-posts-container-' . uniqid();
    
    // เริ่ม Output Buffer
    ob_start();
    ?>
    <div id="<?php echo esc_attr($container_id); ?>" class="user-posts-container">
        <div class="user-posts-header">
            <h2>โพสทั้งหมดของคุณ</h2>
            <div class="user-posts-filters">
                <div class="filter-group">
                    <input type="text" id="user-posts-search" placeholder="ค้นหา..." class="user-posts-search-input">
                    <select id="user-posts-type-filter" class="user-posts-select">
                        <option value="">ทุกประเภทโพส</option>
                        <?php
                        // ดึงข้อมูลประเภทโพสทั้งหมด
                        $post_types = get_post_types(array('public' => true), 'objects');
                        foreach ($post_types as $post_type) {
                            echo '<option value="' . esc_attr($post_type->name) . '">' . esc_html($post_type->label) . '</option>';
                        }
                        ?>
                    </select>
                    <select id="user-posts-status-filter" class="user-posts-select">
                        <option value="">ทุกสถานะ</option>
                        <option value="publish">เผยแพร่แล้ว</option>
                        <option value="pending">รออนุมัติ</option>
                        <option value="draft">ฉบับร่าง</option>
                    </select>
                </div>
                
                <div class="per-page-group">
                    <label for="user-posts-per-page">โพสต่อหน้า:</label>
                    <select id="user-posts-per-page" class="user-posts-select">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
        </div>
        
        <div class="user-posts-table-container">
            <table class="user-posts-table">
                <thead>
                    <tr>
                        <th>ประเภทโพส</th>
                        <th>ชื่อเรื่อง</th>
                        <th>วันที่สร้าง</th>
                        <th>สถานะ</th>
                        <th>จัดการ</th>
                    </tr>
                </thead>
                <tbody id="user-posts-list">
                    <!-- ข้อมูลจะถูกโหลดผ่าน AJAX -->
                    <tr>
                        <td colspan="5" class="loading-row"><div class="loading-spinner"></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="user-posts-pagination">
            <!-- Pagination จะถูกโหลดผ่าน AJAX -->
        </div>
    </div>
    
    <script type="text/javascript">
        jQuery(document).ready(function($) {
            // เรียกใช้ฟังก์ชัน init จาก user-posts.js
            if (typeof UserPostsModule !== 'undefined') {
                UserPostsModule.init('<?php echo esc_js($container_id); ?>');
            }
        });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('user_posts', 'user_posts_display_shortcode');

// ลงทะเบียน JavaScript และ CSS
function user_posts_register_assets() {
    // ขอที่อยู่ของ Child Theme
    $child_theme_uri = get_stylesheet_directory_uri();
    
    // ลงทะเบียน JavaScript
    wp_register_script(
        'user-posts-js',
        $child_theme_uri . '/js/user-posts.js',
        array(DGA_JQUERY_HANDLE),
        DGA_THEME_VERSION,
        true
    );
    
    // กำหนดค่าตัวแปรที่จะส่งไปยัง JavaScript
    wp_localize_script(
        'user-posts-js',
        'userPostsData',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('user_posts_nonce'),
            'strings' => array(
                DGA_ERROR_STATUS => DGA_ERROR_RETRY_MESSAGE_TH,
                'confirm_status_change' => 'คุณต้องการเปลี่ยนสถานะของโพสนี้ใช่หรือไม่?',
                'no_posts_found' => 'ไม่พบโพสที่คุณสร้าง',
                'loading' => 'กำลังโหลด...',
                'confirm_delete' => 'คุณจะไม่สามารถกู้คืนโพสนี้ได้อีก คุณต้องการลบหรือไม่?',
            )
        )
    );
    
    // ลงทะเบียน CSS
    wp_register_style(
        'user-posts-css',
        $child_theme_uri . '/css/user-posts.css',
        array(),
        DGA_THEME_VERSION
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'user_posts_register_assets');

// AJAX สำหรับโหลดโพส
function user_posts_load_ajax() {
    // ตรวจสอบ Security nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'user_posts_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'การตรวจสอบความปลอดภัยล้มเหลว'));
    }
    
    // ดึง ID ของผู้ใช้ที่ล็อกอิน
    $user_id = get_current_user_id();
    if (!$user_id) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบข้อมูลผู้ใช้'));
    }
    
    // ดึงพารามิเตอร์
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $post_type = isset($_POST[DGA_POST_TYPE_FIELD]) ? sanitize_text_field($_POST[DGA_POST_TYPE_FIELD]) : '';
    $post_status = isset($_POST[DGA_POST_STATUS_FIELD]) ? sanitize_text_field($_POST[DGA_POST_STATUS_FIELD]) : '';
    
    // กำหนดพารามิเตอร์การค้นหา
    $args = array(
        'author' => $user_id,
        DGA_POSTS_PER_PAGE => $per_page,
        DGA_PAGED_PARAMETER => $page,
        DGA_POST_STATUS_FIELD => $post_status ? $post_status : array(DGA_PUBLISH_STATUS, 'pending', 'draft'),
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC',
    );
    
    // เพิ่มประเภทโพสถ้ามีการระบุ
    if (!empty($post_type)) {
        $args[DGA_POST_TYPE_FIELD] = $post_type;
    } else {
        $args[DGA_POST_TYPE_FIELD] = 'any';
    }
    
    // เพิ่มคำค้นหาถ้ามีการระบุ
    if (!empty($search)) {
        $args['s'] = $search;
    }
    
    // ดึงข้อมูลโพส
    $query = new WP_Query($args);
    
    // เตรียมข้อมูลโพส
    $posts_data = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            $post_type_obj = get_post_type_object(get_post_type());
            
            $posts_data[] = array(
                'id' => $post_id,
                DGA_TYPE_FIELD => $post_type_obj ? $post_type_obj->labels->singular_name : get_post_type(),
                DGA_TITLE_FIELD => get_the_title(),
                'date' => get_the_date(),
                DGA_STATUS_FIELD => get_post_status(),
                'edit_link' => get_edit_post_link($post_id),
                'view_link' => get_permalink($post_id),
            );
        }
    }
    
    // คืนค่า Post Data
    wp_reset_postdata();
    
    // คำนวณข้อมูลสำหรับ Pagination
    $total_posts = $query->found_posts;
    $total_pages = ceil($total_posts / $per_page);
    
    // ส่งข้อมูลกลับ - ไม่สร้าง HTML ใน PHP แล้ว แต่ให้ JS สร้างแทน
    wp_send_json_success(array(
        'posts' => $posts_data,
        'total_posts' => $total_posts,
        'total_pages' => $total_pages,
        'current_page' => $page,
        'per_page' => $per_page
    ));
}
add_action('wp_ajax_user_posts_load', 'user_posts_load_ajax');

// AJAX สำหรับอัพเดทสถานะโพส
function user_posts_update_status_ajax() {
    // ตรวจสอบ Security nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'user_posts_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'การตรวจสอบความปลอดภัยล้มเหลว'));
    }
    
    // ดึงพารามิเตอร์
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $new_status = isset($_POST[DGA_STATUS_FIELD]) ? sanitize_text_field($_POST[DGA_STATUS_FIELD]) : '';
    
    // ตรวจสอบความถูกต้องของพารามิเตอร์
    if (!$post_id || !in_array($new_status, array(DGA_PUBLISH_STATUS, 'pending'))) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'พารามิเตอร์ไม่ถูกต้อง'));
    }
    
    // ตรวจสอบว่าผู้ใช้เป็นเจ้าของโพสหรือไม่
    $post = get_post($post_id);
    if (!$post || $post->post_author != get_current_user_id()) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์แก้ไขโพสนี้'));
    }
    
    // อัพเดทสถานะโพส
    $updated = wp_update_post(array(
        'ID' => $post_id,
        DGA_POST_STATUS_FIELD => $new_status
    ));
    
    if ($updated) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'อัพเดทสถานะโพสเป็น ' . ($new_status == DGA_PUBLISH_STATUS ? 'เผยแพร่แล้ว' : 'รออนุมัติ'),
            'new_status' => $new_status
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่สามารถอัพเดทสถานะโพสได้'));
    }
}
add_action('wp_ajax_user_posts_update_status', 'user_posts_update_status_ajax');

// AJAX สำหรับลบโพส
function user_posts_delete_ajax() {
    // ตรวจสอบ Security nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'user_posts_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'การตรวจสอบความปลอดภัยล้มเหลว'));
    }
    
    // ดึงพารามิเตอร์
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    
    // ตรวจสอบว่าโพสมีอยู่จริงหรือไม่
    $post = get_post($post_id);
    if (!$post) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบโพสที่ต้องการลบ'));
    }
    
    // ตรวจสอบว่าผู้ใช้เป็นเจ้าของโพสหรือไม่
    if ($post->post_author != get_current_user_id()) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ลบโพสนี้'));
    }
    
    // เก็บข้อมูลโพสก่อนลบเพื่อใช้ในข้อความตอบกลับ
    $post_title = $post->post_title;
    
    // ลบโพส
    $deleted = wp_delete_post($post_id, true); // true = ลบถาวร, ไม่ย้ายไปถังขยะ
    
    if ($deleted) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'ลบโพส "' . esc_html($post_title) . '" เรียบร้อยแล้ว',
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่สามารถลบโพสได้ กรุณาลองใหม่อีกครั้ง'));
    }
}
add_action('wp_ajax_user_posts_delete', 'user_posts_delete_ajax');



/**** Dynamic POST CardItem & ListItem - Version 2.0 ******/

// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

// ลงทะเบียน scripts และ styles
function dynamic_post_cards_enqueue_scripts_dpc734() {
    $theme_directory = get_stylesheet_directory_uri();
    
    // CSS - Version 2.0.0
    wp_enqueue_style(
        'dynamic-post-cards-css-dpc734', 
        $theme_directory . '/css/dynamic-post-cards-dpc734.css', 
        array(), 
        '2.0.0'
    );
    
    // JavaScript - Version 2.0.0
    wp_enqueue_script(
        'dynamic-post-cards-js-dpc734', 
        $theme_directory . '/js/dynamic-post-cards-dpc734.js', 
        array(DGA_JQUERY_HANDLE), 
        '2.0.0', 
        true
    );
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('dynamic-post-cards-js-dpc734', 'dynamic_post_cards_params', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dynamic_post_cards_nonce_dpc734'),
        'loading_text' => __('กำลังโหลด...', DGA_TEXT_DOMAIN),
        'load_more_text' => __('โหลดเพิ่มเติม', DGA_TEXT_DOMAIN),
        'no_results_text' => __('ไม่พบผลลัพธ์ที่ตรงกับการค้นหาของคุณ', DGA_TEXT_DOMAIN),
        'error_text' => __('เกิดข้อผิดพลาดในการโหลดข้อมูล', DGA_TEXT_DOMAIN)
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dynamic_post_cards_enqueue_scripts_dpc734');

// ฟังก์ชัน shortcode หลัก
function dynamic_post_cards_shortcode_dpc734($atts) {
    // กำหนดค่าเริ่มต้นของ attributes
    $atts = shortcode_atts(array(
        DGA_POST_TYPE_FIELD => 'post',
        DGA_POSTS_PER_PAGE => 6,
        'category' => '',
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC',
        'view' => 'card',
        'show_add_button' => 'false',
        'show_search' => 'true',
        'show_filters' => 'true',
        'show_year_filter' => 'true',
        'show_sort' => 'true',
        'search_placeholder' => __('ค้นหาเอกสาร...', DGA_TEXT_DOMAIN)
    ), $atts);
    
    // Sanitize attributes
    $atts[DGA_POST_TYPE_FIELD] = sanitize_text_field($atts[DGA_POST_TYPE_FIELD]);
    $atts[DGA_POSTS_PER_PAGE] = absint($atts[DGA_POSTS_PER_PAGE]);
    $atts['category'] = sanitize_text_field($atts['category']);
    $atts[DGA_ORDERBY_FIELD_VALUE] = sanitize_text_field($atts[DGA_ORDERBY_FIELD_VALUE]);
    $atts[DGA_ORDER_FIELD] = strtoupper(sanitize_text_field($atts[DGA_ORDER_FIELD]));
    $atts['view'] = sanitize_text_field($atts['view']);
    
    // แปลงค่าเป็น boolean
    $show_add_button = filter_var($atts['show_add_button'], FILTER_VALIDATE_BOOLEAN);
    $show_search = filter_var($atts['show_search'], FILTER_VALIDATE_BOOLEAN);
    $show_filters = filter_var($atts['show_filters'], FILTER_VALIDATE_BOOLEAN);
    $show_year_filter = filter_var($atts['show_year_filter'], FILTER_VALIDATE_BOOLEAN);
    $show_sort = filter_var($atts['show_sort'], FILTER_VALIDATE_BOOLEAN);
    
    // สร้าง unique ID สำหรับ container
    $container_id = 'dynamic-post-cards-dpc734-' . wp_rand(100000, 999999);
    
    // สร้างรายการปี (ปีปัจจุบัน - 50 ปี) ในรูปแบบ พ.ศ.
    $current_year = (int)date('Y') + 543;
    $years = array();
    for ($i = 0; $i <= 50; $i++) {
        $years[] = $current_year - $i;
    }
    
    // เริ่มสร้าง output
    $output = '<div id="' . esc_attr($container_id) . '" 
        class="dynamic-post-cards-container-dpc734" 
        data-post-type="' . esc_attr($atts[DGA_POST_TYPE_FIELD]) . '" 
        data-posts-per-page="' . esc_attr($atts[DGA_POSTS_PER_PAGE]) . '" 
        data-category="' . esc_attr($atts['category']) . '" 
        data-orderby="' . esc_attr($atts[DGA_ORDERBY_FIELD_VALUE]) . '" 
        data-order="' . esc_attr($atts[DGA_ORDER_FIELD]) . '" 
        data-view="' . esc_attr($atts['view']) . '"
        aria-live="polite">';
    
    // ส่วนควบคุม (controls) - แสดงเฉพาะเมื่อเปิดใช้งาน
    if ($show_search || $show_filters || $show_sort || $show_year_filter) {
        $output .= '<div class="dynamic-post-cards-controls-dpc734">';
        
        // ตัวเลือกมุมมอง
        $output .= '<div class="view-mode-controls-dpc734">';
        $card_active = ($atts['view'] == 'card') ? 'active' : '';
        $list_active = ($atts['view'] == 'list') ? 'active' : '';
        
        $output .= '<button type=DGA_BUTTON_TYPE class="view-mode-btn-dpc734 card-view-btn ' . $card_active . '" 
            aria-label="' . __('แสดงแบบการ์ด', DGA_TEXT_DOMAIN) . '" 
            data-view="card">
            <span class="dashicons dashicons-grid-view"></span> ' . __('การ์ด', DGA_TEXT_DOMAIN) . '
        </button>';
        $output .= '<button type=DGA_BUTTON_TYPE class="view-mode-btn-dpc734 list-view-btn ' . $list_active . '" 
            aria-label="' . __('แสดงแบบรายการ', DGA_TEXT_DOMAIN) . '" 
            data-view="list">
            <span class="dashicons dashicons-list-view"></span> ' . __('รายการ', DGA_TEXT_DOMAIN) . '
        </button>';
        $output .= '</div>';
        
        // ช่องค้นหา
        if ($show_search) {
            $output .= '<div class="search-control-dpc734" role="search">';
            $output .= '<label for="' . esc_attr($container_id) . '-search" class="screen-reader-text">' 
                . __('ค้นหาโพสต์', DGA_TEXT_DOMAIN) . '</label>';
            $output .= '<input type="search" 
                id="' . esc_attr($container_id) . '-search" 
                class="search-input-dpc734" 
                placeholder="' . esc_attr($atts['search_placeholder']) . '" 
                aria-label="' . __('ค้นหาโพสต์', DGA_TEXT_DOMAIN) . '">';
            $output .= '<span class="search-icon-dpc734" aria-hidden="true"></span>';
            $output .= '</div>';
        }
        
        // ตัวเลือกการกรองและเรียงลำดับ
        if ($show_filters || $show_sort || $show_year_filter) {
            $output .= '<div class="filter-controls-dpc734">';
            
            // ตัวกรองตามปี
            if ($show_year_filter) {
                $output .= '<div class="year-filter-dpc734">';
                $output .= '<label for="' . esc_attr($container_id) . '-year-filter">' 
                    . __('ปีที่เผยแพร่:', DGA_TEXT_DOMAIN) . '</label>';
                $output .= '<select id="' . esc_attr($container_id) . '-year-filter" 
                    class="year-filter-select-dpc734"
                    aria-label="' . __('เลือกปีที่เผยแพร่', DGA_TEXT_DOMAIN) . '">';
                $output .= '<option value="">' . __('ทั้งหมด', DGA_TEXT_DOMAIN) . '</option>';
                foreach ($years as $year) {
                    $output .= '<option value="' . esc_attr($year) . '">' . esc_html($year) . '</option>';
                }
                $output .= '</select>';
                $output .= '</div>';
            }
            
            // ตัวเลือกการเรียงลำดับ
            if ($show_sort) {
                $output .= '<div class="sorting-controls-dpc734">';
                $output .= '<label for="' . esc_attr($container_id) . '-sorting">' 
                    . __('เรียงตาม:', DGA_TEXT_DOMAIN) . '</label>';
                $output .= '<select id="' . esc_attr($container_id) . '-sorting" 
                    class="sorting-select-dpc734"
                    aria-label="' . __('เลือกการเรียงลำดับ', DGA_TEXT_DOMAIN) . '">';
                $output .= '<option value="date-desc">' . __('ล่าสุด', DGA_TEXT_DOMAIN) . '</option>';
                $output .= '<option value="date-asc">' . __('เก่าสุด', DGA_TEXT_DOMAIN) . '</option>';
                $output .= '<option value="title-asc">' . __('ชื่อเรื่อง (ก-ฮ)', DGA_TEXT_DOMAIN) . '</option>';
                $output .= '<option value="title-desc">' . __('ชื่อเรื่อง (ฮ-ก)', DGA_TEXT_DOMAIN) . '</option>';
                $output .= '</select>';
                $output .= '</div>';
            }
            
            $output .= '</div>'; // ปิด filter-controls
        }
        
        // ปุ่ม "เพิ่ม"
        if ($show_add_button && current_user_can(DGA_EDIT_POSTS_CAP)) {
            $add_new_url = admin_url('post-new.php?post_type=' . $atts[DGA_POST_TYPE_FIELD]);
            $output .= '<div class="add-button-wrapper-dpc734">';
            $output .= '<a href="' . esc_url($add_new_url) . '" 
                class="add-new-post-btn-dpc734" 
                target="_blank"
                rel="noopener noreferrer">
                <span class="dashicons dashicons-plus"></span> ' 
                . __('เพิ่มรายการใหม่', DGA_TEXT_DOMAIN) . '
            </a>';
            $output .= '</div>';
        }
        
        $output .= '</div>'; // ปิด controls
    }
    
    // ส่วนแสดงผลโพสต์
    $output .= '<div class="dynamic-post-cards-content-dpc734 ' . esc_attr($atts['view']) . '-view">';
    
    // Skeleton loaders
    $output .= '<div class="dynamic-post-cards-loading-dpc734" aria-hidden="true">';
    for ($i = 0; $i < min(3, $atts[DGA_POSTS_PER_PAGE]); $i++) {
        if ($atts['view'] == 'card') {
            $output .= '<div class="card-item-dpc734 skeleton">
                <div class="card-image-dpc734 skeleton-image"></div>
                <div class="card-meta-dpc734"><div class="skeleton-text skeleton-short"></div></div>
                <div class="card-title-dpc734"><div class="skeleton-text"></div></div>
                <div class="card-excerpt-dpc734">
                    <div class="skeleton-text"></div>
                    <div class="skeleton-text"></div>
                </div>
                <div class="card-footer-dpc734"><div class="skeleton-button"></div></div>
            </div>';
        } else {
            $output .= '<div class="list-item-dpc734 skeleton">
                <div class="list-image-dpc734 skeleton-image"></div>
                <div class="list-content-dpc734">
                    <div class="list-title-dpc734"><div class="skeleton-text"></div></div>
                    <div class="list-meta-dpc734"><div class="skeleton-text skeleton-short"></div></div>
                    <div class="list-excerpt-dpc734">
                        <div class="skeleton-text"></div>
                        <div class="skeleton-text"></div>
                    </div>
                    <div class="list-footer-dpc734"><div class="skeleton-button"></div></div>
                </div>
            </div>';
        }
    }
    $output .= '</div>'; // ปิด loading
    $output .= '</div>'; // ปิด content container
    
    // ข้อความไม่พบข้อมูล
    $output .= '<div class="no-results-message-dpc734" style="display:none;" role="status">' 
        . __('ไม่พบผลลัพธ์ที่ตรงกับการค้นหาของคุณ', DGA_TEXT_DOMAIN) . '</div>';
    
    // ปุ่มโหลดเพิ่มเติม
    $output .= '<div class="dynamic-post-cards-footer-dpc734">';
    $output .= '<button type=DGA_BUTTON_TYPE class="load-more-btn-dpc734" style="display:none;">' 
        . __('โหลดเพิ่มเติม', DGA_TEXT_DOMAIN) . '</button>';
    $output .= '</div>';
    
    $output .= '</div>'; // ปิด main container
    
    return $output;
}
add_shortcode('dynamic_post_cards', 'dynamic_post_cards_shortcode_dpc734');

// AJAX handler สำหรับโหลดโพสต์
function dynamic_post_cards_load_posts_dpc734() {
    // ตรวจสอบ nonce
    check_ajax_referer('dynamic_post_cards_nonce_dpc734', 'nonce');
    
    // รับและ sanitize พารามิเตอร์
    $post_type = sanitize_text_field($_POST[DGA_POST_TYPE_FIELD] ?? 'post');
    $posts_per_page = absint($_POST[DGA_POSTS_PER_PAGE] ?? 6);
    $paged = absint($_POST[DGA_PAGED_PARAMETER] ?? 1);
    $category = sanitize_text_field($_POST['category'] ?? '');
    $orderby = sanitize_text_field($_POST[DGA_ORDERBY_FIELD_VALUE] ?? 'date');
    $order = strtoupper(sanitize_text_field($_POST[DGA_ORDER_FIELD] ?? 'DESC'));
    $search = sanitize_text_field($_POST['search'] ?? '');
    $year = absint($_POST['year'] ?? 0);
    
    // ตรวจสอบค่า orderby และ order
    $allowed_orderby = array('date', DGA_TITLE_FIELD, 'menu_order', 'rand');
    if (!in_array($orderby, $allowed_orderby)) {
        $orderby = 'date';
    }
    
    $allowed_order = array('ASC', 'DESC');
    if (!in_array($order, $allowed_order)) {
        $order = 'DESC';
    }
    
    // สร้างอาร์กิวเมนต์สำหรับ WP_Query
    $args = array(
        DGA_POST_TYPE_FIELD => $post_type,
        DGA_POSTS_PER_PAGE => $posts_per_page,
        DGA_PAGED_PARAMETER => $paged,
        DGA_ORDERBY_FIELD_VALUE => $orderby,
        DGA_ORDER_FIELD => $order,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        'ignore_sticky_posts' => true,
        'no_found_rows' => false
    );
    
    // กรองตามปี
    if (!empty($year)) {
        $year_be = $year - 543; // แปลงจาก พ.ศ. เป็น ค.ศ.
        $args['date_query'] = array(
            array(
                'year' => $year_be
            )
        );
    }
    
    // การค้นหา - เน้นค้นหาใน title เป็นหลัก
    if (!empty($search)) {
        // ใช้ filter เพื่อค้นหาเฉพาะใน title
        add_filter('posts_search', 'filter_search_by_title_only_dpc734', 10, 2);
        $args['s'] = $search;
    }
    
    // เพิ่มหมวดหมู่
    if (!empty($category)) {
        $taxonomies = get_object_taxonomies($post_type);
        $taxonomy_to_use = null;
        
        // ลำดับความสำคัญในการเลือก taxonomy
        $possible_taxonomies = array(
            $post_type . '_category',
            $post_type . '-category',
            'category'
        );
        
        foreach ($possible_taxonomies as $tax) {
            if (in_array($tax, $taxonomies)) {
                $taxonomy_to_use = $tax;
                break;
            }
        }
        
        // ถ้าไม่พบ taxonomy ที่กำหนด ใช้ taxonomy แรกที่พบ
        if (!$taxonomy_to_use && !empty($taxonomies)) {
            $taxonomy_to_use = $taxonomies[0];
        }
        
        if ($taxonomy_to_use) {
            $args['tax_query'] = array(
                array(
                    DGA_TAXONOMY_FIELD => $taxonomy_to_use,
                    DGA_FIELD_KEY => 'slug',
                    'terms' => $category
                )
            );
        }
    }
    
    // Query posts
    $query = new WP_Query($args);
    $posts = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // รูปภาพ featured
            $featured_image = get_the_post_thumbnail_url($post_id, 'large');
            if (!$featured_image) {
                // ใช้ placeholder image
                $featured_image = get_stylesheet_directory_uri() . '/images/placeholder.jpg';
            }
            
            // จัดการวันที่ในรูปแบบไทย
            $thai_date = get_thai_date_dpc734(get_the_date(DGA_DATE_FORMAT_SHORT));
            
            // Visitor count (ถ้ามี shortcode)
            $visitor_count = '';
            if (shortcode_exists('visitor_counter')) {
                $visitor_count = do_shortcode('[visitor_counter]');
            }
            
            // Custom Fields
            $at_docnum_1 = get_post_meta($post_id, 'at_docnum_1', true);
            $at_docnum_2 = get_post_meta($post_id, 'at_docnum_2', true);
            
            // เตรียมข้อมูลโพสต์
            $posts[] = array(
                'id' => $post_id,
                DGA_TITLE_FIELD => get_the_title(),
                'permalink' => get_permalink(),
                'featured_image' => esc_url($featured_image),
                'date' => $thai_date,
                'visitor_count' => $visitor_count,
                'excerpt' => wp_trim_words(get_the_excerpt(), 30, '...'),
                'at_docnum_1' => sanitize_text_field($at_docnum_1),
                'at_docnum_2' => sanitize_text_field($at_docnum_2)
            );
        }
        wp_reset_postdata();
    }
    
    // ลบ filter หลังใช้งาน
    if (!empty($search)) {
        remove_filter('posts_search', 'filter_search_by_title_only_dpc734', 10);
    }
    
    // ส่งข้อมูลกลับ
    wp_send_json_success(array(
        'posts' => $posts,
        'max_pages' => $query->max_num_pages,
        'found_posts' => $query->found_posts,
        'current_page' => $paged
    ));
}
add_action('wp_ajax_dynamic_post_cards_load_posts', 'dynamic_post_cards_load_posts_dpc734');
add_action('wp_ajax_nopriv_dynamic_post_cards_load_posts', 'dynamic_post_cards_load_posts_dpc734');

// Filter function สำหรับค้นหาเฉพาะใน title
function filter_search_by_title_only_dpc734($search, $wp_query) {
    global $wpdb;
    
    if (empty($search)) {
        return $search;
    }
    
    $q = $wp_query->query_vars;
    $n = !empty($q['exact']) ? '' : '%';
    $search = '';
    $searchand = '';
    
    foreach ((array) $q['search_terms'] as $term) {
        $term = esc_sql($wpdb->esc_like($term));
        $search .= "{$searchand}($wpdb->posts.post_title LIKE '{$n}{$term}{$n}')";
        $searchand = ' AND ';
    }
    
    if (!empty($search)) {
        $search = " AND ({$search}) ";
        if (!is_user_logged_in()) {
            $search .= " AND ($wpdb->posts.post_password = '') ";
        }
    }
    
    return $search;
}

// Helper function สำหรับแปลงวันที่เป็นรูปแบบไทย
function get_thai_date_dpc734($date_string) {
    $thai_month_names = array(
        '01' => 'ม.ค.', '02' => 'ก.พ.', '03' => 'มี.ค.', '04' => 'เม.ย.',
        '05' => 'พ.ค.', '06' => 'มิ.ย.', '07' => 'ก.ค.', '08' => 'ส.ค.',
        '09' => 'ก.ย.', '10' => 'ต.ค.', '11' => 'พ.ย.', '12' => 'ธ.ค.'
    );
    
    $date_parts = explode('/', $date_string);
    if (count($date_parts) == 3) {
        $day = $date_parts[0];
        $month = $thai_month_names[$date_parts[1]] ?? $date_parts[1];
        $year = intval($date_parts[2]) + 543;
        return "$day $month $year";
    }
    
    return $date_string;
}












/******* CSV และ EXCEL import *******/

// ป้องกันการเข้าถึงโดยตรง
if (!defined('ABSPATH')) {
    exit;
}

class CSV_Excel_Post_Importer {
    
    private $simplexlsx_path;
    
    public function __construct() {
        // กำหนดตำแหน่งของไฟล์ SimpleXLSX.php
        $this->simplexlsx_path = get_stylesheet_directory() . '/src/SimpleXLSX.php';
        
        // ตรวจสอบไฟล์ SimpleXLSX
        $this->check_simplexlsx_exists();
        
        // ลงทะเบียน shortcode
        add_shortcode('csv_excel_importer', array($this, 'render_importer_shortcode'));
        
        // ลงทะเบียน AJAX actions
        add_action('wp_ajax_process_import_file', array($this, 'process_import_file'));
        add_action('wp_ajax_get_imported_posts', array($this, 'get_imported_posts'));
        add_action('wp_ajax_download_template', array($this, 'download_template'));
        
        // เพิ่ม scripts และ styles
        add_action(DGA_ENQUEUE_SCRIPTS_HOOK, array($this, 'enqueue_scripts'));
    }
    
    /**
     * ตรวจสอบไฟล์ SimpleXLSX และแสดงข้อความแจ้งเตือนใน Admin
     */
    public function check_simplexlsx_exists() {
        // ตรวจสอบว่าไฟล์ SimpleXLSX มีอยู่หรือไม่
        if (!file_exists($this->simplexlsx_path)) {
            add_action('admin_notices', function() {
                ?>
                <div class="notice notice-warning is-dismissible">
                    <p>
                        <strong>CSV/Excel Post Importer:</strong> 
                        ไม่พบไฟล์ SimpleXLSX.php ที่จำเป็นสำหรับการนำเข้าไฟล์ Excel 
                        กรุณา<a href="https://github.com/shuchkin/simplexlsx/blob/master/src/SimpleXLSX.php" target="_blank">ดาวน์โหลดที่นี่</a> 
                        และวางไฟล์ไว้ที่ <code><?php echo get_stylesheet_directory(); ?>/src/SimpleXLSX.php</code>
                    </p>
                </div>
                <?php
            });
        }
    }
    
    /**
     * เพิ่ม scripts และ styles ที่จำเป็นสำหรับฟังก์ชัน
     */
    public function enqueue_scripts() {
        global $post;
        if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'csv_excel_importer')) {
            // เพิ่ม jQuery UI
            wp_enqueue_script('jquery-ui-core');
            wp_enqueue_script('jquery-ui-progressbar');
            
            // เพิ่ม scripts และ styles จาก child theme
            wp_enqueue_script('csv-excel-importer-js', get_stylesheet_directory_uri() . '/js/csv-excel-importer.js', array(DGA_JQUERY_HANDLE), '1.0', true);
            wp_enqueue_style('csv-excel-importer-css', get_stylesheet_directory_uri() . '/css/csv-excel-importer.css', array(), '1.0');
            
            // ส่งค่า AJAX URL ไปยัง JavaScript
            wp_localize_script('csv-excel-importer-js', 'csvImporterVars', array(
                DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('csv_importer_nonce'),
                'post_types' => $this->get_post_type_labels()
            ));
        }
    }
    
    /**
     * รับค่า labels ของ post types
     */
    private function get_post_type_labels() {
        return array(
            'egp' => 'จัดซื้อจัดจ้าง',
            'news' => 'ข้อมูลทั่วไป',
            'mpeople' => 'คู่มือประชาชน',
            'article' => 'บทความ',
            'pha' => 'ประชาพิจารณ์และกิจกรรม',
            'dgallery' => 'ประมวลภาพกิจกรรม'
        );
    }
    
    /**
     * แสดงผล shortcode
     */
    public function render_importer_shortcode($atts) {
        $post_types = $this->get_post_type_labels();
        
        ob_start();
        ?>
        <div id="csv-excel-importer" class="csv-excel-importer-container">
            <h2>นำเข้าข้อมูลจากไฟล์ CSV/Excel</h2>
            
            <div class="importer-form-section">
                <h3>เลือกประเภทโพส</h3>
                <div class="post-type-selection">
                    <?php foreach ($post_types as $type => $label) : ?>
                    <div class="checkbox-container">
                        <input type="checkbox" name="post_types[]" id="post-type-<?php echo esc_attr($type); ?>" value="<?php echo esc_attr($type); ?>">
                        <label for="post-type-<?php echo esc_attr($type); ?>"><?php echo esc_html($label); ?></label>
                    </div>
                    <?php endforeach; ?>
                </div>
                
                <div class="file-upload-section">
                    <h3>อัปโหลดไฟล์ CSV หรือ Excel</h3>
                    <div class="file-upload-container">
                        <input type="file" name="import_file" id="import-file" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel">
                        <div class="file-upload-info">รองรับไฟล์ CSV และ Excel (.xlsx, .xls)</div>
                    </div>
                    
                    <div class="template-download">
                        <button id="download-csv-template" class="template-button">
                            <i class="file-icon csv-icon"></i>
                            ดาวน์โหลดแม่แบบ CSV
                        </button>
                        <button id="download-excel-template" class="template-button">
                            <i class="file-icon excel-icon"></i>
                            ดาวน์โหลดแม่แบบ Excel
                        </button>
                    </div>
                </div>
                
                <div class="submit-section">
                    <button id="submit-import" class="primary-button">เริ่มนำเข้าข้อมูล</button>
                </div>
            </div>
            
            <div class="import-progress-section" style="display: none;">
                <h3>กำลังนำเข้าข้อมูล</h3>
                <div class="progress-bar-container">
                    <div id="import-progress-bar"></div>
                    <div class="progress-stats">
                        <span id="processed-count">0</span> จาก <span id="total-count">0</span> รายการ
                    </div>
                </div>
                <div class="progress-details">
                    <div class="success-count">นำเข้าสำเร็จ: <span id="success-count">0</span> รายการ</div>
                    <div class="error-count">เกิดข้อผิดพลาด: <span id="error-count">0</span> รายการ</div>
                </div>
            </div>
            
            <div class="import-results-section" style="display: none;">
                <h3>ผลการนำเข้าข้อมูล</h3>
                <div class="results-summary">
                    <p>นำเข้าสำเร็จทั้งหมด: <span id="total-success-count">0</span> รายการ</p>
                </div>
                
                <div class="results-table-container">
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>หัวข้อ</th>
                                <th>ประเภทโพส</th>
                                <th>วันที่</th>
                                <th>ลิงก์</th>
                            </tr>
                        </thead>
                        <tbody id="results-table-body">
                            <!-- Results will be populated here via AJAX -->
                        </tbody>
                    </table>
                    
                    <div class="pagination-container">
                        <div id="pagination" class="pagination">
                            <!-- Pagination will be populated here via AJAX -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * ประมวลผลไฟล์นำเข้าผ่าน AJAX
     */
    public function process_import_file() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'csv_importer_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'ตรวจสอบความปลอดภัยล้มเหลว'));
            exit;
        }
        
        // ตรวจสอบว่ามีการอัปโหลดไฟล์หรือไม่
        if (!isset($_FILES['import_file']) || empty($_FILES['import_file']['tmp_name'])) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบไฟล์ที่อัปโหลด'));
            exit;
        }
        
        // ตรวจสอบว่าเลือกประเภทโพสหรือไม่
        if (!isset($_POST['post_types']) || empty($_POST['post_types'])) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณาเลือกประเภทโพสอย่างน้อย 1 ประเภท'));
            exit;
        }
        
        $file = $_FILES['import_file'];
        $post_types = $_POST['post_types'];
        
        // ตรวจสอบนามสกุลไฟล์
        $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
        if (!in_array($file_extension, array('csv', 'xlsx', 'xls'))) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'รูปแบบไฟล์ไม่ถูกต้อง กรุณาอัปโหลดไฟล์ CSV หรือ Excel'));
            exit;
        }
        
        // ตรวจสอบว่ามีไฟล์ SimpleXLSX.php หรือไม่ (สำหรับ Excel)
        if (in_array($file_extension, array('xlsx', 'xls')) && !file_exists($this->simplexlsx_path)) {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => 'ไม่พบไฟล์ SimpleXLSX.php กรุณาดาวน์โหลดไฟล์และวางใน ' . get_stylesheet_directory() . '/src/'
            ));
            exit;
        }
        
        // ประมวลผลไฟล์ตามประเภท
        $imported_posts = array();
        $imported_ids = array();
        
        try {
            if ($file_extension === 'csv') {
                $imported_posts = $this->process_csv_file($file['tmp_name'], $post_types);
            } else {
                // สำหรับไฟล์ Excel (xlsx, xls)
                $imported_posts = $this->process_excel_file($file['tmp_name'], $post_types);
            }
            
            if (!empty($imported_posts)) {
                foreach ($imported_posts as $post) {
                    if (isset($post['id']) && $post['id'] > 0) {
                        $imported_ids[] = $post['id'];
                    }
                }
                
                // เก็บ ID ที่นำเข้าในตัวแปรชั่วคราว
                set_transient('csv_importer_imported_ids_' . get_current_user_id(), $imported_ids, HOUR_IN_SECONDS);
                
                wp_send_json_success(array(
                    DGA_MESSAGE_KEY => 'นำเข้าข้อมูลสำเร็จ',
                    'imported_count' => count($imported_posts),
                    'imported_ids' => $imported_ids
                ));
            } else {
                wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่มีโพสที่ถูกนำเข้า โปรดตรวจสอบรูปแบบไฟล์ของคุณ'));
            }
        } catch (Exception $e) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาด: ' . $e->getMessage()));
        }
        
        exit;
    }
    
    /**
     * ประมวลผลไฟล์ CSV
     */
    private function process_csv_file($file_path, $post_types) {
        $imported_posts = array();
        
        // เปิดไฟล์ CSV
        $handle = fopen($file_path, 'r');
        if ($handle === false) {
            throw new Exception('ไม่สามารถเปิดไฟล์ CSV ได้');
        }
        
        // ข้ามบรรทัดหัวตาราง
        fgetcsv($handle);
        
        // ประมวลผลแต่ละแถว
        $row_number = 1;
        while (($data = fgetcsv($handle)) !== false) {
            $row_number++;
            
            // ตรวจสอบว่าแถวมีคอลัมน์ที่จำเป็นหรือไม่
            if (count($data) < 2) {
                continue; // ข้ามแถวนี้
            }
            
            $title = trim($data[0]);
            $content = trim($data[1]);
            
            if (empty($title)) {
                continue; // ข้ามหากไม่มีหัวข้อ
            }
            
            // ใช้ประเภทโพสแรกที่เลือก (หรือเลือกเป็นรอบๆ)
            $post_type_index = ($row_number - 2) % count($post_types);
            $post_type = $post_types[$post_type_index];
            
            // สร้างโพส
            $post_id = $this->create_post($title, $content, $post_type);
            
            if ($post_id) {
                $imported_posts[] = array(
                    'id' => $post_id,
                    DGA_TITLE_FIELD => $title,
                    DGA_POST_TYPE_FIELD => $post_type
                );
            }
        }
        
        fclose($handle);
        
        return $imported_posts;
    }
    
    /**
     * ประมวลผลไฟล์ Excel ด้วย SimpleXLSX
     */
    private function process_excel_file($file_path, $post_types) {
        $imported_posts = array();
        
        // ตรวจสอบว่าไฟล์ SimpleXLSX มีอยู่
        if (!file_exists($this->simplexlsx_path)) {
            throw new Exception('ไม่พบไฟล์ SimpleXLSX.php ที่จำเป็นต้องใช้สำหรับการนำเข้าไฟล์ Excel');
        }
        
        // โหลดไลบรารี SimpleXLSX
        require_once $this->simplexlsx_path;
        
        // ใช้ SimpleXLSX อ่านไฟล์
        $xlsx = new \SimpleXLSX($file_path);
        if (!$xlsx) {
            throw new Exception('ไม่สามารถอ่านไฟล์ Excel ได้: ' . \SimpleXLSX::parseError());
        }
        
        // รับข้อมูลแถวทั้งหมด
        $rows = $xlsx->rows();
        
        // ข้ามบรรทัดหัวตาราง
        array_shift($rows);
        
        // ประมวลผลแต่ละแถว
        foreach ($rows as $index => $row) {
            // ตรวจสอบว่าแถวมีคอลัมน์ที่จำเป็นหรือไม่
            if (count($row) < 2) {
                continue; // ข้ามแถวนี้
            }
            
            $title = trim($row[0]);
            $content = trim($row[1]);
            
            if (empty($title)) {
                continue; // ข้ามหากไม่มีหัวข้อ
            }
            
            // ใช้ประเภทโพสแรกที่เลือก (หรือเลือกเป็นรอบๆ)
            $post_type_index = $index % count($post_types);
            $post_type = $post_types[$post_type_index];
            
            // สร้างโพส
            $post_id = $this->create_post($title, $content, $post_type);
            
            if ($post_id) {
                $imported_posts[] = array(
                    'id' => $post_id,
                    DGA_TITLE_FIELD => $title,
                    DGA_POST_TYPE_FIELD => $post_type
                );
            }
        }
        
        return $imported_posts;
    }
    
    /**
     * สร้างโพสใน WordPress
     */
    private function create_post($title, $content, $post_type) {
        // สร้างข้อมูลโพส
        $post_arr = array(
            'post_title'    => $title,
            'post_content'  => $content,
            DGA_POST_STATUS_FIELD   => DGA_PUBLISH_STATUS,
            'post_author'   => get_current_user_id(),
            DGA_POST_TYPE_FIELD     => $post_type,
            'post_name'     => '' // จะถูกสร้างอัตโนมัติตาม post ID
        );
        
        // เพิ่มโพส
        $post_id = wp_insert_post($post_arr);
        
        if (!is_wp_error($post_id)) {
            // อัปเดต slug ให้เป็น post ID
            wp_update_post(array(
                'ID'        => $post_id,
                'post_name' => $post_id
            ));
            
            // เพิ่ม custom field
            update_post_meta($post_id, 'at_content', $content);
            
            return $post_id;
        }
        
        return false;
    }
    
    /**
     * รับโพสที่นำเข้าสำหรับแสดงในตารางผลลัพธ์
     */
    public function get_imported_posts() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'csv_importer_nonce')) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'ตรวจสอบความปลอดภัยล้มเหลว'));
            exit;
        }
        
        $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
        $posts_per_page = 10;
        
        // รับ ID ของโพสที่นำเข้าจากตัวแปรชั่วคราว
        $imported_ids = get_transient('csv_importer_imported_ids_' . get_current_user_id());
        
        if (empty($imported_ids)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบโพสที่นำเข้า'));
            exit;
        }
        
        // คำนวณหน้าที่แสดง
        $total_posts = count($imported_ids);
        $total_pages = ceil($total_posts / $posts_per_page);
        
        // รับโพสสำหรับหน้าปัจจุบัน
        $offset = ($page - 1) * $posts_per_page;
        $current_page_ids = array_slice($imported_ids, $offset, $posts_per_page);
        
        $posts_data = array();
        foreach ($current_page_ids as $post_id) {
            $post = get_post($post_id);
            if ($post) {
                $post_type_obj = get_post_type_object($post->post_type);
                $post_type_label = $post_type_obj ? $post_type_obj->labels->singular_name : $post->post_type;
                
                $posts_data[] = array(
                    'id' => $post->ID,
                    DGA_TITLE_FIELD => $post->post_title,
                    DGA_POST_TYPE_FIELD => $post_type_label,
                    'date' => get_the_date('Y-m-d H:i', $post),
                    'link' => get_permalink($post)
                );
            }
        }
        
        // สร้าง HTML สำหรับการแบ่งหน้า
        $pagination_html = '';
        if ($total_pages > 1) {
            // Add previous button if not on first page
            if ($page > 1) {
                $pagination_html .= '<a href="#" class="page-nav prev" data-page="' . ($page - 1) . '"><span>&laquo;</span></a>';
            }
            
            // Page numbers
            $start_page = max(1, $page - 2);
            $end_page = min($total_pages, $page + 2);
            
            for ($i = $start_page; $i <= $end_page; $i++) {
                $active_class = ($i === $page) ? 'active' : '';
                $pagination_html .= '<a href="#" class="page-num ' . $active_class . '" data-page="' . $i . '">' . $i . '</a>';
            }
            
            // Add next button if not on last page
            if ($page < $total_pages) {
                $pagination_html .= '<a href="#" class="page-nav next" data-page="' . ($page + 1) . '"><span>&raquo;</span></a>';
            }
        }
        
        wp_send_json_success(array(
            'posts' => $posts_data,
            'pagination' => $pagination_html,
            'total_posts' => $total_posts,
            'current_page' => $page,
            'total_pages' => $total_pages
        ));
        
        exit;
    }
    
    /**
     * ดาวน์โหลดไฟล์แม่แบบ
     */
    public function download_template() {
        // ตรวจสอบ nonce
        if (!isset($_REQUEST['nonce']) || !wp_verify_nonce($_REQUEST['nonce'], 'csv_importer_nonce')) {
            wp_die('ตรวจสอบความปลอดภัยล้มเหลว');
        }
        
        $type = isset($_REQUEST['type']) ? sanitize_text_field($_REQUEST['type']) : 'csv';
        
        if ($type === 'csv') {
            $this->download_csv_template();
        } else {
            $this->download_excel_template();
        }
        
        exit;
    }
    
    /**
     * ดาวน์โหลดแม่แบบ CSV
     */
    private function download_csv_template() {
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="post_import_template.csv"');
        
        $output = fopen('php://output', 'w');
        
        // เพิ่มบรรทัดหัวตาราง
        fputcsv($output, array('หัวข้อโพส (Post Title)', 'เนื้อหาโพส (Post Content)'));
        
        // เพิ่มข้อมูลตัวอย่าง
        fputcsv($output, array('ตัวอย่างหัวข้อโพส', 'ตัวอย่างเนื้อหาโพส'));
        
        fclose($output);
    }
    
    /**
     * ดาวน์โหลดแม่แบบ Excel
     */
    private function download_excel_template() {
        // ตรวจสอบว่าไฟล์ SimpleXLSX มีอยู่
        if (!file_exists($this->simplexlsx_path)) {
            // สำหรับกรณีที่ไม่มี SimpleXLSX เราจะให้ดาวน์โหลดเป็น CSV แทน แต่เปลี่ยนนามสกุลเป็น .xlsx
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header('Content-Disposition: attachment; filename="post_import_template.xlsx"');
            
            $output = fopen('php://output', 'w');
            
            // เพิ่มบรรทัดหัวตาราง
            fputcsv($output, array('หัวข้อโพส (Post Title)', 'เนื้อหาโพส (Post Content)'));
            
            // เพิ่มข้อมูลตัวอย่าง
            fputcsv($output, array('ตัวอย่างหัวข้อโพส', 'ตัวอย่างเนื้อหาโพส'));
            
            fclose($output);
            return;
        }
        
        // สร้างแม่แบบ Excel แบบง่าย
        $filename = "post_import_template.xlsx";
        
        // สร้างไฟล์ CSV ชั่วคราว
        $temp_file = tempnam(sys_get_temp_dir(), 'excel_template');
        $temp_handle = fopen($temp_file, 'w');
        
        // เพิ่มบรรทัดหัวตาราง
        fputcsv($temp_handle, array('หัวข้อโพส (Post Title)', 'เนื้อหาโพส (Post Content)'));
        
        // เพิ่มข้อมูลตัวอย่าง
        fputcsv($temp_handle, array('ตัวอย่างหัวข้อโพส', 'ตัวอย่างเนื้อหาโพส'));
        
        fclose($temp_handle);
        
        // ส่งไฟล์ไปยังเบราว์เซอร์
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="' . $filename . '"');
        header('Content-Length: ' . filesize($temp_file));
        header('Pragma: no-cache');
        
        readfile($temp_file);
        unlink($temp_file); // ลบไฟล์ชั่วคราว
    }
}

// เริ่มต้นปลั๊กอิน
function init_csv_excel_post_importer() {
    new CSV_Excel_Post_Importer();
}
add_action('init', 'init_csv_excel_post_importer');



/**** Badge Style Taxonomy Editor for WordPress *****/

// Enqueue necessary scripts and styles
function wptax_enqueue_scripts() {
    wp_enqueue_style('wptax-editor', get_stylesheet_directory_uri() . '/css/wptax-editor.css');
    wp_enqueue_script('wptax-editor', get_stylesheet_directory_uri() . '/js/wptax-editor.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    
    wp_localize_script('wptax-editor', 'wptaxAjax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('wptax_nonce'),
        'isLoggedIn' => is_user_logged_in()
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'wptax_enqueue_scripts');

/**
 * ฟังก์ชั่นสำหรับดึง taxonomies ที่เกี่ยวข้องกับ post type
 * 
 * @param string $post_type ชื่อของ post type
 * @return array รายการ taxonomy ที่เกี่ยวข้อง
 */
function wptax_get_taxonomies_for_post_type($post_type) {
    $taxonomies = get_object_taxonomies($post_type, 'objects');
    
    // กรองเอาเฉพาะ taxonomy ที่ต้องการแสดง (ไม่รวม taxonomy ของระบบ)
    $exclude_taxonomies = array('post_format', 'wp_theme', 'wp_template_part_area');
    foreach ($exclude_taxonomies as $exclude) {
        if (isset($taxonomies[$exclude])) {
            unset($taxonomies[$exclude]);
        }
    }
    
    return $taxonomies;
}

// Create shortcode function with Badge UI
function wptax_taxonomy_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        DGA_TAXONOMY_FIELD => '', // ไม่ต้องระบุค่าเริ่มต้น เพราะจะหาโดยอัตโนมัติ
        'show_title' => 'yes', // แสดงชื่อ taxonomy หรือไม่ (yes/no)
        'style' => 'blue', // สีของ badge: blue, orange, green, purple
        'editable' => 'yes' // อนุญาตให้แก้ไขหรือไม่ (yes/no)
    ), $atts);
    
    $post_id = get_the_ID();
    $post_type = get_post_type($post_id);
    $show_title = ($atts['show_title'] === 'yes');
    $is_editable = ($atts['editable'] === 'yes' && is_user_logged_in() && current_user_can('edit_post', $post_id));
    
    // หาก taxonomy ไม่ได้ระบุมา ให้ดึง taxonomies ทั้งหมดที่เกี่ยวข้องกับ post type นี้
    if (empty($atts[DGA_TAXONOMY_FIELD])) {
        $taxonomies = wptax_get_taxonomies_for_post_type($post_type);
        
        // ถ้าไม่พบ taxonomy ใดๆ
        if (empty($taxonomies)) {
            return '<div class="wptax-taxonomy-container">ไม่พบ taxonomy ที่เกี่ยวข้อง</div>';
        }
    } else {
        // หาก taxonomy ถูกระบุไว้ใน shortcode ให้ใช้อันนั้น
        $taxonomy = sanitize_key($atts[DGA_TAXONOMY_FIELD]);
        $taxonomy_obj = get_taxonomy($taxonomy);
        
        if ($taxonomy_obj && is_object($taxonomy_obj)) {
            $taxonomies = array($taxonomy => $taxonomy_obj);
        } else {
            return '<div class="wptax-taxonomy-container">ไม่พบ taxonomy ที่ระบุ</div>';
        }
    }
    
    // Add style class based on attribute
    $style_class = 'wptax-style-' . sanitize_html_class($atts['style']);
    
    $output = '<div class="wptax-taxonomy-container ' . $style_class . '">';
    
    // วนลูปแสดงแต่ละ taxonomy
    foreach ($taxonomies as $taxonomy_name => $taxonomy_obj) {
        $terms = get_the_terms($post_id, $taxonomy_name);
        $current_terms = !empty($terms) && !is_wp_error($terms) ? $terms : array();
        $current_term_ids = array();
        
        if (!empty($current_terms)) {
            foreach ($current_terms as $term) {
                $current_term_ids[] = $term->term_id;
            }
        }
        
        $output .= '<div class="wptax-taxonomy-section">';
        
        // แสดงชื่อ taxonomy หากต้องการ
        if ($show_title) {
            $output .= '<h4 class="wptax-taxonomy-title">' . esc_html($taxonomy_obj->label) . ':</h4>';
        }
        
        // ส่วนแสดงข้อมูลและปุ่มแก้ไข
        $output .= '<div class="wptax-term-display" data-post-id="' . esc_attr($post_id) . '" data-taxonomy="' . esc_attr($taxonomy_name) . '">';
        
        if (!empty($current_terms)) {
            $term_links = array();
            foreach ($current_terms as $term) {
                $term_links[] = '<a href="' . esc_url(get_term_link($term)) . '" class="wptax-term-link" title="' . esc_attr($term->name) . '">' . 
                              esc_html($term->name) . '</a>';
            }
            $output .= '<div class="wptax-terms-container">' . implode('', $term_links) . '</div>';
        } else {
            $output .= '<span class="wptax-no-term">ไม่มีหมวดหมู่กำหนด</span>';
        }
        
        if ($is_editable) {
            $output .= '<button class="wptax-edit-btn" title="แก้ไขหมวดหมู่"><i class="wptax-edit-icon"></i></button>';
            
            // สร้าง checkboxes สำหรับการแก้ไข (ซ่อนไว้โดยค่าเริ่มต้น)
            $output .= '<div class="wptax-edit-form" style="display:none;">';
            $output .= '<div class="wptax-checkbox-container">';
            
            $all_terms = get_terms(array(
                DGA_TAXONOMY_FIELD => $taxonomy_name,
                DGA_HIDE_EMPTY_FIELD => false,
                DGA_ORDERBY_FIELD_VALUE => 'name',
                DGA_ORDER_FIELD => 'ASC'
            ));
            
            if (!is_wp_error($all_terms) && !empty($all_terms)) {
                foreach ($all_terms as $term) {
                    $checked = in_array($term->term_id, $current_term_ids) ? 'checked="checked"' : '';
                    $output .= '<div class="wptax-checkbox-item">';
                    $output .= '<input type="checkbox" id="wptax-term-' . esc_attr($term->term_id) . '-' . esc_attr($post_id) . '" 
                                class="wptax-term-checkbox" value="' . esc_attr($term->term_id) . '" ' . $checked . '>';
                    $output .= '<label for="wptax-term-' . esc_attr($term->term_id) . '-' . esc_attr($post_id) . '">' . esc_html($term->name) . '</label>';
                    $output .= '</div>';
                }
            }
            
            $output .= '</div>'; // จบ checkbox container
            $output .= '<div class="wptax-buttons-group">';
            $output .= '<button class="wptax-save-btn">บันทึก</button>';
            $output .= '<button class="wptax-cancel-btn">ยกเลิก</button>';
            $output .= '</div>';
            $output .= '</div>'; // จบฟอร์มแก้ไข
        }
        
        $output .= '</div>'; // จบส่วนแสดง term
        $output .= '</div>'; // จบส่วน taxonomy
    }
    
    $output .= '</div>'; // จบ container
    
    return $output;
}
add_shortcode('wptax_editor', 'wptax_taxonomy_shortcode');

// AJAX handler for updating taxonomy
function wptax_update_taxonomy() {
    check_ajax_referer('wptax_nonce', 'nonce');
    
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์ในการแก้ไขโพสต์');
        return;
    }
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_key($_POST[DGA_TAXONOMY_FIELD]) : '';
    
    if (empty($taxonomy)) {
        wp_send_json_error('ไม่ได้ระบุ taxonomy');
        return;
    }
    
    if (empty($post_id)) {
        wp_send_json_error('ไม่ได้ระบุรหัสโพสต์');
        return;
    }
    
    // ตรวจสอบว่ามีสิทธิ์แก้ไขโพสต์นี้หรือไม่
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้');
        return;
    }
    
    // รับค่า term_ids จาก POST request
    $term_ids = isset($_POST['term_ids']) ? $_POST['term_ids'] : array();
    
    // Debug
    error_log('Received term_ids: ' . print_r($term_ids, true));
    
    // แปลง term_ids เป็น array และตรวจสอบว่ามีค่าหรือไม่
    if (!is_array($term_ids)) {
        if (empty($term_ids)) {
            $term_ids = array(); // ถ้าไม่มีค่า ให้ใช้ array ว่าง
        } else {
            $term_ids = array($term_ids); // ถ้ามีค่าเดียว ให้แปลงเป็น array
        }
    }
    
    // แน่ใจว่าทุกค่าใน term_ids เป็น integer
    $term_ids = array_map('intval', $term_ids);
    
    // Debug
    error_log('Processed term_ids: ' . print_r($term_ids, true));
    
    // อัพเดต terms
    $result = wp_set_object_terms($post_id, $term_ids, $taxonomy);
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    } else {
        // ดึงข้อมูล terms ที่อัพเดตแล้ว
        $updated_terms = get_the_terms($post_id, $taxonomy);
        $terms_data = array();
        
        if (!empty($updated_terms) && !is_wp_error($updated_terms)) {
            foreach ($updated_terms as $term) {
                $terms_data[] = array(
                    'id' => $term->term_id,
                    DGA_NAME_FIELD => $term->name,
                    'link' => get_term_link($term)
                );
            }
        }
        
        wp_send_json_success(array(
            'terms' => $terms_data
        ));
    }
}
add_action('wp_ajax_wptax_update_taxonomy', 'wptax_update_taxonomy');



/**** แสดงโพสต์ที่เกี่ยวข้องตาม Taxonomy ****/


function wptax_related_enqueue_assets() {
    // ไม่ทำงานกับ post type "ckan"
    if (is_singular('ckan')) {
        return;
    }
    
    $theme_version = wp_get_theme()->get('Version');
    
    // Check for child theme CSS
    if (is_child_theme()) {
        $child_style_path = get_stylesheet_directory() . '/css/wptax-related.css';
        $child_style_uri = get_stylesheet_directory_uri() . '/css/wptax-related.css';
        
        if (file_exists($child_style_path)) {
            wp_enqueue_style('wptax-related-style', $child_style_uri, array(), $theme_version);
        } else {
            wp_enqueue_style('wptax-related-style', get_template_directory_uri() . '/css/wptax-related.css', array(), $theme_version);
        }
        
        // Check for child theme JS
        $child_script_path = get_stylesheet_directory() . '/js/wptax-related.js';
        $child_script_uri = get_stylesheet_directory_uri() . '/js/wptax-related.js';
        
        if (file_exists($child_script_path)) {
            wp_enqueue_script('wptax-related-script', $child_script_uri, array(DGA_JQUERY_HANDLE), $theme_version, true);
        } else {
            wp_enqueue_script('wptax-related-script', get_template_directory_uri() . '/js/wptax-related.js', array(DGA_JQUERY_HANDLE), $theme_version, true);
        }
    } else {
        wp_enqueue_style('wptax-related-style', get_template_directory_uri() . '/css/wptax-related.css', array(), $theme_version);
        wp_enqueue_script('wptax-related-script', get_template_directory_uri() . '/js/wptax-related.js', array(DGA_JQUERY_HANDLE), $theme_version, true);
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'wptax_related_enqueue_assets');

// Related posts shortcode function
function wptax_related_shortcode($atts) {

    // ไม่ทำงานกับ post type "ckan"
    if (get_post_type() === 'ckan') {
        return '';
    }
    
    // Parse attributes
    $atts = shortcode_atts(array(
        DGA_POSTS_PER_PAGE => 3,
        'exclude_current' => 'yes',
        DGA_POST_TYPE_FIELD => '' // ถ้าไม่ระบุจะใช้ post type ปัจจุบัน
    ), $atts);
    
    
    // Get current post's taxonomies and terms
    $current_post_id = get_the_ID();
    $post_type = !empty($atts[DGA_POST_TYPE_FIELD]) ? $atts[DGA_POST_TYPE_FIELD] : get_post_type($current_post_id);
    $taxonomies = get_object_taxonomies($post_type);
    $current_terms = array();
    
    foreach ($taxonomies as $taxonomy) {
        $terms = wp_get_post_terms($current_post_id, $taxonomy, array(DGA_FIELDS_PARAMETER => 'ids'));
        if (!empty($terms) && !is_wp_error($terms)) {
            $current_terms[$taxonomy] = $terms;
        }
    }
    
    // Build tax query
    $tax_query = array('relation' => 'OR');
    foreach ($current_terms as $taxonomy => $terms) {
        $tax_query[] = array(
            DGA_TAXONOMY_FIELD => $taxonomy,
            DGA_FIELD_KEY => 'id',
            'terms' => $terms
        );
    }
    
    // Setup query arguments
    $query_args = array(
        DGA_POST_TYPE_FIELD => $post_type,
        DGA_POSTS_PER_PAGE => $atts[DGA_POSTS_PER_PAGE],
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    // Add tax_query if we have terms
    if (!empty($current_terms)) {
        $query_args['tax_query'] = $tax_query;
    }
    
    // Exclude current post if specified
    if ($atts['exclude_current'] === 'yes') {
        $query_args['post__not_in'] = array($current_post_id);
    }
    
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="wptax-related-container">
            <div class="wptax-related-wrapper">
                <?php while ($query->have_posts()) : $query->the_post(); ?>
                    <article class="wptax-related-item">
                        <a href="<?php the_permalink(); ?>" class="wptax-related-link">
                            <div class="wptax-related-image">
                                <?php if (has_post_thumbnail()) : ?>
                                    <?php the_post_thumbnail('medium', array('class' => 'wptax-related-thumbnail')); ?>
                                <?php else : ?>
                                    <div class="wptax-related-no-image"></div>
                                <?php endif; ?>
                                <?php
                                    // Get all taxonomies for this post
                                    $post_taxonomies = get_object_taxonomies(get_post_type());
                                    $first_term = null;

                                    // Loop through taxonomies to find the first term
                                    foreach ($post_taxonomies as $taxonomy) {
                                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                                        if (!empty($terms) && !is_wp_error($terms)) {
                                            $first_term = $terms[0];
                                            break; // ใช้ term แรกที่เจอ
                                        }
                                    }

                                    // Display the term name if found
                                    if ($first_term) : ?>
                                        <span class="wptax-related-badge"><?php echo esc_html($first_term->name); ?></span>
                                    <?php endif; ?>
                                    
                            </div>
                            <div class="wptax-related-content">
                                <h3 class="wptax-related-title"><?php the_title(); ?></h3>
                                <div class="wptax-related-meta">
                                    <span class="wptax-related-time"><?php echo human_time_diff(get_the_time('U'), current_time('timestamp')); ?> ที่แล้ว</span>
                                    <span class="wptax-related-separator">•</span>
                                    <span class="wptax-related-readmore">อ่านต่อ</span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>
        </div>
    <?php else: ?>
        <div class="wptax-related-empty">ไม่พบโพสต์ที่เกี่ยวข้อง</div>
    <?php endif;
    
    wp_reset_postdata();
    
    return ob_get_clean();
}
add_shortcode('wptax_related', 'wptax_related_shortcode');


/**** Modal Popup บังคับกำหนดหมวดหมู่สำหรับ Post ****/

// Enqueue necessary scripts and styles
function wptax_category_modal_enqueue_assets() {
    // ไม่ทำงานกับ post type "ckan"
    if (is_singular() && get_post_type() !== 'ckan') { 
        $theme_version = wp_get_theme()->get('Version');
        
        // Enqueue CSS
        wp_enqueue_style('wptax-modal-style', get_stylesheet_directory_uri() . '/css/wptax-modal.css', array(), $theme_version);
        
        // Enqueue JavaScript
        wp_enqueue_script('wptax-modal-script', get_stylesheet_directory_uri() . '/js/wptax-modal.js', array(DGA_JQUERY_HANDLE), $theme_version, true);
        
        // ส่งค่าที่ต้องใช้ไปยัง JavaScript
        wp_localize_script('wptax-modal-script', 'wptaxModal', array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('wptax_modal_nonce'),
            'saveText' => 'บันทึกหมวดหมู่',
            'closeText' => 'ยกเลิก',
            'modalTitle' => 'กำหนดหมวดหมู่สำหรับเนื้อหานี้',
            'modalDesc' => 'กรุณาเลือกหมวดหมู่ที่เหมาะสมสำหรับเนื้อหานี้',
            'successMessage' => 'บันทึกหมวดหมู่เรียบร้อยแล้ว',
            'errorMessage' => DGA_ERROR_RETRY_MESSAGE_TH
        ));
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'wptax_category_modal_enqueue_assets');

/**
 * ฟังก์ชั่นดึง Taxonomies ที่เกี่ยวข้องกับ post type
 */
function wptax_get_posttype_taxonomies($post_type) {
    $taxonomies = get_object_taxonomies($post_type, 'objects');
    
    // กรองเอาเฉพาะ taxonomy ที่ต้องการแสดง (ไม่รวม taxonomy ของระบบ)
    $exclude_taxonomies = array('post_format', 'wp_theme', 'wp_template_part_area');
    foreach ($exclude_taxonomies as $exclude) {
        if (isset($taxonomies[$exclude])) {
            unset($taxonomies[$exclude]);
        }
    }
    
    return $taxonomies;
}

/**
 * ฟังก์ชั่นตรวจสอบว่า post มีการกำหนด term ใน taxonomy หรือไม่
 */
function wptax_post_has_terms($post_id, $taxonomy) {
    $terms = wp_get_post_terms($post_id, $taxonomy);
    return !empty($terms) && !is_wp_error($terms);
}

/**
 * Shortcode function
 */
function wptax_category_modal_shortcode($atts) {
    // ไม่ทำงานกับ post type "ckan"
    if (get_post_type() === 'ckan') {
        return '';
    }
    
    // Parse attributes
    $atts = shortcode_atts(array(
        DGA_TAXONOMY_FIELD => '', // ถ้าไม่ระบุจะตรวจสอบทุก taxonomy
    ), $atts);
    
    // ถ้าไม่ได้ login หรือไม่มีสิทธิ์แก้ไข ไม่ต้องแสดงอะไร
    if (!is_user_logged_in() || !current_user_can(DGA_EDIT_POSTS_CAP)) {
        return '';
    }
    
    $post_id = get_the_ID();
    $post_type = get_post_type($post_id);
    
    // ดึง taxonomies ที่เกี่ยวข้องกับ post type นี้
    if (!empty($atts[DGA_TAXONOMY_FIELD])) {
        // ถ้ามีการระบุ taxonomy ให้ใช้เฉพาะ taxonomy ที่ระบุ
        $taxonomy_obj = get_taxonomy($atts[DGA_TAXONOMY_FIELD]);
        if ($taxonomy_obj) {
            $taxonomies = array($atts[DGA_TAXONOMY_FIELD] => $taxonomy_obj);
        } else {
            return '<div class="wptax-error">ไม่พบ Taxonomy ที่ระบุ</div>';
        }
    } else {
        // ถ้าไม่ระบุ ให้ดึงทุก taxonomy ที่เกี่ยวข้อง
        $taxonomies = wptax_get_posttype_taxonomies($post_type);
    }
    
    if (empty($taxonomies)) {
        return '<div class="wptax-error">ไม่พบ Taxonomy ที่เกี่ยวข้อง</div>';
    }
    
    // ตรวจสอบว่ามี term ใน taxonomy หรือยัง
    $missing_taxonomies = array();
    foreach ($taxonomies as $tax_name => $tax_obj) {
        if (!wptax_post_has_terms($post_id, $tax_name)) {
            $missing_taxonomies[$tax_name] = $tax_obj;
        }
    }
    
    // ถ้าไม่มี taxonomy ที่ขาดหมวดหมู่ ไม่ต้องแสดง modal
    if (empty($missing_taxonomies)) {
        return '';
    }
    
    // เริ่มสร้าง output
    ob_start();
    ?>
    <div id="wptax-category-modal" class="wptax-modal" data-post-id="<?php echo esc_attr($post_id); ?>">
        <div class="wptax-modal-overlay"></div>
        <div class="wptax-modal-container">
            <div class="wptax-modal-header">
                <h3>กำหนดหมวดหมู่สำหรับเนื้อหานี้</h3>
                <button class="wptax-modal-close">&times;</button>
            </div>
            <div class="wptax-modal-body">
                <p class="wptax-modal-desc">กรุณาเลือกหมวดหมู่ที่เหมาะสมสำหรับเนื้อหานี้</p>
                
                <?php foreach ($missing_taxonomies as $tax_name => $tax_obj) : ?>
                <div class="wptax-taxonomy-section" data-taxonomy="<?php echo esc_attr($tax_name); ?>">
                    <h4 class="wptax-taxonomy-title"><?php echo esc_html($tax_obj->label); ?></h4>
                    
                    <div class="wptax-term-select-container">
                        <select class="wptax-term-select" name="wptax_term_<?php echo esc_attr($tax_name); ?>">
                            <option value="">-- เลือกหมวดหมู่ --</option>
                            <?php 
                            $terms = get_terms(array(
                                DGA_TAXONOMY_FIELD => $tax_name,
                                DGA_HIDE_EMPTY_FIELD => false,
                            ));
                            
                            if (!is_wp_error($terms) && !empty($terms)) {
                                foreach ($terms as $term) {
                                    echo '<option value="' . esc_attr($term->term_id) . '">' . 
                                         esc_html($term->name) . '</option>';
                                }
                            }
                            ?>
                        </select>
                    </div>
                </div>
                <?php endforeach; ?>
                
                <div class="wptax-message-container"></div>
            </div>
            <div class="wptax-modal-footer">
                <button class="wptax-save-btn">บันทึกหมวดหมู่</button>
                <button class="wptax-cancel-btn">ยกเลิก</button>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('wptax_category_modal', 'wptax_category_modal_shortcode');

/**
 * AJAX handler for saving taxonomy terms
 */
function wptax_save_category_terms() {
    check_ajax_referer('wptax_modal_nonce', 'nonce');
    
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการแก้ไข'));
        return;
    }
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $terms = isset($_POST['terms']) ? $_POST['terms'] : array();
    
    if (empty($post_id) || empty($terms) || !is_array($terms)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ข้อมูลไม่ถูกต้อง'));
        return;
    }
    
    // ตรวจสอบว่ามีสิทธิ์แก้ไขโพสต์นี้หรือไม่
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์แก้ไขเนื้อหานี้'));
        return;
    }
    
    $success = true;
    $updated_terms = array();
    
    foreach ($terms as $taxonomy => $term_id) {
        if (empty($term_id)) continue;
        
        $result = wp_set_object_terms($post_id, intval($term_id), sanitize_key($taxonomy));
        
        if (is_wp_error($result)) {
            $success = false;
        } else {
            $term = get_term($term_id);
            if (!is_wp_error($term)) {
                $updated_terms[] = array(
                    DGA_TAXONOMY_FIELD => $taxonomy,
                    'term_name' => $term->name,
                    'term_link' => get_term_link($term)
                );
            }
        }
    }
    
    if ($success) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'บันทึกหมวดหมู่เรียบร้อยแล้ว',
            'updated_terms' => $updated_terms
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดระหว่างการบันทึก'));
    }
}
add_action('wp_ajax_wptax_save_category_terms', 'wptax_save_category_terms');

/**
 * Auto-insert shortcode at the beginning of content
 */
function wptax_insert_category_modal($content) {
    // ไม่ทำงานกับ post type "ckan"
    if (is_singular() && is_user_logged_in() && current_user_can(DGA_EDIT_POSTS_CAP) && get_post_type() !== 'ckan') {
        $shortcode = do_shortcode('[wptax_category_modal]');
        return $shortcode . $content;
    }
    return $content;
}
add_filter('the_content', 'wptax_insert_category_modal', 5);



/***** ฟังก์ชั่นแสดง OIT **********/

// ลงทะเบียน shortcode และ enqueue scripts/styles
function register_oitform_shortcode() {
    add_shortcode('oitform', 'oitform_shortcode');
    
    // ลงทะเบียน script และ style
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'enqueue_oitform_scripts');
}
add_action('init', 'register_oitform_shortcode');

// Enqueue scripts และ styles
function enqueue_oitform_scripts() {
    wp_register_style('oitform-styles', get_stylesheet_directory_uri() . '/css/oitform.css', array(), DGA_VERSION_NUMBER);
    wp_register_script('oitform-script', get_stylesheet_directory_uri() . '/js/oitform.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    
    // ส่งค่า AJAX URL ไปยัง JavaScript
    wp_localize_script('oitform-script', 'oitform_params', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        'security' => wp_create_nonce('oitform-nonce')
    ));
}

// ฟังก์ชั่น shortcode หลัก
function oitform_shortcode($atts) {
    // Enqueue script และ style เมื่อใช้ shortcode
    wp_enqueue_style('oitform-styles');
    wp_enqueue_script('oitform-script');
    wp_enqueue_style('dashicons');
    
    // เริ่มต้น output buffering
    ob_start();
    
    // ดึงข้อมูลตัวชี้วัดจากฐานข้อมูล
    $indicators = get_option('oitform_indicators', array());
    
    ?>
    <div class="oitform-container" role="region" aria-label="แบบวัด OIT">
        <h2 class="oitform-title">แบบวัด OIT</h2>
        
        <!-- ส่วนควบคุมสำหรับ Admin -->
        <?php if(current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
        <div class="oitform-admin-controls">
            <h3>จัดการตัวชี้วัดย่อย</h3>
            <form id="oitform-add-indicator" class="oitform-admin-form">
                <div class="form-group">
                    <label for="indicator-name">ชื่อตัวชี้วัดย่อย:</label>
                    <input type="text" id="indicator-name" name="indicator_name" required aria-required="true">
                </div>
                <div class="form-group">
                    <label for="indicator-description">คำอธิบาย:</label>
                    <textarea id="indicator-description" name="indicator_description" rows="3" aria-required="true"></textarea>
                </div>
                <button type=DGA_SUBMIT_TYPE class="oitform-btn oitform-btn-primary">เพิ่มตัวชี้วัดย่อย</button>
            </form>
        </div>
        <?php endif; ?>
        
        <!-- แสดงตัวชี้วัด -->
        <div id="oitform-indicators-list" class="oitform-indicators">
            <?php if(empty($indicators)): ?>
                <p class="oitform-empty-message">ยังไม่มีตัวชี้วัดย่อย</p>
            <?php else: ?>
                <?php foreach($indicators as $index => $indicator): ?>
                <div class="oitform-indicator" data-id="<?php echo esc_attr($index); ?>">
                    <div class="oitform-indicator-header">
                        <h3><?php echo esc_html($indicator['name']); ?></h3>
                        <?php if(current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
                        <div class="oitform-indicator-actions">
                            <button class="oitform-btn oitform-btn-edit" aria-label="แก้ไขตัวชี้วัด <?php echo esc_attr($indicator['name']); ?>">
                                <span class="dashicons dashicons-edit"></span>
                            </button>
                            <button class="oitform-btn oitform-btn-delete" aria-label="ลบตัวชี้วัด <?php echo esc_attr($indicator['name']); ?>">
                                <span class="dashicons dashicons-trash"></span>
                            </button>
                        </div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="oitform-indicator-description">
                        <?php echo wpautop(esc_html($indicator['description'])); ?>
                    </div>
                    
                    <!-- เนื้อหาของตัวชี้วัด -->
                    <div class="oitform-content-items">
                        <h4>เนื้อหา:</h4>
                        <?php if(empty($indicator['content_items'])): ?>
                            <p class="oitform-empty-message">ยังไม่มีเนื้อหา</p>
                        <?php else: ?>
                            <ul class="oitform-content-list">
                                <?php foreach($indicator['content_items'] as $content_index => $content): ?>
                                <li class="oitform-content-item" data-id="<?php echo esc_attr($content_index); ?>">
                                    <div class="oitform-content-title">
                                        <?php echo esc_html($content[DGA_TITLE_FIELD]); ?>
                                    </div>
                                    <div class="oitform-content-description">
                                        <?php echo wpautop(esc_html($content['description'])); ?>
                                    </div>
                                    <?php if(!empty($content['url'])): ?>
                                    <div class="oitform-content-url">
                                        <a href="<?php echo esc_url($content['url']); ?>" target="_blank" rel="noopener">
                                            ดูเนื้อหา <span class="dashicons dashicons-external"></span>
                                        </a>
                                    </div>
                                    <?php endif; ?>
                                    
                                    <?php if(current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
                                    <div class="oitform-content-actions">
                                        <button class="oitform-btn oitform-btn-edit-content" aria-label="แก้ไขเนื้อหา <?php echo esc_attr($content[DGA_TITLE_FIELD]); ?>">
                                            <span class="dashicons dashicons-edit"></span>
                                        </button>
                                        <button class="oitform-btn oitform-btn-delete-content" aria-label="ลบเนื้อหา <?php echo esc_attr($content[DGA_TITLE_FIELD]); ?>">
                                            <span class="dashicons dashicons-trash"></span>
                                        </button>
                                    </div>
                                    <?php endif; ?>
                                </li>
                                <?php endforeach; ?>
                            </ul>
                        <?php endif; ?>
                        
                        <?php if(current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
                        <div class="oitform-add-content">
                            <button class="oitform-btn oitform-btn-add-content" data-indicator-id="<?php echo esc_attr($index); ?>">
                                เพิ่มเนื้อหา <span class="dashicons dashicons-plus"></span>
                            </button>
                        </div>
                        <?php endif; ?>
                    </div>
                </div>
                <?php endforeach; ?>
            <?php endif; ?>
        </div>
        
        <!-- Modal สำหรับฟอร์ม -->
        <?php if(current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
        <div id="oitform-modal" class="oitform-modal" aria-hidden="true">
            <div class="oitform-modal-overlay"></div>
            <div class="oitform-modal-container" role="dialog" aria-modal="true" aria-labelledby="modal-title">
                <div class="oitform-modal-header">
                    <h3 id="modal-title">ฟอร์ม</h3>
                    <button class="oitform-modal-close" aria-label="ปิด">×</button>
                </div>
                <div class="oitform-modal-content">
                    <!-- เนื้อหาของฟอร์มจะถูกเพิ่มโดย JavaScript -->
                </div>
            </div>
        </div>
        <?php endif; ?>
    </div>
    <?php
    
    // คืนค่า HTML
    return ob_get_clean();
}

/**
 * AJAX handlers สำหรับแบบวัด OIT
 */
 
// เพิ่มตัวชี้วัด
function oitform_add_indicator() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $name = sanitize_text_field($_POST['name']);
    $description = sanitize_textarea_field($_POST['description']);
    
    if(empty($name)) {
        wp_send_json_error('กรุณาระบุชื่อตัวชี้วัด');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // เพิ่มตัวชี้วัดใหม่
    $indicators[] = array(
        DGA_NAME_FIELD => $name,
        'description' => $description,
        'content_items' => array()
    );
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success(array(
        'index' => count($indicators) - 1,
        'indicator' => end($indicators)
    ));
}
add_action('wp_ajax_oitform_add_indicator', 'oitform_add_indicator');

// แก้ไขตัวชี้วัด
function oitform_edit_indicator() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $index = intval($_POST['index']);
    $name = sanitize_text_field($_POST['name']);
    $description = sanitize_textarea_field($_POST['description']);
    
    if(empty($name)) {
        wp_send_json_error('กรุณาระบุชื่อตัวชี้วัด');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดนี้หรือไม่
    if(!isset($indicators[$index])) {
        wp_send_json_error('ไม่พบตัวชี้วัด');
    }
    
    // อัปเดตตัวชี้วัด
    $indicators[$index]['name'] = $name;
    $indicators[$index]['description'] = $description;
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success(array(
        'indicator' => $indicators[$index]
    ));
}
add_action('wp_ajax_oitform_edit_indicator', 'oitform_edit_indicator');

// ลบตัวชี้วัด
function oitform_delete_indicator() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $index = intval($_POST['index']);
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดนี้หรือไม่
    if(!isset($indicators[$index])) {
        wp_send_json_error('ไม่พบตัวชี้วัด');
    }
    
    // ลบตัวชี้วัด
    array_splice($indicators, $index, 1);
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success();
}
add_action('wp_ajax_oitform_delete_indicator', 'oitform_delete_indicator');

// เพิ่มเนื้อหา
function oitform_add_content() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $indicator_index = intval($_POST['indicator_index']);
    $title = sanitize_text_field($_POST[DGA_TITLE_FIELD]);
    $description = sanitize_textarea_field($_POST['description']);
    $url = esc_url_raw($_POST['url']);
    
    if(empty($title)) {
        wp_send_json_error('กรุณาระบุหัวข้อเนื้อหา');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดนี้หรือไม่
    if(!isset($indicators[$indicator_index])) {
        wp_send_json_error('ไม่พบตัวชี้วัด');
    }
    
    // เพิ่มเนื้อหาใหม่
    $indicators[$indicator_index]['content_items'][] = array(
        DGA_TITLE_FIELD => $title,
        'description' => $description,
        'url' => $url
    );
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    $content_index = count($indicators[$indicator_index]['content_items']) - 1;
    wp_send_json_success(array(
        'content_index' => $content_index,
        'content' => $indicators[$indicator_index]['content_items'][$content_index]
    ));
}
add_action('wp_ajax_oitform_add_content', 'oitform_add_content');

// แก้ไขเนื้อหา
function oitform_edit_content() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $indicator_index = intval($_POST['indicator_index']);
    $content_index = intval($_POST['content_index']);
    $title = sanitize_text_field($_POST[DGA_TITLE_FIELD]);
    $description = sanitize_textarea_field($_POST['description']);
    $url = esc_url_raw($_POST['url']);
    
    if(empty($title)) {
        wp_send_json_error('กรุณาระบุหัวข้อเนื้อหา');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดและเนื้อหานี้หรือไม่
    if(!isset($indicators[$indicator_index]) || !isset($indicators[$indicator_index]['content_items'][$content_index])) {
        wp_send_json_error('ไม่พบเนื้อหา');
    }
    
    // อัปเดตเนื้อหา
    $indicators[$indicator_index]['content_items'][$content_index] = array(
        DGA_TITLE_FIELD => $title,
        'description' => $description,
        'url' => $url
    );
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success(array(
        'content' => $indicators[$indicator_index]['content_items'][$content_index]
    ));
}
add_action('wp_ajax_oitform_edit_content', 'oitform_edit_content');

// ลบเนื้อหา
function oitform_delete_content() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $indicator_index = intval($_POST['indicator_index']);
    $content_index = intval($_POST['content_index']);
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดและเนื้อหานี้หรือไม่
    if(!isset($indicators[$indicator_index]) || !isset($indicators[$indicator_index]['content_items'][$content_index])) {
        wp_send_json_error('ไม่พบเนื้อหา');
    }
    
    // ลบเนื้อหา
    array_splice($indicators[$indicator_index]['content_items'], $content_index, 1);
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success();
}
add_action('wp_ajax_oitform_delete_content', 'oitform_delete_content');



/***** เพิ่มลิงค์หน่วยงาน ภายใน/ภายนอก ******/

// Don't allow direct access to the file
if (!defined('ABSPATH')) {
    exit;
}

// Enqueue necessary scripts and styles
function org_links_enqueue_scripts() {
    // ตรวจสอบว่ากำลังอยู่ในหน้า admin หรือไม่
    $is_admin_page = is_admin() && isset($_GET['page']) && $_GET['page'] === 'org-links-settings';
    
    // Enqueue styles for frontend and admin
    if (!is_admin() || $is_admin_page) {
        wp_enqueue_style('org-links-style', get_stylesheet_directory_uri() . '/css/org-links.css', array(), DGA_THEME_VERSION);
        wp_enqueue_style('org-links-modal-style', get_stylesheet_directory_uri() . '/css/org-links-modal.css', array(), DGA_THEME_VERSION);
    }
    
    // Admin only styles
    if ($is_admin_page) {
        wp_enqueue_style('org-links-admin-style', get_stylesheet_directory_uri() . '/css/org-links-admin.css', array(), DGA_THEME_VERSION);
    }
    
    // Enqueue main script for frontend and admin
    if (!is_admin() || $is_admin_page) {
        wp_enqueue_media(); // เพิ่ม media uploader ทั้งใน frontend และ admin
        wp_enqueue_script('org-links-script', get_stylesheet_directory_uri() . '/js/organization-links.js', array(DGA_JQUERY_HANDLE, 'jquery-ui-sortable'), DGA_THEME_VERSION, true);
        
        // Pass data to JavaScript
        wp_localize_script('org-links-script', 'org_links_data', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('org_links_nonce'),
            'admin_nonce' => wp_create_nonce('org_links_admin_nonce'),
            'is_admin' => is_admin() ? 'true' : 'false',
            'can_manage' => current_user_can(DGA_MANAGE_OPTIONS_CAP) ? 'true' : 'false'
        ));
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'org_links_enqueue_scripts');
add_action('admin_enqueue_scripts', 'org_links_enqueue_scripts');

/**
 * Create custom database table on plugin activation or theme setup
 */
function org_links_create_table() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    // ตรวจสอบว่าตารางมีอยู่แล้วหรือไม่
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title text NOT NULL,
            logo text NOT NULL,
            url varchar(255) NOT NULL,
            type varchar(20) NOT NULL,
            order_num int(11) DEFAULT 0,
            PRIMARY KEY  (id)
        ) $charset_collate;";
        
        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);
    }
}

// สำหรับเริ่มต้นเมื่อใช้เป็น plugin
register_activation_hook(__FILE__, 'org_links_create_table');

// สำหรับใช้ใน theme's functions.php
add_action('after_switch_theme', 'org_links_create_table');
add_action('after_setup_theme', function() {
    // ตรวจสอบว่าเคยสร้างตารางหรือยัง (เก็บค่าใน option)
    if (!get_option('org_links_table_created')) {
        org_links_create_table();
        update_option('org_links_table_created', true);
    }
});

// Register AJAX handlers
function org_links_get_items() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'org_links_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        return;
    }
    
    // รับพารามิเตอร์
    $view = isset($_POST['view']) ? sanitize_text_field($_POST['view']) : 'card';
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $filter_type = isset($_POST['filter_type']) ? sanitize_text_field($_POST['filter_type']) : 'all';
    
    try {
        global $wpdb;
        $table_name = $wpdb->prefix . 'organization_links';
        
        // ตรวจสอบว่าตารางมีอยู่หรือไม่
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
            // สร้างตารางหากยังไม่มี
            org_links_create_table();
            
            // ส่งคืนข้อความว่าไม่มีข้อมูล (เพราะเพิ่งสร้างตาราง)
            wp_send_json_success(array(
                'html' => '<div class="org-links-no-results">ยังไม่มีข้อมูลหน่วยงาน กรุณาเพิ่มข้อมูลใหม่</div>'
            ));
            return;
        }
        
        // สร้างคำสั่ง WHERE
        $where = array();
        $params = array();
        
        // เพิ่มเงื่อนไขการค้นหา
        if (!empty($search)) {
            $where[] = "title LIKE %s";
            $params[] = '%' . $wpdb->esc_like($search) . '%';
        }
        
        // เพิ่มตัวกรองประเภท
        if ($filter_type !== 'all') {
            $where[] = "type = %s";
            $params[] = $filter_type;
        }
        
        // สร้างคำสั่ง SQL
        $where_clause = !empty($where) ? "WHERE " . implode(" AND ", $where) : "";
        $sql = "SELECT * FROM {$table_name} {$where_clause} ORDER BY order_num ASC, title ASC";
        
        // ใส่พารามิเตอร์ในคำสั่ง SQL
        if (!empty($params)) {
            $sql = $wpdb->prepare($sql, $params);
        }
        
        // ทำการ query
        $items = $wpdb->get_results($sql, ARRAY_A);
        
        // สร้าง HTML response
        ob_start();
        
        if (empty($items)) {
            echo '<div class="org-links-no-results">ไม่พบข้อมูลที่ค้นหา</div>';
        } else {
            // แบ่งรายการตามประเภท
            $internal_items = array_filter($items, function($item) {
                return $item['type'] === 'internal';
            });
            
            $external_items = array_filter($items, function($item) {
                return $item['type'] === 'external';
            });
            
            if ($view == 'card') {
                // แสดงแบบการ์ด
                if (!empty($internal_items)) {
                    echo '<div class="org-links-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายใน</h3>';
                    echo '<div class="org-links-grid">';
                    foreach ($internal_items as $item) {
                        ?>
                        <div class="org-links-card internal">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item[DGA_TITLE_FIELD]); ?>">
                                </div>
                                <h3 class="org-links-title"><?php echo esc_html($item[DGA_TITLE_FIELD]); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                    echo '</div>';
                }
                
                if (!empty($external_items)) {
                    echo '<div class="org-links-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายนอก</h3>';
                    echo '<div class="org-links-grid">';
                    foreach ($external_items as $item) {
                        ?>
                        <div class="org-links-card external">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item[DGA_TITLE_FIELD]); ?>">
                                </div>
                                <h3 class="org-links-title"><?php echo esc_html($item[DGA_TITLE_FIELD]); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                    echo '</div>';
                }
            } else {
                // แสดงแบบรายการ
                echo '<div class="org-links-list">';
                
                if (!empty($internal_items)) {
                    echo '<div class="org-links-list-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายใน</h3>';
                    foreach ($internal_items as $item) {
                        ?>
                        <div class="org-links-list-item internal">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-list-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item[DGA_TITLE_FIELD]); ?>">
                                </div>
                                <h3 class="org-links-list-title"><?php echo esc_html($item[DGA_TITLE_FIELD]); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                }
                
                if (!empty($external_items)) {
                    echo '<div class="org-links-list-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายนอก</h3>';
                    foreach ($external_items as $item) {
                        ?>
                        <div class="org-links-list-item external">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-list-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item[DGA_TITLE_FIELD]); ?>">
                                </div>
                                <h3 class="org-links-list-title"><?php echo esc_html($item[DGA_TITLE_FIELD]); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                }
                
                echo '</div>';
            }
        }
        
        $html = ob_get_clean();
        
        // ส่งคืนข้อมูล HTML
        wp_send_json_success(array(
            'html' => $html
        ));
        
    } catch (Exception $e) {
        // บันทึกข้อผิดพลาดและส่งคืนข้อความผิดพลาด
        error_log('Organization Links Error: ' . $e->getMessage());
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในระบบ: ' . $e->getMessage()
        ));
    }
}
add_action('wp_ajax_org_links_get_items', 'org_links_get_items');
add_action('wp_ajax_nopriv_org_links_get_items', 'org_links_get_items');

// Get organization names for autocomplete
function org_links_get_autocomplete() {
    check_ajax_referer('org_links_nonce', 'nonce');
    
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    $sql = $wpdb->prepare(
        "SELECT title FROM {$table_name} WHERE title LIKE %s ORDER BY title ASC",
        '%' . $wpdb->esc_like($search) . '%'
    );
    
    $results = $wpdb->get_col($sql);
    
    wp_send_json_success(array(
        'items' => $results
    ));
}
add_action('wp_ajax_org_links_get_autocomplete', 'org_links_get_autocomplete');
add_action('wp_ajax_nopriv_org_links_get_autocomplete', 'org_links_get_autocomplete');

// Register shortcode
function org_links_shortcode($atts) {
    $atts = shortcode_atts(array(
        DGA_TITLE_FIELD => 'หน่วยงานที่เกี่ยวข้อง',
        DGA_TYPE_FIELD => 'all', // all, internal, external
        'show_add_button' => 'false' // ควบคุมการแสดงปุ่มเพิ่มหน่วยงาน
    ), $atts, 'org_links');
    
    // เตรียมปุ่มเพิ่มหน่วยงาน (แสดงเฉพาะเมื่อผู้ใช้มีสิทธิ์)
    $add_button_html = '';
    if ($atts['show_add_button'] === 'true' && current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        $add_button_html = '
        <div class="org-links-add-button-container">
            <button type=DGA_BUTTON_TYPE class="org-links-add-button" id="orgLinksAddButton">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                เพิ่มหน่วยงาน
            </button>
        </div>';
    }
    
    // Start output buffering
    ob_start();
    ?>
    <div class="org-links-container" data-type="<?php echo esc_attr($atts['type']); ?>">
        <div class="org-links-header">
            <h2 class="org-links-main-title"><?php echo esc_html($atts[DGA_TITLE_FIELD]); ?></h2>
            
            <div class="org-links-controls">
                <div class="org-links-search">
                    <input type="text" id="org-links-search-input" placeholder="ค้นหาหน่วยงาน...">
                    <div class="org-links-autocomplete"></div>
                </div>
                
                <div class="org-links-filter">
                    <select id="org-links-type-filter">
                        <option value="all">ทั้งหมด</option>
                        <option value="internal">หน่วยงานภายใน</option>
                        <option value="external">หน่วยงานภายนอก</option>
                    </select>
                </div>
                
                <div class="org-links-view-switcher">
                    <button type=DGA_BUTTON_TYPE class="view-btn active" data-view="card" aria-label="Card View">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>
                    </button>
                    <button type=DGA_BUTTON_TYPE class="view-btn" data-view="list" aria-label="List View">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>
                    </button>
                </div>
            </div>
            
            <?php echo $add_button_html; ?>
        </div>
        
        <div class="org-links-content">
            <!-- Skeleton loading placeholders -->
            <div class="org-links-skeleton">
                <div class="org-links-skeleton-section">
                    <h3 class="org-links-skeleton-section-title"></h3>
                    <div class="org-links-skeleton-grid">
                        <?php for ($i = 0; $i < 3; $i++) : ?>
                        <div class="org-links-skeleton-card">
                            <div class="org-links-skeleton-logo"></div>
                            <div class="org-links-skeleton-title"></div>
                        </div>
                        <?php endfor; ?>
                    </div>
                </div>
                <div class="org-links-skeleton-section">
                    <h3 class="org-links-skeleton-section-title"></h3>
                    <div class="org-links-skeleton-grid">
                        <?php for ($i = 0; $i < 3; $i++) : ?>
                        <div class="org-links-skeleton-card">
                            <div class="org-links-skeleton-logo"></div>
                            <div class="org-links-skeleton-title"></div>
                        </div>
                        <?php endfor; ?>
                    </div>
                </div>
            </div>
            
            <!-- Content will be loaded here via AJAX -->
            <div class="org-links-items"></div>
        </div>
    </div>
    <?php
    
    // ถ้าผู้ใช้มีสิทธิ์และเปิดใช้งานปุ่มเพิ่ม ให้แสดง modal ด้วย
    if ($atts['show_add_button'] === 'true' && current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        org_links_modal_html();
    }
    
    return ob_get_clean();
}
add_shortcode('org_links', 'org_links_shortcode');

// Create admin form for adding links
function org_links_admin_menu() {
    add_menu_page(
        'Organization Links',
        'Organization Links',
        DGA_MANAGE_OPTIONS_CAP,
        'org-links-settings',
        'org_links_settings_page',
        'dashicons-networking',
        30
    );
}
add_action('admin_menu', 'org_links_admin_menu');

// Admin settings page
function org_links_settings_page() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    // ตรวจสอบว่าตารางมีอยู่หรือไม่
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
        org_links_create_table();
    }
    
    // Handle form submission
    if (isset($_POST['org_links_save']) && check_admin_referer('org_links_admin', 'org_links_nonce')) {
        $title = sanitize_text_field($_POST[DGA_TITLE_FIELD]);
        $url = esc_url_raw($_POST['url']);
        $type = sanitize_text_field($_POST['type']);
        
        // Handle logo upload or URL
        if (!empty($_FILES['logo']['name'])) {
            require_once ABSPATH . 'wp-admin/includes/image.php';
            require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
            require_once ABSPATH . 'wp-admin/includes/media.php';
            
            $attachment_id = media_handle_upload('logo', 0);
            
            if (is_wp_error($attachment_id)) {
                $logo_url = '';
                $error_message = $attachment_id->get_error_message();
                echo '<div class="notice notice-error"><p>เกิดข้อผิดพลาดในการอัปโหลดไฟล์: ' . esc_html($error_message) . '</p></div>';
            } else {
                $logo_url = wp_get_attachment_url($attachment_id);
            }
        } else {
            $logo_url = sanitize_text_field($_POST['logo_url']);
        }
        
        // Get max order number
        $max_order = $wpdb->get_var("SELECT MAX(order_num) FROM $table_name");
        $order_num = $max_order ? $max_order + 1 : 1;
        
        // Insert new link
        $result = $wpdb->insert(
            $table_name,
            array(
                DGA_TITLE_FIELD => $title,
                'logo' => $logo_url,
                'url' => $url,
                DGA_TYPE_FIELD => $type,
                'order_num' => $order_num
            ),
            array('%s', '%s', '%s', '%s', '%d')
        );
        
        if ($result) {
            echo '<div class="notice notice-success"><p>บันทึกลิงค์เรียบร้อยแล้ว</p></div>';
        } else {
            echo '<div class="notice notice-error"><p>เกิดข้อผิดพลาดในการบันทึกข้อมูล</p></div>';
        }
    }
    
    // Handle delete action
    if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id']) && check_admin_referer('delete_org_link')) {
        $id = intval($_GET['id']);
        
        $wpdb->delete(
            $table_name,
            array('id' => $id),
            array('%d')
        );
        
        echo '<div class="notice notice-success"><p>ลบลิงค์เรียบร้อยแล้ว</p></div>';
    }
    
    // Get all items
    $items = $wpdb->get_results("SELECT * FROM $table_name ORDER BY order_num ASC, title ASC", ARRAY_A);
    
    // Display settings form and item list
    ?>
    <div class="wrap org-links-admin">
        <h1>Organization Links</h1>
        
        <div class="org-links-admin-container">
            <div class="org-links-admin-list">
                <h2>รายการลิงค์หน่วยงาน</h2>
                
                <!-- ปุ่มเพิ่มหน่วยงานใหม่ -->
                <div class="org-links-add-button-container">
                    <button type=DGA_BUTTON_TYPE class="org-links-add-button" id="orgLinksAddButton">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                        เพิ่มหน่วยงาน
                    </button>
                </div>
                
                <?php if (empty($items)) : ?>
                    <p>ยังไม่มีรายการลิงค์</p>
                <?php else : ?>
                    <table class="wp-list-table widefat fixed striped">
                        <thead>
                            <tr>
                                <th>โลโก้</th>
                                <th>ชื่อหน่วยงาน</th>
                                <th>URL</th>
                                <th>ประเภท</th>
                                <th>จัดการ</th>
                            </tr>
                        </thead>
                        <tbody id="org-links-sortable">
                            <?php foreach ($items as $item) : ?>
                                <tr data-id="<?php echo esc_attr($item['id']); ?>">
                                    <td class="org-link-logo">
                                        <img src="<?php echo esc_url($item['logo']); ?>' . DGA_ALT_EMPTY_ATTRIBUTE width="60">
                                    </td>
                                    <td><?php echo esc_html($item[DGA_TITLE_FIELD]); ?></td>
                                    <td><a href="<?php echo esc_url($item['url']); ?>" target="_blank"><?php echo esc_url($item['url']); ?></a></td>
                                    <td><?php echo $item['type'] === 'internal' ? 'หน่วยงานภายใน' : 'หน่วยงานภายนอก'; ?></td>
                                    <td>
                                        <a href="<?php echo wp_nonce_url(add_query_arg(array('action' => 'delete', 'id' => $item['id']), admin_url('admin.php?page=org-links-settings')), 'delete_org_link'); ?>" class="button button-small" onclick="return confirm('คุณแน่ใจหรือไม่ที่ต้องการลบรายการนี้?');">ลบ</a>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <p class="description">ลากและวางเพื่อจัดลำดับรายการ</p>
                <?php endif; ?>
            </div>
        </div>
        
        <div class="org-links-shortcode-info">
            <h2>วิธีใช้งาน Shortcode</h2>
            <p>คัดลอก shortcode ด้านล่างนี้ไปวางในหน้าเว็บที่ต้องการให้แสดงลิงค์หน่วยงาน:</p>
            <code>[org_links title="หน่วยงานที่เกี่ยวข้อง" type="all"]</code>
            
            <p>หากต้องการให้แสดงปุ่มเพิ่มหน่วยงานในหน้าเว็บ (สำหรับผู้ดูแลระบบเท่านั้น):</p>
            <code>[org_links title="หน่วยงานที่เกี่ยวข้อง" type="all" show_add_button="true"]</code>
            
            <p>พารามิเตอร์:</p>
            <ul>
                <li><code>title</code> - หัวข้อของส่วนแสดงลิงค์หน่วยงาน</li>
                <li><code>type</code> - ประเภทของหน่วยงานที่ต้องการแสดง (<code>all</code> = ทั้งหมด, <code>internal</code> = หน่วยงานภายใน, <code>external</code> = หน่วยงานภายนอก)</li>
                <li><code>show_add_button</code> - แสดงปุ่มเพิ่มหน่วยงานหรือไม่ (<code>true</code> หรือ <code>false</code>)</li>
            </ul>
        </div>
    </div>
    
    <?php
    // แสดง Modal ใน admin page
    org_links_modal_html();
}

// Update item order via AJAX
function org_links_update_order() {
    check_ajax_referer('org_links_admin_nonce', 'nonce');
    
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์เพียงพอ'));
        return;
    }
    
    $items = isset($_POST['items']) ? $_POST['items'] : array();
    
    if (empty($items)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่มีข้อมูลที่จะบันทึก'));
        return;
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    $success = true;
    
    foreach ($items as $index => $id) {
        $id = intval($id);
        $order = intval($index);
        
        $result = $wpdb->update(
            $table_name,
            array('order_num' => $order),
            array('id' => $id),
            array('%d'),
            array('%d')
        );
        
        if ($result === false) {
            $success = false;
        }
    }
    
    if ($success) {
        wp_send_json_success(array(DGA_MESSAGE_KEY => 'บันทึกการเรียงลำดับเรียบร้อยแล้ว'));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการบันทึกลำดับ'));
    }
}
add_action('wp_ajax_org_links_update_order', 'org_links_update_order');

// Add modal HTML
function org_links_modal_html() {
    ?>
    <!-- Modal Popup -->
    <div class="org-links-modal" id="orgLinksModal">
        <div class="org-links-modal-content">
            <div class="org-links-modal-header">
                <h2>เพิ่มองค์กรหน่วยงานใหม่</h2>
                <button type=DGA_BUTTON_TYPE class="org-links-modal-close" id="orgLinksModalClose">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
            </div>
            
            <div class="org-links-modal-body">
                <form id="orgLinksForm" method="post" enctype="multipart/form-data">
                    <?php wp_nonce_field('org_links_admin', 'org_links_nonce'); ?>
                    
                    <div class="org-links-form-group">
                        <label for="title">
                            ชื่อหน่วยงาน
                            <span class="required">*</span>
                        </label>
                        <input type="text" name="title" id="title" required>
                    </div>
                    
                    <div class="org-links-form-group">
                        <label for="url">
                            URL
                            <span class="required">*</span>
                        </label>
                        <input type="url" name="url" id="url" required>
                    </div>
                    
                    <div class="org-links-form-group">
                        <label for="logo">
                            โลโก้
                            <span class="required">*</span>
                        </label>
                        <div class="org-links-logo-upload">
                            <div class="org-links-logo-preview" id="logoPreview"></div>
                            <div class="org-links-logo-actions">
                                <button type=DGA_BUTTON_TYPE class="org-links-logo-select" id="logoSelect">เลือกรูปภาพ</button>
                                <button type=DGA_BUTTON_TYPE class="org-links-logo-remove" id="logoRemove">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                                </button>
                            </div>
                            <input type="hidden" name="logo_url" id="logoUrl">
                            <p class="org-links-logo-hint">ขนาดที่แนะนำ: 300×150 พิกเซล</p>
                        </div>
                    </div>
                    
                    <div class="org-links-form-group">
                        <label for="type">
                            ประเภทหน่วยงาน
                            <span class="required">*</span>
                        </label>
                        <div class="org-links-radio-group">
                            <label class="org-links-radio">
                                <input type="radio" name="type" value="internal" checked>
                                <span class="org-links-radio-icon internal"></span>
                                <span class="org-links-radio-label">หน่วยงานภายใน</span>
                            </label>
                            <label class="org-links-radio">
                                <input type="radio" name="type" value="external">
                                <span class="org-links-radio-icon external"></span>
                                <span class="org-links-radio-label">หน่วยงานภายนอก</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="org-links-modal-footer">
                        <button type=DGA_BUTTON_TYPE class="org-links-modal-cancel" id="orgLinksModalCancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE name="org_links_save" class="org-links-modal-submit">บันทึก</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Modal backdrop -->
    <div class="org-links-modal-backdrop" id="orgLinksModalBackdrop"></div>
    <?php
}

// Add AJAX handler for form submission
function org_links_add_item() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'org_links_admin')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'การตรวจสอบความปลอดภัยล้มเหลว'));
        return;
    }
    
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์เพียงพอ'));
        return;
    }
    
    // ดึงและตรวจสอบข้อมูล
    $title = isset($_POST[DGA_TITLE_FIELD]) ? sanitize_text_field($_POST[DGA_TITLE_FIELD]) : '';
    $url = isset($_POST['url']) ? esc_url_raw($_POST['url']) : '';
    $logo_url = isset($_POST['logo_url']) ? esc_url_raw($_POST['logo_url']) : '';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : 'internal';
    
    if (empty($title) || empty($url) || empty($logo_url)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกข้อมูลให้ครบถ้วน'));
        return;
    }
    
    try {
        global $wpdb;
        $table_name = $wpdb->prefix . 'organization_links';
        
        // ตรวจสอบว่าตารางมีอยู่หรือไม่
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
            org_links_create_table();
        }
        
        // ดึงลำดับสูงสุด
        $max_order = $wpdb->get_var("SELECT MAX(order_num) FROM $table_name");
        $order_num = $max_order ? $max_order + 1 : 1;
        
        // เพิ่มข้อมูลใหม่
        $result = $wpdb->insert(
            $table_name,
            array(
                DGA_TITLE_FIELD => $title,
                'logo' => $logo_url,
                'url' => $url,
                DGA_TYPE_FIELD => $type,
                'order_num' => $order_num
            ),
            array('%s', '%s', '%s', '%s', '%d')
        );
        
        if ($result) {
            // บันทึกสำเร็จ
            wp_send_json_success(array(
                DGA_MESSAGE_KEY => 'บันทึกหน่วยงานเรียบร้อยแล้ว',
                'item' => array(
                    'id' => $wpdb->insert_id,
                    DGA_TITLE_FIELD => $title,
                    'logo' => $logo_url,
                    'url' => $url,
                    DGA_TYPE_FIELD => $type,
                    'order_num' => $order_num
                )
            ));
        } else {
            // มีข้อผิดพลาด
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการบันทึกข้อมูล: ' . $wpdb->last_error
            ));
        }
        
    } catch (Exception $e) {
        // บันทึกข้อผิดพลาดและส่งคืนข้อความผิดพลาด
        error_log('Organization Links Error: ' . $e->getMessage());
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในระบบ: ' . $e->getMessage()
        ));
    }
}
add_action('wp_ajax_org_links_add_item', 'org_links_add_item');


/******* CKAN *********/

/***** ฟังก์ชั่น เพิ่มหมดวหมู่ องค์กร (corg) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function corg_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/corg-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/corg-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/corg-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/corg-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('corg-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('corg-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('corg-add-taxo', 'corg_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('corg_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'corg_enqueue_assets');

/**
 * Shortcode function to display the "Add Organization" button
 */
function corg_add_term_shortcode() {
    ob_start();
    ?>
    <div class="corg-add-container">
        <button id="corg-add-button" class="corg-button">เพิ่มองค์กร</button>
        
        <!-- Modal Popup -->
        <div id="corg-modal" class="corg-modal">
            <div class="corg-modal-content">
                <span class="corg-close">&times;</span>
                <h2>เพิ่มองค์กร</h2>
                <form id="corg-add-form">
                    <div class="corg-form-group">
                        <label for="corg-name">กำหนดชื่อองค์กร:</label>
                        <input type="text" id="corg-name" name="corg-name" required>
                    </div>
                    <div class="corg-form-group">
                        <label for="corg-slug">Term slug URL:</label>
                        <div class="corg-slug-container">
                            <span class="corg-slug-prefix">corg-</span>
                            <input type="text" id="corg-slug" name="corg-slug" readonly>
                        </div>
                        <p class="corg-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="corg-form-actions">
                        <button type=DGA_BUTTON_TYPE class="corg-button corg-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="corg-button corg-submit">บันทึก</button>
                    </div>
                </form>
                <div id="corg-message" class="corg-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('corg_add_term', 'corg_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function corg_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('corg_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'corg',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_corg_get_term_count', 'corg_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_corg_get_term_count', 'corg_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function corg_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('corg_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มองค์กร'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อองค์กร'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'corg',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'corg-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'corg',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มองค์กรสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_corg_add_term', 'corg_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมดวหมู่ กลุ่ม (cgroup) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cgroup_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cgroup-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cgroup-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cgroup-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cgroup-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cgroup-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('cgroup-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cgroup-add-taxo', 'cgroup_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('cgroup_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'cgroup_enqueue_assets');

/**
 * Shortcode function to display the "Add Group" button
 */
function cgroup_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cgroup-add-container">
        <button id="cgroup-add-button" class="cgroup-button">เพิ่มกลุ่ม</button>
        
        <!-- Modal Popup -->
        <div id="cgroup-modal" class="cgroup-modal">
            <div class="cgroup-modal-content">
                <span class="cgroup-close">&times;</span>
                <h2>เพิ่มกลุ่ม</h2>
                <form id="cgroup-add-form">
                    <div class="cgroup-form-group">
                        <label for="cgroup-name">กำหนดชื่อกลุ่ม:</label>
                        <input type="text" id="cgroup-name" name="cgroup-name" required>
                    </div>
                    <div class="cgroup-form-group">
                        <label for="cgroup-slug">Term slug URL:</label>
                        <div class="cgroup-slug-container">
                            <span class="cgroup-slug-prefix">cgroup-</span>
                            <input type="text" id="cgroup-slug" name="cgroup-slug" readonly>
                        </div>
                        <p class="cgroup-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cgroup-form-actions">
                        <button type=DGA_BUTTON_TYPE class="cgroup-button cgroup-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="cgroup-button cgroup-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cgroup-message" class="cgroup-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cgroup_add_term', 'cgroup_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cgroup_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgroup_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cgroup',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cgroup_get_term_count', 'cgroup_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cgroup_get_term_count', 'cgroup_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cgroup_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgroup_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มกลุ่ม'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อกลุ่ม'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cgroup',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cgroup-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cgroup',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มกลุ่มสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cgroup_add_term', 'cgroup_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมดวหมู่ ชุดข้้อมูล (cdata) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cdata_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cdata-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cdata-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cdata-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cdata-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cdata-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('cdata-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cdata-add-taxo', 'cdata_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('cdata_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'cdata_enqueue_assets');

/**
 * Shortcode function to display the "Add Data Set Type" button
 */
function cdata_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cdata-add-container">
        <button id="cdata-add-button" class="cdata-button">เพิ่มประเภทชุดข้อมูล</button>
        
        <!-- Modal Popup -->
        <div id="cdata-modal" class="cdata-modal">
            <div class="cdata-modal-content">
                <span class="cdata-close">&times;</span>
                <h2>เพิ่มประเภทชุดข้อมูล</h2>
                <form id="cdata-add-form">
                    <div class="cdata-form-group">
                        <label for="cdata-name">กำหนดชื่อชุดข้อมูล:</label>
                        <input type="text" id="cdata-name" name="cdata-name" required>
                    </div>
                    <div class="cdata-form-group">
                        <label for="cdata-slug">Term slug URL:</label>
                        <div class="cdata-slug-container">
                            <span class="cdata-slug-prefix">cdata-</span>
                            <input type="text" id="cdata-slug" name="cdata-slug" readonly>
                        </div>
                        <p class="cdata-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cdata-form-actions">
                        <button type=DGA_BUTTON_TYPE class="cdata-button cdata-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="cdata-button cdata-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cdata-message" class="cdata-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cdata_add_term', 'cdata_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cdata_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cdata_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cdata',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cdata_get_term_count', 'cdata_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cdata_get_term_count', 'cdata_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cdata_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cdata_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มประเภทชุดข้อมูล'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อชุดข้อมูล'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cdata',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cdata-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cdata',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มประเภทชุดข้อมูลสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cdata_add_term', 'cdata_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล (cgov) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cgov_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cgov-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cgov-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cgov-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cgov-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cgov-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('cgov-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cgov-add-taxo', 'cgov_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('cgov_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'cgov_enqueue_assets');

/**
 * Shortcode function to display the "Add Data Governance Category" button
 */
function cgov_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cgov-add-container">
        <button id="cgov-add-button" class="cgov-button">เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล</button>
        
        <!-- Modal Popup -->
        <div id="cgov-modal" class="cgov-modal">
            <div class="cgov-modal-content">
                <span class="cgov-close">&times;</span>
                <h2>เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล</h2>
                <form id="cgov-add-form">
                    <div class="cgov-form-group">
                        <label for="cgov-name">กำหนดชื่อหมวดหมู่ตามธรรมาภิบาลข้อมูล:</label>
                        <input type="text" id="cgov-name" name="cgov-name" required>
                    </div>
                    <div class="cgov-form-group">
                        <label for="cgov-slug">Term slug URL:</label>
                        <div class="cgov-slug-container">
                            <span class="cgov-slug-prefix">cgov-</span>
                            <input type="text" id="cgov-slug" name="cgov-slug" readonly>
                        </div>
                        <p class="cgov-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cgov-form-actions">
                        <button type=DGA_BUTTON_TYPE class="cgov-button cgov-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="cgov-button cgov-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cgov-message" class="cgov-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cgov_add_term', 'cgov_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cgov_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgov_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cgov',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cgov_get_term_count', 'cgov_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cgov_get_term_count', 'cgov_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cgov_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgov_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อหมวดหมู่ตามธรรมาภิบาลข้อมูล'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cgov',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cgov-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cgov',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูลสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cgov_add_term', 'cgov_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมวดหมู่การเข้าถึง (caccess) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function caccess_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/caccess-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/caccess-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/caccess-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/caccess-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('caccess-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('caccess-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('caccess-add-taxo', 'caccess_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('caccess_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'caccess_enqueue_assets');

/**
 * Shortcode function to display the "Add Access" button
 */
function caccess_add_term_shortcode() {
    ob_start();
    ?>
    <div class="caccess-add-container">
        <button id="caccess-add-button" class="caccess-button">เพิ่มการเข้าถึง</button>
        
        <!-- Modal Popup -->
        <div id="caccess-modal" class="caccess-modal">
            <div class="caccess-modal-content">
                <span class="caccess-close">&times;</span>
                <h2>เพิ่มการเข้าถึง</h2>
                <form id="caccess-add-form">
                    <div class="caccess-form-group">
                        <label for="caccess-name">กำหนดชื่อการเข้าถึง:</label>
                        <input type="text" id="caccess-name" name="caccess-name" required>
                    </div>
                    <div class="caccess-form-group">
                        <label for="caccess-slug">Term slug URL:</label>
                        <div class="caccess-slug-container">
                            <span class="caccess-slug-prefix">caccess-</span>
                            <input type="text" id="caccess-slug" name="caccess-slug" readonly>
                        </div>
                        <p class="caccess-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="caccess-form-actions">
                        <button type=DGA_BUTTON_TYPE class="caccess-button caccess-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="caccess-button caccess-submit">บันทึก</button>
                    </div>
                </form>
                <div id="caccess-message" class="caccess-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('caccess_add_term', 'caccess_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function caccess_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('caccess_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'caccess',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_caccess_get_term_count', 'caccess_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_caccess_get_term_count', 'caccess_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function caccess_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('caccess_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มการเข้าถึง'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อการเข้าถึง'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'caccess',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'caccess-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'caccess',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มการเข้าถึงสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_caccess_add_term', 'caccess_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มรูปแบบ (cformat) ******/


// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cformat_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cformat-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cformat-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cformat-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cformat-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cformat-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('cformat-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cformat-add-taxo', 'cformat_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('cformat_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'cformat_enqueue_assets');

/**
 * Shortcode function to display the "Add Format" button
 */
function cformat_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cformat-add-container">
        <button id="cformat-add-button" class="cformat-button">เพิ่มรูปแบบ</button>
        
        <!-- Modal Popup -->
        <div id="cformat-modal" class="cformat-modal">
            <div class="cformat-modal-content">
                <span class="cformat-close">&times;</span>
                <h2>เพิ่มรูปแบบ</h2>
                <form id="cformat-add-form">
                    <div class="cformat-form-group">
                        <label for="cformat-name">กำหนดรูปแบบ:</label>
                        <input type="text" id="cformat-name" name="cformat-name" required>
                    </div>
                    <div class="cformat-form-group">
                        <label for="cformat-slug">Term slug URL:</label>
                        <div class="cformat-slug-container">
                            <span class="cformat-slug-prefix">cformat-</span>
                            <input type="text" id="cformat-slug" name="cformat-slug" readonly>
                        </div>
                        <p class="cformat-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cformat-form-actions">
                        <button type=DGA_BUTTON_TYPE class="cformat-button cformat-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="cformat-button cformat-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cformat-message" class="cformat-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cformat_add_term', 'cformat_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cformat_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cformat_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cformat',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cformat_get_term_count', 'cformat_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cformat_get_term_count', 'cformat_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cformat_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cformat_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มรูปแบบ'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกรูปแบบ'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cformat',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cformat-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cformat',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มรูปแบบสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cformat_add_term', 'cformat_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms



/***** ฟังก์ชั่น เพิ่มสัญญาอนุญาต (clicense) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function clicense_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/clicense-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/clicense-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/clicense-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/clicense-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('clicense-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('clicense-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('clicense-add-taxo', 'clicense_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('clicense_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'clicense_enqueue_assets');

/**
 * Shortcode function to display the "Add License" button
 */
function clicense_add_term_shortcode() {
    ob_start();
    ?>
    <div class="clicense-add-container">
        <button id="clicense-add-button" class="clicense-button">เพิ่มสัญญาอนุญาต</button>
        
        <!-- Modal Popup -->
        <div id="clicense-modal" class="clicense-modal">
            <div class="clicense-modal-content">
                <span class="clicense-close">&times;</span>
                <h2>เพิ่มสัญญาอนุญาต</h2>
                <form id="clicense-add-form">
                    <div class="clicense-form-group">
                        <label for="clicense-name">กำหนดชื่อสัญญาอนุญาต:</label>
                        <input type="text" id="clicense-name" name="clicense-name" required>
                    </div>
                    <div class="clicense-form-group">
                        <label for="clicense-slug">Term slug URL:</label>
                        <div class="clicense-slug-container">
                            <span class="clicense-slug-prefix">clicense-</span>
                            <input type="text" id="clicense-slug" name="clicense-slug" readonly>
                        </div>
                        <p class="clicense-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="clicense-form-actions">
                        <button type=DGA_BUTTON_TYPE class="clicense-button clicense-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="clicense-button clicense-submit">บันทึก</button>
                    </div>
                </form>
                <div id="clicense-message" class="clicense-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('clicense_add_term', 'clicense_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function clicense_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('clicense_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'clicense',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_clicense_get_term_count', 'clicense_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_clicense_get_term_count', 'clicense_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function clicense_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('clicense_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มสัญญาอนุญาต'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อสัญญาอนุญาต'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'clicense',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'clicense-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'clicense',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มสัญญาอนุญาตสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_clicense_add_term', 'clicense_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มแท็ค (ctag) ******/


// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function ctag_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/ctag-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/ctag-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/ctag-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/ctag-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('ctag-add-taxo', $js_path, array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    wp_enqueue_style('ctag-add-taxo', $css_path, array(), DGA_VERSION_NUMBER);
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('ctag-add-taxo', 'ctag_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ctag_add_term_nonce'),
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ctag_enqueue_assets');

/**
 * Shortcode function to display the "Add Tag" button
 */
function ctag_add_term_shortcode() {
    ob_start();
    ?>
    <div class="ctag-add-container">
        <button id="ctag-add-button" class="ctag-button">เพิ่มแท็ค</button>
        
        <!-- Modal Popup -->
        <div id="ctag-modal" class="ctag-modal">
            <div class="ctag-modal-content">
                <span class="ctag-close">&times;</span>
                <h2>เพิ่มแท็ค</h2>
                <form id="ctag-add-form">
                    <div class="ctag-form-group">
                        <label for="ctag-name">กำหนดชื่อแท็ค:</label>
                        <input type="text" id="ctag-name" name="ctag-name" required>
                    </div>
                    <div class="ctag-form-group">
                        <label for="ctag-slug">Term slug URL:</label>
                        <div class="ctag-slug-container">
                            <span class="ctag-slug-prefix">ctag-</span>
                            <input type="text" id="ctag-slug" name="ctag-slug" readonly>
                        </div>
                        <p class="ctag-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="ctag-form-actions">
                        <button type=DGA_BUTTON_TYPE class="ctag-button ctag-cancel">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="ctag-button ctag-submit">บันทึก</button>
                    </div>
                </form>
                <div id="ctag-message" class="ctag-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('ctag_add_term', 'ctag_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function ctag_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('ctag_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'ctag',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_ctag_get_term_count', 'ctag_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_ctag_get_term_count', 'ctag_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function ctag_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('ctag_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มแท็ค'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณากรอกชื่อแท็ค'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'ctag',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'ctag-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'ctag',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'เพิ่มแท็คสำเร็จแล้ว',
            DGA_TERM_ID_FIELD => $term[DGA_TERM_ID_FIELD],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_ctag_add_term', 'ctag_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/****** ฟอร์มเพิ่มชุดข้อมูล CKAN ตามมาตรฐาน Metadata Standard - Version 1.0.5 *******/

// Initialize CKAN Form System
function ckan_form_add_init_abc123() {
    // Register shortcode
    add_shortcode('ckan_fadd', 'ckan_form_add_shortcode_abc123');
    
    // Register styles
    wp_register_style(
        'ckan-fadd-style', 
        get_stylesheet_directory_uri() . '/css/ckan-fadd.css', 
        array(), 
        '1.0.5'
    );
    
    wp_register_style(
        'select2-style', 
        'https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css', 
        array(), 
        '4.0.13'
    );
    
    // Register scripts
    wp_register_script(
        'select2-script', 
        'https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js', 
        array(DGA_JQUERY_HANDLE), 
        '4.0.13', 
        true
    );
    
    wp_register_script(
        'ckan-fadd-script', 
        get_stylesheet_directory_uri() . '/js/ckan-fadd.js', 
        array(DGA_JQUERY_HANDLE, 'jquery-ui-datepicker', 'select2-script'), 
        '1.0.5', 
        true
    );
    
    // Localize script
    wp_localize_script('ckan-fadd-script', 'ckan_ajax_obj', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_form_nonce_abc123'),
        'messages' => array(
            DGA_SUCCESS_STATUS => 'บันทึกข้อมูลเรียบร้อยแล้ว',
            DGA_ERROR_STATUS => 'เกิดข้อผิดพลาด กรุณาลองใหม่',
            'required' => 'กรุณากรอกข้อมูลที่จำเป็น',
            'saving' => 'กำลังบันทึกข้อมูล...'
        )
    ));
    
    // Register AJAX handlers
    add_action('wp_ajax_ckan_form_submit', 'ckan_form_ajax_handler_abc123');
    add_action('wp_ajax_nopriv_ckan_form_submit', 'ckan_form_ajax_nopriv_abc123');
}
add_action('init', 'ckan_form_add_init_abc123');

// Main AJAX Handler
function ckan_form_ajax_handler_abc123() {
    // Verify nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'ckan_form_nonce_abc123')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'การตรวจสอบความปลอดภัยล้มเหลว'));
        wp_die();
    }
    
    // Check user login
    if (!is_user_logged_in()) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณาเข้าสู่ระบบ'));
        wp_die();
    }
    
    // Parse form data
    parse_str($_POST['formdata'], $data);
    
    // Validate required fields
    $required = array(
        'data_type', DGA_TITLE_FIELD, 'org_id', 'org_standard_name',
        'maintainer', 'maintainer_email', 'tag_string', 'notes',
        'objective', 'update_frequency_unit', 'update_frequency_interval',
        'geo_coverage', 'data_source', 'license_id'
    );
    
    foreach ($required as $field) {
        if (empty($data[$field])) {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => 'กรุณากรอกข้อมูลให้ครบถ้วน',
                DGA_FIELD_KEY => $field
            ));
            wp_die();
        }
    }
    
    // Create post
    $post_args = array(
        'post_title'   => sanitize_text_field($data[DGA_TITLE_FIELD]),
        'post_content' => sanitize_textarea_field($data['notes']),
        DGA_POST_TYPE_FIELD    => 'ckan',
        DGA_POST_STATUS_FIELD  => DGA_PUBLISH_STATUS,
        'post_author'  => get_current_user_id()
    );
    
    $post_id = wp_insert_post($post_args);
    
    if (is_wp_error($post_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่สามารถสร้างโพสต์ได้: ' . $post_id->get_error_message()));
        wp_die();
    }
    
    // Update post slug to post ID
    wp_update_post(array(
        'ID' => $post_id,
        'post_name' => $post_id
    ));
    
    // Save all meta fields
    $meta_updates = array(
        // Mandatory fields (14 items)
        'ckan_data_type' => sanitize_text_field($data['data_type']),
        'ckan_title' => sanitize_text_field($data[DGA_TITLE_FIELD]),
        'ckan_org_id' => sanitize_text_field($data['org_id']),
        'ckan_org_standard_name' => sanitize_text_field($data['org_standard_name']),
        'ckan_maintainer' => sanitize_text_field($data['maintainer']),
        'ckan_maintainer_email' => sanitize_email($data['maintainer_email']),
        'ckan_tag_string' => sanitize_text_field($data['tag_string']),
        'ckan_notes' => sanitize_textarea_field($data['notes']),
        'ckan_objective' => sanitize_text_field($data['objective']),
        'ckan_update_frequency_unit' => sanitize_text_field($data['update_frequency_unit']),
        'ckan_update_frequency_interval' => intval($data['update_frequency_interval']),
        'ckan_geo_coverage' => sanitize_text_field($data['geo_coverage']),
        'ckan_data_source' => sanitize_text_field($data['data_source']),
        'ckan_license_id' => sanitize_text_field($data['license_id']),
        
        // Optional fields
        'ckan_data_classification' => isset($data['data_classification']) ? sanitize_text_field($data['data_classification']) : '',
        'ckan_accessible_condition' => isset($data['accessible_condition']) ? sanitize_text_field($data['accessible_condition']) : '',
        'ckan_created_date' => isset($data['created_date']) ? sanitize_text_field($data['created_date']) : '',
        'ckan_last_updated_date' => isset($data['last_updated_date']) ? sanitize_text_field($data['last_updated_date']) : '',
        'ckan_url' => isset($data['url']) ? esc_url_raw($data['url']) : '',
        'ckan_data_support' => isset($data['data_support']) ? sanitize_text_field($data['data_support']) : '',
        'ckan_data_collect' => isset($data['data_collect']) ? sanitize_text_field($data['data_collect']) : '',
        'ckan_data_language' => isset($data['data_language']) ? sanitize_text_field($data['data_language']) : ''
    );
    
    // Save all meta fields
    foreach ($meta_updates as $key => $value) {
        update_post_meta($post_id, $key, $value);
    }
    
    // Handle taxonomy terms
    // Data format (cformat)
    if (!empty($data['data_format']) && is_array($data['data_format'])) {
        $format_ids = array_map('intval', $data['data_format']);
        wp_set_object_terms($post_id, $format_ids, 'cformat');
        
        // Save term names as meta
        $format_names = array();
        foreach ($format_ids as $tid) {
            $term = get_term($tid, 'cformat');
            if ($term && !is_wp_error($term)) {
                $format_names[] = $term->name;
            }
        }
        update_post_meta($post_id, 'ckan_cformat', implode(', ', $format_names));
    }
    
    // Data category (cgov)
    if (!empty($data['data_category']) && is_array($data['data_category'])) {
        $category_ids = array_map('intval', $data['data_category']);
        wp_set_object_terms($post_id, $category_ids, 'cgov');
        
        // Save term names as meta
        $category_names = array();
        foreach ($category_ids as $tid) {
            $term = get_term($tid, 'cgov');
            if ($term && !is_wp_error($term)) {
                $category_names[] = $term->name;
            }
        }
        update_post_meta($post_id, 'ckan_cgov', implode(', ', $category_names));
    }
    
    // Dataset type (cdata)
    if (!empty($data['dataset_type']) && is_array($data['dataset_type'])) {
        $type_ids = array_map('intval', $data['dataset_type']);
        wp_set_object_terms($post_id, $type_ids, 'cdata');
        
        // Save term names as meta
        $type_names = array();
        foreach ($type_ids as $tid) {
            $term = get_term($tid, 'cdata');
            if ($term && !is_wp_error($term)) {
                $type_names[] = $term->name;
            }
        }
        update_post_meta($post_id, 'ckan_cdata', implode(', ', $type_names));
    }
    
    // Handle admin-only fields
    $user = wp_get_current_user();
    $is_admin = current_user_can(DGA_ADMIN_ROLE) || in_array('admin_agency', $user->roles);
    
    if ($is_admin) {
        if (isset($data['high_value_dataset'])) {
            update_post_meta($post_id, 'ckan_high_value_dataset', sanitize_text_field($data['high_value_dataset']));
        }
        if (isset($data['reference_data'])) {
            update_post_meta($post_id, 'ckan_reference_data', sanitize_text_field($data['reference_data']));
        }
        if (isset($data['official_statistics'])) {
            update_post_meta($post_id, 'ckan_official_statistics', sanitize_text_field($data['official_statistics']));
        }
    }
    
    // Handle "อื่น ๆ" fields with ACF or regular meta
    $other_fields = array(
        'data_type' => array('trigger' => '9', 'meta' => 'ckan_data_type_other'),
        'objective' => array('trigger' => '99', 'meta' => 'ckan_objective_other'),
        'update_frequency_unit' => array('trigger' => 'X', 'meta' => 'ckan_update_frequency_unit_other'),
        'geo_coverage' => array('trigger' => '99', 'meta' => 'ckan_geo_coverage_other'),
        'data_support' => array('trigger' => '9', 'meta' => 'ckan_data_support_other'),
        'data_collect' => array('trigger' => '99', 'meta' => 'ckan_data_collect_other'),
        'data_language' => array('trigger' => '99', 'meta' => 'ckan_data_language_other')
    );
    
    foreach ($other_fields as $field => $config) {
        if (isset($data[$field]) && $data[$field] == $config['trigger']) {
            $other_key = $field . '_other';
            if (!empty($data[$other_key])) {
                $other_value = sanitize_text_field($data[$other_key]);
                
                if (function_exists('update_field')) {
                    update_field($config['meta'], $other_value, $post_id);
                } else {
                    update_post_meta($post_id, $config['meta'], $other_value);
                }
            }
        }
    }
    
    // Set system metadata
    $current_user = wp_get_current_user();
    update_post_meta($post_id, 'ckan_create_by', $current_user->display_name);
    
    // Thai date format
    $thai_year = date('Y') + 543;
    $thai_date = date('d/m/') . $thai_year;
    update_post_meta($post_id, 'ckan_auto_createpost', $thai_date);
    update_post_meta($post_id, 'ckan_auto_updatepost', $thai_date);
    
    // Return success
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'บันทึกข้อมูลเรียบร้อยแล้ว',
        DGA_POST_ID_FIELD => $post_id,
        'post_url' => get_permalink($post_id)
    ));
}

// Non-logged in handler
function ckan_form_ajax_nopriv_abc123() {
    wp_send_json_error(array(DGA_MESSAGE_KEY => 'กรุณาเข้าสู่ระบบก่อนใช้งาน'));
    wp_die();
}

// Main Shortcode Function
function ckan_form_add_shortcode_abc123($atts) {
    // Check login
    if (!is_user_logged_in()) {
        return '<div class="ckan-fadd-error">กรุณาเข้าสู่ระบบก่อนใช้งาน</div>';
    }
    
    // Enqueue assets
    wp_enqueue_style('ckan-fadd-style');
    wp_enqueue_style('select2-style');
    wp_enqueue_style('jquery-ui', 'https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css');
    
    wp_enqueue_script('jquery-ui-datepicker');
    wp_enqueue_script('select2-script');
    wp_enqueue_script('ckan-fadd-script');
    
    // Get taxonomies
    $cdata_terms = get_terms(array(DGA_TAXONOMY_FIELD => 'cdata', DGA_HIDE_EMPTY_FIELD => false));
    $cformat_terms = get_terms(array(DGA_TAXONOMY_FIELD => 'cformat', DGA_HIDE_EMPTY_FIELD => false));
    $cgov_terms = get_terms(array(DGA_TAXONOMY_FIELD => 'cgov', DGA_HIDE_EMPTY_FIELD => false));
    
    // Check admin role
    $user = wp_get_current_user();
    $is_admin = current_user_can(DGA_ADMIN_ROLE) || in_array('admin_agency', $user->roles);
    
    // Thai date
    $thai_year = date('Y') + 543;
    $thai_date = date('d/m/') . $thai_year;
    
    ob_start();
    ?>
    <div class="ckan-fadd-container">
        <form id="ckan-fadd-form" class="ckan-fadd-form">
            <input type="hidden" name="security" value="<?php echo wp_create_nonce('ckan_form_nonce_abc123'); ?>">
            
            <h2 class="ckan-fadd-title">เพิ่มชุดข้อมูล - มาตรฐาน Metadata Standard</h2>
            
            <div class="ckan-fadd-status" style="display:none;">
                <div class="ckan-fadd-status-message"></div>
            </div>
            
            <!-- Section 1: Mandatory Metadata -->
            <div class="ckan-fadd-section">
                <h3 class="ckan-fadd-section-title">คำอธิบายชุดข้อมูลส่วนหลัก (Mandatory) - 14 รายการ</h3>
                
                <!-- 1. ประเภทข้อมูล -->
                <div class="ckan-fadd-field">
                    <label for="data_type">1. ประเภทข้อมูล <span class="required">*</span></label>
                    <select id="data_type" name="data_type" required>
                        <option value="">-- เลือกประเภท --</option>
                        <option value="1">ข้อมูลระเบียน (Record)</option>
                        <option value="2">ข้อมูลสถิติ</option>
                        <option value="3">ข้อมูลภูมิสารสนเทศเชิงพื้นที่</option>
                        <option value="4">ข้อมูลหลากหลายประเภท</option>
                        <option value="9">ข้อมูลประเภทอื่น ๆ</option>
                    </select>
                    <div class="ckan-fadd-other-field" id="data_type_other" style="display:none;">
                        <input type="text" name="data_type_other" placeholder="ระบุประเภทอื่น ๆ">
                    </div>
                </div>
                
                <!-- 2. ชื่อชุดข้อมูล -->
                <div class="ckan-fadd-field">
                    <label for="title">2. ชื่อชุดข้อมูล <span class="required">*</span></label>
                    <input type="text" id="title" name="title" maxlength="150" required>
                    <div class="char-counter"><span id="title_count">0</span>/150</div>
                </div>
                
                <!-- 3. รหัสและชื่อองค์กร -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field half">
                        <label for="org_id">3.1 รหัสองค์กร <span class="required">*</span></label>
                        <input type="text" id="org_id" name="org_id" maxlength="4" required>
                    </div>
                    <div class="ckan-fadd-field half">
                        <label for="org_standard_name">3.2 ชื่อองค์กร <span class="required">*</span></label>
                        <input type="text" id="org_standard_name" name="org_standard_name" maxlength="255" required>
                        <div class="char-counter"><span id="org_standard_name_count">0</span>/255</div>
                    </div>
                </div>
                
                <!-- 4. ชื่อฝ่ายงาน -->
                <div class="ckan-fadd-field">
                    <label for="maintainer">4. ชื่อฝ่ายงานสำหรับติดต่อ <span class="required">*</span></label>
                    <input type="text" id="maintainer" name="maintainer" maxlength="150" required>
                    <div class="char-counter"><span id="maintainer_count">0</span>/150</div>
                </div>
                
                <!-- 5. อีเมล -->
                <div class="ckan-fadd-field">
                    <label for="maintainer_email">5. อีเมลสำหรับติดต่อ <span class="required">*</span></label>
                    <input type="email" id="maintainer_email" name="maintainer_email" maxlength="50" required>
                    <div class="char-counter"><span id="maintainer_email_count">0</span>/50</div>
                </div>
                
                <!-- 6. คำสำคัญ -->
                <div class="ckan-fadd-field">
                    <label for="tag_string">6. คำสำคัญ (Keywords) <span class="required">*</span></label>
                    <input type="text" id="tag_string" name="tag_string" maxlength="200" placeholder="คั่นด้วยเครื่องหมายคอมม่า" required>
                    <div class="char-counter"><span id="tag_string_count">0</span>/200</div>
                </div>
                
                <!-- 7. รายละเอียด -->
                <div class="ckan-fadd-field">
                    <label for="notes">7. รายละเอียด <span class="required">*</span></label>
                    <textarea id="notes" name="notes" maxlength="1000" required></textarea>
                    <div class="char-counter"><span id="notes_count">0</span>/1000</div>
                </div>
                
                <!-- 8. วัตถุประสงค์ -->
                <div class="ckan-fadd-field">
                    <label for="objective">8. วัตถุประสงค์ <span class="required">*</span></label>
                    <select id="objective" name="objective" required>
                        <option value="">-- เลือกวัตถุประสงค์ --</option>
                        <option value="01">ยุทธศาสตร์ชาติ</option>
                        <option value="02">แผนพัฒนาเศรษฐกิจและสังคมแห่งชาติ</option>
                        <option value="03">แผนความมั่นคงแห่งชาติ</option>
                        <option value="04">แผนแม่บทภายใต้ยุทธศาสตร์ชาติ</option>
                        <option value="05">แผนปฏิรูปประเทศ</option>
                        <option value="06">แผนระดับที่ 3 (มติ ครม.)</option>
                        <option value="07">นโยบายรัฐบาล/ข้อสั่งการนายกรัฐมนตรี</option>
                        <option value="08">มติคณะรัฐมนตรี</option>
                        <option value="09">เพื่อการให้บริการประชาชน</option>
                        <option value="10">กฎหมายที่เกี่ยวข้อง</option>
                        <option value="11">พันธกิจองค์กร</option>
                        <option value="12">ดัชนี/ตัวชี้วัดระดับนานาชาติ</option>
                        <option value="98">ไม่ทราบ</option>
                        <option value="99">อื่น ๆ</option>
                    </select>
                    <div class="ckan-fadd-other-field" id="objective_other" style="display:none;">
                        <input type="text" name="objective_other" placeholder="ระบุวัตถุประสงค์อื่น ๆ">
                    </div>
                </div>
                
                <!-- 9. ความถี่การปรับปรุง -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field half">
                        <label for="update_frequency_unit">9.1 หน่วยความถี่ <span class="required">*</span></label>
                        <select id="update_frequency_unit" name="update_frequency_unit" required>
                            <option value="">-- เลือกหน่วย --</option>
                            <option value="A">ปี</option>
                            <option value="S">ครึ่งปี</option>
                            <option value="Q">ไตรมาส</option>
                            <option value="M">เดือน</option>
                            <option value="W">สัปดาห์</option>
                            <option value="D">วัน</option>
                            <option value="B">วันทำการ</option>
                            <option value="H">ชั่วโมง</option>
                            <option value="N">นาที</option>
                            <option value="R">ตามเวลาจริง</option>
                            <option value="O">ไม่มีการปรับปรุง</option>
                            <option value="X">อื่น ๆ</option>
                            <option value="U">ไม่ทราบ</option>
                        </select>
                        <div class="ckan-fadd-other-field" id="update_frequency_unit_other" style="display:none;">
                            <input type="text" name="update_frequency_unit_other" placeholder="ระบุความถี่อื่น">
                        </div>
                    </div>
                    <div class="ckan-fadd-field half">
                        <label for="update_frequency_interval">9.2 ค่าความถี่ <span class="required">*</span></label>
                        <input type="number" id="update_frequency_interval" name="update_frequency_interval" min="1" value="1" required>
                    </div>
                </div>
                
                <!-- 10. ขอบเขตพื้นที่ -->
                <div class="ckan-fadd-field">
                    <label for="geo_coverage">10. ขอบเขตเชิงภูมิศาสตร์ <span class="required">*</span></label>
                    <select id="geo_coverage" name="geo_coverage" required>
                        <option value="">-- เลือกขอบเขต --</option>
                        <option value="00">ไม่มี</option>
                        <option value="01">โลก</option>
                        <option value="02">ทวีป/กลุ่มประเทศ</option>
                        <option value="03">กลุ่มประเทศทางเศรษฐกิจ</option>
                        <option value="04">ประเทศ</option>
                        <option value="05">ภาค</option>
                        <option value="06">จังหวัด</option>
                        <option value="07">อำเภอ</option>
                        <option value="08">ตำบล</option>
                        <option value="09">หมู่บ้าน</option>
                        <option value="10">เทศบาล/อบต.</option>
                        <option value="11">พิกัด</option>
                        <option value="98">ไม่ทราบ</option>
                        <option value="99">อื่น ๆ</option>
                    </select>
                    <div class="ckan-fadd-other-field" id="geo_coverage_other" style="display:none;">
                        <input type="text" name="geo_coverage_other" placeholder="ระบุขอบเขตอื่น ๆ">
                    </div>
                </div>
                
                <!-- 11. แหล่งที่มา -->
                <div class="ckan-fadd-field">
                    <label for="data_source">11. แหล่งที่มา <span class="required">*</span></label>
                    <input type="text" id="data_source" name="data_source" maxlength="200" required>
                    <div class="char-counter"><span id="data_source_count">0</span>/200</div>
                </div>
                
                <!-- 12. รูปแบบการเก็บ -->
                <div class="ckan-fadd-field">
                    <label for="data_format">12. รูปแบบการเก็บข้อมูล <span class="required">*</span></label>
                    <select id="data_format" name="data_format[]" class="ckan-select2" multiple required>
                        <?php foreach($cformat_terms as $term): ?>
                            <option value="<?php echo $term->term_id; ?>"><?php echo esc_html($term->name); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <!-- 13. หมวดหมู่ตามธรรมาภิบาล -->
                <div class="ckan-fadd-field">
                    <label for="data_category">13. หมวดหมู่ตามธรรมาภิบาล <span class="required">*</span></label>
                    <select id="data_category" name="data_category[]" class="ckan-select2" multiple required>
                        <?php foreach($cgov_terms as $term): ?>
                            <option value="<?php echo $term->term_id; ?>"><?php echo esc_html($term->name); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <!-- 14. สัญญาอนุญาต -->
                <div class="ckan-fadd-field">
                    <label for="license_id">14. สัญญาอนุญาตให้ใช้ข้อมูล <span class="required">*</span></label>
                    <select id="license_id" name="license_id" required>
                        <option value="">-- เลือกสัญญา --</option>
                        <option value="G0">Open Data Common</option>
                        <option value="G1">Creative Commons Attribution</option>
                        <option value="G2">Creative Commons Attribution-NonCommercial</option>
                        <option value="G3.1">Creative Commons Attribution-ShareAlike</option>
                        <option value="G3.2">Creative Commons Attribution-NonCommercial-ShareAlike</option>
                        <option value="G4.1">Creative Commons Attribution-NonCommercial-NoDerivs</option>
                        <option value="G4.2">Creative Commons Attribution-NoDerivs</option>
                        <option value="G5">Others License</option>
                    </select>
                </div>
            </div>
            
            <!-- Section 2: Optional Metadata -->
            <div class="ckan-fadd-section">
                <h3 class="ckan-fadd-section-title">คำอธิบายข้อมูลส่วนที่เป็นทางเลือก (Optional)</h3>
                
                <!-- 15. ระดับชั้นข้อมูล -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field half">
                        <label for="data_classification">15. ระดับชั้นข้อมูล</label>
                        <select id="data_classification" name="data_classification">
                            <option value="">-- เลือก --</option>
                            <option value="เปิดเผย">เปิดเผย</option>
                            <option value="ชั้นเผยแพร่ภายในองค์กร">ชั้นเผยแพร่ภายในองค์กร</option>
                            <option value="ลับ">ลับ</option>
                            <option value="ลับมาก">ลับมาก</option>
                        </select>
                    </div>
                    <div class="ckan-fadd-field half">
                        <label for="accessible_condition">เงื่อนไขการเข้าถึง</label>
                        <select id="accessible_condition" name="accessible_condition">
                            <option value="">-- เลือก --</option>
                            <option value="ไม่มีการจำกัดการเข้าถึงข้อมูล">ไม่มีการจำกัด</option>
                            <option value="เฉพาะบุคคลภายในหน่วยงาน">เฉพาะภายใน</option>
                            <option value="ต้องได้รับอนุมัติจากผู้บริหาร">ต้องได้รับอนุมัติ</option>
                        </select>
                    </div>
                </div>
                
                <!-- 16-17. วันที่ -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field half">
                        <label for="created_date">16. วันที่สร้าง</label>
                        <input type="text" id="created_date" name="created_date" class="thai-datepicker" value="<?php echo $thai_date; ?>">
                    </div>
                    <div class="ckan-fadd-field half">
                        <label for="last_updated_date">17. วันที่ปรับปรุง</label>
                        <input type="text" id="last_updated_date" name="last_updated_date" class="thai-datepicker" value="<?php echo $thai_date; ?>">
                    </div>
                </div>
                
                <!-- 18. URL -->
                <div class="ckan-fadd-field">
                    <label for="url">18. URL</label>
                    <input type="url" id="url" name="url">
                </div>
                
                <!-- 19. ผู้สนับสนุน -->
                <div class="ckan-fadd-field">
                    <label for="data_support">19. ผู้สนับสนุน</label>
                    <select id="data_support" name="data_support">
                        <option value="">-- เลือก --</option>
                        <option value="0">ไม่มี</option>
                        <option value="1">องค์กรของรัฐ</option>
                        <option value="2">องค์กรเอกชน</option>
                        <option value="3">องค์กรระหว่างประเทศ</option>
                        <option value="4">มูลนิธิ/สมาคม</option>
                        <option value="5">สถาบันการศึกษา</option>
                        <option value="9">อื่น ๆ</option>
                    </select>
                    <div class="ckan-fadd-other-field" id="data_support_other" style="display:none;">
                        <input type="text" name="data_support_other" placeholder="ระบุผู้สนับสนุน">
                    </div>
                </div>
                
                <!-- 20. หน่วยจัดเก็บ -->
                <div class="ckan-fadd-field">
                    <label for="data_collect">20. หน่วยที่ย่อยที่สุดของการจัดเก็บ</label>
                    <select id="data_collect" name="data_collect">
                        <option value="">-- เลือก --</option>
                        <option value="00">ไม่มี</option>
                        <option value="01">บุคคล</option>
                        <option value="02">ครัวเรือน/ครอบครัว</option>
                        <option value="03">บ้าน/ที่อยู่อาศัย</option>
                        <option value="04">บริษัท/ห้างร้าน</option>
                        <option value="05">อาคาร/สิ่งปลูกสร้าง</option>
                        <option value="06">พื้นที่การเกษตร</option>
                        <option value="07">สัตว์และพันธุ์พืช</option>
                        <option value="08">ขอบเขตเชิงภูมิศาสตร์</option>
                        <option value="09">แหล่งน้ำ</option>
                        <option value="10">เส้นทางการเดินทาง</option>
                        <option value="98">ไม่ทราบ</option>
                        <option value="99">อื่น ๆ</option>
                    </select>
                    <div class="ckan-fadd-other-field" id="data_collect_other" style="display:none;">
                        <input type="text" name="data_collect_other" placeholder="ระบุหน่วยจัดเก็บ">
                    </div>
                </div>
                
                <!-- 21. ภาษา -->
                <div class="ckan-fadd-field">
                    <label for="data_language">21. ภาษาที่ใช้</label>
                    <select id="data_language" name="data_language">
                        <option value="">-- เลือก --</option>
                        <option value="01">ไทย</option>
                        <option value="02">อังกฤษ</option>
                        <option value="03">จีน</option>
                        <option value="04">มลายู</option>
                        <option value="05">พม่า</option>
                        <option value="06">ลาว</option>
                        <option value="07">เขมร</option>
                        <option value="08">ญี่ปุ่น</option>
                        <option value="09">เกาหลี</option>
                        <option value="10">ฝรั่งเศส</option>
                        <option value="11">เยอรมัน</option>
                        <option value="12">อารบิก</option>
                        <option value="98">ไม่ทราบ</option>
                        <option value="99">อื่น ๆ</option>
                    </select>
                    <div class="ckan-fadd-other-field" id="data_language_other" style="display:none;">
                        <input type="text" name="data_language_other" placeholder="ระบุภาษา">
                    </div>
                </div>
                
                <!-- 22-24. Admin Fields -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field third">
                        <label for="high_value_dataset">22. ชุดข้อมูลคุณค่าสูง
                            <?php if (!$is_admin): ?>
                                <span class="admin-only-badge">Admin</span>
                            <?php endif; ?>
                        </label>
                        <select id="high_value_dataset" name="high_value_dataset" <?php echo !$is_admin ? 'disabled' : ''; ?>>
                            <option value="">-- เลือก --</option>
                            <option value="เป็น">เป็น</option>
                            <option value="ไม่เป็น">ไม่เป็น</option>
                        </select>
                    </div>
                    <div class="ckan-fadd-field third">
                        <label for="reference_data">23. ข้อมูลอ้างอิง
                            <?php if (!$is_admin): ?>
                                <span class="admin-only-badge">Admin</span>
                            <?php endif; ?>
                        </label>
                        <select id="reference_data" name="reference_data" <?php echo !$is_admin ? 'disabled' : ''; ?>>
                            <option value="">-- เลือก --</option>
                            <option value="เป็น">เป็น</option>
                            <option value="ไม่เป็น">ไม่เป็น</option>
                        </select>
                    </div>
                    <div class="ckan-fadd-field third">
                        <label for="official_statistics">24. สถิติทางการ
                            <?php if (!$is_admin): ?>
                                <span class="admin-only-badge">Admin</span>
                            <?php endif; ?>
                        </label>
                        <select id="official_statistics" name="official_statistics" <?php echo !$is_admin ? 'disabled' : ''; ?>>
                            <option value="">-- เลือก --</option>
                            <option value="ใช่">ใช่</option>
                            <option value="ไม่ใช่">ไม่ใช่</option>
                        </select>
                    </div>
                </div>
                
                <!-- 25. ประเภทชุดข้อมูล -->
                <div class="ckan-fadd-field">
                    <label for="dataset_type">25. ประเภทชุดข้อมูล (เพิ่มเติม)</label>
                    <select id="dataset_type" name="dataset_type[]" class="ckan-select2" multiple>
                        <?php foreach($cdata_terms as $term): ?>
                            <option value="<?php echo $term->term_id; ?>"><?php echo esc_html($term->name); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
            </div>
            
            <!-- Section 3: System Info -->
            <div class="ckan-fadd-section">
                <h3 class="ckan-fadd-section-title">ข้อมูลระบบ</h3>
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field third">
                        <label>สร้างโดย</label>
                        <div class="ckan-fadd-static-field"><?php echo $user->display_name; ?></div>
                    </div>
                    <div class="ckan-fadd-field third">
                        <label>วันที่สร้าง</label>
                        <div class="ckan-fadd-static-field"><?php echo $thai_date; ?></div>
                    </div>
                    <div class="ckan-fadd-field third">
                        <label>วันที่ปรับปรุง</label>
                        <div class="ckan-fadd-static-field"><?php echo $thai_date; ?></div>
                    </div>
                </div>
            </div>
            
            <!-- Submit Button -->
            <div class="ckan-fadd-submit">
                <button type=DGA_SUBMIT_TYPE class="ckan-fadd-submit-btn">บันทึกข้อมูล</button>
            </div>
        </form>
    </div>
    
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        // Initialize Select2
        $('.ckan-select2').select2({
            placeholder: "เลือกรายการ...",
            allowClear: true,
            width: '100%'
        });
        
        // Initialize datepicker
        $('.thai-datepicker').datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true
        });
        
        // Character counter
        $('input[maxlength], textarea[maxlength]').on('input', function() {
            const max = $(this).attr('maxlength');
            const len = $(this).val().length;
            $('#' + $(this).attr('id') + '_count').text(len);
        });
        
        // Other fields toggle
        const otherFields = {
            'data_type': '9',
            'objective': '99',
            'update_frequency_unit': 'X',
            'geo_coverage': '99',
            'data_support': '9',
            'data_collect': '99',
            'data_language': '99'
        };
        
        $.each(otherFields, function(field, value) {
            $('#' + field).on('change', function() {
                if ($(this).val() == value) {
                    $('#' + field + '_other').slideDown();
                } else {
                    $('#' + field + '_other').slideUp();
                }
            });
        });
        
        // Form submission
        $('#ckan-fadd-form').on('submit', function(e) {
            e.preventDefault();
            
            const btn = $('.ckan-fadd-submit-btn');
            const originalText = btn.text();
            btn.prop('disabled', true).text('กำลังบันทึก...');
            
            $.ajax({
                type: 'POST',
                url: ckan_ajax_obj.ajax_url,
                data: {
                    action: 'ckan_form_submit',
                    security: $('input[name="security"]').val(),
                    formdata: $(this).serialize()
                },
                success: function(response) {
                    if (response.success) {
                        $('.ckan-fadd-status').removeClass(DGA_ERROR_STATUS).addClass(DGA_SUCCESS_STATUS).show();
                        $('.ckan-fadd-status-message').text(response.data.message);
                        
                        // Reset form
                        $('#ckan-fadd-form')[0].reset();
                        $('.ckan-select2').val(null).trigger('change');
                        
                        // Redirect after 2 seconds
                        if (response.data.post_url) {
                            setTimeout(function() {
                                window.location.href = response.data.post_url;
                            }, 2000);
                        }
                    } else {
                        $('.ckan-fadd-status').removeClass(DGA_SUCCESS_STATUS).addClass(DGA_ERROR_STATUS).show();
                        $('.ckan-fadd-status-message').text(response.data.message);
                    }
                },
                error: function() {
                    $('.ckan-fadd-status').removeClass(DGA_SUCCESS_STATUS).addClass(DGA_ERROR_STATUS).show();
                    $('.ckan-fadd-status-message').text(DGA_ERROR_MESSAGE_TH);
                },
                complete: function() {
                    btn.prop('disabled', false).text(originalText);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}


/****** CKAN LIST *******/

function ckan_list_init() {
    add_shortcode('ckan_list', 'ckan_list_shortcode');
    
    // Register scripts and styles
    wp_register_style('ckan-list-css', get_stylesheet_directory_uri() . '/css/ckan-list.css', array(), DGA_VERSION_NUMBER);
    wp_register_script('ckan-list-js', get_stylesheet_directory_uri() . '/js/ckan-list.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    
    // Localize script with AJAX URL and nonce
    wp_localize_script('ckan-list-js', 'ckan_list_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_list_nonce')
    ));
    
    // Add AJAX handlers
    add_action('wp_ajax_ckan_list_search', 'ckan_list_search_handler');
    add_action('wp_ajax_nopriv_ckan_list_search', 'ckan_list_search_handler');
    
    // Add AJAX handler for post view count
    add_action('wp_ajax_ckan_list_count_view', 'ckan_list_count_view_handler');
    add_action('wp_ajax_nopriv_ckan_list_count_view', 'ckan_list_count_view_handler');
}
add_action('init', 'ckan_list_init');

// AJAX handler for search
function ckan_list_search_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_list_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
    }
    
    $search_term = sanitize_text_field($_POST['search_term']);
    
    // Setup query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => 'ckan',
        DGA_POSTS_PER_PAGE => 20,
        DGA_PAGED_PARAMETER => 1,
        's' => $search_term,
    );
    
    // Get search results
    $query = new WP_Query($args);
    $results = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // Get taxonomy terms
            $caccess_terms = get_the_terms(get_the_ID(), 'caccess');
            $cdata_terms = get_the_terms(get_the_ID(), 'cdata');
            $cgov_terms = get_the_terms(get_the_ID(), 'cgov');
            $cgroup_terms = get_the_terms(get_the_ID(), 'cgroup');
            $ctag_terms = get_the_terms(get_the_ID(), 'ctag');
            $cformat_terms = get_the_terms(get_the_ID(), 'cformat');
            $clicense_terms = get_the_terms(get_the_ID(), 'clicense');
            $corg_terms = get_the_terms(get_the_ID(), 'corg');
            
            // Format taxonomy terms
            $taxonomy_row1 = array();
            $taxonomy_row3 = array();
            $taxonomy_row4 = array();
            
            if ($caccess_terms && !is_wp_error($caccess_terms)) {
                foreach ($caccess_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'caccess');
                }
            }
            
            if ($cdata_terms && !is_wp_error($cdata_terms)) {
                foreach ($cdata_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'cdata');
                }
            }
            
            if ($cgov_terms && !is_wp_error($cgov_terms)) {
                foreach ($cgov_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'cgov');
                }
            }
            
            if ($cgroup_terms && !is_wp_error($cgroup_terms)) {
                foreach ($cgroup_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'cgroup');
                }
            }
            
            if ($ctag_terms && !is_wp_error($ctag_terms)) {
                foreach ($ctag_terms as $term) {
                    $taxonomy_row3[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'ctag');
                }
            }
            
            if ($cformat_terms && !is_wp_error($cformat_terms)) {
                foreach ($cformat_terms as $term) {
                    $taxonomy_row3[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'cformat');
                }
            }
            
            if ($clicense_terms && !is_wp_error($clicense_terms)) {
                foreach ($clicense_terms as $term) {
                    $taxonomy_row3[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'clicense');
                }
            }
            
            if ($corg_terms && !is_wp_error($corg_terms)) {
                foreach ($corg_terms as $term) {
                    $taxonomy_row4[] = array('term' => $term->name, DGA_TAXONOMY_FIELD => 'corg');
                }
            }
            
            // Get post views
            $total_views = get_post_meta(get_the_ID(), 'ckan_total_views', true) ?: 0;
            $recent_views = get_post_meta(get_the_ID(), 'ckan_recent_views', true) ?: 0;
            
            // Get creation date
            $creation_date = get_post_meta(get_the_ID(), 'ckan_auto_createpost', true) ?: '';
            
            // Add to results
            $results[] = array(
                'id' => get_the_ID(),
                DGA_TITLE_FIELD => get_the_title(),
                'permalink' => get_permalink(),
                'excerpt' => wp_trim_words(get_the_content(), 200, '...'),
                'total_views' => $total_views,
                'recent_views' => $recent_views,
                'taxonomy_row1' => $taxonomy_row1,
                'taxonomy_row3' => $taxonomy_row3,
                'taxonomy_row4' => $taxonomy_row4,
                'creation_date' => $creation_date
            );
        }
        wp_reset_postdata();
    }
    
    wp_send_json_success(array('posts' => $results));
}

// AJAX handler for post view count
function ckan_list_count_view_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_list_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    
    // Get current counts
    $total_views = get_post_meta($post_id, 'ckan_total_views', true);
    $recent_views = get_post_meta($post_id, 'ckan_recent_views', true);
    
    // Update counts
    if (!$total_views) {
        $total_views = 1;
        add_post_meta($post_id, 'ckan_total_views', $total_views, true);
    } else {
        $total_views++;
        update_post_meta($post_id, 'ckan_total_views', $total_views);
    }
    
    if (!$recent_views) {
        $recent_views = 1;
        add_post_meta($post_id, 'ckan_recent_views', $recent_views, true);
    } else {
        $recent_views++;
        update_post_meta($post_id, 'ckan_recent_views', $recent_views);
    }
    
    // Reset recent views weekly (optional)
    $last_reset = get_post_meta($post_id, 'ckan_views_last_reset', true);
    $now = time();
    
    if (!$last_reset || ($now - $last_reset) > 604800) { // 604800 = 1 week in seconds
        update_post_meta($post_id, 'ckan_recent_views', 1);
        update_post_meta($post_id, 'ckan_views_last_reset', $now);
    }
    
    wp_send_json_success(array(
        'total_views' => $total_views,
        'recent_views' => $recent_views
    ));
}

// Shortcode function
function ckan_list_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        DGA_POSTS_PER_PAGE => 20,
        DGA_PAGED_PARAMETER => get_query_var(DGA_PAGED_PARAMETER) ? get_query_var(DGA_PAGED_PARAMETER) : 1,
        DGA_ORDERBY_FIELD_VALUE => DGA_TITLE_FIELD,
        DGA_ORDER_FIELD => 'ASC',
    ), $atts);
    
    // Enqueue styles and scripts
    wp_enqueue_style('ckan-list-css');
    wp_enqueue_script('ckan-list-js');
    
    // Start output buffering
    ob_start();
    
    // Setup query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => 'ckan',
        DGA_POSTS_PER_PAGE => $atts[DGA_POSTS_PER_PAGE],
        DGA_PAGED_PARAMETER => $atts[DGA_PAGED_PARAMETER],
        DGA_ORDERBY_FIELD_VALUE => $atts[DGA_ORDERBY_FIELD_VALUE],
        DGA_ORDER_FIELD => $atts[DGA_ORDER_FIELD],
    );
    
    // Check if we're sorting by popularity
    if ($atts[DGA_ORDERBY_FIELD_VALUE] === 'popularity') {
        $args['meta_key'] = 'ckan_total_views';
        $args[DGA_ORDERBY_FIELD_VALUE] = 'meta_value_num';
        $args[DGA_ORDER_FIELD] = 'DESC';
    }
    
    // Check if we're sorting by last modified
    if ($atts[DGA_ORDERBY_FIELD_VALUE] === 'modified') {
        $args[DGA_ORDERBY_FIELD_VALUE] = 'modified';
    }
    
    // Run the query
    $query = new WP_Query($args);
    $max_pages = $query->max_num_pages;
    
    // Output container
    ?>
    <div class="ckan-list-container">
        <!-- Controls and search bar -->
        <div class="ckan-list-controls">
            <div class="ckan-list-search">
                <input type="text" id="ckan-list-search-input" placeholder="ค้นหาชุดข้อมูล...">
                <button id="ckan-list-search-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                </button>
                <div id="ckan-list-search-results" class="ckan-list-search-results" style="display: none;"></div>
            </div>
            
            <div class="ckan-list-options">
                <div class="ckan-list-sort">
                    <label for="ckan-list-sort-select">เรียงโดย:</label>
                    <select id="ckan-list-sort-select">
                        <option value="title-asc" <?php selected($atts[DGA_ORDERBY_FIELD_VALUE] . '-' . $atts[DGA_ORDER_FIELD], 'title-ASC'); ?>>เรียงชื่อตามลำดับอักษร (ก-ฮ)</option>
                        <option value="title-desc" <?php selected($atts[DGA_ORDERBY_FIELD_VALUE] . '-' . $atts[DGA_ORDER_FIELD], 'title-DESC'); ?>>เรียงชื่อตามลำดับอักษร (ฮ-ก)</option>
                        <option value="modified-desc" <?php selected($atts[DGA_ORDERBY_FIELD_VALUE], 'modified'); ?>>ถูกแก้ไขครั้งสุดท้าย</option>
                        <option value="popularity-desc" <?php selected($atts[DGA_ORDERBY_FIELD_VALUE], 'popularity'); ?>>มีความสนใจมากสุด</option>
                    </select>
                </div>
                
                <div class="ckan-list-view-toggle">
                    <button id="ckan-list-grid-view" aria-label="Grid view">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>
                    </button>
                    <button id="ckan-list-list-view" class="active" aria-label="List view">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Skeleton loading -->
        <div id="ckan-list-skeleton" class="ckan-list-list">
            <?php for ($i = 0; $i < 8; $i++) : ?>
            <div class="ckan-list-skeleton-item">
                <div class="ckan-list-skeleton-title"></div>
                <div class="ckan-list-skeleton-tags"></div>
                <div class="ckan-list-skeleton-excerpt"></div>
                <div class="ckan-list-skeleton-tags"></div>
                <div class="ckan-list-skeleton-meta"></div>
            </div>
            <?php endfor; ?>
        </div>
        
        <!-- Content -->
        <div id="ckan-list-content" class="ckan-list-list" style="display: none;">
            <?php
            if ($query->have_posts()) :
                while ($query->have_posts()) :
                    $query->the_post();
                    $post_id = get_the_ID();
                    
                    // Get taxonomy terms
                    $caccess_terms = get_the_terms($post_id, 'caccess');
                    $cdata_terms = get_the_terms($post_id, 'cdata');
                    $cgov_terms = get_the_terms($post_id, 'cgov');
                    $cgroup_terms = get_the_terms($post_id, 'cgroup');
                    $ctag_terms = get_the_terms($post_id, 'ctag');
                    $cformat_terms = get_the_terms($post_id, 'cformat');
                    $clicense_terms = get_the_terms($post_id, 'clicense');
                    $corg_terms = get_the_terms($post_id, 'corg');
                    
                    // Get view count
                    $total_views = get_post_meta($post_id, 'ckan_total_views', true) ?: 0;
                    $recent_views = get_post_meta($post_id, 'ckan_recent_views', true) ?: 0;
                    
                    // Get creation date
                    $creation_date = get_post_meta($post_id, 'ckan_auto_createpost', true) ?: '';
                    
                    // Excerpt
                    $excerpt = wp_trim_words(get_the_content(), 200, '...');
                    ?>
                    <div class="ckan-list-item" data-post-id="<?php echo $post_id; ?>">
                        <div class="ckan-list-item-header">
                            <h3 class="ckan-list-item-title">
                                <a href="<?php the_permalink(); ?>" data-post-id="<?php echo $post_id; ?>" class="ckan-list-item-link">
                                    <?php the_title(); ?>
                                </a>
                            </h3>
                            <div class="ckan-list-item-views">
                                <span class="ckan-list-item-total-views" title="จำนวนการเข้าชมทั้งหมด">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                    <?php echo $total_views; ?>
                                </span>
                                <span class="ckan-list-item-recent-views" title="จำนวนการเข้าชมล่าสุด">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
                                    <?php echo $recent_views; ?>
                                </span>
                            </div>
                        </div>
                        
                        <div class="ckan-list-item-taxonomies">
                            <?php
                            // Display 1st row taxonomy terms
                            if ($caccess_terms && !is_wp_error($caccess_terms)) {
                                foreach ($caccess_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-caccess">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cdata_terms && !is_wp_error($cdata_terms)) {
                                foreach ($cdata_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cdata">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cgov_terms && !is_wp_error($cgov_terms)) {
                                foreach ($cgov_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cgov">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cgroup_terms && !is_wp_error($cgroup_terms)) {
                                foreach ($cgroup_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cgroup">' . esc_html($term->name) . '</span>';
                                }
                            }
                            ?>
                        </div>
                        
                        <div class="ckan-list-item-excerpt">
                            <?php echo $excerpt; ?>
                        </div>
                        
                        <div class="ckan-list-item-taxonomies-row3">
                            <?php
                            // Display 3rd row taxonomy terms
                            if ($ctag_terms && !is_wp_error($ctag_terms)) {
                                foreach ($ctag_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-ctag">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cformat_terms && !is_wp_error($cformat_terms)) {
                                foreach ($cformat_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cformat">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($clicense_terms && !is_wp_error($clicense_terms)) {
                                foreach ($clicense_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-clicense">' . esc_html($term->name) . '</span>';
                                }
                            }
                            ?>
                        </div>
                        
                        <div class="ckan-list-item-footer">
                            <div class="ckan-list-item-org">
                                <?php
                                // Display 4th row taxonomy terms
                                if ($corg_terms && !is_wp_error($corg_terms)) {
                                    foreach ($corg_terms as $term) {
                                        echo '<span class="ckan-list-taxonomy-tag tag-corg">' . esc_html($term->name) . '</span>';
                                    }
                                }
                                ?>
                            </div>
                            <div class="ckan-list-item-date">
                                <?php echo $creation_date; ?>
                            </div>
                        </div>
                    </div>
                <?php
                endwhile;
            else :
                ?>
                <div class="ckan-list-no-results">
                    <p>ไม่พบชุดข้อมูลที่ค้นหา</p>
                </div>
            <?php endif; wp_reset_postdata(); ?>
        </div>
        
        <!-- Pagination -->
        <?php if ($max_pages > 1) : ?>
        <div class="ckan-list-pagination">
            <?php
            $current_page = max(1, get_query_var(DGA_PAGED_PARAMETER));
            $base_url = add_query_arg(array(), remove_query_arg(DGA_PAGED_PARAMETER));
            
            if ($current_page > 1) {
                echo '<a href="' . esc_url(add_query_arg(DGA_PAGED_PARAMETER, $current_page - 1, $base_url)) . '" class="ckan-list-pagination-prev">&laquo; หน้าก่อนหน้า</a>';
            }
            
            $start_page = max(1, $current_page - 2);
            $end_page = min($max_pages, $current_page + 2);
            
            if ($start_page > 1) {
                echo '<a href="' . esc_url(add_query_arg(DGA_PAGED_PARAMETER, 1, $base_url)) . '" class="ckan-list-pagination-number">1</a>';
                if ($start_page > 2) {
                    echo '<span class="ckan-list-pagination-dots">...</span>';
                }
            }
            
            for ($i = $start_page; $i <= $end_page; $i++) {
                if ($i == $current_page) {
                    echo '<span class="ckan-list-pagination-current">' . $i . '</span>';
                } else {
                    echo '<a href="' . esc_url(add_query_arg(DGA_PAGED_PARAMETER, $i, $base_url)) . '" class="ckan-list-pagination-number">' . $i . '</a>';
                }
            }
            
            if ($end_page < $max_pages) {
                if ($end_page < $max_pages - 1) {
                    echo '<span class="ckan-list-pagination-dots">...</span>';
                }
                echo '<a href="' . esc_url(add_query_arg(DGA_PAGED_PARAMETER, $max_pages, $base_url)) . '" class="ckan-list-pagination-number">' . $max_pages . '</a>';
            }
            
            if ($current_page < $max_pages) {
                echo '<a href="' . esc_url(add_query_arg(DGA_PAGED_PARAMETER, $current_page + 1, $base_url)) . '" class="ckan-list-pagination-next">หน้าถัดไป &raquo;</a>';
            }
            ?>
        </div>
        <?php endif; ?>
    </div>
    
    <?php
    // Return the buffered content
    return ob_get_clean();
}


/**** แสดง CKAN TAXONOMY LIST แบบ Widget ตามสิทธิ์ผู้ใช้ *****/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Initialize CKAN Taxonomy List
 */
function ckan_taxo_list_ktl924_init() {
    // Register shortcode
    add_shortcode('ckan_term', 'ckan_taxo_list_ktl924_shortcode');
    
    // Register scripts and styles
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_taxo_list_ktl924_register_assets');
    
    // Add AJAX handlers
    add_action('wp_ajax_ckan_taxo_filter_ktl924', 'ckan_taxo_filter_ktl924_handler');
    add_action('wp_ajax_nopriv_ckan_taxo_filter_ktl924', 'ckan_taxo_filter_ktl924_handler');
}
add_action('init', 'ckan_taxo_list_ktl924_init');

/**
 * Register assets
 */
function ckan_taxo_list_ktl924_register_assets() {
    $version = '2.0.0';
    
    // Register styles
    wp_register_style(
        'ckan-taxo-list-ktl924', 
        get_stylesheet_directory_uri() . '/css/ckan-taxo-list-ktl924.css', 
        array(), 
        $version
    );
    
    // Register script
    wp_register_script(
        'ckan-taxo-list-ktl924', 
        get_stylesheet_directory_uri() . '/js/ckan-taxo-list-ktl924.js', 
        array(), 
        $version, 
        true
    );
    
    // Localize script
    wp_localize_script('ckan-taxo-list-ktl924', 'ckanTaxoConfig', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_taxo_ktl924_nonce'),
        'i18n' => array(
            'loading' => __('กำลังโหลด...', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_RETRY_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'noData' => __('ไม่พบข้อมูล', DGA_TEXT_DOMAIN),
            'accessDenied' => __('คุณไม่มีสิทธิ์เข้าถึงข้อมูลนี้', DGA_TEXT_DOMAIN),
            'all' => __('ทั้งหมด', DGA_TEXT_DOMAIN)
        )
    ));
}

/**
 * Check if user can access term with caching
 * 
 * @param int $term_id Term ID
 * @param string $taxonomy Taxonomy name
 * @param array $user_roles User roles (optional)
 * @return bool
 */
function ckan_taxo_user_can_access_term_ktl924($term_id, $taxonomy, $user_roles = null) {
    // Validate inputs
    $term_id = absint($term_id);
    $taxonomy = sanitize_key($taxonomy);
    
    if (!$term_id || !taxonomy_exists($taxonomy)) {
        return false;
    }
    
    // Get current user roles if not provided
    if ($user_roles === null) {
        $current_user = wp_get_current_user();
        $user_roles = $current_user->roles;
    }
    
    // Admin always has access
    if (in_array(DGA_ADMIN_ROLE, $user_roles)) {
        return true;
    }
    
    // Use transient cache for performance
    $cache_key = 'ckan_term_access_' . md5($term_id . '_' . $taxonomy . '_' . implode('_', $user_roles));
    $cached = get_transient($cache_key);
    
    if ($cached !== false) {
        return $cached === 'yes';
    }
    
    // Get permission settings
    $settings = get_option('ckan_permission_settings', array());
    
    // No restrictions for this taxonomy
    if (empty($settings[$taxonomy])) {
        set_transient($cache_key, 'yes', HOUR_IN_SECONDS);
        return true;
    }
    
    // No restrictions for this term
    if (empty($settings[$taxonomy][$term_id])) {
        set_transient($cache_key, 'yes', HOUR_IN_SECONDS);
        return true;
    }
    
    // Check user roles against permissions
    $has_access = false;
    
    if (!empty($user_roles)) {
        foreach ($user_roles as $role) {
            if (!empty($settings[$taxonomy][$term_id][$role])) {
                $has_access = true;
                break;
            }
        }
    }
    
    // Cache the result
    set_transient($cache_key, $has_access ? 'yes' : 'no', HOUR_IN_SECONDS);
    
    return $has_access;
}

/**
 * Get accessible terms for current user with caching
 * 
 * @param string $taxonomy Taxonomy name
 * @return array
 */
function ckan_taxo_get_accessible_terms_ktl924($taxonomy) {
    $taxonomy = sanitize_key($taxonomy);
    
    if (!taxonomy_exists($taxonomy)) {
        return array();
    }
    
    $current_user = wp_get_current_user();
    $user_roles = $current_user->roles;
    
    // Cache key based on user roles
    $cache_key = 'ckan_accessible_terms_' . md5($taxonomy . '_' . implode('_', $user_roles));
    $cached = get_transient($cache_key);
    
    if ($cached !== false) {
        return $cached;
    }
    
    // Get all terms
    $all_terms = get_terms(array(
        DGA_TAXONOMY_FIELD => $taxonomy,
        DGA_HIDE_EMPTY_FIELD => true,
        DGA_ORDERBY_FIELD_VALUE => 'name',
        DGA_ORDER_FIELD => 'ASC'
    ));
    
    if (is_wp_error($all_terms) || empty($all_terms)) {
        return array();
    }
    
    // Admin gets all terms
    if (in_array(DGA_ADMIN_ROLE, $user_roles)) {
        set_transient($cache_key, $all_terms, HOUR_IN_SECONDS);
        return $all_terms;
    }
    
    // Filter accessible terms
    $accessible_terms = array();
    
    foreach ($all_terms as $term) {
        if (ckan_taxo_user_can_access_term_ktl924($term->term_id, $taxonomy, $user_roles)) {
            $accessible_terms[] = $term;
        }
    }
    
    // Cache the result
    set_transient($cache_key, $accessible_terms, HOUR_IN_SECONDS);
    
    return $accessible_terms;
}

/**
 * Count accessible posts for terms
 * 
 * @param array $terms Array of term objects
 * @param string $taxonomy Taxonomy name
 * @return array
 */
function ckan_taxo_count_accessible_posts_ktl924($terms, $taxonomy) {
    $counts = array();
    $total = 0;
    
    $current_user_roles = wp_get_current_user()->roles;
    
    foreach ($terms as $term) {
        // Use cached count if available
        $cache_key = 'ckan_term_post_count_' . md5($term->term_id . '_' . implode('_', $current_user_roles));
        $cached_count = get_transient($cache_key);
        
        if ($cached_count !== false) {
            $counts[$term->term_id] = intval($cached_count);
            $total += intval($cached_count);
            continue;
        }
        
        // Query posts for this term
        $args = array(
            DGA_POST_TYPE_FIELD => 'ckan',
            DGA_POSTS_PER_PAGE => -1,
            DGA_FIELDS_PARAMETER => 'ids',
            'no_found_rows' => true,
            'update_post_meta_cache' => false,
            'update_post_term_cache' => false,
            'tax_query' => array(
                array(
                    DGA_TAXONOMY_FIELD => $taxonomy,
                    DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                    'terms' => $term->term_id
                )
            )
        );
        
        $posts = get_posts($args);
        $accessible_count = 0;
        
        // Check permission for each post
        foreach ($posts as $post_id) {
            if (function_exists('ckan_permission_user_can_access')) {
                if (ckan_permission_user_can_access($post_id, $current_user_roles)) {
                    $accessible_count++;
                }
            } else {
                // If permission function doesn't exist, count all
                $accessible_count++;
            }
        }
        
        // Cache the count
        set_transient($cache_key, $accessible_count, HOUR_IN_SECONDS);
        
        $counts[$term->term_id] = $accessible_count;
        $total += $accessible_count;
    }
    
    return array(
        'counts' => $counts,
        DGA_TOTAL_FIELD_KEY => $total
    );
}

/**
 * AJAX handler for taxonomy filtering
 */
function ckan_taxo_filter_ktl924_handler() {
    // Verify nonce
    if (!check_ajax_referer('ckan_taxo_ktl924_nonce', 'nonce', false)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)
        ), 403);
    }
    
    // Validate and sanitize inputs
    $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_key($_POST[DGA_TAXONOMY_FIELD]) : '';
    $term_id = isset($_POST[DGA_TERM_ID_FIELD]) ? absint($_POST[DGA_TERM_ID_FIELD]) : 0;
    $page = isset($_POST['page']) ? max(1, absint($_POST['page'])) : 1;
    
    if (empty($taxonomy) || !taxonomy_exists($taxonomy)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('Taxonomy ไม่ถูกต้อง', DGA_TEXT_DOMAIN)
        ), 400);
    }
    
    // Check term access permission
    if ($term_id > 0) {
        if (!ckan_taxo_user_can_access_term_ktl924($term_id, $taxonomy)) {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์เข้าถึงหมวดหมู่นี้', DGA_TEXT_DOMAIN)
            ), 403);
        }
    }
    
    // Setup query
    $posts_per_page = 20;
    $args = array(
        DGA_POST_TYPE_FIELD => 'ckan',
        DGA_POSTS_PER_PAGE => $posts_per_page,
        DGA_PAGED_PARAMETER => $page,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    // Add taxonomy query if term specified
    if ($term_id > 0) {
        $args['tax_query'] = array(
            array(
                DGA_TAXONOMY_FIELD => $taxonomy,
                DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                'terms' => $term_id
            )
        );
    }
    
    // Execute query
    $query = new WP_Query($args);
    $results = array();
    
    if ($query->have_posts()) {
        $current_user_roles = wp_get_current_user()->roles;
        
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // Check post access permission
            if (function_exists('ckan_permission_user_can_access')) {
                if (!ckan_permission_user_can_access($post_id, $current_user_roles)) {
                    continue;
                }
            }
            
            // Build post data
            $post_data = array(
                'id' => $post_id,
                DGA_TITLE_FIELD => get_the_title(),
                'permalink' => get_permalink(),
                'excerpt' => wp_trim_words(get_the_content(), 30, '...'),
                'total_views' => intval(get_post_meta($post_id, 'ckan_total_views', true)),
                'recent_views' => intval(get_post_meta($post_id, 'ckan_recent_views', true)),
                'creation_date' => get_post_meta($post_id, 'ckan_auto_createpost', true) ?: get_the_date('Y-m-d')
            );
            
            // Get taxonomies with permission check
            $taxonomies_to_fetch = array(
                'caccess' => 'row1',
                'cdata' => 'row1', 
                'cgov' => 'row1',
                'cgroup' => 'row1',
                'ctag' => 'row3',
                'cformat' => 'row3',
                'clicense' => 'row3',
                'corg' => 'row4'
            );
            
            foreach ($taxonomies_to_fetch as $tax => $row) {
                $terms = get_the_terms($post_id, $tax);
                $accessible_terms = array();
                
                if ($terms && !is_wp_error($terms)) {
                    foreach ($terms as $term) {
                        if (ckan_taxo_user_can_access_term_ktl924($term->term_id, $tax)) {
                            $accessible_terms[] = array(
                                'term' => esc_html($term->name),
                                DGA_TAXONOMY_FIELD => $tax
                            );
                        }
                    }
                }
                
                $post_data['taxonomy_' . $row][] = $accessible_terms;
            }
            
            $results[] = $post_data;
        }
        wp_reset_postdata();
    }
    
    // Get term name
    $term_name = __('ทั้งหมด', DGA_TEXT_DOMAIN);
    if ($term_id > 0) {
        $term = get_term($term_id, $taxonomy);
        if ($term && !is_wp_error($term)) {
            $term_name = esc_html($term->name);
        }
    }
    
    // Send response
    wp_send_json_success(array(
        'posts' => $results,
        DGA_TERM_ID_FIELD => $term_id,
        'term_name' => $term_name,
        DGA_TAXONOMY_FIELD => $taxonomy,
        'found_posts' => count($results),
        'max_pages' => $query->max_num_pages,
        'current_page' => $page
    ));
}

/**
 * Shortcode function
 */
function ckan_taxo_list_ktl924_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'taxo' => 'corg',
        DGA_TITLE_FIELD => '',
        'height' => '300',
        'show_count' => 'yes'
    ), $atts);
    
    $taxonomy = sanitize_key($atts['taxo']);
    $height = absint($atts['height']);
    $show_count = $atts['show_count'] === 'yes';
    
    // Validate taxonomy
    if (!taxonomy_exists($taxonomy)) {
        return sprintf(
            '<div class="ckan-taxo-error-ktl924" role="alert">%s</div>',
            esc_html__('Taxonomy ไม่ถูกต้อง', DGA_TEXT_DOMAIN)
        );
    }
    
    // Set default title
    $title = !empty($atts[DGA_TITLE_FIELD]) ? sanitize_text_field($atts[DGA_TITLE_FIELD]) : '';
    
    if (empty($title)) {
        $taxonomy_labels = array(
            'corg' => __('ข้อมูลองค์กร', DGA_TEXT_DOMAIN),
            'cdata' => __('ประเภทชุดข้อมูล', DGA_TEXT_DOMAIN),
            'cgov' => __('ธรรมาภิบาลข้อมูลภาครัฐ', DGA_TEXT_DOMAIN),
            'cgroup' => __('กลุ่มข้อมูล', DGA_TEXT_DOMAIN),
            'caccess' => __('การเข้าถึงข้อมูล', DGA_TEXT_DOMAIN),
            'cformat' => __('รูปแบบการเก็บข้อมูล', DGA_TEXT_DOMAIN),
            'clicense' => __('สิทธิการใช้งาน', DGA_TEXT_DOMAIN),
            'ctag' => __('แท็ก', DGA_TEXT_DOMAIN)
        );
        
        $title = isset($taxonomy_labels[$taxonomy]) ? $taxonomy_labels[$taxonomy] : __('หมวดหมู่', DGA_TEXT_DOMAIN);
    }
    
    // Enqueue assets
    wp_enqueue_style('ckan-taxo-list-ktl924');
    wp_enqueue_script('ckan-taxo-list-ktl924');
    
    // Get accessible terms
    $terms = ckan_taxo_get_accessible_terms_ktl924($taxonomy);
    
    if (empty($terms)) {
        return sprintf(
            '<div class="ckan-taxo-error-ktl924" role="alert">%s</div>',
            esc_html__('ไม่พบข้อมูลหรือคุณไม่มีสิทธิ์เข้าถึง', DGA_TEXT_DOMAIN)
        );
    }
    
    // Count accessible posts
    $post_counts = ckan_taxo_count_accessible_posts_ktl924($terms, $taxonomy);
    
    // Generate unique container ID
    $container_id = 'ckan-taxo-' . wp_generate_uuid4();
    
    // Start output
    ob_start();
    ?>
    <div id="<?php echo esc_attr($container_id); ?>" 
         class="ckan-taxo-container-ktl924" 
         data-taxonomy="<?php echo esc_attr($taxonomy); ?>"
         data-height="<?php echo esc_attr($height); ?>"
         role="navigation"
         aria-label="<?php echo esc_attr($title); ?>">
        
        <div class="ckan-taxo-header-ktl924">
            <h3 class="ckan-taxo-title-ktl924"><?php echo esc_html($title); ?></h3>
        </div>
        
        <!-- Loading skeleton -->
        <div class="ckan-taxo-skeleton-ktl924" aria-hidden="true">
            <?php for ($i = 0; $i < 5; $i++) : ?>
            <div class="ckan-taxo-skeleton-item-ktl924">
                <div class="ckan-taxo-skeleton-name-ktl924"></div>
                <?php if ($show_count) : ?>
                <div class="ckan-taxo-skeleton-count-ktl924"></div>
                <?php endif; ?>
            </div>
            <?php endfor; ?>
        </div>
        
        <!-- Content -->
        <div class="ckan-taxo-content-ktl924" 
             style="height: <?php echo esc_attr($height); ?>px; display: none;"
             role="list">
            
            <!-- All items option -->
            <button type=DGA_BUTTON_TYPE
                    class="ckan-taxo-item-ktl924 active"
                    data-term-id="0"
                    role="listitem"
                    aria-current="true"
                    aria-label="<?php echo esc_attr__('แสดงทั้งหมด', DGA_TEXT_DOMAIN); ?>">
                <span class="ckan-taxo-item-name-ktl924">
                    <?php echo esc_html__('ทั้งหมด', DGA_TEXT_DOMAIN); ?>
                </span>
                <?php if ($show_count) : ?>
                <span class="ckan-taxo-item-count-ktl924" aria-label="<?php echo esc_attr($post_counts[DGA_TOTAL_FIELD_KEY]); ?> รายการ">
                    <?php echo esc_html($post_counts[DGA_TOTAL_FIELD_KEY]); ?>
                </span>
                <?php endif; ?>
            </button>
            
            <!-- Term items -->
            <?php foreach ($terms as $term) : ?>
                <?php 
                $count = isset($post_counts['counts'][$term->term_id]) ? $post_counts['counts'][$term->term_id] : 0;
                if ($count > 0) : 
                ?>
                <button type=DGA_BUTTON_TYPE
                        class="ckan-taxo-item-ktl924"
                        data-term-id="<?php echo esc_attr($term->term_id); ?>"
                        role="listitem"
                        aria-label="<?php echo esc_attr($term->name); ?>">
                    <span class="ckan-taxo-item-name-ktl924">
                        <?php echo esc_html($term->name); ?>
                    </span>
                    <?php if ($show_count) : ?>
                    <span class="ckan-taxo-item-count-ktl924" aria-label="<?php echo esc_attr($count); ?> รายการ">
                        <?php echo esc_html($count); ?>
                    </span>
                    <?php endif; ?>
                </button>
                <?php endif; ?>
            <?php endforeach; ?>
        </div>
        
        <!-- Error message container -->
        <div class="ckan-taxo-error-msg-ktl924" style="display: none;" role="alert"></div>
    </div>
    <?php
    
    return ob_get_clean();
}

/**
 * Clear cache when permissions change
 */
function ckan_taxo_clear_cache_ktl924() {
    global $wpdb;
    
    // Delete all transients related to this plugin
    $wpdb->query(
        "DELETE FROM {$wpdb->options} 
         WHERE option_name LIKE '%_transient_ckan_term_%' 
         OR option_name LIKE '%_transient_ckan_accessible_%'
         OR option_name LIKE '%_transient_timeout_ckan_%'"
    );
}

// Hook to clear cache when permissions are updated
add_action('update_option_ckan_permission_settings', 'ckan_taxo_clear_cache_ktl924');

function ckan_taxo_load_dga_icons_ktl924() {
    wp_enqueue_style('material-icons', 'https://fonts.googleapis.com/icon?family=Material+Icons+Outlined', array(), null);
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_taxo_load_dga_icons_ktl924');



/**** ฟังก์ชั่นอัพเดตไฟล์ใน CKAN Repeater - Role-Based Access ******/

function ckan_rp_list_xrt259($atts) {
    
    // Enqueue necessary styles and scripts
    wp_enqueue_style('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
    wp_enqueue_style('ckan-rp-list-css-xrt259', get_stylesheet_directory_uri() . '/css/ckan-rp-list-xrt259.css');
    wp_enqueue_style('ckan-data-preview-css', get_stylesheet_directory_uri() . '/css/ckan-data-preview.css');
    wp_enqueue_style('ckan-data-preview-filter-css', get_stylesheet_directory_uri() . '/css/ckan-data-preview-filter.css');
    
    // เพิ่ม CSS สำหรับ API
    wp_enqueue_style('ckan-api-css', get_stylesheet_directory_uri() . '/css/ckan-api.css');
    
    wp_enqueue_script('xlsx-js', 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js', array(), null, true);
    wp_enqueue_script('ckan-rp-list-js-xrt259', get_stylesheet_directory_uri() . '/js/ckan-rp-list-xrt259.js', array(DGA_JQUERY_HANDLE), null, true);
    wp_enqueue_script('ckan-data-preview-js', get_stylesheet_directory_uri() . '/js/ckan-data-preview.js', array(DGA_JQUERY_HANDLE, 'xlsx-js'), null, true);
    wp_enqueue_script('ckan-data-preview-filter-js', get_stylesheet_directory_uri() . '/js/ckan-data-preview-filter.js', array(DGA_JQUERY_HANDLE), null, true);
    
    // เพิ่ม JavaScript สำหรับ API
    wp_enqueue_script('ckan-api-js', get_stylesheet_directory_uri() . '/js/ckan-api.js', array(DGA_JQUERY_HANDLE), null, true);
    
    wp_add_inline_script('ckan-data-preview-js', 'const get_stylesheet_directory_uri = "' . get_stylesheet_directory_uri() . '";', 'before');
    
    // Check user capabilities - Administrator or Editor only
    $can_edit = false;
    
    if (is_user_logged_in()) {
        $current_user = wp_get_current_user();
        $user_roles = $current_user->roles;
        
        // Check if user has administrator or editor role
        if (in_array(DGA_ADMIN_ROLE, $user_roles) || in_array('editor', $user_roles)) {
            $can_edit = true;
        }
        
        // Alternative method using capabilities
        // if (current_user_can(DGA_EDIT_POSTS_CAP) && current_user_can('upload_files')) {
        //     $can_edit = true;
        // }
    }
    
    // Debug: Log the permission status
    if (WP_DEBUG) {
        error_log('CKAN Debug - User ID: ' . get_current_user_id());
        error_log('CKAN Debug - User roles: ' . implode(', ', (array)$user_roles));
        error_log('CKAN Debug - Can edit: ' . ($can_edit ? 'true' : 'false'));
    }
    
    // Localize script with AJAX URL, nonce and user permissions
    wp_localize_script('ckan-rp-list-js-xrt259', 'ckan_rp_list_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_rp_list_nonce_xrt259'),
        'can_edit' => $can_edit ? 'true' : 'false' // Pass as string for consistency
    ));
    
    // Also localize for ckan-data-preview-js
    wp_localize_script('ckan-data-preview-js', 'ckan_rp_list_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_rp_list_nonce_xrt259'),
        'can_edit' => $can_edit ? 'true' : 'false'
    ));
    
    // Get current post ID
    $post_id = get_the_ID();
    
    // สร้าง resource_id สำหรับใช้ในตัวอย่าง API
    $resource_id = 'b8a8a6b5-' . substr(md5($post_id), 0, 4) . '-' . substr(md5($post_id), 4, 4) . '-' . substr(md5($post_id), 8, 4) . '-' . substr(md5($post_id), 12, 12);
    
    // Get repeater field values (using ACF)
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    // Start output buffering to capture HTML
    ob_start();
    
    // Main container with permission data attribute
    echo '<div class="ckan-assets-container-xrt259" data-post-id="' . $post_id . '" data-nonce="' . wp_create_nonce('ckan_rp_list_nonce_xrt259') . '" data-ajax-url="' . admin_url(DGA_ADMIN_AJAX_URL) . '" data-can-edit="' . ($can_edit ? 'true' : 'false') . '">';
    
    // Table header
    echo '<div class="ckan-assets-header-xrt259">';
    echo '<h3>' . __('ข้อมูลและทรัพยากร', DGA_TEXT_DOMAIN) . '</h3>';
    
    // Show add button only for administrators and editors
    if ($can_edit) {
        echo '<button class="ckan-add-asset-btn-xrt259" aria-label="' . __('เพิ่มรายการใหม่', DGA_TEXT_DOMAIN) . '"><i class="fa fa-plus-circle" aria-hidden="true"></i> ' . __('เพิ่มรายการ', DGA_TEXT_DOMAIN) . '</button>';
    }
    
    echo '</div>';
    
    // Assets table
    echo '<div class="ckan-assets-table-xrt259">';
    
    // Display assets if they exist
    if ($ckan_assets && is_array($ckan_assets) && count($ckan_assets) > 0) {
        foreach ($ckan_assets as $index => $asset) {
            $name = isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '';
            $description = isset($asset['ckan_asset_discription']) ? $asset['ckan_asset_discription'] : '';
            $file_url = isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '';
            $attachment_id = isset($asset['ckan_asset_attachment_id']) ? $asset['ckan_asset_attachment_id'] : 0;
            
            // ถ้ามี attachment_id ให้ดึงชื่อไฟล์ต้นฉบับ
            $original_filename = '';
            if ($attachment_id > 0) {
                $original_filename = get_post_meta($attachment_id, '_original_filename', true);
            }
            
            // Get file extension and icon
            $file_ext = pathinfo($file_url, PATHINFO_EXTENSION);
            $file_icon = get_file_icon_class_xrt259($file_ext);
            
            // Encode file URL for security
            $encoded_url = base64_encode($file_url);
            
            echo '<div class="ckan-asset-item-xrt259" data-index="' . $index . '" data-original-filename="' . esc_attr($original_filename) . '">';
            echo '<div class="ckan-asset-icon-xrt259"><i class="' . $file_icon . '" aria-hidden="true"></i></div>';
            echo '<div class="ckan-asset-info-xrt259">';
            echo '<div class="ckan-asset-name-xrt259">' . esc_html($name) . '</div>';
            echo '<div class="ckan-asset-description-xrt259">' . esc_html($description) . '</div>';
            echo '</div>';
            echo '<div class="ckan-asset-actions-xrt259">';
            echo '<button class="ckan-download-btn-xrt259" data-url="' . esc_attr($encoded_url) . '" data-attachment-id="' . esc_attr($attachment_id) . '" aria-label="' . __('ดาวน์โหลดไฟล์', DGA_TEXT_DOMAIN) . '">' . __('ดาวน์โหลด', DGA_TEXT_DOMAIN) . '</button>';
            echo '<button class="ckan-preview-btn-xrt259" data-url="' . esc_attr($encoded_url) . '" data-attachment-id="' . esc_attr($attachment_id) . '" data-index="' . $index . '" aria-label="' . __('ดูตัวอย่างไฟล์', DGA_TEXT_DOMAIN) . '">' . __('ดูตัวอย่าง', DGA_TEXT_DOMAIN) . '</button>';
            
            // Show edit and delete buttons only for administrators and editors
            if ($can_edit) {
                echo '<button class="ckan-edit-btn-xrt259" data-index="' . $index . '" data-attachment-id="' . esc_attr($attachment_id) . '" aria-label="' . __('แก้ไขรายการ', DGA_TEXT_DOMAIN) . '"><i class="fa fa-pencil" aria-hidden="true"></i></button>';
                echo '<button class="ckan-delete-btn-xrt259" data-index="' . $index . '" aria-label="' . __('ลบรายการ', DGA_TEXT_DOMAIN) . '"><i class="fa fa-trash" aria-hidden="true"></i></button>';
            }
            
            echo '</div>';
            echo '</div>';
        }
    } else {
        echo '<div class="ckan-no-assets-xrt259">' . __('ไม่มีรายการไฟล์', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    echo '</div>'; // End assets table
    
    // Modal for adding/editing assets - only render if user can edit
    if ($can_edit) {
        echo '<div class="ckan-modal-xrt259" id="ckan-asset-modal-xrt259">';
        echo '<div class="ckan-modal-content-xrt259">';
        echo '<span class="ckan-modal-close-xrt259">&times;</span>';
        echo '<h3 class="ckan-modal-title-xrt259">' . __('เพิ่มรายการไฟล์', DGA_TEXT_DOMAIN) . '</h3>';
        
        echo '<form id="ckan-asset-form-xrt259" enctype="multipart/form-data">';
        echo '<input type="hidden" id="ckan-asset-index-xrt259" name="asset_index" value="">';
        echo '<input type="hidden" id="ckan-asset-file-id-xrt259" name="asset_file_id" value="">';
        echo '<input type="hidden" id="ckan-asset-file-url-xrt259" name="asset_file_url" value="">';
        echo '<input type="hidden" id="ckan-asset-attachment-id-xrt259" name="asset_attachment_id" value="">';
        
        echo '<div class="ckan-form-group-xrt259">';
        echo '<label for="ckan-asset-name-xrt259">' . __('ชื่อไฟล์', DGA_TEXT_DOMAIN) . '</label>';
        echo '<input type="text" id="ckan-asset-name-xrt259" name="asset_name" required>';
        echo '</div>';
        
        echo '<div class="ckan-form-group-xrt259">';
        echo '<label for="ckan-asset-description-xrt259">' . __('คำอธิบายไฟล์', DGA_TEXT_DOMAIN) . '</label>';
        echo '<textarea id="ckan-asset-description-xrt259" name="asset_description"></textarea>';
        echo '</div>';
        
        echo '<div class="ckan-form-group-xrt259">';
        echo '<label for="ckan-asset-file-xrt259">' . __('อัพโหลดไฟล์', DGA_TEXT_DOMAIN) . '</label>';
        echo '<div class="ckan-file-upload-wrapper-xrt259">';
        echo '<input type="file" id="ckan-asset-file-xrt259" name="asset_file">';
        echo '<div class="ckan-upload-status-xrt259"></div>';
        echo '</div>';
        echo '<div class="ckan-current-file-container-xrt259" style="display:none;">';
        echo '<span class="ckan-current-file-label-xrt259">' . __('ไฟล์ปัจจุบัน: ', DGA_TEXT_DOMAIN) . '</span>';
        echo '<span id="ckan-current-file-xrt259"></span>';
        echo '</div>';
        echo '</div>';
        
        echo '<div class="ckan-form-actions-xrt259">';
        echo '<button type=DGA_SUBMIT_TYPE class="ckan-submit-btn-xrt259">' . __('บันทึก', DGA_TEXT_DOMAIN) . '</button>';
        echo '<button type=DGA_BUTTON_TYPE class="ckan-cancel-btn-xrt259">' . __('ยกเลิก', DGA_TEXT_DOMAIN) . '</button>';
        echo '</div>';
        
        echo '</form>';
        echo '</div>'; // End modal content
        echo '</div>'; // End modal
    }
    
    // Preview Modal - available for all users
    echo '<div class="ckan-preview-modal-xrt259" id="ckan-preview-modal-xrt259">';
    echo '<div class="ckan-preview-modal-content-xrt259">';
    echo '<span class="ckan-preview-modal-close-xrt259">&times;</span>';
    echo '<h3 class="ckan-preview-modal-title-xrt259">' . __('ดูตัวอย่าง', DGA_TEXT_DOMAIN) . '</h3>';
    echo '<button class="data-api-btn-xrt259">' . __('DATA API', DGA_TEXT_DOMAIN) . '</button>';
    echo '<div class="ckan-preview-modal-body-xrt259">';
    echo '<div class="ckan-preview-loading-xrt259"><i class="fa fa-spinner fa-spin"></i> ' . __('กำลังโหลด...', DGA_TEXT_DOMAIN) . '</div>';
    echo '<div class="ckan-preview-data-xrt259"></div>';
    echo '</div>';
    echo '</div>';
    echo '</div>';
    
    // API Modal content remains the same...
    // [Previous API modal code continues here]
    
    echo '</div>'; // End main container
    
    // Return the buffered content
    return ob_get_clean();
}
add_shortcode('ckan_rp_list', 'ckan_rp_list_xrt259');

// Helper function for file icons
function get_file_icon_class_xrt259($ext) {
    $ext = strtolower($ext);
    
    $icons = array(
        'pdf' => 'fa fa-file-pdf-o',
        'doc' => 'fa fa-file-word-o',
        'docx' => 'fa fa-file-word-o',
        'xls' => 'fa fa-file-excel-o',
        'xlsx' => 'fa fa-file-excel-o',
        'ppt' => 'fa fa-file-powerpoint-o',
        'pptx' => 'fa fa-file-powerpoint-o',
        'jpg' => 'fa fa-file-image-o',
        'jpeg' => 'fa fa-file-image-o',
        'png' => 'fa fa-file-image-o',
        'gif' => 'fa fa-file-image-o',
        'zip' => 'fa fa-file-archive-o',
        'rar' => 'fa fa-file-archive-o',
        'txt' => 'fa fa-file-text-o',
        'csv' => 'fa fa-file-text-o',
        'json' => 'fa fa-file-code-o'
    );
    
    return isset($icons[$ext]) ? $icons[$ext] : 'fa fa-file-o';
}

// AJAX handlers with permission checks
function ckan_save_asset_xrt259() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce_xrt259')) {
        wp_send_json_error(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }
    
    // Check user permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(__('คุณไม่มีสิทธิ์ในการดำเนินการนี้', DGA_TEXT_DOMAIN));
    }
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $index = isset($_POST['index']) && $_POST['index'] !== '' ? intval($_POST['index']) : -1;
    $name = isset($_POST['name']) ? sanitize_text_field($_POST['name']) : '';
    $description = isset($_POST['description']) ? sanitize_textarea_field($_POST['description']) : '';
    $file_url = isset($_POST['file_url']) ? esc_url_raw($_POST['file_url']) : '';
    $attachment_id = isset($_POST['attachment_id']) ? intval($_POST['attachment_id']) : 0;
    
    // Get current assets
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    if (!is_array($ckan_assets)) {
        $ckan_assets = array();
    }
    
    // Update or add new asset
    $asset = array(
        'ckan_asset_name' => $name,
        'ckan_asset_discription' => $description,
        'ckan_asset_link' => $file_url,
        'ckan_asset_attachment_id' => $attachment_id
    );
    
    if ($index >= 0 && isset($ckan_assets[$index])) {
        // Update existing asset
        $ckan_assets[$index] = $asset;
    } else {
        // Add new asset
        $ckan_assets[] = $asset;
    }
    
    // Update the field
    update_field('ckan_asset', $ckan_assets, $post_id);
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('บันทึกข้อมูลเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
        'assets' => $ckan_assets
    ));
}
add_action('wp_ajax_ckan_save_asset', 'ckan_save_asset_xrt259');

// AJAX handler for deleting asset with permission check
function ckan_delete_asset_xrt259() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce_xrt259')) {
        wp_send_json_error(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }
    
    // Check user permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(__('คุณไม่มีสิทธิ์ในการดำเนินการนี้', DGA_TEXT_DOMAIN));
    }
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $index = isset($_POST['index']) ? intval($_POST['index']) : -1;
    
    // Get current assets
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    if (!is_array($ckan_assets) || !isset($ckan_assets[$index])) {
        wp_send_json_error(__('ไม่พบรายการที่ต้องการลบ', DGA_TEXT_DOMAIN));
    }
    
    // Remove asset
    array_splice($ckan_assets, $index, 1);
    
    // Update the field
    update_field('ckan_asset', $ckan_assets, $post_id);
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('ลบรายการเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
        'assets' => $ckan_assets
    ));
}
add_action('wp_ajax_ckan_delete_asset', 'ckan_delete_asset_xrt259');

// AJAX handler for file upload with permission check
function ckan_upload_file_xrt259() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce_xrt259')) {
        wp_send_json_error(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }
    
    // Check user permissions
    if (!current_user_can('upload_files')) {
        wp_send_json_error(__('คุณไม่มีสิทธิ์ในการอัพโหลดไฟล์', DGA_TEXT_DOMAIN));
    }
    
    // Check if file exists
    if (!isset($_FILES['file']) || empty($_FILES['file']['name'])) {
        wp_send_json_error(__('ไม่พบไฟล์ที่ต้องการอัพโหลด', DGA_TEXT_DOMAIN));
    }
    
    // Store original filename before any processing
    $original_filename = $_FILES['file']['name'];
    
    // Get file extension
    $file_info = pathinfo($_FILES['file']['name']);
    $extension = isset($file_info['extension']) ? strtolower($file_info['extension']) : '';
    
    // Check if file has extension
    if (empty($extension)) {
        wp_send_json_error(__('ไฟล์ต้องมีนามสกุล (เช่น .pdf, .docx, .xlsx)', DGA_TEXT_DOMAIN));
    }
    
    // Check allowed file types
    $allowed_types = array('pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 
                          'jpg', 'jpeg', 'png', 'gif', 'zip', 'rar', 'txt', 'csv', 'json');
    
    if (!in_array($extension, $allowed_types)) {
        wp_send_json_error(__('ประเภทไฟล์ไม่ได้รับอนุญาต. อนุญาตเฉพาะ: ', DGA_TEXT_DOMAIN) . implode(', ', $allowed_types));
    }
    
    // Check file size (100MB max)
    $max_size = 100 * 1024 * 1024;
    if ($_FILES['file']['size'] > $max_size) {
        wp_send_json_error(__('ไฟล์มีขนาดใหญ่เกินไป (จำกัดที่ 100MB)', DGA_TEXT_DOMAIN));
    }
    
    // Generate random filename (timestamp + random number)
    $new_filename = time() . '_' . wp_rand(100000, 999999);
    if (!empty($extension)) {
        $new_filename .= '.' . $extension;
    }
    
    // Replace the filename with new random name
    $_FILES['file']['name'] = $new_filename;
    
    // Set up the required input for media_handle_upload
    $_FILES['upload_file'] = $_FILES['file'];
    
    // Add filter to use our custom filename
    add_filter('wp_handle_upload_prefilter', 'ckan_custom_upload_filename_xrt259');
    
    // Handle the upload
    $attachment_id = media_handle_upload('upload_file', 0);
    
    // Remove filter after upload
    remove_filter('wp_handle_upload_prefilter', 'ckan_custom_upload_filename_xrt259');
    
    if (is_wp_error($attachment_id)) {
        wp_send_json_error($attachment_id->get_error_message());
    } else {
        // Get file URL
        $file_url = wp_get_attachment_url($attachment_id);
        
        // Store original filename as post meta
        update_post_meta($attachment_id, '_original_filename', $original_filename);
        
        // Update attachment title to original filename (without extension)
        $title = pathinfo($original_filename, PATHINFO_FILENAME);
        wp_update_post(array(
            'ID' => $attachment_id,
            'post_title' => $title
        ));
        
        wp_send_json_success(array(
            'file_id' => $attachment_id,
            'file_url' => $file_url,
            'file_name' => $original_filename,
            'actual_filename' => $new_filename,
            'attachment_id' => $attachment_id
        ));
    }
}
add_action('wp_ajax_ckan_upload_file', 'ckan_upload_file_xrt259');

// Function to ensure custom filename is used
function ckan_custom_upload_filename_xrt259($file) {
    return $file;
}

// AJAX handler for file preview - รองรับไฟล์ภาษาไทยและแยก case
function ckan_get_file_preview_xrt259() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce_xrt259')) {
        wp_send_json_error(DGA_SECURITY_FAILED_MSG);
    }
    
    $attachment_id = isset($_POST['attachment_id']) ? intval($_POST['attachment_id']) : 0;
    $file_url = isset($_POST['file_url']) ? esc_url_raw($_POST['file_url']) : '';
    
    // Try attachment ID first
    if ($attachment_id > 0) {
        $file_path = get_attached_file($attachment_id);
        $mime_type = get_post_mime_type($attachment_id);
        $original_filename = get_post_meta($attachment_id, '_original_filename', true);
        
        if ($file_path && file_exists($file_path)) {
            $file_ext = strtolower(pathinfo($file_path, PATHINFO_EXTENSION));
            
            // สำหรับ PDF ส่ง URL พิเศษกลับไป
            if ($file_ext === 'pdf' || $mime_type === 'application/pdf') {
                $pdf_url = admin_url(DGA_ADMIN_AJAX_URL) . '?action=ckan_serve_pdf&attachment_id=' . $attachment_id . '&nonce=' . wp_create_nonce('ckan_rp_list_nonce_xrt259');
                wp_send_json_success(array(
                    DGA_TYPE_FIELD => 'pdf',
                    'extension' => 'pdf',
                    'pdf_url' => $pdf_url,
                    'attachment_id' => $attachment_id,
                    'filename' => $original_filename ?: basename($file_path)
                ));
                return;
            }
            
            // สำหรับไฟล์อื่นๆ อ่านเนื้อหา
            $file_content = @file_get_contents($file_path);
            
            if ($file_content !== false) {
                if ($file_ext === 'xls' || $file_ext === 'xlsx') {
                    wp_send_json_success(array(
                        'content' => base64_encode($file_content),
                        DGA_TYPE_FIELD => 'excel',
                        'extension' => $file_ext,
                        'filename' => $original_filename ?: basename($file_path)
                    ));
                } else {
                    wp_send_json_success(array(
                        'content' => $file_content,
                        DGA_TYPE_FIELD => 'text',
                        'extension' => $file_ext,
                        'filename' => $original_filename ?: basename($file_path)
                    ));
                }
                return;
            }
        }
    }
    
    // Fallback to URL method
    if (empty($file_url)) {
        wp_send_json_error('Invalid file');
    }
    
    $file_ext = strtolower(pathinfo($file_url, PATHINFO_EXTENSION));
    
    // สำหรับ PDF ส่ง URL กลับไปโดยตรง
    if ($file_ext === 'pdf') {
        wp_send_json_success(array(
            DGA_TYPE_FIELD => 'pdf',
            'extension' => 'pdf',
            'pdf_url' => $file_url
        ));
        return;
    }
    
    // สำหรับไฟล์อื่นๆ ใช้ wp_remote_get
    $response = wp_remote_get($file_url, array(
        'timeout' => 60,
        'sslverify' => false
    ));
    
    if (is_wp_error($response)) {
        wp_send_json_error($response->get_error_message());
    }
    
    $file_content = wp_remote_retrieve_body($response);
    
    if (empty($file_content)) {
        wp_send_json_error('File is empty or could not be read');
    }
    
    if ($file_ext === 'xls' || $file_ext === 'xlsx') {
        wp_send_json_success(array(
            'content' => base64_encode($file_content),
            DGA_TYPE_FIELD => 'excel',
            'extension' => $file_ext
        ));
    } else {
        wp_send_json_success(array(
            'content' => $file_content,
            DGA_TYPE_FIELD => 'text',
            'extension' => $file_ext
        ));
    }
}
add_action('wp_ajax_ckan_get_file_preview', 'ckan_get_file_preview_xrt259');
add_action('wp_ajax_nopriv_ckan_get_file_preview', 'ckan_get_file_preview_xrt259');

// AJAX handler สำหรับ serve PDF files
function ckan_serve_pdf_file_xrt259() {
    // Check nonce
    if (!isset($_GET['nonce']) || !wp_verify_nonce($_GET['nonce'], 'ckan_rp_list_nonce_xrt259')) {
        wp_die(DGA_SECURITY_FAILED_MSG);
    }
    
    $attachment_id = isset($_GET['attachment_id']) ? intval($_GET['attachment_id']) : 0;
    
    if (!$attachment_id) {
        wp_die('Invalid file request');
    }
    
    // Get file path
    $file_path = get_attached_file($attachment_id);
    
    if (!$file_path || !file_exists($file_path)) {
        wp_die('File not found');
    }
    
    // Check if it's a PDF
    $mime_type = get_post_mime_type($attachment_id);
    if ($mime_type !== 'application/pdf') {
        wp_die('Not a PDF file');
    }
    
    // Set headers
    header('Content-Type: application/pdf');
    header('Content-Disposition: inline; filename="' . basename($file_path) . '"');
    header('Content-Length: ' . filesize($file_path));
    header('Cache-Control: private, max-age=3600');
    
    // Output file
    readfile($file_path);
    exit;
}
add_action('wp_ajax_ckan_serve_pdf', 'ckan_serve_pdf_file_xrt259');
add_action('wp_ajax_nopriv_ckan_serve_pdf', 'ckan_serve_pdf_file_xrt259');

// AJAX handler for file download - รองรับ attachment ID และชื่อไฟล์ภาษาไทย
function ckan_handle_file_download_xrt259() {
    // Check nonce
    if (!isset($_GET['nonce']) || !wp_verify_nonce($_GET['nonce'], 'ckan_rp_list_nonce_xrt259')) {
        wp_die(DGA_SECURITY_FAILED_MSG);
    }
    
    // Try attachment ID first
    $attachment_id = isset($_GET['attachment_id']) ? intval($_GET['attachment_id']) : 0;
    if ($attachment_id > 0) {
        $file_path = get_attached_file($attachment_id);
        
        if ($file_path && file_exists($file_path)) {
            // Get original filename
            $original_filename = get_post_meta($attachment_id, '_original_filename', true);
            if (empty($original_filename)) {
                $original_filename = basename($file_path);
            }
            
            // Get mime type
            $mime_type = get_post_mime_type($attachment_id);
            if (!$mime_type) {
                $mime_type = 'application/octet-stream';
            }
            
            // Set headers for download with original filename
            header('Content-Type: ' . $mime_type);
            header('Content-Disposition: attachment; filename="' . rawurlencode($original_filename) . '"');
            header('Content-Length: ' . filesize($file_path));
            header('Cache-Control: private, no-cache, no-store, must-revalidate');
            header('Pragma: no-cache');
            header('Expires: 0');
            
            // Read file and output
            readfile($file_path);
            exit;
        } else {
            // If file not found locally, try URL redirect
            $file_url = wp_get_attachment_url($attachment_id);
            if ($file_url) {
                wp_redirect($file_url);
                exit;
            }
        }
    }
    
    // Fallback to encoded URL
    if (isset($_GET['file']) && !empty($_GET['file'])) {
        $file_url = base64_decode($_GET['file']);
        wp_redirect($file_url);
        exit;
    }
    
    wp_die('Invalid file request');
}
add_action('wp_ajax_ckan_download_file', 'ckan_handle_file_download_xrt259');
add_action('wp_ajax_nopriv_ckan_download_file', 'ckan_handle_file_download_xrt259');

// Include the rest of the original AJAX handlers (download, preview, etc.)
// These remain available for all users...

// Make sure we have the required WordPress file upload functionality
function ckan_includes_for_media_upload_xrt259() {
    if (!function_exists('wp_handle_upload')) {
        require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
    }
    if (!function_exists('wp_generate_attachment_metadata')) {
        require_once ABSPATH . 'wp-admin/includes/image.php';
    }
    if (!function_exists('media_handle_upload')) {
        require_once ABSPATH . 'wp-admin/includes/media.php';
    }
}
add_action('init', 'ckan_includes_for_media_upload_xrt259');


/**** ฟังก์ชั่นแสดง CKAN METADATA - Auto-Detect Version *****/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main shortcode class for CKAN Metafield System
 */
class CKAN_Metafield_System_xyz432 {
    
    private static $instance = null;
    private $version = '2.2.0';
    private $text_domain = DGA_TEXT_DOMAIN;
    
    /**
     * Get singleton instance
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor
     */
    private function __construct() {
        $this->init_hooks();
    }
    
    /**
     * Initialize WordPress hooks
     */
    private function init_hooks() {
        // Register shortcode
        add_shortcode('ckan_metafield', array($this, 'render_shortcode'));
        
        // Enqueue scripts and styles
        add_action(DGA_ENQUEUE_SCRIPTS_HOOK, array($this, 'enqueue_assets'));
        
        // Register AJAX handlers
        $this->register_ajax_handlers();
    }
    
    /**
     * Register all AJAX handlers
     */
    private function register_ajax_handlers() {
        $ajax_actions = array(
            'ckan_get_taxonomy_terms' => 'handle_get_taxonomy_terms',
            'ckan_update_field' => 'handle_update_field',
            'ckan_save_endpoint' => 'handle_save_endpoint',
            'ckan_get_field_config' => 'handle_get_field_config',
            'ckan_save_field_labels' => 'handle_save_field_labels',
            'ckan_reset_field_labels' => 'handle_reset_field_labels',
            'ckan_update_api' => 'handle_update_api',
            'ckan_export_csv' => 'handle_export_csv'
        );
        
        foreach ($ajax_actions as $action => $method) {
            add_action('wp_ajax_' . $action, array($this, $method));
            add_action('wp_ajax_nopriv_' . $action, '__return_false');
        }
    }
    
    /**
     * Enqueue required assets
     */
    public function enqueue_assets() {
        // Register CSS
        wp_register_style(
            'ckan-metafield-css-xyz432',
            get_stylesheet_directory_uri() . '/css/ckan-metafield.css',
            array(),
            $this->version
        );
        
        // Register jQuery if not already loaded
        wp_enqueue_script(DGA_JQUERY_HANDLE);
        
        // Register main JavaScript
        wp_register_script(
            'ckan-metafield-js-xyz432',
            get_stylesheet_directory_uri() . '/js/ckan-metafield.js',
            array(DGA_JQUERY_HANDLE),
            $this->version,
            true
        );
        
        // Localize script with proper data
        wp_localize_script('ckan-metafield-js-xyz432', 'ckanMetafield', array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('ckan_nonce_xyz432'),
            'isAdmin' => current_user_can(DGA_ADMIN_ROLE),
            'texts' => $this->get_localized_texts()
        ));
        
        // Register admin JavaScript if user is admin
        if (current_user_can(DGA_ADMIN_ROLE)) {
            wp_register_script(
                'ckan-metafield-admin-js-xyz432',
                get_stylesheet_directory_uri() . '/js/ckan-metafield-admin.js',
                array(DGA_JQUERY_HANDLE, 'ckan-metafield-js-xyz432'),
                $this->version,
                true
            );
            
            // Also localize admin script
            wp_localize_script('ckan-metafield-admin-js-xyz432', 'ckanMetafieldAdmin', array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('ckan_nonce_xyz432'),
                'isAdmin' => true,
                'texts' => $this->get_localized_texts()
            ));
        }
    }
    
    /**
     * Get localized text strings
     */
    private function get_localized_texts() {
        return array(
            'expandText' => __('แสดง Optional Fields ทั้งหมด', $this->text_domain),
            'collapseText' => __('ซ่อน Optional Fields', $this->text_domain),
            'saveText' => __('บันทึก', $this->text_domain),
            'cancelText' => __('ยกเลิก', $this->text_domain),
            'editingText' => __('กำลังแก้ไข...', $this->text_domain),
            'savingText' => __('กำลังบันทึก...', $this->text_domain),
            'successText' => __('บันทึกสำเร็จ', $this->text_domain),
            'errorText' => __(DGA_ERROR_MESSAGE_TH, $this->text_domain),
            'loadingText' => __('กำลังโหลด...', $this->text_domain),
            'confirmText' => __('คุณแน่ใจหรือไม่?', $this->text_domain),
            'confirmResetText' => __('รีเซ็ตการตั้งค่าทั้งหมด?', $this->text_domain),
            'apiUpdateText' => __('กำลังอัพเดต API...', $this->text_domain),
            'apiSuccessText' => __('อัพเดต API สำเร็จ', $this->text_domain),
            'apiErrorText' => __('ไม่สามารถอัพเดต API ได้', $this->text_domain),
            'exportCsvText' => __('กำลังสร้างไฟล์ CSV...', $this->text_domain),
            'endpointSavingText' => __('กำลังบันทึก...', $this->text_domain),
            'endpointSavedText' => __('บันทึก Endpoint สำเร็จ', $this->text_domain),
            'fieldLabelsSavedText' => __('บันทึกการตั้งค่าสำเร็จ', $this->text_domain),
            'fieldLabelsResetText' => __('รีเซ็ตการตั้งค่าสำเร็จ', $this->text_domain)
        );
    }
    
    /**
     * Main shortcode rendering function
     */
    public function render_shortcode($atts) {
        // Enqueue assets
        wp_enqueue_style('ckan-metafield-css-xyz432');
        wp_enqueue_script('ckan-metafield-js-xyz432');
        
        if (current_user_can(DGA_ADMIN_ROLE)) {
            wp_enqueue_script('ckan-metafield-admin-js-xyz432');
        }
        
        // Get post ID
        $post_id = get_the_ID();
        if (!$post_id) {
            return '<div class="ckan-error-xyz432">' . __('ไม่พบข้อมูลโพสต์', $this->text_domain) . '</div>';
        }
        
        // Get field configurations
        $fields_config = $this->get_metadata_fields_config();
        $is_admin = current_user_can(DGA_ADMIN_ROLE);
        $api_endpoint = $this->get_api_endpoint($post_id);
        
        // Start output
        ob_start();
        ?>
        
        <div class="ckan-metadata-container-xyz432<?php echo $is_admin ? ' ckan-admin-mode-xyz432' : ''; ?>" 
             data-post-id="<?php echo esc_attr($post_id); ?>"
             data-nonce="<?php echo esc_attr(wp_create_nonce('ckan_nonce_xyz432')); ?>">
            
            <!-- Header Section -->
            <div class="ckan-metadata-header-xyz432">
                <h3><?php _e('ข้อมูลชุดข้อมูล - Metadata Standard', $this->text_domain); ?></h3>
                
                <?php if ($is_admin): ?>
                    <div class="ckan-admin-header-actions-xyz432">
                        <button type=DGA_BUTTON_TYPE class="ckan-settings-link-xyz432" title="<?php esc_attr_e('ตั้งค่า API', $this->text_domain); ?>">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="3"></circle>
                                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                            </svg>
                        </button>
                        <button type=DGA_BUTTON_TYPE class="ckan-field-manager-link-xyz432" title="<?php esc_attr_e('จัดการ Fields', $this->text_domain); ?>">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="8" y1="6" x2="21" y2="6"></line>
                                <line x1="8" y1="12" x2="21" y2="12"></line>
                                <line x1="8" y1="18" x2="21" y2="18"></line>
                                <line x1="3" y1="6" x2="3.01" y2="6"></line>
                                <line x1="3" y1="12" x2="3.01" y2="12"></line>
                                <line x1="3" y1="18" x2="3.01" y2="18"></line>
                            </svg>
                        </button>
                    </div>
                <?php endif; ?>
            </div>
            
            <!-- Metadata Table -->
            <div class="ckan-metadata-table-xyz432">
                
                <!-- Mandatory Fields Section -->
                <div class="ckan-section-mandatory-xyz432">
                    <h4 class="ckan-section-title-xyz432">
                        <?php _e('คำอธิบายชุดข้อมูลส่วนหลัก (Mandatory Metadata) - 14 รายการบังคับ', $this->text_domain); ?>
                    </h4>
                    
                    <?php 
                    $counter = 1;
                    foreach ($fields_config['mandatory'] as $field) {
                        echo $this->render_field_row($field, $counter++, $post_id, $is_admin);
                    }
                    ?>
                </div>
                
                <!-- Optional Fields Section -->
                <?php if (!empty($fields_config['optional'])): ?>
                    <div class="ckan-section-optional-xyz432" style="display: none;">
                        <h4 class="ckan-section-title-xyz432">
                            <?php _e('คำอธิบายชุดข้อมูลทางเลือก (Optional Metadata)', $this->text_domain); ?>
                        </h4>
                        
                        <?php 
                        foreach ($fields_config['optional'] as $field) {
                            echo $this->render_field_row($field, $counter++, $post_id, $is_admin);
                        }
                        ?>
                    </div>
                    
                    <!-- Expand/Collapse Button -->
                    <div class="ckan-expand-section-xyz432">
                        <button type=DGA_BUTTON_TYPE class="ckan-expand-btn-xyz432" data-expanded="false">
                            <span class="expand-text"><?php _e('แสดง Optional Fields ทั้งหมด', $this->text_domain); ?></span>
                            <span class="collapse-text" style="display:none;"><?php _e('ซ่อน Optional Fields', $this->text_domain); ?></span>
                            <svg class="expand-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <polyline points="6 9 12 15 18 9"></polyline>
                            </svg>
                        </button>
                    </div>
                <?php endif; ?>
                
            </div>
            
            <!-- Admin Actions -->
            <?php if ($is_admin): ?>
                <div class="ckan-admin-actions-bottom-xyz432">
                    <button type=DGA_BUTTON_TYPE class="ckan-update-api-btn-xyz432" data-endpoint="<?php echo esc_attr($api_endpoint); ?>">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="23 4 23 10 17 10"></polyline>
                            <path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path>
                        </svg>
                        <?php _e('อัพเดต API', $this->text_domain); ?>
                    </button>
                    <button type=DGA_BUTTON_TYPE class="ckan-api-test-btn-xyz432">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <polyline points="14 2 14 8 20 8"></polyline>
                            <line x1="16" y1="13" x2="8" y2="13"></line>
                            <line x1="16" y1="17" x2="8" y2="17"></line>
                            <polyline points="10 9 9 9 8 9"></polyline>
                        </svg>
                        <?php _e('ทดสอบ JSON', $this->text_domain); ?>
                    </button>
                    <button type=DGA_BUTTON_TYPE class="ckan-csv-export-btn-xyz432">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                            <polyline points="7 10 12 15 17 10"></polyline>
                            <line x1="12" y1="15" x2="12" y2="3"></line>
                        </svg>
                        <?php _e('ส่งออก CSV', $this->text_domain); ?>
                    </button>
                </div>
                
                <!-- API Response Container -->
                <div class="ckan-api-response-container-xyz432" style="display:none;">
                    <div class="ckan-api-response-header-xyz432">
                        <h4><?php _e('API Response / Test JSON', $this->text_domain); ?></h4>
                        <button type=DGA_BUTTON_TYPE class="ckan-close-json-btn-xyz432">&times;</button>
                    </div>
                    <pre class="ckan-api-response-json-xyz432"></pre>
                </div>
                
                <!-- Modals -->
                <?php echo $this->render_modals($api_endpoint, $fields_config); ?>
            <?php endif; ?>
            
        </div>
        
        <?php
        return ob_get_clean();
    }
    
    /**
     * Render a single field row
     */
    private function render_field_row($field, $counter, $post_id, $is_admin) {
        $field_value = $this->get_field_value($field[DGA_FIELD_KEY], $post_id);
        $formatted_value = $this->format_field_value($field_value, $field['type'], $field['key']);
        $field_options = isset($field['options']) ? json_encode($field['options'], JSON_UNESCAPED_UNICODE) : '{}';
        
        ob_start();
        ?>
        <div class="ckan-field-row-xyz432 ckan-metadata-row-xyz432" 
             data-field="<?php echo esc_attr($field[DGA_FIELD_KEY]); ?>"
             data-type="<?php echo esc_attr($field['type']); ?>"
             data-key="<?php echo esc_attr($field['key']); ?>"
             data-field-key="<?php echo esc_attr($field['key']); ?>"
             data-field-options='<?php echo esc_attr($field_options); ?>'
             <?php if(isset($field[DGA_TAXONOMY_FIELD])): ?>
             data-taxonomy="<?php echo esc_attr($field[DGA_TAXONOMY_FIELD]); ?>"
             <?php endif; ?>>
            
            <div class="ckan-field-label-xyz432 ckan-metadata-label-xyz432">
                <?php echo esc_html($counter . '. ' . $field[DGA_LABEL_FIELD]); ?>
                <?php if(isset($field['required']) && $field['required']): ?>
                    <span class="required-indicator">*</span>
                <?php endif; ?>
            </div>
            
            <div class="ckan-field-value-xyz432 ckan-metadata-value-xyz432" 
                 data-original="<?php echo esc_attr($field_value); ?>"
                 data-original-value="<?php echo esc_attr($field_value); ?>">
                <?php echo $formatted_value; ?>
                
                <?php if ($is_admin): ?>
                    <span class="ckan-edit-icon-xyz432" title="<?php esc_attr_e('แก้ไข', $this->text_domain); ?>">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                        </svg>
                    </span>
                <?php endif; ?>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Get metadata fields configuration
     */
    private function get_metadata_fields_config() {
        // Get custom labels if exist
        $custom_labels = get_option('ckan_field_labels_xyz432', array());
        $custom_names = get_option('ckan_field_names_xyz432', array());
        
        // Mandatory fields configuration
        $mandatory_fields = array(
            array(
                DGA_LABEL_FIELD => 'ระดับชั้นข้อมูล',
                DGA_FIELD_KEY => 'ckan_data_classification',
                DGA_TYPE_FIELD => 'select',
                'key' => 'field_data_classification',
                'required' => true,
                'options' => array(
                    'open' => 'ชั้นเปิดเผย (Open)',
                    'private' => 'ชั้นเผยแพร่ภายในองค์กร (Private)',
                    'confidential' => 'ชั้นลับ (Confidential)',
                    'secret' => 'ชั้นลับมาก (Secret)',
                    'top_secret' => 'ชั้นลับที่สุด (Top Secret)'
                )
            ),
            array(
                DGA_LABEL_FIELD => 'ชื่อชุดข้อมูล',
                DGA_FIELD_KEY => 'post_title',
                DGA_TYPE_FIELD => 'text',
                'key' => 'field_post_title',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'องค์กร',
                DGA_FIELD_KEY => 'ckan_organization',
                DGA_TYPE_FIELD => 'text',
                'key' => 'field_organization',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'ชื่อผู้ติดต่อ',
                DGA_FIELD_KEY => 'ckan_contact_name',
                DGA_TYPE_FIELD => 'text',
                'key' => 'field_contact_name',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'อีเมลผู้ติดต่อ',
                DGA_FIELD_KEY => 'ckan_contact_email',
                DGA_TYPE_FIELD => 'email',
                'key' => 'field_contact_email',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'คำสำคัญ',
                DGA_FIELD_KEY => 'ckan_keywords',
                DGA_TYPE_FIELD => 'text',
                'key' => 'field_keywords',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'รายละเอียด',
                DGA_FIELD_KEY => 'ckan_description',
                DGA_TYPE_FIELD => 'textarea',
                'key' => 'field_description',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'วัตถุประสงค์',
                DGA_FIELD_KEY => 'ckan_objective',
                DGA_TYPE_FIELD => 'select',
                'key' => 'field_objective',
                'required' => true,
                'options' => array(
                    'security' => 'ความมั่นคง',
                    'foreign_affairs' => 'การต่างประเทศ',
                    'agriculture' => 'การเกษตร',
                    'finance' => 'การคลัง',
                    'commerce_enterprise' => 'การพาณิชย์และวิสาหกิจ',
                    'tourism' => 'การท่องเที่ยว',
                    'social_development' => 'การพัฒนาสังคมและคุณภาพชีวิต',
                    'education' => 'การศึกษา',
                    'religion_arts_culture' => 'การศาสนา ศิลปะ และวัฒนธรรม',
                    'public_health' => 'การสาธารณสุข',
                    'natural_resources_environment' => 'ทรัพยากรธรรมชาติและสิ่งแวดล้อม',
                    'energy' => 'พลังงาน',
                    'science_technology' => 'วิทยาศาสตร์และเทคโนโลยี',
                    'infrastructure' => 'โครงสร้างพื้นฐาน'
                )
            ),
            array(
                DGA_LABEL_FIELD => 'หน่วยความถี่การปรับปรุง',
                DGA_FIELD_KEY => 'ckan_update_frequency',
                DGA_TYPE_FIELD => 'select',
                'key' => 'field_update_frequency',
                'required' => true,
                'options' => array(
                    'daily' => 'รายวัน',
                    'weekly' => 'รายสัปดาห์',
                    'monthly' => 'รายเดือน',
                    'quarterly' => 'รายไตรมาส',
                    'yearly' => 'รายปี',
                    'never' => 'ไม่มีการปรับปรุง'
                )
            ),
            array(
                DGA_LABEL_FIELD => 'ค่าความถี่',
                DGA_FIELD_KEY => 'ckan_frequency_value',
                DGA_TYPE_FIELD => 'number',
                'key' => 'field_frequency_value',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'ขอบเขตพื้นที่',
                DGA_FIELD_KEY => 'ckan_geographic_area',
                DGA_TYPE_FIELD => 'select',
                'key' => 'field_geographic_area',
                'required' => true,
                'options' => array(
                    'national' => 'ระดับประเทศ (National)',
                    'sub_national' => 'ระดับกลุ่มจังหวัด (Sub-national)',
                    'provincial' => 'ระดับจังหวัด (Provincial)',
                    'district' => 'ระดับอำเภอ (District)',
                    'sub_district' => 'ระดับตำบล (Sub-district)',
                    'municipality' => 'ระดับเทศบาล (Municipality)',
                    'pattaya_city' => 'ระดับเมืองพัทยา (Pattaya City)',
                    'bangkok_metropolitan' => 'ระดับกรุงเทพมหานคร (Bangkok Metropolitan)',
                    'other' => 'อื่นๆ (Other) - พร้อมระบุรายละเอียด'
                )
            ),
            array(
                DGA_LABEL_FIELD => 'แหล่งที่มา',
                DGA_FIELD_KEY => 'ckan_source',
                DGA_TYPE_FIELD => 'text',
                'key' => 'field_source',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'รูปแบบข้อมูล',
                DGA_FIELD_KEY => 'ckan_format',
                DGA_TYPE_FIELD => DGA_TAXONOMY_FIELD,
                'key' => 'field_format',
                DGA_TAXONOMY_FIELD => 'cformat',
                'required' => true
            ),
            array(
                DGA_LABEL_FIELD => 'สิทธิการใช้งาน',
                DGA_FIELD_KEY => 'ckan_license',
                DGA_TYPE_FIELD => 'select',
                'key' => 'field_license',
                'required' => true,
                'options' => array(
                    'cc-by' => 'CC BY',
                    'cc-by-sa' => 'CC BY-SA',
                    'cc-by-nc' => 'CC BY-NC',
                    'cc-by-nd' => 'CC BY-ND',
                    'cc0' => 'CC0',
                    'other' => 'อื่นๆ'
                )
            )
        );
        
        // Optional fields configuration  
        $optional_fields = array(
            array(
                DGA_LABEL_FIELD => 'ประเภทชุดข้อมูล',
                DGA_FIELD_KEY => 'ckan_data_type',
                DGA_TYPE_FIELD => DGA_TAXONOMY_FIELD,
                'key' => 'field_data_type',
                DGA_TAXONOMY_FIELD => 'cdata'
            ),
            array(
                DGA_LABEL_FIELD => 'หมวดหมู่ธรรมาภิบาล',
                DGA_FIELD_KEY => 'ckan_governance',
                DGA_TYPE_FIELD => DGA_TAXONOMY_FIELD,
                'key' => 'field_governance',
                DGA_TAXONOMY_FIELD => 'cgov'
            ),
            array(
                DGA_LABEL_FIELD => 'URL',
                DGA_FIELD_KEY => 'ckan_url',
                DGA_TYPE_FIELD => 'url',
                'key' => 'field_url'
            ),
            array(
                DGA_LABEL_FIELD => 'ภาษา',
                DGA_FIELD_KEY => 'ckan_language',
                DGA_TYPE_FIELD => 'select',
                'key' => 'field_language',
                'options' => array(
                    'th' => 'ไทย',
                    'en' => 'English',
                    'th-en' => 'ไทย-English'
                )
            ),
            array(
                DGA_LABEL_FIELD => 'วันที่สร้าง',
                DGA_FIELD_KEY => 'ckan_date_created',
                DGA_TYPE_FIELD => 'date',
                'key' => 'field_date_created'
            ),
            array(
                DGA_LABEL_FIELD => 'วันที่ปรับปรุง',
                DGA_FIELD_KEY => 'ckan_date_updated',
                DGA_TYPE_FIELD => 'date',
                'key' => 'field_date_updated'
            ),
            array(
                DGA_LABEL_FIELD => 'ความยินยอม',
                DGA_FIELD_KEY => 'ckan_consent',
                DGA_TYPE_FIELD => 'boolean',
                'key' => 'field_consent'
            )
        );
        
        // Apply custom labels and names
        foreach ($mandatory_fields as &$field) {
            if (isset($custom_labels[$field['key']])) {
                $field[DGA_LABEL_FIELD] = $custom_labels[$field['key']];
            }
            if (isset($custom_names[$field['key']])) {
                $field[DGA_FIELD_KEY] = $custom_names[$field['key']];
            }
        }
        
        foreach ($optional_fields as &$field) {
            if (isset($custom_labels[$field['key']])) {
                $field[DGA_LABEL_FIELD] = $custom_labels[$field['key']];
            }
            if (isset($custom_names[$field['key']])) {
                $field[DGA_FIELD_KEY] = $custom_names[$field['key']];
            }
        }
        
        return array(
            'mandatory' => $mandatory_fields,
            'optional' => $optional_fields
        );
    }
    
    /**
     * Get field value from post
     */
    private function get_field_value($field_name, $post_id) {
        // Special case for post_title
        if ($field_name === 'post_title') {
            return get_the_title($post_id);
        }
        
        // Try ACF first if available
        if (function_exists('get_field')) {
            $value = get_field($field_name, $post_id);
            if ($value !== null && $value !== false) {
                return $value;
            }
        }
        
        // Fallback to post meta
        return get_post_meta($post_id, $field_name, true);
    }
    
    /**
     * Format field value for display
     */
    private function format_field_value($value, $type, $field_key = null) {
        if (empty($value) && $value !== '0' && $value !== 0) {
            return '<span class="ckan-empty-xyz432 ckan-empty-value-xyz432">' . __('ไม่มีข้อมูล', $this->text_domain) . '</span>';
        }
        
        switch ($type) {
            case 'select':
                // แปลง value เป็น label สำหรับ select fields
                $display_value = $this->get_select_label($value, $field_key);
                return '<span class="ckan-select-value-xyz432">' . esc_html($display_value) . '</span>';
                
            case DGA_TAXONOMY_FIELD:
                if (is_array($value)) {
                    $terms = array_map(function($term) {
                        return is_object($term) ? $term->name : $term;
                    }, $value);
                    return '<span class="ckan-taxonomy-value-xyz432">' . esc_html(implode(', ', $terms)) . '</span>';
                } elseif (!empty($value)) {
                    // ถ้าเป็น string ให้หา term name จาก taxonomy
                    $term_name = $this->get_taxonomy_term_name($value, $field_key);
                    return '<span class="ckan-taxonomy-value-xyz432">' . esc_html($term_name) . '</span>';
                }
                return '<span class="ckan-taxonomy-value-xyz432">' . esc_html($value) . '</span>';
                
            case 'email':
                return '<a href="mailto:' . esc_attr($value) . '" class="ckan-email-xyz432">' . esc_html($value) . '</a>';
                
            case 'url':
                $display_url = strlen($value) > 50 ? substr($value, 0, 47) . '...' : $value;
                return '<a href="' . esc_url($value) . '" target="_blank" class="ckan-url-xyz432">' . esc_html($display_url) . '</a>';
                
            case 'date':
            case 'datetime':
                $format = $type === 'datetime' ? get_option('date_format') . ' ' . get_option('time_format') : get_option('date_format');
                $timestamp = is_numeric($value) ? $value : strtotime($value);
                return $timestamp ? date_i18n($format, $timestamp) : esc_html($value);
                
            case 'number':
                return '<span class="ckan-number-xyz432">' . number_format_i18n($value) . '</span>';
                
            case 'textarea':
                return '<div class="ckan-textarea-xyz432">' . nl2br(esc_html($value)) . '</div>';
                
            case 'boolean':
                $checked = ($value == '1' || $value === true || $value === 'true' || $value === 'ยินยอม');
                return $checked ? 
                    '<span class="boolean-true-xyz432">ยินยอม</span>' : 
                    '<span class="boolean-false-xyz432">ไม่ยินยอม</span>';
                
            default:
                return esc_html($value);
        }
    }
    
    /**
     * Get select field label from value
     */
    private function get_select_label($value, $field_key) {
        if (!$field_key) return $value;
        
        $fields_config = $this->get_metadata_fields_config();
        $all_fields = array_merge($fields_config['mandatory'], $fields_config['optional']);
        
        foreach ($all_fields as $field) {
            if ($field['key'] === $field_key && isset($field['options'])) {
                if (isset($field['options'][$value])) {
                    return $field['options'][$value];
                }
            }
        }
        
        return $value; // คืนค่า value เดิมถ้าหา label ไม่เจอ
    }
    
    /**
     * Get taxonomy term name from value
     */
    private function get_taxonomy_term_name($value, $field_key) {
        if (!$field_key || !$value) return $value;
        
        // หา taxonomy slug จาก field configuration
        $fields_config = $this->get_metadata_fields_config();
        $all_fields = array_merge($fields_config['mandatory'], $fields_config['optional']);
        $taxonomy_slug = null;
        
        foreach ($all_fields as $field) {
            if ($field['key'] === $field_key && isset($field[DGA_TAXONOMY_FIELD])) {
                $taxonomy_slug = $field[DGA_TAXONOMY_FIELD];
                break;
            }
        }
        
        if (!$taxonomy_slug) return $value;
        
        // ลองหา term โดยใช้ slug ก่อน
        $term = get_term_by('slug', $value, $taxonomy_slug);
        if ($term && !is_wp_error($term)) {
            return $term->name;
        }
        
        // ถ้าไม่เจอ ลองหาโดยใช้ term_id (ในกรณีที่ value เป็นตัวเลข)
        if (is_numeric($value)) {
            $term = get_term($value, $taxonomy_slug);
            if ($term && !is_wp_error($term)) {
                return $term->name;
            }
        }
        
        // ถ้ายังไม่เจอ ลองหาโดยใช้ name
        $term = get_term_by('name', $value, $taxonomy_slug);
        if ($term && !is_wp_error($term)) {
            return $term->name;
        }
        
        return $value; // คืนค่า value เดิมถ้าหา term ไม่เจอ
    }
    
    /**
     * Get API endpoint for post
     */
    private function get_api_endpoint($post_id) {
        $endpoint = get_post_meta($post_id, 'ckan_api_endpoint', true);
        
        if (empty($endpoint) && function_exists('get_field')) {
            $endpoint = get_field('ckan_api_endpoint', $post_id);
        }
        
        return $endpoint;
    }
    
    /**
     * Render modal dialogs
     */
    private function render_modals($api_endpoint, $fields_config) {
        ob_start();
        ?>
        <!-- Settings Modal -->
        <div id="ckan-settings-modal-xyz432" class="ckan-modal-xyz432" style="display:none;" aria-hidden="true">
            <div class="ckan-modal-content-xyz432">
                <div class="ckan-modal-header-xyz432">
                    <h4><?php _e('ตั้งค่า API Endpoint', $this->text_domain); ?></h4>
                    <button type=DGA_BUTTON_TYPE class="ckan-modal-close-xyz432">&times;</button>
                </div>
                <div class="ckan-modal-body-xyz432">
                    <div class="ckan-endpoint-form-xyz432">
                        <label for="ckan-endpoint-url-xyz432"><?php _e('API Endpoint URL:', $this->text_domain); ?></label>
                        <input type="url" 
                               id="ckan-endpoint-url-xyz432" 
                               class="ckan-endpoint-url-input-xyz432"
                               value="<?php echo esc_attr($api_endpoint); ?>"
                               placeholder="https://api.example.com/endpoint" />
                        <p class="ckan-endpoint-description-xyz432">
                            <?php _e('กำหนด URL สำหรับส่งข้อมูลไปยัง CKAN API', $this->text_domain); ?>
                        </p>
                    </div>
                </div>
                <div class="ckan-modal-footer-xyz432">
                    <button type=DGA_BUTTON_TYPE class="ckan-save-endpoint-btn-xyz432">
                        <?php _e('บันทึก', $this->text_domain); ?>
                    </button>
                    <button type=DGA_BUTTON_TYPE class="ckan-cancel-endpoint-btn-xyz432">
                        <?php _e('ยกเลิก', $this->text_domain); ?>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Field Manager Modal -->
        <div id="ckan-field-manager-modal-xyz432" class="ckan-modal-xyz432" style="display:none;" aria-hidden="true">
            <div class="ckan-modal-content-xyz432">
                <div class="ckan-modal-header-xyz432">
                    <h4><?php _e('จัดการ Field Labels', $this->text_domain); ?></h4>
                    <button type=DGA_BUTTON_TYPE class="ckan-modal-close-xyz432">&times;</button>
                </div>
                <div class="ckan-modal-body-xyz432">
                    <div class="ckan-field-manager-description-xyz432">
                        <?php _e('แก้ไข Label และ Field Name ตามต้องการ', $this->text_domain); ?>
                    </div>
                    <div class="ckan-field-manager-container-xyz432">
                        <div class="ckan-field-manager-list-xyz432"></div>
                    </div>
                </div>
                <div class="ckan-modal-footer-xyz432">
                    <button type=DGA_BUTTON_TYPE class="ckan-save-field-labels-btn-xyz432">
                        <?php _e('บันทึกการตั้งค่า', $this->text_domain); ?>
                    </button>
                    <button type=DGA_BUTTON_TYPE class="ckan-reset-field-labels-btn-xyz432">
                        <?php _e('รีเซ็ต', $this->text_domain); ?>
                    </button>
                    <button type=DGA_BUTTON_TYPE class="ckan-cancel-field-manager-btn-xyz432">
                        <?php _e('ยกเลิก', $this->text_domain); ?>
                    </button>
                </div>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Sanitize field value based on type
     */
    private function sanitize_field_value($value, $type) {
        switch ($type) {
            case 'email':
                return sanitize_email($value);
                
            case 'url':
                return esc_url_raw($value);
                
            case 'number':
                return is_numeric($value) ? floatval($value) : 0;
                
            case 'textarea':
                return sanitize_textarea_field($value);
                
            case 'boolean':
                return in_array($value, array('1', 'true', 'ยินยอม', true, 1), true) ? '1' : '0';
                
            case 'select':
            case DGA_TAXONOMY_FIELD:
            case 'text':
            default:
                return sanitize_text_field($value);
        }
    }
    
    // ===== AJAX Handlers =====
    
    /**
     * Handle field update
     */
    public function handle_update_field() {
        // Verify nonce
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        // Check permissions
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Insufficient permissions', $this->text_domain)));
        }
        
        // Get and validate parameters
        $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
        $field_name = isset($_POST['field_name']) ? sanitize_text_field($_POST['field_name']) : '';
        $field_value = isset($_POST['field_value']) ? $_POST['field_value'] : '';
        $field_type = isset($_POST['field_type']) ? sanitize_text_field($_POST['field_type']) : 'text';
        
        if (!$post_id || !get_post($post_id)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid post ID', $this->text_domain)));
        }
        
        if (!$field_name) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Field name is required', $this->text_domain)));
        }
        
        // Sanitize value
        $sanitized_value = $this->sanitize_field_value($field_value, $field_type);
        
        // Update field
        $result = false;
        if ($field_name === 'post_title') {
            $result = wp_update_post(array(
                'ID' => $post_id,
                'post_title' => $sanitized_value
            ));
        } else {
            if (function_exists('update_field')) {
                $result = update_field($field_name, $sanitized_value, $post_id);
            }
            if (!$result) {
                $result = update_post_meta($post_id, $field_name, $sanitized_value);
            }
        }
        
        if ($result !== false) {
            // Update modification time
            update_post_meta($post_id, 'ckan_last_modified', current_time('mysql'));
            
            // หา field_key เพื่อใช้ในการ format value
            $fields_config = $this->get_metadata_fields_config();
            $all_fields = array_merge($fields_config['mandatory'], $fields_config['optional']);
            $field_key = null;
            
            foreach ($all_fields as $config_field) {
                if ($config_field[DGA_FIELD_KEY] === $field_name) {
                    $field_key = $config_field['key'];
                    break;
                }
            }
            
            wp_send_json_success(array(
                DGA_MESSAGE_KEY => __('บันทึกสำเร็จ', $this->text_domain),
                'formatted_value' => $this->format_field_value($sanitized_value, $field_type, $field_key),
                'raw_value' => $sanitized_value
            ));
        } else {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Failed to update field', $this->text_domain)));
        }
    }
    
    /**
     * Handle API endpoint save
     */
    public function handle_save_endpoint() {
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Insufficient permissions', $this->text_domain)));
        }
        
        $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
        $endpoint = isset($_POST['endpoint']) ? esc_url_raw($_POST['endpoint']) : '';
        
        if (!$post_id || !get_post($post_id)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid post ID', $this->text_domain)));
        }
        
        // Save endpoint
        update_post_meta($post_id, 'ckan_api_endpoint', $endpoint);
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('API endpoint saved successfully', $this->text_domain),
            'endpoint' => $endpoint
        ));
    }
    
    /**
     * Handle CSV export
     */
    public function handle_export_csv() {
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Insufficient permissions', $this->text_domain)));
        }
        
        $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
        $metadata = isset($_POST['metadata']) ? json_decode(stripslashes($_POST['metadata']), true) : array();
        
        if (!$post_id || !get_post($post_id)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid post ID', $this->text_domain)));
        }
        
        // Create CSV content
        $csv_content = "\xEF\xBB\xBF"; // UTF-8 BOM
        $csv_content .= "Field Name,Field Label,Field Value,Field Type\n";
        
        if (!empty($metadata)) {
            foreach ($metadata as $field_name => $field_data) {
                $csv_content .= '"' . str_replace('"', '""', $field_name) . '",';
                $csv_content .= '"' . str_replace('"', '""', $field_data[DGA_LABEL_FIELD]) . '",';
                $csv_content .= '"' . str_replace('"', '""', $field_data['value']) . '",';
                $csv_content .= '"' . str_replace('"', '""', $field_data['type']) . '"' . "\n";
            }
        }
        
        $filename = 'ckan-metadata-' . $post_id . '-' . date('Y-m-d-His') . '.csv';
        
        wp_send_json_success(array(
            'csv_content' => base64_encode($csv_content),
            'filename' => $filename,
            DGA_MESSAGE_KEY => __('CSV file generated successfully', $this->text_domain)
        ));
    }
    
    /**
     * Handle API update
     */
    public function handle_update_api() {
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Insufficient permissions', $this->text_domain)));
        }
        
        $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
        $endpoint = isset($_POST['endpoint']) ? esc_url_raw($_POST['endpoint']) : '';
        $data = isset($_POST['data']) ? json_decode(stripslashes($_POST['data']), true) : array();
        
        if (!$post_id || !get_post($post_id)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid post ID', $this->text_domain)));
        }
        
        if (empty($endpoint)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('API endpoint is required', $this->text_domain)));
        }
        
        // Send to API
        $response = wp_remote_post($endpoint, array(
            'method' => 'POST',
            'timeout' => 30,
            'headers' => array(
                'Content-Type' => 'application/json; charset=utf-8',
                'Accept' => 'application/json'
            ),
            'body' => wp_json_encode($data, JSON_UNESCAPED_UNICODE)
        ));
        
        if (is_wp_error($response)) {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('Failed to connect to API: ', $this->text_domain) . $response->get_error_message()
            ));
        }
        
        $response_code = wp_remote_retrieve_response_code($response);
        $response_body = wp_remote_retrieve_body($response);
        
        // Log the update
        update_post_meta($post_id, 'ckan_last_api_update', current_time('mysql'));
        update_post_meta($post_id, 'ckan_last_api_status', $response_code);
        
        if ($response_code >= 200 && $response_code < 300) {
            wp_send_json_success(array(
                DGA_MESSAGE_KEY => sprintf(__('API updated successfully (HTTP %d)', $this->text_domain), $response_code),
                'response' => json_decode($response_body, true)
            ));
        } else {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => sprintf(__('API error (HTTP %d)', $this->text_domain), $response_code),
                'response' => $response_body
            ));
        }
    }
    
    /**
     * Handle get field config
     */
    public function handle_get_field_config() {
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        $fields_config = $this->get_metadata_fields_config();
        $all_fields = array_merge($fields_config['mandatory'], $fields_config['optional']);
        
        $custom_labels = get_option('ckan_field_labels_xyz432', array());
        $custom_names = get_option('ckan_field_names_xyz432', array());
        
        wp_send_json_success(array(
            DGA_FIELDS_PARAMETER => $all_fields,
            'custom_labels' => $custom_labels,
            'custom_names' => $custom_names
        ));
    }
    
    /**
     * Handle save field labels
     */
    public function handle_save_field_labels() {
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Insufficient permissions', $this->text_domain)));
        }
        
        $labels = isset($_POST['labels']) ? json_decode(stripslashes($_POST['labels']), true) : array();
        $names = isset($_POST['names']) ? json_decode(stripslashes($_POST['names']), true) : array();
        
        update_option('ckan_field_labels_xyz432', $labels);
        update_option('ckan_field_names_xyz432', $names);
        
        wp_send_json_success(array(DGA_MESSAGE_KEY => __('Settings saved successfully', $this->text_domain)));
    }
    
    /**
     * Handle reset field labels
     */
    public function handle_reset_field_labels() {
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Insufficient permissions', $this->text_domain)));
        }
        
        delete_option('ckan_field_labels_xyz432');
        delete_option('ckan_field_names_xyz432');
        
        wp_send_json_success(array(DGA_MESSAGE_KEY => __('Settings reset successfully', $this->text_domain)));
    }
    
    /**
     * Handle get taxonomy terms
     */
    public function handle_get_taxonomy_terms() {
        if (!check_ajax_referer('ckan_nonce_xyz432', 'nonce', false)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, $this->text_domain)));
        }
        
        $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_key($_POST[DGA_TAXONOMY_FIELD]) : '';
        
        if (empty($taxonomy)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => __('Taxonomy is required', $this->text_domain)));
        }
        
        $terms = get_terms(array(
            DGA_TAXONOMY_FIELD => $taxonomy,
            DGA_HIDE_EMPTY_FIELD => false,
            DGA_ORDERBY_FIELD_VALUE => 'name',
            DGA_ORDER_FIELD => 'ASC'
        ));
        
        if (is_wp_error($terms)) {
            wp_send_json_error(array(DGA_MESSAGE_KEY => $terms->get_error_message()));
        }
        
        $terms_data = array();
        foreach ($terms as $term) {
            $terms_data[] = array(
                DGA_TERM_ID_FIELD => $term->term_id,
                DGA_NAME_FIELD => $term->name,
                'slug' => $term->slug
            );
        }
        
        wp_send_json_success(array('terms' => $terms_data));
    }
}

// Initialize the system
CKAN_Metafield_System_xyz432::get_instance();








/**** CKAN API ******/

function ckan_register_api_routes() {
    // เรียกดูข้อมูลของ Post หนึ่งๆ
    register_rest_route('ckan/v1', '/data/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'ckan_get_post_data',
        'permission_callback' => '__return_true',
    ));
    
    // ค้นหาข้อมูล
    register_rest_route('ckan/v1', '/search', array(
        'methods' => 'GET',
        'callback' => 'ckan_search_data',
        'permission_callback' => '__return_true',
    ));
    
    // ดึงข้อมูลจากไฟล์โดยตรง
    register_rest_route('ckan/v1', '/file/(?P<post_id>\d+)/(?P<file_index>\d+)', array(
        'methods' => 'GET',
        'callback' => 'ckan_get_file_data',
        'permission_callback' => '__return_true',
    ));
    
    // สร้างข้อมูลใหม่
    register_rest_route('ckan/v1', '/create', array(
        'methods' => 'POST',
        'callback' => 'ckan_create_data',
        'permission_callback' => function() {
            return current_user_can(DGA_EDIT_POSTS_CAP);
        },
    ));
    
    // อัพเดทข้อมูล
    register_rest_route('ckan/v1', '/upsert', array(
        'methods' => 'POST',
        'callback' => 'ckan_upsert_data',
        'permission_callback' => function() {
            return current_user_can(DGA_EDIT_POSTS_CAP);
        },
    ));
}
add_action('rest_api_init', 'ckan_register_api_routes');

// ฟังก์ชันสำหรับดึงข้อมูลของ Post
function ckan_get_post_data($request) {
    // รับค่า post ID
    $post_id = $request['id'];
    
    // ตรวจสอบว่าโพสต์มีอยู่จริง
    $post = get_post($post_id);
    if (!$post) {
        return new WP_Error('post_not_found', 'ไม่พบข้อมูลสำหรับ ID นี้', array(DGA_STATUS_FIELD => 404));
    }
    
    // ดึงข้อมูล metadata จาก ACF fields
    $metadata_fields = ckan_get_metadata_fields();
    $metadata = array();
    
    foreach ($metadata_fields as $field) {
        $field_value = get_field($field[DGA_FIELD_KEY], $post_id);
        $metadata[$field[DGA_FIELD_KEY]] = $field_value;
    }
    
    // ดึงข้อมูลไฟล์แนบจาก Repeater field
    $ckan_assets = get_field('ckan_asset', $post_id);
    $assets = array();
    
    if (is_array($ckan_assets) && count($ckan_assets) > 0) {
        foreach ($ckan_assets as $index => $asset) {
            $assets[] = array(
                DGA_NAME_FIELD => isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '',
                'description' => isset($asset['ckan_asset_discription']) ? $asset['ckan_asset_discription'] : '',
                'file_url' => isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '',
                'file_ext' => pathinfo(isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '', PATHINFO_EXTENSION),
                'file_index' => $index,
                'file_api_url' => home_url('/wp-json/ckan/v1/file/' . $post_id . '/' . $index)
            );
        }
    }
    
    // สร้าง object ข้อมูลที่จะส่งกลับ
    $result = array(
        DGA_SUCCESS_STATUS => true,
        'result' => array(
            'id' => $post_id,
            DGA_TITLE_FIELD => get_the_title($post_id),
            'content' => get_the_content(null, false, $post_id),
            'permalink' => get_permalink($post_id),
            'post_date' => get_the_date('c', $post_id),
            'post_modified' => get_the_modified_date('c', $post_id),
            'metadata' => $metadata,
            'resources' => $assets,
            DGA_TOTAL_FIELD_KEY => count($assets)
        )
    );
    
    // อ่านค่า limit และ offset จาก query params
    $params = $request->get_params();
    $limit = isset($params['limit']) ? intval($params['limit']) : null;
    $offset = isset($params['offset']) ? intval($params['offset']) : 0;
    
    // จำกัดจำนวนข้อมูลที่ส่งกลับ
    if ($limit !== null && $limit > 0) {
        $result['result']['resources'] = array_slice($result['result']['resources'], $offset, $limit);
    }
    
    return $result;
}

// ฟังก์ชันสำหรับค้นหาข้อมูล
function ckan_search_data($request) {
    // รับค่าพารามิเตอร์จาก query
    $params = $request->get_params();
    $query = isset($params['q']) ? sanitize_text_field($params['q']) : '';
    $limit = isset($params['limit']) ? intval($params['limit']) : 10;
    $offset = isset($params['offset']) ? intval($params['offset']) : 0;
    $resource_id = isset($params['resource_id']) ? sanitize_text_field($params['resource_id']) : '';
    
    // ถ้ามี resource_id แสดงว่าต้องการค้นหาในไฟล์เฉพาะ
    if (!empty($resource_id)) {
        return ckan_search_in_resources($resource_id, $params);
    }
    
    // สร้าง query args สำหรับการค้นหา
    $args = array(
        DGA_POST_TYPE_FIELD => 'post',  // ปรับเป็น post type ที่ต้องการ
        DGA_POSTS_PER_PAGE => $limit,
        'offset' => $offset,
        's' => $query,  // ค้นหาจากคำที่กำหนด
    );
    
    // ดำเนินการค้นหา
    $search_query = new WP_Query($args);
    $results = array();
    
    if ($search_query->have_posts()) {
        while ($search_query->have_posts()) {
            $search_query->the_post();
            $post_id = get_the_ID();
            
            // ดึงข้อมูลไฟล์แนบเฉพาะโพสต์นี้
            $ckan_assets = get_field('ckan_asset', $post_id);
            $assets = array();
            
            if (is_array($ckan_assets) && count($ckan_assets) > 0) {
                foreach ($ckan_assets as $index => $asset) {
                    $assets[] = array(
                        DGA_NAME_FIELD => isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '',
                        'description' => isset($asset['ckan_asset_discription']) ? $asset['ckan_asset_discription'] : '',
                        'file_url' => isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '',
                        'file_ext' => pathinfo(isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '', PATHINFO_EXTENSION),
                        'file_index' => $index,
                        'file_api_url' => home_url('/wp-json/ckan/v1/file/' . $post_id . '/' . $index)
                    );
                }
            }
            
            // เพิ่มข้อมูลโพสต์เข้าในผลลัพธ์
            $results[] = array(
                'id' => $post_id,
                DGA_TITLE_FIELD => get_the_title(),
                'excerpt' => get_the_excerpt(),
                'permalink' => get_permalink(),
                'post_date' => get_the_date('c'),
                'resources' => $assets,
                'resource_count' => count($assets)
            );
        }
        
        wp_reset_postdata();
    }
    
    // สร้าง object ข้อมูลที่จะส่งกลับ
    $result = array(
        DGA_SUCCESS_STATUS => true,
        'result' => array(
            'count' => $search_query->found_posts,
            'items' => $results,
            'limit' => $limit,
            'offset' => $offset,
            'query' => $query
        )
    );
    
    return $result;
}

// ฟังก์ชันสำหรับค้นหาในไฟล์ทรัพยากร
function ckan_search_in_resources($resource_id, $params) {
    $q = isset($params['q']) ? sanitize_text_field($params['q']) : '';
    $limit = isset($params['limit']) ? intval($params['limit']) : 10;
    
    // สร้างข้อมูลจำลองสำหรับการค้นหาในไฟล์
    // ในการใช้งานจริง นี่คือที่คุณจะดึงข้อมูลจากไฟล์และค้นหาในนั้น
    
    // ในตัวอย่างนี้เราแค่สร้างข้อมูลจำลอง
    $mock_data = array();
    for ($i = 1; $i <= min(30, $limit); $i++) {
        $record = array(
            'id' => $i,
            DGA_NAME_FIELD => 'Record ' . $i,
            'description' => 'Description for record ' . $i,
            'value' => rand(100, 10000) / 100
        );
        
        // ถ้ามีการค้นหา ให้แสดงเฉพาะรายการที่มีคำที่ต้องการ
        if (!empty($q)) {
            if (stripos($record['name'], $q) !== false || stripos($record['description'], $q) !== false) {
                $mock_data[] = $record;
            } else if ($q == 'jones' && $i % 5 == 0) {  // สำหรับตัวอย่าง jones
                $record['name'] = 'Jones Record ' . $i;
                $mock_data[] = $record;
            }
        } else {
            $mock_data[] = $record;
        }
    }
    
    // สร้าง response แบบเดียวกับที่ CKAN API ส่งกลับ
    $result = array(
        DGA_SUCCESS_STATUS => true,
        'result' => array(
            'resource_id' => $resource_id,
            DGA_FIELDS_PARAMETER => array(
                array('id' => 'id', DGA_TYPE_FIELD => 'int'),
                array('id' => 'name', DGA_TYPE_FIELD => 'text'),
                array('id' => 'description', DGA_TYPE_FIELD => 'text'),
                array('id' => 'value', DGA_TYPE_FIELD => 'float')
            ),
            'records' => $mock_data,
            'limit' => $limit,
            DGA_TOTAL_FIELD_KEY => count($mock_data)
        )
    );
    
    return $result;
}


// ฟังก์ชันดึงข้อมูลจากไฟล์โดยตรง
function ckan_get_file_data($request) {
    // ตรวจสอบว่ามีการติดตั้ง PhpSpreadsheet หรือไม่
    $has_phpspreadsheet = class_exists('PhpOffice\PhpSpreadsheet\IOFactory');
    
    $post_id = $request[DGA_POST_ID_FIELD];
    $file_index = $request['file_index'];
    
    // ตรวจสอบว่าโพสต์มีอยู่จริง
    $post = get_post($post_id);
    if (!$post) {
        return new WP_Error('post_not_found', 'ไม่พบข้อมูลสำหรับ ID นี้', array(DGA_STATUS_FIELD => 404));
    }
    
    // ดึงข้อมูลไฟล์แนบจาก Repeater field
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    // ตรวจสอบว่ามีไฟล์ที่ต้องการหรือไม่
    if (!is_array($ckan_assets) || !isset($ckan_assets[$file_index])) {
        return new WP_Error('file_not_found', 'ไม่พบไฟล์ที่ต้องการ', array(DGA_STATUS_FIELD => 404));
    }
    
    $asset = $ckan_assets[$file_index];
    $file_url = isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '';
    $file_name = isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '';
    $file_ext = strtolower(pathinfo($file_url, PATHINFO_EXTENSION));
    
    // ดึงข้อมูลไฟล์โดยใช้ WordPress HTTP API
    $response = wp_remote_get($file_url, array(
        'timeout' => 60,
        'sslverify' => false
    ));
    
    if (is_wp_error($response)) {
        return new WP_Error('file_fetch_error', $response->get_error_message(), array(DGA_STATUS_FIELD => 500));
    }
    
    $file_content = wp_remote_retrieve_body($response);
    if (empty($file_content)) {
        return new WP_Error('empty_file', 'ไฟล์ไม่มีข้อมูล', array(DGA_STATUS_FIELD => 404));
    }
    
    // แปลงข้อมูลไฟล์ตามนามสกุล
    $data = array();
    
    switch ($file_ext) {
        case 'csv':
            $data = ckan_parse_csv_to_array($file_content);
            break;
        
        case 'json':
            $json_data = json_decode($file_content, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                return new WP_Error('json_parse_error', 'ไม่สามารถแปลงไฟล์ JSON ได้', array(DGA_STATUS_FIELD => 500));
            }
            $data = ckan_format_json_data($json_data);
            break;
            
        case 'xlsx':
        case 'xls':
            if (!$has_phpspreadsheet) {
                // ถ้าไม่มี PhpSpreadsheet ใช้วิธี fallback ถ้าเป็นไฟล์ Excel
                $temp_file = wp_tempnam($file_name);
                file_put_contents($temp_file, $file_content);
                $data = ckan_parse_excel_fallback($temp_file, $file_ext);
                @unlink($temp_file); // ลบไฟล์ชั่วคราว
            } else {
                // ถ้ามี PhpSpreadsheet ใช้ไลบรารีนี้อ่านไฟล์ Excel
                $temp_file = wp_tempnam($file_name);
                file_put_contents($temp_file, $file_content);
                $data = ckan_parse_excel_with_phpspreadsheet($temp_file, $file_ext);
                @unlink($temp_file); // ลบไฟล์ชั่วคราว
            }
            break;
            
        case 'txt':
        case 'text':
        case 'md':
            // สำหรับไฟล์ข้อความ แปลงเป็น JSON แบบพื้นฐาน
            $data = ckan_format_text_data($file_content);
            break;
            
        default:
            // ไฟล์ประเภทอื่นๆ ที่ไม่รองรับ
            return new WP_Error('format_not_supported', 'ไม่รองรับไฟล์ประเภท ' . $file_ext, array(DGA_STATUS_FIELD => 400));
    }
    
    // สร้าง response ตามรูปแบบที่ต้องการ
    $result = array(
        DGA_SUCCESS_STATUS => true,
        'result' => array(
            'resource_id' => 'b8a8a6b5-' . substr(md5($post_id . '_' . $file_index), 0, 4) . '-' . 
                            substr(md5($post_id . '_' . $file_index), 4, 4) . '-' . 
                            substr(md5($post_id . '_' . $file_index), 8, 4) . '-' . 
                            substr(md5($post_id . '_' . $file_index), 12, 12),
            DGA_FIELDS_PARAMETER => $data[DGA_FIELDS_PARAMETER],
            'records' => $data['records'],
            'limit' => count($data['records']),
            DGA_TOTAL_FIELD_KEY => count($data['records'])
        )
    );
    
    // กรณีมีการจำกัดจำนวนข้อมูล
    $params = $request->get_params();
    $limit = isset($params['limit']) ? intval($params['limit']) : count($data['records']);
    
    if ($limit > 0 && $limit < count($data['records'])) {
        $result['result']['records'] = array_slice($data['records'], 0, $limit);
        $result['result']['limit'] = $limit;
    }
    
    return $result;
}


/**
 * แปลงข้อมูล CSV เป็น Array
 */
function ckan_parse_csv_to_array($csv_content) {
    $lines = explode("\n", $csv_content);
    $data = array(
        DGA_FIELDS_PARAMETER => array(),
        'records' => array()
    );
    
    // ตรวจสอบว่ามีข้อมูลหรือไม่
    if (count($lines) < 2) {
        return $data;
    }
    
    // แยกส่วนหัว (header)
    $header = str_getcsv($lines[0]);
    
    // สร้าง fields metadata
    foreach ($header as $field_name) {
        $field_name = trim($field_name);
        $field_type = 'text'; // ค่าเริ่มต้นเป็น text
        
        // ตรวจสอบว่า field นี้น่าจะเป็นประเภทข้อมูลใด (เช็คจากข้อมูลในไฟล์)
        for ($i = 1; $i < min(count($lines), 5); $i++) {
            if (empty(trim($lines[$i]))) continue;
            
            $row = str_getcsv($lines[$i]);
            $index = array_search($field_name, $header);
            
            if ($index !== false && isset($row[$index])) {
                $value = trim($row[$index]);
                
                // ถ้าเป็นตัวเลขล้วน เป็น int
                if (is_numeric($value) && strpos($value, '.') === false) {
                    $field_type = 'int';
                }
                // ถ้าเป็นตัวเลขทศนิยม เป็น float
                else if (is_numeric($value)) {
                    $field_type = 'float';
                }
            }
        }
        
        $data[DGA_FIELDS_PARAMETER][] = array(
            'id' => $field_name,
            DGA_TYPE_FIELD => $field_type
        );
    }
    
    // แปลงแต่ละบรรทัดเป็นข้อมูล
    for ($i = 1; $i < count($lines); $i++) {
        if (empty(trim($lines[$i]))) continue; // ข้ามบรรทัดว่าง
        
        $row = str_getcsv($lines[$i]);
        $item = array();
        
        for ($j = 0; $j < count($header); $j++) {
            $field_name = trim($header[$j]);
            
            // ค้นหา field type
            $field_type = 'text';
            foreach ($data[DGA_FIELDS_PARAMETER] as $field) {
                if ($field['id'] === $field_name) {
                    $field_type = $field['type'];
                    break;
                }
            }
            
            if (isset($row[$j])) {
                $value = trim($row[$j]);
                
                // แปลงข้อมูลตาม type
                if ($field_type === 'int' && is_numeric($value)) {
                    $item[$field_name] = intval($value);
                }
                else if ($field_type === 'float' && is_numeric($value)) {
                    $item[$field_name] = floatval($value);
                }
                else {
                    $item[$field_name] = $value;
                }
            } else {
                $item[$field_name] = ''; // หากไม่มีค่าให้เป็นค่าว่าง
            }
        }
        
        $data['records'][] = $item;
    }
    
    return $data;
}

/**
 * แปลงข้อมูล Excel แบบ fallback โดยใช้ SheetJS ใน JavaScript
 * (สำหรับกรณีที่ไม่มี PhpSpreadsheet)
 */
function ckan_parse_excel_fallback($file_path, $file_ext) {
    // โค้ดนี้จำเป็นต้องใช้ SheetJS ในไฟล์ JS
    // แต่เราทำได้แค่ส่งข้อมูลดิบกลับไปแล้วแปลงเป็น base64 สำหรับส่งไปให้ JS แปลง
    
    // สร้างโครงสร้างข้อมูลเปล่า
    $data = array(
        DGA_FIELDS_PARAMETER => array(
            array('id' => 'id', DGA_TYPE_FIELD => 'int'),
            array('id' => 'name', DGA_TYPE_FIELD => 'text'),
            array('id' => 'description', DGA_TYPE_FIELD => 'text'),
            array('id' => 'value', DGA_TYPE_FIELD => 'float')
        ),
        'records' => array()
    );
    
    // สร้างข้อมูลตัวอย่าง (ในกรณีที่ไม่สามารถอ่านไฟล์ Excel ได้)
    for ($i = 1; $i <= 5; $i++) {
        $data['records'][] = array(
            'id' => $i,
            DGA_NAME_FIELD => 'Record ' . $i,
            'description' => 'Description for record ' . $i,
            'value' => rand(5000, 10000) / 100
        );
    }
    
    return $data;
}



/**
 * แปลงข้อมูล Excel โดยใช้ PhpSpreadsheet
 */
function ckan_parse_excel_with_phpspreadsheet($file_path, $file_ext) {
    // ต้องมีการ include PhpSpreadsheet ก่อน
    // require_once 'vendor/autoload.php';
    
    try {
        $spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($file_path);
        $worksheet = $spreadsheet->getActiveSheet();
        $data = array(
            DGA_FIELDS_PARAMETER => array(),
            'records' => array()
        );
        
        // ดึงข้อมูลเป็น array
        $rows = $worksheet->toArray();
        
        // ถ้าไม่มีข้อมูล
        if (empty($rows)) {
            return $data;
        }
        
        // แยกส่วนหัว (header)
        $header = $rows[0];
        
        // สร้าง fields metadata
        foreach ($header as $field_name) {
            if (empty($field_name)) continue;
            
            $field_type = 'text'; // ค่าเริ่มต้นเป็น text
            
            // ตรวจสอบว่า field นี้น่าจะเป็นประเภทข้อมูลใด (เช็คจากข้อมูลในไฟล์)
            for ($i = 1; $i < min(count($rows), 5); $i++) {
                $index = array_search($field_name, $header);
                
                if ($index !== false && isset($rows[$i][$index])) {
                    $value = $rows[$i][$index];
                    
                    // ถ้าเป็นตัวเลขล้วน เป็น int
                    if (is_int($value) || (is_string($value) && ctype_digit($value))) {
                        $field_type = 'int';
                    }
                    // ถ้าเป็นตัวเลขทศนิยม เป็น float
                    else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                        $field_type = 'float';
                    }
                }
            }
            
            $data[DGA_FIELDS_PARAMETER][] = array(
                'id' => $field_name,
                DGA_TYPE_FIELD => $field_type
            );
        }
        
        // แปลงแต่ละแถวเป็นข้อมูล
        for ($i = 1; $i < count($rows); $i++) {
            $row = $rows[$i];
            $item = array();
            
            foreach ($data[DGA_FIELDS_PARAMETER] as $j => $field) {
                $field_name = $field['id'];
                $field_type = $field['type'];
                
                if (isset($row[$j])) {
                    $value = $row[$j];
                    
                    // แปลงข้อมูลตาม type
                    if ($field_type === 'int' && (is_int($value) || (is_string($value) && ctype_digit($value)))) {
                        $item[$field_name] = intval($value);
                    }
                    else if ($field_type === 'float' && (is_float($value) || (is_string($value) && is_numeric($value)))) {
                        $item[$field_name] = floatval($value);
                    }
                    else {
                        $item[$field_name] = (string)$value;
                    }
                } else {
                    $item[$field_name] = ''; // หากไม่มีค่าให้เป็นค่าว่าง
                }
            }
            
            $data['records'][] = $item;
        }
        
        return $data;
    } catch (\Exception $e) {
        // กรณีเกิดข้อผิดพลาด ใช้วิธี fallback
        return ckan_parse_excel_fallback($file_path, $file_ext);
    }
}


/**
 * แปลงข้อมูล JSON เป็นรูปแบบที่ต้องการ
 */
function ckan_format_json_data($json_data) {
    $data = array(
        DGA_FIELDS_PARAMETER => array(),
        'records' => array()
    );
    
    // ถ้า JSON มีโครงสร้างเป็น array ของ object
    if (is_array($json_data) && !empty($json_data) && is_array($json_data[0])) {
        // ใช้ key ของ object แรกเป็น fields
        $first_object = $json_data[0];
        
        foreach ($first_object as $key => $value) {
            $type = 'text';
            
            if (is_int($value)) {
                $type = 'int';
            } else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                $type = 'float';
            }
            
            $data[DGA_FIELDS_PARAMETER][] = array(
                'id' => $key,
                DGA_TYPE_FIELD => $type
            );
        }
        
        // ใช้ทุก object เป็น records
        $data['records'] = $json_data;
    }
    // ถ้า JSON มีโครงสร้างเป็น object ที่มี property เป็น array
    else if (is_array($json_data)) {
        // ค้นหา property ที่เป็น array
        $array_properties = array();
        
        foreach ($json_data as $key => $value) {
            if (is_array($value) && !empty($value) && is_array($value[0])) {
                $array_properties[$key] = $value;
            }
        }
        
        // ถ้ามี property ที่เป็น array
        if (!empty($array_properties)) {
            // ใช้ array แรกที่พบ
            $first_array_key = array_key_first($array_properties);
            $first_array = $array_properties[$first_array_key];
            
            if (!empty($first_array) && is_array($first_array[0])) {
                // ใช้ key ของ object แรกเป็น fields
                $first_object = $first_array[0];
                
                foreach ($first_object as $key => $value) {
                    $type = 'text';
                    
                    if (is_int($value)) {
                        $type = 'int';
                    } else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                        $type = 'float';
                    }
                    
                    $data[DGA_FIELDS_PARAMETER][] = array(
                        'id' => $key,
                        DGA_TYPE_FIELD => $type
                    );
                }
                
                // ใช้ทุก object ใน array เป็น records
                $data['records'] = $first_array;
            }
        }
        // ถ้าไม่มี property ที่เป็น array แต่ JSON เป็น object
        else {
            // แปลง object เป็นแถวข้อมูลเดียว
            $fields = array();
            $record = array();
            
            foreach ($json_data as $key => $value) {
                $type = 'text';
                
                if (is_int($value)) {
                    $type = 'int';
                    $record[$key] = $value;
                } else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                    $type = 'float';
                    $record[$key] = (float)$value;
                } else if (is_bool($value)) {
                    $type = 'boolean';
                    $record[$key] = $value ? 'true' : 'false';
                } else if (is_string($value)) {
                    $record[$key] = $value;
                } else {
                    // ถ้าเป็น object หรือ array ซ้อนกัน แปลงเป็น JSON string
                    $record[$key] = json_encode($value);
                }
                
                $fields[] = array(
                    'id' => $key,
                    DGA_TYPE_FIELD => $type
                );
            }
            
            $data[DGA_FIELDS_PARAMETER] = $fields;
            $data['records'] = array($record);
        }
    }
    
    return $data;
}


/**
 * แปลงข้อมูลจากไฟล์ข้อความธรรมดาเป็น JSON
 */
function ckan_format_text_data($text_content) {
    $data = array(
        DGA_FIELDS_PARAMETER => array(
            array('id' => 'line', DGA_TYPE_FIELD => 'int'),
            array('id' => 'content', DGA_TYPE_FIELD => 'text')
        ),
        'records' => array()
    );
    
    // แบ่งข้อความเป็นบรรทัด
    $lines = explode("\n", $text_content);
    
    // สร้างข้อมูลแต่ละบรรทัด
    foreach ($lines as $i => $line) {
        $data['records'][] = array(
            'line' => $i + 1,
            'content' => $line
        );
    }
    
    return $data;
}


// ฟังก์ชันแปลง CSV เป็น JSON
function ckan_parse_csv_to_json($csv_content, $title = '') {
    $lines = explode("\n", $csv_content);
    $data = array();
    
    // ตรวจสอบว่ามีข้อมูลหรือไม่
    if (count($lines) < 2) {
        return array();
    }
    
    // แยกส่วนหัว (header)
    $header = str_getcsv($lines[0]);
    
    // แปลงแต่ละบรรทัดเป็น JSON
    for ($i = 1; $i < count($lines); $i++) {
        if (empty(trim($lines[$i]))) continue; // ข้ามบรรทัดว่าง
        
        $row = str_getcsv($lines[$i]);
        $item = array();
        
        for ($j = 0; $j < count($header); $j++) {
            if (isset($row[$j])) {
                $item[$header[$j]] = $row[$j];
            } else {
                $item[$header[$j]] = ''; // หากไม่มีค่าให้เป็นค่าว่าง
            }
        }
        
        $data[] = $item;
    }
    
    // สร้างโครงสร้างข้อมูลเหมือนกับ CKAN
    $result = array(
        DGA_TITLE_FIELD => $title,
        DGA_FIELDS_PARAMETER => array(),
        'records' => $data
    );
    
    // สร้าง fields metadata
    foreach ($header as $field_name) {
        $result[DGA_FIELDS_PARAMETER][] = array(
            'id' => $field_name,
            DGA_TYPE_FIELD => 'text' // ค่าเริ่มต้นเป็น text
        );
    }
    
    return $result;
}

// ฟังก์ชันสร้างข้อมูลใหม่ (สำหรับตัวอย่างเท่านั้น)
function ckan_create_data($request) {
    // ตรวจสอบสิทธิ์
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        return new WP_Error('permission_denied', 'คุณไม่มีสิทธิ์ในการสร้างข้อมูล', array(DGA_STATUS_FIELD => 403));
    }
    
    // รับข้อมูลจาก request
    $parameters = $request->get_params();
    
    // ตรวจสอบข้อมูลที่จำเป็น
    if (empty($parameters['resource_data'])) {
        return new WP_Error('missing_data', 'ไม่พบข้อมูลที่จำเป็น', array(DGA_STATUS_FIELD => 400));
    }
    
    // สร้าง response
    $result = array(
        DGA_SUCCESS_STATUS => true,
        'result' => array(
            DGA_MESSAGE_KEY => 'สร้างข้อมูลสำเร็จ',
            'resource_id' => 'new_' . time(),
            'data' => $parameters['resource_data']
        )
    );
    
    return $result;
}

// ฟังก์ชันอัพเดทข้อมูล (สำหรับตัวอย่างเท่านั้น)
function ckan_upsert_data($request) {
    // ตรวจสอบสิทธิ์
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        return new WP_Error('permission_denied', 'คุณไม่มีสิทธิ์ในการอัพเดทข้อมูล', array(DGA_STATUS_FIELD => 403));
    }
    
    // รับข้อมูลจาก request
    $parameters = $request->get_params();
    
    // ตรวจสอบข้อมูลที่จำเป็น
    if (empty($parameters['resource_id']) || empty($parameters['records'])) {
        return new WP_Error('missing_data', 'ไม่พบข้อมูลที่จำเป็น', array(DGA_STATUS_FIELD => 400));
    }
    
    // สร้าง response
    $result = array(
        DGA_SUCCESS_STATUS => true,
        'result' => array(
            DGA_MESSAGE_KEY => 'อัพเดทข้อมูลสำเร็จ',
            'resource_id' => $parameters['resource_id'],
            'records_updated' => count($parameters['records'])
        )
    );
    
    return $result;
}


// ฟังก์ชันเพิ่มการโหลด CSS และ JS สำหรับ API
function ckan_api_enqueue_scripts() {
    wp_enqueue_style('ckan-api-css', get_stylesheet_directory_uri() . '/css/ckan-api.css');
    wp_enqueue_script('ckan-api-js', get_stylesheet_directory_uri() . '/js/ckan-api.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_api_enqueue_scripts');

// เพิ่มการเรียกใช้ไฟล์ CSS และ JS ในฟังก์ชัน ckan_rp_list
function ckan_rp_list_add_api_scripts($atts) {
    // ต้องเพิ่มโค้ดเข้าไปในฟังก์ชัน ckan_rp_list ที่มีอยู่แล้ว
    wp_enqueue_style('ckan-api-css', get_stylesheet_directory_uri() . '/css/ckan-api.css');
    wp_enqueue_script('ckan-api-js', get_stylesheet_directory_uri() . '/js/ckan-api.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    
    // ไม่ต้องแก้ไขอะไรเพิ่ม เพราะฟังก์ชันนี้จะถูกเรียกใช้ก่อนฟังก์ชัน ckan_rp_list
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_rp_list_add_api_scripts');


/******ฟังก์ชั่น CKAN CACCESS Enhanced *******/

// Register the enhanced shortcode with improved read-only display
function ckan_taxo_caccess_shortcode_zkt789() {
    // Only continue if we're on a singular post
    if (!is_singular()) {
        return '<div class="ckan-taxo-error-zkt789">' . __('This shortcode can only be used on singular posts.', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    $post_id = get_the_ID();
    $current_user = wp_get_current_user();
    $user_id = $current_user->ID;
    
    // Check multiple permission levels
    $permission_check = ckan_taxo_check_user_permissions_zkt789($post_id, $user_id);
    $can_edit = $permission_check['can_edit'];
    $can_view = $permission_check['can_view'];
    $permission_info = $permission_check['info'];
    
    // If user can't even view
    if (!$can_view) {
        return '<div class="ckan-taxo-access-denied-zkt789">
            <h3>🔒 ' . __('Access Denied', DGA_TEXT_DOMAIN) . '</h3>
            <p>' . __('You do not have permission to view this content.', DGA_TEXT_DOMAIN) . '</p>
            ' . $permission_info . '
        </div>';
    }
    
    // Get current terms assigned to this post
    $current_terms = wp_get_object_terms($post_id, 'caccess');
    
    // Start building the output
    $output = '<div class="ckan-taxo-caccess-container-zkt789 ' . ($can_edit ? 'editable' : 'readonly') . '">';
    
    // Title
    $output .= '<h3>' . __('CKAN Access Control (CACCESS)', DGA_TEXT_DOMAIN) . '</h3>';
    
    if (!$can_edit) {
        // READ-ONLY MODE: Show only selected terms as tags
        if (!empty($current_terms) && !is_wp_error($current_terms)) {
            $output .= '<div class="ckan-taxo-readonly-display-zkt789">';
            
            // Summary section
            $output .= '<div class="ckan-taxo-summary-zkt789">';
            $output .= '<p>' . sprintf(
                __('This post is assigned to %d access control term(s):', DGA_TEXT_DOMAIN),
                count($current_terms)
            ) . '</p>';
            $output .= '</div>';
            
            // Display selected terms as tags
            $output .= '<div class="ckan-taxo-tags-container-zkt789">';
            foreach ($current_terms as $term) {
                $output .= '<div class="ckan-taxo-tag-zkt789">';
                $output .= '<span class="tag-icon">🏷️</span>';
                $output .= '<span class="tag-name">' . esc_html($term->name) . '</span>';
                if (!empty($term->description)) {
                    $output .= '<span class="tag-tooltip" title="' . esc_attr($term->description) . '">ℹ️</span>';
                }
                $output .= '</div>';
            }
            $output .= '</div>';
            
            // Additional info
            $output .= '<div class="ckan-taxo-readonly-info-zkt789">';
            $output .= '<p class="description">';
            $output .= '⚠️ ' . __('You do not have permission to modify these access control settings. Please contact your administrator or department head if changes are needed.', DGA_TEXT_DOMAIN);
            $output .= '</p>';
            $output .= '</div>';
        } else {
            // No terms assigned
            $output .= '<div class="ckan-taxo-no-terms-zkt789">';
            $output .= '<p>' . __('No access control terms are currently assigned to this post.', DGA_TEXT_DOMAIN) . '</p>';
            $output .= '<p class="description">' . __('Contact an administrator to assign access control terms.', DGA_TEXT_DOMAIN) . '</p>';
            $output .= '</div>';
        }
    } else {
        // EDIT MODE: Show full form with checkboxes
        // Get all terms from the caccess taxonomy
        $all_terms = get_terms(array(
            DGA_TAXONOMY_FIELD => 'caccess',
            DGA_HIDE_EMPTY_FIELD => false,
        ));
        
        if (is_wp_error($all_terms) || empty($all_terms)) {
            $output .= '<div class="ckan-taxo-error-zkt789">' . __('No terms found in the "caccess" taxonomy.', DGA_TEXT_DOMAIN) . '</div>';
        } else {
            $current_term_ids = wp_list_pluck($current_terms, DGA_TERM_ID_FIELD);
            
            // Add form
            $output .= '<form id="ckan-taxo-caccess-form-zkt789" data-post-id="' . esc_attr($post_id) . '" data-can-edit="true">';
            
            // Add select all option
            $output .= '<div class="ckan-taxo-select-all-container-zkt789">';
            $output .= '<label>';
            $output .= '<input type="checkbox" id="ckan-taxo-select-all-zkt789"> ';
            $output .= __('Select All', DGA_TEXT_DOMAIN);
            $output .= '</label>';
            $output .= '</div>';
            
            // Add search box
            $output .= '<div class="ckan-taxo-search-container-zkt789">';
            $output .= '<input type="text" id="ckan-taxo-search-zkt789" placeholder="' . esc_attr__('Search terms...', DGA_TEXT_DOMAIN) . '">';
            $output .= '</div>';
            
            // Add terms container
            $output .= '<div class="ckan-taxo-terms-container-zkt789">';
            
            foreach ($all_terms as $term) {
                $checked = in_array($term->term_id, $current_term_ids) ? 'checked' : '';
                
                $output .= '<div class="ckan-taxo-term-item-zkt789 ' . ($checked ? 'selected' : '') . '">';
                $output .= '<label>';
                $output .= '<input type="checkbox" name="ckan_taxo_terms[]" value="' . esc_attr($term->term_id) . '" ' . $checked . '> ';
                $output .= '<span class="term-name">' . esc_html($term->name) . '</span>';
                if (!empty($term->description)) {
                    $output .= '<span class="term-description">' . esc_html($term->description) . '</span>';
                }
                $output .= '</label>';
                $output .= '</div>';
            }
            
            $output .= '</div>'; // Close terms container
            
            // Add submit button
            $output .= '<div class="ckan-taxo-submit-container-zkt789">';
            $output .= '<button type=DGA_SUBMIT_TYPE id="ckan-taxo-submit-zkt789" class="button button-primary">';
            $output .= __('Update Terms', DGA_TEXT_DOMAIN);
            $output .= '</button>';
            $output .= '<span class="ckan-taxo-spinner-zkt789"></span>';
            $output .= '</div>';
            
            // Add message container
            $output .= '<div id="ckan-taxo-message-zkt789" class="ckan-taxo-message-zkt789"></div>';
            
            $output .= '</form>';
        }
    }
    
    $output .= '</div>'; // Close main container
    
    return $output;
}
add_shortcode('ckan_taxo_caccess', 'ckan_taxo_caccess_shortcode_zkt789');

/**
 * Check user permissions with CKAN and DGA integration
 */
function ckan_taxo_check_user_permissions_zkt789($post_id, $user_id) {
    $result = array(
        'can_edit' => false,
        'can_view' => true,
        'info' => ''
    );
    
    // Get user object
    $user = get_userdata($user_id);
    if (!$user) {
        return $result;
    }
    
    // Check if user is administrator
    if (user_can($user_id, DGA_ADMIN_ROLE)) {
        $result['can_edit'] = true;
        $result['info'] = '<div class="permission-info admin">👑 ' . __('Administrator - Full access', DGA_TEXT_DOMAIN) . '</div>';
        return $result;
    }
    
    // Check if user is post author
    $post = get_post($post_id);
    if ($post && $post->post_author == $user_id) {
        $result['can_edit'] = true;
        $result['info'] = '<div class="permission-info author">✍️ ' . __('Post Author - Can edit', DGA_TEXT_DOMAIN) . '</div>';
        return $result;
    }
    
    // Check DGA department permissions
    global $wpdb;
    $table_departments = $wpdb->prefix . 'dga_roledep_departments';
    $table_department_users = $wpdb->prefix . 'dga_roledep_department_users';
    
    $dept_info = null;
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_department_users'") == $table_department_users) {
        $dept_info = $wpdb->get_row($wpdb->prepare(
            "SELECT d.name, d.color, du.is_head 
             FROM $table_department_users du 
             JOIN $table_departments d ON du.department_id = d.id
             WHERE du.user_id = %d",
            $user_id
        ));
    }
    
    if ($dept_info) {
        $position = $dept_info->is_head ? __('Department Head', DGA_TEXT_DOMAIN) : __('Department Member', DGA_TEXT_DOMAIN);
        $result['info'] = sprintf(
            '<div class="permission-info department" style="border-left-color: %s;">
                🏢 <strong>%s</strong> - %s
            </div>',
            esc_attr($dept_info->color),
            esc_html($dept_info->name),
            esc_html($position)
        );
        
        // Department heads can edit posts in their department
        if ($dept_info->is_head) {
            // Check if post author is in the same department
            $author_dept = $wpdb->get_var($wpdb->prepare(
                "SELECT department_id FROM $table_department_users WHERE user_id = %d",
                $post->post_author
            ));
            
            $user_dept = $wpdb->get_var($wpdb->prepare(
                "SELECT department_id FROM $table_department_users WHERE user_id = %d",
                $user_id
            ));
            
            if ($author_dept && $user_dept && $author_dept == $user_dept) {
                $result['can_edit'] = true;
                $result['info'] .= '<div class="permission-info success">✅ ' . __('Department head can edit posts in department', DGA_TEXT_DOMAIN) . '</div>';
            }
        }
    } else {
        $result['info'] = '<div class="permission-info no-department">👤 ' . __('Not assigned to any department', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    // Check standard WordPress capabilities
    if (!$result['can_edit'] && current_user_can('edit_post', $post_id)) {
        $result['can_edit'] = true;
        $result['info'] .= '<div class="permission-info wp-cap">✅ ' . __('Has edit permission via WordPress Role', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    // Check CKAN permissions if function exists
    if (function_exists('ckan_permission_user_can_access_integrated')) {
        $ckan_access = ckan_permission_user_can_access_integrated($post_id, $user->roles, $user_id);
        if (!$ckan_access) {
            $result['can_view'] = false;
            $result['can_edit'] = false;
            $result['info'] .= '<div class="permission-info ckan-denied">❌ ' . __('No access via CKAN Permission system', DGA_TEXT_DOMAIN) . '</div>';
        }
    }
    
    return $result;
}

// AJAX handler for updating terms
function ckan_taxo_caccess_update_terms_zkt789() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_taxo_caccess_nonce_zkt789')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Security check failed.', DGA_TEXT_DOMAIN)));
    }
    
    // Check if post ID is provided
    if (!isset($_POST[DGA_POST_ID_FIELD]) || empty($_POST[DGA_POST_ID_FIELD])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Post ID is required.', DGA_TEXT_DOMAIN)));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    $user_id = get_current_user_id();
    
    // Enhanced permission check
    $permission_check = ckan_taxo_check_user_permissions_zkt789($post_id, $user_id);
    
    if (!$permission_check['can_edit']) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('You do not have permission to edit this post', DGA_TEXT_DOMAIN),
            'permission_info' => $permission_check['info']
        ));
    }
    
    // Get the submitted terms
    $terms = isset($_POST['terms']) ? array_map('intval', $_POST['terms']) : array();
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $terms, 'caccess');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Error updating terms: ', DGA_TEXT_DOMAIN) . $result->get_error_message()));
    } else {
        // Get updated term names for confirmation
        $updated_terms = wp_get_object_terms($post_id, 'caccess', array(DGA_FIELDS_PARAMETER => 'names'));
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('Terms updated successfully!', DGA_TEXT_DOMAIN),
            'updated_terms' => $updated_terms,
            'count' => count($updated_terms)
        ));
    }
    
    wp_die();
}
add_action('wp_ajax_ckan_taxo_caccess_update', 'ckan_taxo_caccess_update_terms_zkt789');

// Enqueue styles and scripts
function ckan_taxo_caccess_enqueue_scripts_zkt789() {
    if (is_singular()) {
        wp_enqueue_style('ckan-taxo-caccess-style-zkt789', get_stylesheet_directory_uri() . '/css/ckan-taxo-caccess-zkt789.css', array(), '1.2');
        wp_enqueue_script('ckan-taxo-caccess-script-zkt789', get_stylesheet_directory_uri() . '/js/ckan-taxo-caccess-zkt789.js', array(), '1.2', true);
        
        // Localize script
        wp_localize_script('ckan-taxo-caccess-script-zkt789', 'ckan_taxo_caccess_vars', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('ckan_taxo_caccess_nonce_zkt789'),
            'is_logged_in' => is_user_logged_in(),
            'user_id' => get_current_user_id(),
            'strings' => array(
                'updating' => __('Updating...', DGA_TEXT_DOMAIN),
                'update_terms' => __('Update Terms', DGA_TEXT_DOMAIN),
                'no_permission' => __('You do not have permission to modify this', DGA_TEXT_DOMAIN),
                'connection_error' => __('Connection error: ', DGA_TEXT_DOMAIN)
            )
        ));
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_taxo_caccess_enqueue_scripts_zkt789');






/******ฟังก์ชั่น CKAN CGROUP *******/

function ckan_taxo_cgroup_shortcode() {
    // Only continue if we're on a singular post
    if (!is_singular()) {
        return 'This shortcode can only be used on singular posts.';
    }
    
    $post_id = get_the_ID();
    
    // Check if the current user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        return 'You do not have permission to edit this post.';
    }
    
    // Get all terms from the cgroup taxonomy
    $all_terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'cgroup',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    if (is_wp_error($all_terms) || empty($all_terms)) {
        return 'No terms found in the "cgroup" taxonomy.';
    }
    
    // Get current terms assigned to this post
    $current_terms = wp_get_object_terms($post_id, 'cgroup', array(DGA_FIELDS_PARAMETER => 'ids'));
    
    // Start building the output
    $output = '<div class="ckan-taxo-cgroup-container">';
    $output .= '<h3>อัพเดต Terms ใน Taxonomy</h3>';
    
    // Add form
    $output .= '<form id="ckan-taxo-cgroup-form" data-post-id="' . esc_attr($post_id) . '">';
    
    // Add select all option
    $output .= '<div class="ckan-taxo-select-all-container">';
    $output .= '<label><input type="checkbox" id="ckan-taxo-select-all"> เลือกทั้งหมด</label>';
    $output .= '</div>';
    
    // Add search box
    $output .= '<div class="ckan-taxo-search-container">';
    $output .= '<input type="text" id="ckan-taxo-search" placeholder="ค้นหา terms...">';
    $output .= '</div>';
    
    // Add terms container
    $output .= '<div class="ckan-taxo-terms-container">';
    
    foreach ($all_terms as $term) {
        $checked = in_array($term->term_id, $current_terms) ? 'checked' : '';
        $output .= '<div class="ckan-taxo-term-item">';
        $output .= '<label>';
        $output .= '<input type="checkbox" name="ckan_taxo_terms[]" value="' . esc_attr($term->term_id) . '" ' . $checked . '> ';
        $output .= esc_html($term->name);
        $output .= '</label>';
        $output .= '</div>';
    }
    
    $output .= '</div>'; // Close terms container
    
    // Add submit button
    $output .= '<div class="ckan-taxo-submit-container">';
    $output .= '<button type=DGA_SUBMIT_TYPE id="ckan-taxo-submit">อัพเดต Terms</button>';
    $output .= '<span class="ckan-taxo-spinner"></span>';
    $output .= '</div>';
    
    // Add message container for feedback
    $output .= '<div id="ckan-taxo-message" class="ckan-taxo-message"></div>';
    
    $output .= '</form>';
    $output .= '</div>'; // Close main container
    
    return $output;
}
add_shortcode('ckan_taxo_cgroup', 'ckan_taxo_cgroup_shortcode');

// Enqueue scripts and styles
function ckan_taxo_cgroup_enqueue_scripts() {
    // Only enqueue on singular posts where the shortcode might be used
    if (is_singular()) {
        wp_enqueue_style('ckan-taxo-cgroup-style', get_stylesheet_directory_uri() . '/css/ckan-taxo-cgroup.css', array(), '1.0');
        wp_enqueue_script('ckan-taxo-cgroup-script', get_stylesheet_directory_uri() . '/js/ckan-taxo-cgroup.js', array(DGA_JQUERY_HANDLE), '1.0', true);
        wp_localize_script('ckan-taxo-cgroup-script', 'ckan_taxo_cgroup_vars', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('ckan_taxo_cgroup_nonce')
        ));
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_taxo_cgroup_enqueue_scripts');

// AJAX handler to update post terms
function ckan_taxo_cgroup_update_terms() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_taxo_cgroup_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Security check failed.'));
    }
    
    // Check if post ID is provided
    if (!isset($_POST[DGA_POST_ID_FIELD]) || empty($_POST[DGA_POST_ID_FIELD])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Post ID is required.'));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    
    // Check if user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    }
    
    // Get the submitted terms
    $terms = isset($_POST['terms']) ? array_map('intval', $_POST['terms']) : array();
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $terms, 'cgroup');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการอัพเดต: ' . $result->get_error_message()));
    } else {
        wp_send_json_success(array(DGA_MESSAGE_KEY => 'อัพเดต Terms เรียบร้อยแล้ว!'));
    }
    
    wp_die(); // Required to terminate the AJAX request properly
}
add_action('wp_ajax_ckan_taxo_cgroup_update', 'ckan_taxo_cgroup_update_terms');



/******ฟังก์ชั่น CKAN CLICENSE *******/

function ckan_taxo_clicense_shortcode() {
    // Only continue if we're on a singular post
    if (!is_singular()) {
        return 'This shortcode can only be used on singular posts.';
    }
    
    $post_id = get_the_ID();
    
    // Check if the current user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        return 'You do not have permission to edit this post.';
    }
    
    // Get all terms from the clicense taxonomy
    $all_terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'clicense',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    if (is_wp_error($all_terms) || empty($all_terms)) {
        return 'No terms found in the "clicense" taxonomy.';
    }
    
    // Get current terms assigned to this post
    $current_terms = wp_get_object_terms($post_id, 'clicense', array(DGA_FIELDS_PARAMETER => 'ids'));
    
    // Start building the output
    $output = '<div class="ckan-taxo-clicense-container">';
    $output .= '<h3>อัพเดต Terms ใน Taxonomy</h3>';
    
    // Add form
    $output .= '<form id="ckan-taxo-clicense-form" data-post-id="' . esc_attr($post_id) . '">';
    
    // Add select all option
    $output .= '<div class="ckan-taxo-select-all-container">';
    $output .= '<label><input type="checkbox" id="ckan-taxo-select-all"> เลือกทั้งหมด</label>';
    $output .= '</div>';
    
    // Add search box
    $output .= '<div class="ckan-taxo-search-container">';
    $output .= '<input type="text" id="ckan-taxo-search" placeholder="ค้นหา terms...">';
    $output .= '</div>';
    
    // Add terms container
    $output .= '<div class="ckan-taxo-terms-container">';
    
    foreach ($all_terms as $term) {
        $checked = in_array($term->term_id, $current_terms) ? 'checked' : '';
        $output .= '<div class="ckan-taxo-term-item">';
        $output .= '<label>';
        $output .= '<input type="checkbox" name="ckan_taxo_terms[]" value="' . esc_attr($term->term_id) . '" ' . $checked . '> ';
        $output .= esc_html($term->name);
        $output .= '</label>';
        $output .= '</div>';
    }
    
    $output .= '</div>'; // Close terms container
    
    // Add submit button
    $output .= '<div class="ckan-taxo-submit-container">';
    $output .= '<button type=DGA_SUBMIT_TYPE id="ckan-taxo-submit">อัพเดต Terms</button>';
    $output .= '<span class="ckan-taxo-spinner"></span>';
    $output .= '</div>';
    
    // Add message container for feedback
    $output .= '<div id="ckan-taxo-message" class="ckan-taxo-message"></div>';
    
    $output .= '</form>';
    $output .= '</div>'; // Close main container
    
    return $output;
}
add_shortcode('ckan_taxo_clicense', 'ckan_taxo_clicense_shortcode');

// Enqueue scripts and styles
function ckan_taxo_clicense_enqueue_scripts() {
    // Only enqueue on singular posts where the shortcode might be used
    if (is_singular()) {
        wp_enqueue_style('ckan-taxo-clicense-style', get_stylesheet_directory_uri() . '/css/ckan-taxo-clicense.css', array(), '1.0');
        wp_enqueue_script('ckan-taxo-clicense-script', get_stylesheet_directory_uri() . '/js/ckan-taxo-clicense.js', array(DGA_JQUERY_HANDLE), '1.0', true);
        wp_localize_script('ckan-taxo-clicense-script', 'ckan_taxo_clicense_vars', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('ckan_taxo_clicense_nonce')
        ));
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_taxo_clicense_enqueue_scripts');

// AJAX handler to update post terms
function ckan_taxo_clicense_update_terms() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_taxo_clicense_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Security check failed.'));
    }
    
    // Check if post ID is provided
    if (!isset($_POST[DGA_POST_ID_FIELD]) || empty($_POST[DGA_POST_ID_FIELD])) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Post ID is required.'));
    }
    
    $post_id = intval($_POST[DGA_POST_ID_FIELD]);
    
    // Check if user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    }
    
    // Get the submitted terms
    $terms = isset($_POST['terms']) ? array_map('intval', $_POST['terms']) : array();
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $terms, 'clicense');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการอัพเดต: ' . $result->get_error_message()));
    } else {
        wp_send_json_success(array(DGA_MESSAGE_KEY => 'อัพเดต Terms เรียบร้อยแล้ว!'));
    }
    
    wp_die(); // Required to terminate the AJAX request properly
}
add_action('wp_ajax_ckan_taxo_clicense_update', 'ckan_taxo_clicense_update_terms');


/****** ฟังก์ชั่น CKAN TAG Enhanced with Autocomplete and Delete/Transfer ******/

// Register shortcode สำหรับแสดงและจัดการ taxonomy ctag
function ckan_add_tag_shortcode_def456() {
    global $post;
    
    // ถ้าไม่มีโพสต์ให้คืนค่าว่าง
    if (!isset($post)) {
        return '';
    }
    
    // รับ ID ของโพสต์ปัจจุบัน
    $post_id = $post->ID;
    
    // รับ terms ที่เกี่ยวข้องกับโพสต์นี้
    $post_terms = wp_get_object_terms($post_id, 'ctag');
    
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์จัดการ terms หรือไม่
    $can_manage_terms = current_user_can('manage_categories');
    
    // เริ่มสร้าง output
    $output = '<div class="ckan-tag-container-def456">';
    
    // แสดง tags ที่มีอยู่
    $output .= '<div class="ckan-tags-list-def456">';
    if (!empty($post_terms) && !is_wp_error($post_terms)) {
        foreach ($post_terms as $term) {
            $output .= '<span class="ckan-tag-def456" data-term-id="' . esc_attr($term->term_id) . '">';
            $output .= esc_html($term->name);
            
            // เพิ่มปุ่มลบสำหรับผู้ที่มีสิทธิ์
            if ($can_manage_terms) {
                $output .= '<span class="ckan-tag-delete-def456" data-term-id="' . esc_attr($term->term_id) . '" data-term-name="' . esc_attr($term->name) . '" title="' . esc_attr__('ลบและโอนโพสต์', DGA_TEXT_DOMAIN) . '">&times;</span>';
            }
            
            $output .= '</span>';
        }
    }
    $output .= '</div>';
    
    // แสดงปุ่ม "เพิ่ม TAG" เฉพาะสำหรับผู้ดูแลระบบ, บรรณาธิการ, และผู้เขียน
    if (current_user_can('edit_post', $post_id)) {
        $output .= '<button class="ckan-add-tag-btn-def456" data-post-id="' . esc_attr($post_id) . '">';
        $output .= '<span class="dashicons dashicons-edit"></span> ' . __('เพิ่ม TAG', DGA_TEXT_DOMAIN);
        $output .= '</button>';
        
        // เพิ่ม HTML ของ modal popup (ซ่อนไว้เริ่มต้น)
        $output .= '<div id="ckan-tag-modal-def456" class="ckan-modal-def456" style="display:none;">';
        $output .= '<div class="ckan-modal-content-def456">';
        $output .= '<span class="ckan-modal-close-def456">&times;</span>';
        $output .= '<h3>' . __('เลือกหรือเพิ่ม Tag', DGA_TEXT_DOMAIN) . '</h3>';
        
        // เพิ่มส่วน autocomplete input
        $output .= '<div class="ckan-autocomplete-wrapper-def456">';
        $output .= '<input type="text" class="ckan-autocomplete-input-def456" placeholder="' . esc_attr__('พิมพ์เพื่อค้นหาหรือเพิ่ม Tag ใหม่...', DGA_TEXT_DOMAIN) . '" />';
        $output .= '<div class="ckan-autocomplete-results-def456" style="display:none;"></div>';
        $output .= '</div>';
        
        $output .= '<div class="ckan-modal-tags-def456">';
        // ส่วนนี้จะถูกเติมด้วย JavaScript/AJAX
        $output .= '</div>';
        $output .= '<div class="ckan-modal-footer-def456">';
        $output .= '<button class="ckan-save-tags-btn-def456">' . __('บันทึก', DGA_TEXT_DOMAIN) . '</button>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
    }
    
    // เพิ่ม Modal สำหรับการลบและโอน terms
    if ($can_manage_terms) {
        $output .= '<div id="ckan-delete-modal-def456" class="ckan-modal-def456" style="display:none;">';
        $output .= '<div class="ckan-modal-content-def456 ckan-delete-modal-content-def456">';
        $output .= '<span class="ckan-modal-close-def456">&times;</span>';
        $output .= '<h3>' . __('ลบ Tag และโอนโพสต์', DGA_TEXT_DOMAIN) . '</h3>';
        $output .= '<div class="ckan-delete-modal-body-def456">';
        $output .= '<p class="ckan-delete-info-def456"></p>';
        $output .= '<div class="ckan-transfer-option-def456">';
        $output .= '<label>';
        $output .= '<input type="radio" name="transfer_option" value="transfer" checked> ';
        $output .= __('โอนโพสต์ทั้งหมดไปยัง Tag:', DGA_TEXT_DOMAIN);
        $output .= '</label>';
        $output .= '<select class="ckan-transfer-select-def456" style="margin-left: 10px;">';
        $output .= '<option value="">' . __('-- เลือก Tag ปลายทาง --', DGA_TEXT_DOMAIN) . '</option>';
        $output .= '</select>';
        $output .= '</div>';
        $output .= '<div class="ckan-transfer-option-def456">';
        $output .= '<label>';
        $output .= '<input type="radio" name="transfer_option" value="delete_only"> ';
        $output .= __('ลบ Tag โดยไม่โอนโพสต์', DGA_TEXT_DOMAIN);
        $output .= '</label>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '<div class="ckan-modal-footer-def456">';
        $output .= '<button class="ckan-cancel-delete-btn-def456">' . __('ยกเลิก', DGA_TEXT_DOMAIN) . '</button>';
        $output .= '<button class="ckan-confirm-delete-btn-def456">' . __('ยืนยันการลบ', DGA_TEXT_DOMAIN) . '</button>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    // เรียกใช้ไฟล์ CSS และ JavaScript ที่จำเป็น
    wp_enqueue_style('dashicons');
    wp_enqueue_style('ckan-add-tag-css', get_stylesheet_directory_uri() . '/css/ckan-add-tag.css');
    wp_enqueue_script('ckan-add-tag-js', get_stylesheet_directory_uri() . '/js/ckan-add-tag.js', array(DGA_JQUERY_HANDLE), null, true);
    
    // ส่งข้อมูลที่จำเป็นไปยัง JavaScript
    wp_localize_script('ckan-add-tag-js', 'ckanTagData', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_tag_nonce'),
        'can_manage_terms' => $can_manage_terms,
        'i18n' => array(
            'loading' => __('กำลังโหลด...', DGA_TEXT_DOMAIN),
            'no_tags' => __('ไม่พบ Tag ใด ๆ', DGA_TEXT_DOMAIN),
            'saving' => __('กำลังบันทึก...', DGA_TEXT_DOMAIN),
            'save' => __('บันทึก', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'connection_error' => __('เกิดข้อผิดพลาดในการเชื่อมต่อ', DGA_TEXT_DOMAIN),
            'create_new' => __('สร้างใหม่:', DGA_TEXT_DOMAIN),
            'no_results' => __('ไม่พบผลลัพธ์', DGA_TEXT_DOMAIN),
            'delete_tag' => __('ลบ Tag', DGA_TEXT_DOMAIN),
            'transfer_posts' => __('โอนโพสต์', DGA_TEXT_DOMAIN),
            'deleting' => __('กำลังลบ...', DGA_TEXT_DOMAIN),
            'select_destination' => __('กรุณาเลือก Tag ปลายทาง', DGA_TEXT_DOMAIN),
            'post_count' => __('จำนวนโพสต์:', DGA_TEXT_DOMAIN)
        )
    ));
    
    return $output;
}
add_shortcode('ckan_add_tag', 'ckan_add_tag_shortcode_def456');

// AJAX handler สำหรับดึงข้อมูล terms ทั้งหมด
function ckan_get_all_terms_def456() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    // ดึง terms ทั้งหมดจาก taxonomy ctag
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'ctag',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    // ดึง terms ของโพสต์ปัจจุบัน
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $post_terms = array();
    
    if ($post_id > 0) {
        $post_term_objects = wp_get_object_terms($post_id, 'ctag');
        if (!is_wp_error($post_term_objects)) {
            foreach ($post_term_objects as $term) {
                $post_terms[] = $term->term_id;
            }
        }
    }
    
    $terms_array = array();
    
    if (!empty($terms) && !is_wp_error($terms)) {
        foreach ($terms as $term) {
            $terms_array[] = array(
                'id' => $term->term_id,
                DGA_NAME_FIELD => $term->name,
                'selected' => in_array($term->term_id, $post_terms)
            );
        }
    }
    
    wp_send_json_success($terms_array);
}
add_action('wp_ajax_ckan_get_all_terms', 'ckan_get_all_terms_def456');

// AJAX handler สำหรับค้นหา terms (autocomplete)
function ckan_search_terms_def456() {
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    
    if (empty($search)) {
        wp_send_json_success(array());
        return;
    }
    
    // ค้นหา terms ที่ตรงกับคำค้นหา
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'ctag',
        DGA_HIDE_EMPTY_FIELD => false,
        'search' => $search,
        'number' => 10
    ));
    
    $results = array();
    
    if (!empty($terms) && !is_wp_error($terms)) {
        foreach ($terms as $term) {
            $results[] = array(
                'id' => $term->term_id,
                DGA_NAME_FIELD => $term->name,
                'slug' => $term->slug
            );
        }
    }
    
    wp_send_json_success($results);
}
add_action('wp_ajax_ckan_search_terms', 'ckan_search_terms_def456');

// Helper function สำหรับหา slug ถัดไป
function ckan_get_next_slug_def456() {
    global $wpdb;
    
    // Query หา slug ที่มีรูปแบบ ctag-X ทั้งหมด
    $slugs = $wpdb->get_col("
        SELECT slug 
        FROM {$wpdb->terms} t
        JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id
        WHERE tt.taxonomy = 'ctag' 
        AND t.slug REGEXP '^ctag-[0-9]+$'
        ORDER BY CAST(SUBSTRING(t.slug, 6) AS UNSIGNED) DESC
        LIMIT 1
    ");
    
    if (!empty($slugs)) {
        // แยกเอาตัวเลขจาก slug สุดท้าย
        preg_match('/ctag-(\d+)/', $slugs[0], $matches);
        $last_number = isset($matches[1]) ? intval($matches[1]) : 0;
        return 'ctag-' . ($last_number + 1);
    }
    
    // ถ้าไม่มี slug ในรูปแบบนี้เลย ให้เริ่มที่ ctag-1
    return 'ctag-1';
}

// AJAX handler สำหรับสร้าง term ใหม่
function ckan_create_term_def456() {
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('กรุณากรอกชื่อ Tag', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // ตรวจสอบว่ามี term นี้อยู่แล้วหรือไม่
    $existing_term = get_term_by('name', $term_name, 'ctag');
    
    if ($existing_term) {
        wp_send_json_success(array(
            'id' => $existing_term->term_id,
            DGA_NAME_FIELD => $existing_term->name,
            'slug' => $existing_term->slug,
            'exists' => true
        ));
        return;
    }
    
    // สร้าง slug อัตโนมัติ
    $next_slug = ckan_get_next_slug_def456();
    
    // สร้าง term ใหม่
    $new_term = wp_insert_term($term_name, 'ctag', array(
        'slug' => $next_slug
    ));
    
    if (is_wp_error($new_term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $new_term->get_error_message()));
        return;
    }
    
    $term = get_term($new_term[DGA_TERM_ID_FIELD], 'ctag');
    
    wp_send_json_success(array(
        'id' => $term->term_id,
        DGA_NAME_FIELD => $term->name,
        'slug' => $term->slug,
        'exists' => false
    ));
}
add_action('wp_ajax_ckan_create_term', 'ckan_create_term_def456');

// AJAX handler สำหรับอัพเดต terms ของโพสต์
function ckan_update_post_terms_def456() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    // รับพารามิเตอร์
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $term_ids = isset($_POST['term_ids']) ? $_POST['term_ids'] : array();
    
    // แปลง string IDs เป็น integers
    $term_ids = array_map('intval', $term_ids);
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // อัพเดต terms ของโพสต์
    $result = wp_set_object_terms($post_id, $term_ids, 'ctag');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $result->get_error_message()));
    } else {
        // ดึงข้อมูล terms ที่อัพเดตแล้วเพื่อรีเฟรชการแสดงผล
        $updated_terms = wp_get_object_terms($post_id, 'ctag');
        $terms_output = array();
        
        if (!empty($updated_terms) && !is_wp_error($updated_terms)) {
            foreach ($updated_terms as $term) {
                $terms_output[] = array(
                    'id' => $term->term_id,
                    DGA_NAME_FIELD => $term->name
                );
            }
        }
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('อัพเดต Tags เรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
            'terms' => $terms_output
        ));
    }
}
add_action('wp_ajax_ckan_update_post_terms', 'ckan_update_post_terms_def456');

// AJAX handler สำหรับดึงข้อมูล term เพื่อลบ
function ckan_get_term_info_def456() {
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์จัดการ Tags', DGA_TEXT_DOMAIN)));
        return;
    }
    
    $term_id = isset($_POST[DGA_TERM_ID_FIELD]) ? intval($_POST[DGA_TERM_ID_FIELD]) : 0;
    
    if (!$term_id) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ไม่พบ Tag ID', DGA_TEXT_DOMAIN)));
        return;
    }
    
    $term = get_term($term_id, 'ctag');
    
    if (!$term || is_wp_error($term)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ไม่พบ Tag ที่ต้องการ', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // นับจำนวนโพสต์ใน term นี้
    $post_count = $term->count;
    
    // ดึง terms อื่นๆ สำหรับการโอน
    $other_terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'ctag',
        DGA_HIDE_EMPTY_FIELD => false,
        'exclude' => array($term_id)
    ));
    
    $terms_array = array();
    
    if (!empty($other_terms) && !is_wp_error($other_terms)) {
        foreach ($other_terms as $other_term) {
            $terms_array[] = array(
                'id' => $other_term->term_id,
                DGA_NAME_FIELD => $other_term->name
            );
        }
    }
    
    wp_send_json_success(array(
        'term_name' => $term->name,
        'post_count' => $post_count,
        'other_terms' => $terms_array
    ));
}
add_action('wp_ajax_ckan_get_term_info', 'ckan_get_term_info_def456');

// AJAX handler สำหรับลบ term และโอนโพสต์
function ckan_delete_term_def456() {
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์จัดการ Tags', DGA_TEXT_DOMAIN)));
        return;
    }
    
    $term_id = isset($_POST[DGA_TERM_ID_FIELD]) ? intval($_POST[DGA_TERM_ID_FIELD]) : 0;
    $transfer_option = isset($_POST['transfer_option']) ? sanitize_text_field($_POST['transfer_option']) : 'delete_only';
    $target_term_id = isset($_POST['target_term_id']) ? intval($_POST['target_term_id']) : 0;
    
    if (!$term_id) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ไม่พบ Tag ID', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // ถ้าเลือกโอนโพสต์
    if ($transfer_option === 'transfer' && $target_term_id) {
        // ดึงโพสต์ทั้งหมดที่อยู่ใน term นี้
        $posts = get_posts(array(
            DGA_POST_TYPE_FIELD => 'any',
            DGA_POSTS_PER_PAGE => -1,
            'tax_query' => array(
                array(
                    DGA_TAXONOMY_FIELD => 'ctag',
                    DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                    'terms' => $term_id
                )
            ),
            DGA_FIELDS_PARAMETER => 'ids'
        ));
        
        // โอนโพสต์ไปยัง term ใหม่
        foreach ($posts as $post_id) {
            // ดึง terms ปัจจุบันของโพสต์
            $current_terms = wp_get_object_terms($post_id, 'ctag', array(DGA_FIELDS_PARAMETER => 'ids'));
            
            // ลบ term เดิมออกและเพิ่ม term ใหม่
            $current_terms = array_diff($current_terms, array($term_id));
            $current_terms[] = $target_term_id;
            
            wp_set_object_terms($post_id, array_unique($current_terms), 'ctag');
        }
    }
    
    // ลบ term
    $result = wp_delete_term($term_id, 'ctag');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $result->get_error_message()));
    } else {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('ลบ Tag เรียบร้อยแล้ว', DGA_TEXT_DOMAIN)
        ));
    }
}
add_action('wp_ajax_ckan_delete_term', 'ckan_delete_term_def456');



/***** ฟังก์ชั่น Active-Inactive ประกาศ - ปรับปรุงแล้ว *****/

// 1. ลงทะเบียน Shortcode สำหรับ Toggle
function at_status_toggle_shortcode() {
    // รับ ID และ post type ของโพสต์ปัจจุบัน
    $post_id = get_the_ID();
    $post_type = get_post_type($post_id);
    
    // ดึงค่าสถานะปัจจุบันจาก custom field
    $current_status = get_post_meta($post_id, 'at_status', true);
    if (empty($current_status)) {
        $current_status = 'active';
        update_post_meta($post_id, 'at_status', $current_status);
    }
    
    // ตรวจสอบว่าสถานะเป็น active หรือไม่
    $is_active = ($current_status === 'active');
    
    // สร้าง ID เฉพาะสำหรับ toggle นี้
    $toggle_id = 'at-status-toggle-' . $post_id;
    
    // สร้าง HTML สำหรับ toggle switch
    $output = '<div class="at-status-toggle-container" data-post-id="' . esc_attr($post_id) . '" data-post-type="' . esc_attr($post_type) . '">';
    $output .= '<div class="at-status-toggle-switch ' . ($is_active ? 'active' : 'inactive') . '" id="' . esc_attr($toggle_id) . '">';
    $output .= '<div class="at-status-toggle-slider"></div>';
    $output .= '</div>';
    $output .= '<div class="at-status-toggle-label">' . esc_html(ucfirst($current_status)) . '</div>';
    $output .= '<div class="at-status-toggle-message"></div>';
    $output .= '</div>';
    
    // เรียกใช้ script และ style
    wp_enqueue_script('at-status-toggle-script');
    wp_enqueue_style('at-status-toggle-style');
    
    return $output;
}
add_shortcode('post_status_toggle', 'at_status_toggle_shortcode');

// 2. ลงทะเบียน scripts และ styles
function at_status_toggle_enqueue_scripts() {
    // ลงทะเบียน CSS
    wp_register_style(
        'at-status-toggle-style',
        get_stylesheet_directory_uri() . '/css/at-status-toggle.css',
        array(),
        DGA_THEME_VERSION
    );
    
    // ลงทะเบียน JavaScript
    wp_register_script(
        'at-status-toggle-script',
        get_stylesheet_directory_uri() . '/js/at-status-toggle.js',
        array(DGA_JQUERY_HANDLE),
        DGA_THEME_VERSION,
        true
    );
    
    // ส่งค่า AJAX URL และ nonce ไปยัง JavaScript
    wp_localize_script(
        'at-status-toggle-script',
        'atStatusToggle',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            'nonce'   => wp_create_nonce('at_status_toggle_nonce')
        )
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'at_status_toggle_enqueue_scripts');

// 3. จัดการ AJAX request สำหรับ toggle
function at_status_toggle_ajax_handler() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_status_toggle_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)));
    }
    
    // รับและตรวจสอบค่า
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $new_status = isset($_POST[DGA_STATUS_FIELD]) ? sanitize_text_field($_POST[DGA_STATUS_FIELD]) : '';
    
    if ($post_id <= 0) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ID โพสต์ไม่ถูกต้อง', DGA_TEXT_DOMAIN)));
    }
    
    if (!in_array($new_status, array('active', 'inactive'))) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ค่าสถานะไม่ถูกต้อง', DGA_TEXT_DOMAIN)));
    }
    
    // อัพเดท post meta
    $result = update_post_meta($post_id, 'at_status', $new_status);
    
    // Clear cache
    clean_post_cache($post_id);
    
    // Trigger custom action for real-time updates
    do_action('at_post_status_changed', $post_id, $new_status);
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => __('อัพเดตสถานะเรียบร้อยแล้ว', DGA_TEXT_DOMAIN),
        DGA_STATUS_FIELD => $new_status,
        DGA_POST_ID_FIELD => $post_id
    ));
}
add_action('wp_ajax_at_status_toggle', 'at_status_toggle_ajax_handler');
add_action('wp_ajax_nopriv_at_status_toggle', 'at_status_toggle_ajax_handler');


/**** ฟังก์ชั่นแสดง ประกาศที่ inactive - ปรับปรุงแล้ว ******/

// 1. Shortcode สำหรับแสดงรายการ inactive posts
function at_inactive_news_list_shortcode($atts) {
    // รับ attributes
    $atts = shortcode_atts(array(
        DGA_POST_TYPE_FIELD => '', // ถ้าไม่ระบุจะแสดงทุก post type
        'per_page' => 20
    ), $atts);
    
    // ตรวจสอบและโหลด toggle scripts ก่อน
    if (function_exists('at_status_toggle_enqueue_scripts')) {
        at_status_toggle_enqueue_scripts();
        wp_enqueue_script('at-status-toggle-script');
        wp_enqueue_style('at-status-toggle-style');
    }
    
    // ลงทะเบียนและโหลด inactive list scripts
    at_inactive_news_list_enqueue_scripts();
    wp_enqueue_style('at-inactive-news-list-style');
    wp_enqueue_script('at-inactive-news-list-script');

    // สร้าง unique ID
    $list_id = 'at-list-' . wp_generate_password(6, false);

    // สร้าง HTML container
    $output = '<div class="at-inactive-news-container" data-list-id="' . esc_attr($list_id) . '" data-post-type="' . esc_attr($atts[DGA_POST_TYPE_FIELD]) . '">';
    
    // ส่วนค้นหาและฟิลเตอร์
    $output .= '<div class="at-search-filter">
                    <div class="at-search-box">
                        <input type="text" id="at-news-search" placeholder="' . esc_attr__('ค้นหาข่าว, มสพร., มรด. ...', DGA_TEXT_DOMAIN) . '">
                        <button id="at-news-search-btn" type=DGA_BUTTON_TYPE>
                            <span class="dashicons dashicons-search"></span>
                            ' . esc_html__('ค้นหา', DGA_TEXT_DOMAIN) . '
                        </button>
                    </div>
                    <div class="at-filter-info">
                        <span>' . esc_html__('แสดงเฉพาะรายการที่มีสถานะ Inactive', DGA_TEXT_DOMAIN) . '</span>
                        <button class="at-refresh-btn" type=DGA_BUTTON_TYPE title="' . esc_attr__('รีเฟรชข้อมูล', DGA_TEXT_DOMAIN) . '">
                            <span class="dashicons dashicons-update"></span>
                        </button>
                    </div>
                </div>';
    
    // ส่วนแสดงรายการ
    $output .= '<div class="at-news-table-container">
                    <table class="at-news-table">
                        <thead>
                            <tr>
                                <th width="5%">' . esc_html__('ID', DGA_TEXT_DOMAIN) . '</th>
                                <th width="10%">' . esc_html__('ประเภท', DGA_TEXT_DOMAIN) . '</th>
                                <th width="15%">' . esc_html__('วันที่', DGA_TEXT_DOMAIN) . '</th>
                                <th width="35%">' . esc_html__('หัวข้อ', DGA_TEXT_DOMAIN) . '</th>
                                <th width="15%">' . esc_html__('เลขที่ประกาศ', DGA_TEXT_DOMAIN) . '</th>
                                <th width="10%" class="at-action-column">' . esc_html__('สถานะ', DGA_TEXT_DOMAIN) . '</th>
                                <th width="10%" class="at-action-column">' . esc_html__('การกระทำ', DGA_TEXT_DOMAIN) . '</th>
                            </tr>
                        </thead>
                        <tbody id="at-news-table-body">
                            <tr>
                                <td colspan="7" class="at-loading-data">' . esc_html__('กำลังโหลดข้อมูล...', DGA_TEXT_DOMAIN) . '</td>
                            </tr>
                        </tbody>
                    </table>
                </div>';
    
    // ส่วน pagination
    $output .= '<div class="at-news-pagination" id="at-news-pagination"></div>';
    
    // ส่วนแสดงข้อความสถานะ
    $output .= '<div class="at-news-status-message" id="at-news-status-message"></div>';
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('inactive_news_list', 'at_inactive_news_list_shortcode');

// 2. ลงทะเบียน scripts และ styles
function at_inactive_news_list_enqueue_scripts() {
    // ลงทะเบียน CSS
    wp_register_style(
        'at-inactive-news-list-style',
        get_stylesheet_directory_uri() . '/css/at-inactive-news-list.css',
        array(),
        DGA_THEME_VERSION
    );
    
    // ตรวจสอบและโหลด dependencies ก่อน
    if (!wp_script_is('at-status-toggle-script', 'registered')) {
        at_status_toggle_enqueue_scripts();
    }
    
    // ลงทะเบียน JavaScript พร้อม dependency
    wp_register_script(
        'at-inactive-news-list-script',
        get_stylesheet_directory_uri() . '/js/at-inactive-news-list.js',
        array(DGA_JQUERY_HANDLE, 'at-status-toggle-script'), // เพิ่ม dependency
        DGA_THEME_VERSION,
        true
    );
    
    // ส่งค่า AJAX URL และ nonce
    wp_localize_script(
        'at-inactive-news-list-script',
        'atInactiveNewsList',
        array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            'nonce'   => wp_create_nonce('at_inactive_news_list_nonce'),
            'perPage' => 20,
            'toggleNonce' => wp_create_nonce('at_status_toggle_nonce') // เพิ่ม toggle nonce
        )
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'at_inactive_news_list_enqueue_scripts');

// 3. AJAX handler สำหรับโหลดข้อมูล - ปรับปรุงให้รองรับทุก post type
function at_load_inactive_news_ajax_handler() {
    // ตรวจสอบ nonce
    if (!check_ajax_referer('at_inactive_news_list_nonce', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)));
    }
    
    // รับพารามิเตอร์
    $search_query = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 20;
    $post_type = isset($_POST[DGA_POST_TYPE_FIELD]) ? sanitize_text_field($_POST[DGA_POST_TYPE_FIELD]) : '';
    
    // คำนวน offset
    $offset = ($page - 1) * $per_page;
    
    // สร้าง meta_query
    $meta_query = array(
        array(
            'key'     => 'at_status',
            'value'   => 'inactive',
            'compare' => '='
        )
    );
    
    // กำหนด post types ที่จะค้นหา
    $post_types = array();
    if (!empty($post_type)) {
        $post_types = array($post_type);
    } else {
        // ถ้าไม่ระบุ post_type ให้ค้นหาทุก public post types
        $args = array(
            'public' => true,
            '_builtin' => true
        );
        $builtin_types = get_post_types($args, 'names');
        
        $args = array(
            'public' => true,
            '_builtin' => false
        );
        $custom_types = get_post_types($args, 'names');
        
        $post_types = array_merge($builtin_types, $custom_types);
    }
    
    // สร้าง WP_Query
    $args = array(
        DGA_POST_TYPE_FIELD      => $post_types,
        DGA_POSTS_PER_PAGE => $per_page,
        'offset'         => $offset,
        DGA_POST_STATUS_FIELD    => DGA_PUBLISH_STATUS,
        DGA_ORDERBY_FIELD_VALUE        => 'date',
        DGA_ORDER_FIELD          => 'DESC',
        'meta_query'     => $meta_query
    );
    
    // เพิ่มการค้นหา
    if (!empty($search_query)) {
        $args['s'] = $search_query;
        
        // เพิ่มการค้นหาใน meta fields
        add_filter('posts_search', 'at_extend_search_meta_fields', 10, 2);
    }
    
    $query = new WP_Query($args);
    
    // ลบ filter
    if (!empty($search_query)) {
        remove_filter('posts_search', 'at_extend_search_meta_fields', 10);
    }
    
    // คำนวนจำนวนหน้า
    $total_posts = $query->found_posts;
    $total_pages = ceil($total_posts / $per_page);
    
    $news_items = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // ดึงข้อมูล custom fields
            $docnum_1 = get_post_meta($post_id, 'at_docnum_1', true);
            $docnum_2 = get_post_meta($post_id, 'at_docnum_2', true);
            
            // รับ post type label
            $post_type_obj = get_post_type_object(get_post_type());
            $post_type_label = $post_type_obj ? $post_type_obj->labels->singular_name : get_post_type();
            
            $news_items[] = array(
                'id'         => $post_id,
                DGA_POST_TYPE_FIELD  => get_post_type(),
                'post_type_label' => $post_type_label,
                'date'       => get_the_date(DGA_DATE_FORMAT_SHORT),
                DGA_TITLE_FIELD      => get_the_title(),
                'permalink'  => get_permalink(),
                'docnum_1'   => $docnum_1 ?: '-',
                'docnum_2'   => $docnum_2 ?: '-',
                DGA_STATUS_FIELD     => 'inactive'
            );
        }
    }
    
    wp_reset_postdata();
    
    wp_send_json_success(array(
        'news'        => $news_items,
        'total_posts' => $total_posts,
        'total_pages' => $total_pages,
        'current_page'=> $page
    ));
}
add_action('wp_ajax_at_load_inactive_news', 'at_load_inactive_news_ajax_handler');
add_action('wp_ajax_nopriv_at_load_inactive_news', 'at_load_inactive_news_ajax_handler');

// ฟังก์ชันขยายการค้นหาให้รวม meta fields
function at_extend_search_meta_fields($search, $wp_query) {
    global $wpdb;
    
    if (empty($search)) {
        return $search;
    }
    
    $search_terms = $wp_query->get('search_terms');
    
    if (empty($search_terms)) {
        return $search;
    }
    
    // เพิ่มการค้นหาใน meta fields
    $meta_search = "";
    foreach ($search_terms as $term) {
        $term = esc_sql($wpdb->esc_like($term));
        $meta_search .= " OR EXISTS (
            SELECT 1 FROM {$wpdb->postmeta} 
            WHERE {$wpdb->postmeta}.post_id = {$wpdb->posts}.ID
            AND (
                ({$wpdb->postmeta}.meta_key = 'at_docnum_1' AND {$wpdb->postmeta}.meta_value LIKE '%{$term}%')
                OR ({$wpdb->postmeta}.meta_key = 'at_docnum_2' AND {$wpdb->postmeta}.meta_value LIKE '%{$term}%')
            )
        )";
    }
    
    // แทรกการค้นหา meta ก่อนวงเล็บปิดสุดท้าย
    $search = str_replace('))', ') ' . $meta_search . ')', $search);
    
    return $search;
}

// 4. AJAX handler สำหรับอัพเดตสถานะจากตาราง
function at_direct_status_toggle_ajax_handler() {
    // ตรวจสอบ nonce จากทั้งสอง sources
    $nonce_valid = false;
    
    if (isset($_POST['nonce'])) {
        // ตรวจสอบ nonce จาก status toggle
        if (wp_verify_nonce($_POST['nonce'], 'at_status_toggle_nonce')) {
            $nonce_valid = true;
        }
        // ตรวจสอบ nonce จาก inactive news list
        elseif (wp_verify_nonce($_POST['nonce'], 'at_inactive_news_list_nonce')) {
            $nonce_valid = true;
        }
    }
    
    if (!$nonce_valid) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // ใช้ handler เดียวกับ toggle ปกติ
    $_POST['nonce'] = wp_create_nonce('at_status_toggle_nonce'); // สร้าง nonce ใหม่ที่ถูกต้อง
    at_status_toggle_ajax_handler();
}
add_action('wp_ajax_at_direct_status_toggle', 'at_direct_status_toggle_ajax_handler');
add_action('wp_ajax_nopriv_at_direct_status_toggle', 'at_direct_status_toggle_ajax_handler');



/********* ฟังก์ชั่นแสดงชื่อหน่วยงานของเจ้าของชุดข้อมูล (Admin Only) *********/

// Main shortcode function - Admin only version
function ckan_edit_org_shortcode_adm347() {
    global $post;
    
    if (!isset($post)) {
        return '';
    }
    
    $post_id = $post->ID;
    $current_user = wp_get_current_user();
    
    // Get current term
    $post_terms = get_the_terms($post_id, 'corg');
    $current_term = !empty($post_terms) && !is_wp_error($post_terms) ? $post_terms[0] : null;
    
    // Check if user is administrator
    $is_admin = current_user_can(DGA_ADMIN_ROLE);
    
    // Generate unique ID for this instance
    $instance_id = 'ckan-org-' . wp_generate_password(6, false);
    
    ob_start();
    ?>
    <div class="ckan-org-wrapper-adm347">
        <div class="ckan-org-display-adm347">
            <!-- Organization label -->
            <div class="ckan-org-label-adm347">
                <span class="ckan-org-prefix-adm347"><?php esc_html_e('Organization:', DGA_TEXT_DOMAIN); ?></span>
                <span class="ckan-org-name-adm347 <?php echo $current_term ? '' : 'empty'; ?>">
                    <?php echo $current_term ? esc_html($current_term->name) : esc_html__('Not assigned', DGA_TEXT_DOMAIN); ?>
                </span>
            </div>
            
            <!-- Edit button - Admin only -->
            <?php if ($is_admin) : ?>
                <button 
                    class="ckan-edit-btn-adm347" 
                    data-post-id="<?php echo esc_attr($post_id); ?>"
                    aria-label="<?php esc_attr_e('Edit organization', DGA_TEXT_DOMAIN); ?>"
                    title="<?php esc_attr_e('Edit organization (Admin only)', DGA_TEXT_DOMAIN); ?>"
                    type=DGA_BUTTON_TYPE
                >
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                    </svg>
                </button>
            <?php endif; ?>
        </div>
        
        <?php if ($is_admin) : ?>
            <!-- Modal for Admin -->
            <div 
                id="<?php echo esc_attr($instance_id); ?>" 
                class="ckan-modal-adm347" 
                role="dialog" 
                aria-labelledby="modal-title-<?php echo esc_attr($instance_id); ?>" 
                aria-hidden="true"
            >
                <div class="ckan-modal-overlay-adm347" data-close="modal"></div>
                <div class="ckan-modal-content-adm347" role="document">
                    <div class="ckan-modal-header-adm347">
                        <h3 id="modal-title-<?php echo esc_attr($instance_id); ?>">
                            <?php esc_html_e('Change Organization', DGA_TEXT_DOMAIN); ?>
                        </h3>
                        <button 
                            class="ckan-modal-close-adm347" 
                            aria-label="<?php esc_attr_e('Close', DGA_TEXT_DOMAIN); ?>"
                            data-close="modal"
                            type=DGA_BUTTON_TYPE
                        >
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="18" y1="6" x2="6" y2="18"></line>
                                <line x1="6" y1="6" x2="18" y2="18"></line>
                            </svg>
                        </button>
                    </div>
                    
                    <div class="ckan-modal-body-adm347">
                        <select 
                            id="org-select-<?php echo esc_attr($instance_id); ?>" 
                            class="ckan-org-select-adm347"
                        >
                            <option value=""><?php esc_html_e('-- Select Organization --', DGA_TEXT_DOMAIN); ?></option>
                        </select>
                    </div>
                    
                    <div class="ckan-modal-footer-adm347">
                        <button 
                            class="ckan-cancel-btn-adm347" 
                            type=DGA_BUTTON_TYPE
                            data-close="modal"
                        >
                            <?php esc_html_e('Cancel', DGA_TEXT_DOMAIN); ?>
                        </button>
                        <button 
                            class="ckan-update-btn-adm347" 
                            type=DGA_BUTTON_TYPE
                        >
                            <?php esc_html_e('Update', DGA_TEXT_DOMAIN); ?>
                        </button>
                    </div>
                </div>
            </div>
        <?php endif; ?>
    </div>
    
    <!-- Notification container -->
    <div class="ckan-notifications-adm347" role="region" aria-live="polite"></div>
    <?php
    
    // Enqueue assets only if admin
    if ($is_admin) {
        wp_enqueue_style(
            'ckan-edit-org-css-adm347', 
            get_stylesheet_directory_uri() . '/css/ckan-edit-org-adm347.css',
            array(),
            '1.1.0'
        );
        
        wp_enqueue_script(
            'ckan-edit-org-js-adm347', 
            get_stylesheet_directory_uri() . '/js/ckan-edit-org-adm347.js', 
            array(), 
            '1.1.0', 
            true
        );
        
        // Localize script
        wp_localize_script('ckan-edit-org-js-adm347', 'ckanOrgAdmin', array(
            'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('ckan_org_admin_nonce_347'),
            'isAdmin' => true,
            'strings' => array(
                'loading' => __('Loading...', DGA_TEXT_DOMAIN),
                'updating' => __('Updating...', DGA_TEXT_DOMAIN),
                'update' => __('Update', DGA_TEXT_DOMAIN),
                DGA_ERROR_STATUS => __('An error occurred', DGA_TEXT_DOMAIN),
                'connectionError' => __('Connection error. Please try again.', DGA_TEXT_DOMAIN),
                'noOrgData' => __('Not assigned', DGA_TEXT_DOMAIN),
                DGA_SUCCESS_STATUS => __('Organization updated successfully', DGA_TEXT_DOMAIN),
                'notAuthorized' => __('Only administrators can edit organizations', DGA_TEXT_DOMAIN),
            )
        ));
    } else {
        // Load minimal CSS for non-admin display
        wp_add_inline_style('wp-block-library', '
            .ckan-org-wrapper-adm347 {
                display: inline-block;
                margin: 10px 0;
            }
            .ckan-org-display-adm347 {
                display: inline-flex;
                align-items: center;
                gap: 8px;
                padding: 6px 12px;
                background: #f5f7fa;
                border-radius: 6px;
                border: 1px solid #e1e5eb;
            }
            .ckan-org-prefix-adm347 {
                color: #6b7280;
                font-size: 14px;
            }
            .ckan-org-name-adm347 {
                font-weight: 600;
                color: #1f2937;
                font-size: 14px;
            }
            .ckan-org-name-adm347.empty {
                color: #9ca3af;
                font-style: italic;
            }
        ');
    }
    
    return ob_get_clean();
}
add_shortcode('ckan_edit_org', 'ckan_edit_org_shortcode_adm347');

// AJAX handler - Get all organization terms (Admin only)
function ckan_get_all_org_terms_adm347() {
    // Verify nonce
    if (!check_ajax_referer('ckan_org_admin_nonce_347', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN)));
        return;
    }
    
    // Check if user is administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Only administrators can access this feature', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // Get all terms
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'corg',
        DGA_HIDE_EMPTY_FIELD => false,
        DGA_ORDERBY_FIELD_VALUE => 'name',
        DGA_ORDER_FIELD => 'ASC'
    ));
    
    // Get current term for the post
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $current_term_id = 0;
    
    if ($post_id > 0) {
        $post_terms = get_the_terms($post_id, 'corg');
        if (!empty($post_terms) && !is_wp_error($post_terms)) {
            $current_term_id = $post_terms[0]->term_id;
        }
    }
    
    $terms_array = array();
    
    if (!empty($terms) && !is_wp_error($terms)) {
        foreach ($terms as $term) {
            $terms_array[] = array(
                'id' => $term->term_id,
                DGA_NAME_FIELD => $term->name,
                'slug' => $term->slug,
                'selected' => ($term->term_id == $current_term_id)
            );
        }
    }
    
    wp_send_json_success(array(
        'terms' => $terms_array,
        'current_term_id' => $current_term_id
    ));
}
add_action('wp_ajax_ckan_get_all_org_terms_adm347', 'ckan_get_all_org_terms_adm347');

// AJAX handler - Update post organization (Admin only)
function ckan_update_post_org_adm347() {
    // Verify nonce
    if (!check_ajax_referer('ckan_org_admin_nonce_347', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN)));
        return;
    }
    
    // Check if user is administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Only administrators can modify organizations', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // Get and validate parameters
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $term_id = isset($_POST[DGA_TERM_ID_FIELD]) ? intval($_POST[DGA_TERM_ID_FIELD]) : 0;
    
    if (!$post_id) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Invalid post ID', DGA_TEXT_DOMAIN)));
        return;
    }
    
    // Update post term
    $result = wp_set_object_terms($post_id, $term_id ? array($term_id) : array(), 'corg');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $result->get_error_message()));
    } else {
        // Get updated term name
        $term_name = '';
        if ($term_id) {
            $term = get_term($term_id, 'corg');
            if (!is_wp_error($term)) {
                $term_name = $term->name;
            }
        }
        
        // Clear any relevant caches
        clean_post_cache($post_id);
        
        // Log the change for audit
        if (defined('WP_DEBUG') && WP_DEBUG) {
            error_log(sprintf(
                'CKAN Org Update: Admin %s (ID: %d) changed post %d organization to term %d (%s)',
                wp_get_current_user()->user_login,
                get_current_user_id(),
                $post_id,
                $term_id,
                $term_name
            ));
        }
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('Organization updated successfully', DGA_TEXT_DOMAIN),
            DGA_TERM_ID_FIELD => $term_id,
            'term_name' => $term_name
        ));
    }
}
add_action('wp_ajax_ckan_update_post_org_adm347', 'ckan_update_post_org_adm347');


/***** ระบบกรองการแสดง Posts ที่มีสถานะ Inactive *****/

// 1. กรอง Posts ในหน้าแสดงผลหลัก (Archive, Home, Search)
function at_filter_inactive_posts_krt456($query) {
    // ทำงานเฉพาะ frontend และ main query
    if (!is_admin() && $query->is_main_query()) {
        
        // ข้ามการกรองถ้าเป็น admin ที่ login แล้ว (optional)
        $show_inactive_for_admin = false; // เปลี่ยนเป็น true ถ้าต้องการให้ admin เห็น
        if ($show_inactive_for_admin && current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            return;
        }
        
        // เพิ่ม meta query เพื่อแสดงเฉพาะ active posts
        $meta_query = $query->get('meta_query') ?: array();
        
        $meta_query[] = array(
            'relation' => 'OR',
            array(
                'key'     => 'at_status',
                'value'   => 'active',
                'compare' => '='
            ),
            array(
                'key'     => 'at_status',
                'compare' => 'NOT EXISTS' // สำหรับ posts ที่ยังไม่มี meta key นี้
            )
        );
        
        $query->set('meta_query', $meta_query);
    }
}
add_action('pre_get_posts', 'at_filter_inactive_posts_krt456', 99);

// 2. ป้องกันการเข้าถึง Single Post ที่ Inactive
function at_restrict_inactive_single_posts_krt456() {
    if (is_singular()) {
        global $post;
        
        // ตรวจสอบสถานะ
        $status = get_post_meta($post->ID, 'at_status', true);
        
        // ถ้าเป็น inactive และไม่ใช่ admin
        if ($status === 'inactive') {
            // Option 1: ให้ admin ยังเข้าถึงได้
            if (current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
                // แสดง admin notice
                add_action('wp_body_open', function() {
                    echo '<div style="background:#ff6b6b;color:white;padding:10px;text-align:center;position:fixed;top:0;left:0;right:0;z-index:9999;">';
                    echo __('⚠️ โพสต์นี้มีสถานะ Inactive - มองเห็นเฉพาะ Admin เท่านั้น', DGA_TEXT_DOMAIN);
                    echo '</div>';
                    echo '<div style="height:40px;"></div>';
                });
                return;
            }
            
            // Option 2: Redirect ไปหน้าอื่น
            wp_redirect(home_url('/404'));
            exit;
            
            // Option 3: แสดง 404 (uncomment ถ้าต้องการใช้)
            // global $wp_query;
            // $wp_query->set_404();
            // status_header(404);
            // get_template_part(404);
            // exit;
        }
    }
}
add_action('template_redirect', 'at_restrict_inactive_single_posts_krt456');

// 3. ซ่อนจาก RSS Feed
function at_filter_inactive_from_feed_krt456($query) {
    if ($query->is_feed()) {
        $meta_query = array(
            'relation' => 'OR',
            array(
                'key'     => 'at_status',
                'value'   => 'active',
                'compare' => '='
            ),
            array(
                'key'     => 'at_status',
                'compare' => 'NOT EXISTS'
            )
        );
        
        $query->set('meta_query', $meta_query);
    }
}
add_action('pre_get_posts', 'at_filter_inactive_from_feed_krt456', 99);

// 4. ซ่อนจาก WordPress Search
function at_filter_search_results_krt456($search, $wp_query) {
    global $wpdb;
    
    if (!is_admin() && $wp_query->is_search() && $wp_query->is_main_query()) {
        // เพิ่มเงื่อนไขตรวจสอบ at_status
        $search .= " AND (
            {$wpdb->posts}.ID IN (
                SELECT post_id FROM {$wpdb->postmeta} 
                WHERE meta_key = 'at_status' AND meta_value = 'active'
            )
            OR {$wpdb->posts}.ID NOT IN (
                SELECT post_id FROM {$wpdb->postmeta} 
                WHERE meta_key = 'at_status'
            )
        )";
    }
    
    return $search;
}
add_filter('posts_search', 'at_filter_search_results_krt456', 10, 2);

// 5. ซ่อนจาก Recent Posts Widget
function at_filter_widget_posts_args_krt456($args) {
    $args['meta_query'] = array(
        'relation' => 'OR',
        array(
            'key'     => 'at_status',
            'value'   => 'active',
            'compare' => '='
        ),
        array(
            'key'     => 'at_status',
            'compare' => 'NOT EXISTS'
        )
    );
    
    return $args;
}
add_filter('widget_posts_args', 'at_filter_widget_posts_args_krt456');

// 6. กรองใน Navigation Menus (optional)
function at_filter_nav_menu_items_krt456($items, $menu, $args) {
    foreach ($items as $key => $item) {
        if ($item->type === DGA_POST_TYPE_FIELD) {
            $status = get_post_meta($item->object_id, 'at_status', true);
            
            if ($status === 'inactive' && !current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
                unset($items[$key]);
            }
        }
    }
    
    return $items;
}
add_filter('wp_get_nav_menu_items', 'at_filter_nav_menu_items_krt456', 10, 3);

// 7. เพิ่ม Admin Notice สำหรับ Inactive Posts ใน Admin
function at_add_admin_notice_for_inactive_krt456() {
    if (is_admin() && isset($_GET['post'])) {
        $post_id = intval($_GET['post']);
        $status = get_post_meta($post_id, 'at_status', true);
        
        if ($status === 'inactive') {
            add_action('admin_notices', function() {
                echo '<div class="notice notice-warning">';
                echo '<p><strong>' . __('⚠️ โพสต์นี้มีสถานะ Inactive', DGA_TEXT_DOMAIN) . '</strong> ';
                echo __('จะไม่แสดงบนหน้าเว็บไซต์สำหรับผู้เยี่ยมชมทั่วไป', DGA_TEXT_DOMAIN) . '</p>';
                echo '</div>';
            });
        }
    }
}
add_action('admin_init', 'at_add_admin_notice_for_inactive_krt456');

// 8. Exclude จาก Sitemap (สำหรับ Yoast SEO)
function at_exclude_inactive_from_sitemap_krt456($excluded, $post_type) {
    global $wpdb;
    
    $inactive_ids = $wpdb->get_col(
        "SELECT post_id FROM {$wpdb->postmeta} 
         WHERE meta_key = 'at_status' AND meta_value = 'inactive'"
    );
    
    return array_merge($excluded, $inactive_ids);
}
add_filter('wpseo_exclude_from_sitemap_by_post_ids', 'at_exclude_inactive_from_sitemap_krt456', 10, 2);

// 9. Helper Function: ตรวจสอบว่า post เป็น active หรือไม่
function at_is_post_active_krt456($post_id = null) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }
    
    $status = get_post_meta($post_id, 'at_status', true);
    
    // ถ้าไม่มี meta key ถือว่าเป็น active
    return empty($status) || $status === 'active';
}

// 10. Shortcode สำหรับแสดงเฉพาะ Active Posts
function at_active_posts_shortcode_krt456($atts) {
    $atts = shortcode_atts(array(
        DGA_POST_TYPE_FIELD => 'post',
        DGA_POSTS_PER_PAGE => 10,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    ), $atts);
    
    $args = array(
        DGA_POST_TYPE_FIELD => $atts[DGA_POST_TYPE_FIELD],
        DGA_POSTS_PER_PAGE => $atts[DGA_POSTS_PER_PAGE],
        DGA_ORDERBY_FIELD_VALUE => $atts[DGA_ORDERBY_FIELD_VALUE],
        DGA_ORDER_FIELD => $atts[DGA_ORDER_FIELD],
        'meta_query' => array(
            'relation' => 'OR',
            array(
                'key' => 'at_status',
                'value' => 'active',
                'compare' => '='
            ),
            array(
                'key' => 'at_status',
                'compare' => 'NOT EXISTS'
            )
        )
    );
    
    $query = new WP_Query($args);
    
    ob_start();
    
    if ($query->have_posts()) {
        echo '<div class="at-active-posts-list">';
        while ($query->have_posts()) {
            $query->the_post();
            ?>
            <article class="at-post-item">
                <h3><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h3>
                <div class="at-post-meta">
                    <?php echo get_the_date(); ?>
                </div>
                <div class="at-post-excerpt">
                    <?php the_excerpt(); ?>
                </div>
            </article>
            <?php
        }
        echo '</div>';
    } else {
        echo '<p>' . __('ไม่พบโพสต์ที่ active', DGA_TEXT_DOMAIN) . '</p>';
    }
    
    wp_reset_postdata();
    
    return ob_get_clean();
}
add_shortcode('active_posts_list', 'at_active_posts_shortcode_krt456');




/***** CKAN HISTORY  *******/

function ckan_history_create_table() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $charset_collate = $wpdb->get_charset_collate();
    
    $sql = "CREATE TABLE IF NOT EXISTS $table_name (
        id bigint(20) NOT NULL AUTO_INCREMENT,
        post_id bigint(20) NOT NULL,
        user_id bigint(20) NOT NULL,
        revision_date datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
        old_title text,
        new_title text,
        old_content longtext,
        new_content longtext,
        PRIMARY KEY (id),
        KEY post_id (post_id),
        KEY user_id (user_id),
        KEY revision_date (revision_date)
    ) $charset_collate;";
    
    require_once ABSPATH . 'wp-admin/includes/upgrade.php';
    dbDelta($sql);
    
    // สร้าง log เพื่อตรวจสอบ
    error_log('CKAN History: ตรวจสอบและสร้างตารางในฐานข้อมูล');
}
// ทำการสร้างตารางเมื่อเปิดใช้งานปลั๊กอิน
register_activation_hook(__FILE__, 'ckan_history_create_table');
// สร้างตารางเมื่อเรียกใช้ฟังก์ชันนี้ (เพื่อให้แน่ใจว่าตารางถูกสร้าง)
add_action('plugins_loaded', 'ckan_history_create_table');

/**
 * ฟังก์ชันสำหรับแสดงระยะเวลาที่ผ่านมาเป็นภาษาไทย
 */
function ckan_time_elapsed_string($datetime) {
    $now = new DateTime;
    $ago = new DateTime($datetime);
    $diff = $now->diff($ago);

    $diff->w = floor($diff->d / 7);
    $diff->d -= $diff->w * 7;

    $string = array(
        'y' => 'ปี',
        'm' => 'เดือน',
        'w' => 'สัปดาห์',
        'd' => 'วัน',
        'h' => 'ชั่วโมง',
        'i' => 'นาที',
        's' => 'วินาที',
    );

    foreach ($string as $k => &$v) {
        if ($diff->$k) {
            $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? '' : '');
        } else {
            unset($string[$k]);
        }
    }

    if (!$string) {
        return 'เมื่อสักครู่';
    }

    $string = array_slice($string, 0, 1);
    return 'เมื่อ ' . implode(', ', $string) . 'ที่แล้ว';
}


/**
 * ฟังก์ชันแสดงประวัติการแก้ไขเพื่อตรวจสอบการทำงาน
 */
function ckan_debug_history($post_id = null) {
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return;
    }
    
    if ($post_id === null) {
        $post_id = get_the_ID();
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_items = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE post_id = %d ORDER BY revision_date DESC",
            $post_id
        )
    );
    
    echo '<div style="background:#f1f1f1; padding:15px; margin:20px 0; border:1px solid #ddd;">';
    echo '<h3>ข้อมูลประวัติการแก้ไขสำหรับตรวจสอบ (เฉพาะผู้ดูแลระบบ)</h3>';
    
    if (empty($history_items)) {
        echo '<p>ไม่พบประวัติการแก้ไขในฐานข้อมูล</p>';
        
        // ตรวจสอบว่าตารางถูกสร้างหรือยัง
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'");
        echo '<p>สถานะตาราง: ' . ($table_exists ? 'มีตารางในฐานข้อมูล' : 'ไม่พบตารางในฐานข้อมูล') . '</p>';
    } else {
        echo '<p>พบประวัติการแก้ไขทั้งหมด: ' . count($history_items) . ' รายการ</p>';
        echo '<ul>';
        foreach ($history_items as $item) {
            $user_info = get_userdata($item->user_id);
            $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
            
            echo '<li>';
            echo 'วันที่: ' . $item->revision_date . ' | ';
            echo 'ผู้แก้ไข: ' . $username . ' | ';
            echo 'หัวข้อใหม่: ' . esc_html(wp_trim_words($item->new_title, 5));
            echo '</li>';
        }
        echo '</ul>';
    }
    
    echo '</div>';
}


/**
 * Shortcode สำหรับตรวจสอบการทำงาน
 */
function ckan_debug_history_shortcode($atts) {
    $atts = shortcode_atts(
        array(
            DGA_POST_ID_FIELD => get_the_ID(),
        ),
        $atts,
        'ckan_debug_history'
    );
    
    ob_start();
    ckan_debug_history($atts[DGA_POST_ID_FIELD]);
    return ob_get_clean();
}
add_shortcode('ckan_debug_history', 'ckan_debug_history_shortcode');


// ตรวจสอบการทำงานของ hook
add_action('init', 'ckan_check_history_table');
function ckan_check_history_table() {
    if (current_user_can(DGA_MANAGE_OPTIONS_CAP) && isset($_GET['check_ckan_history'])) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'ckan_post_history';
        
        // ตรวจสอบว่าตารางมีอยู่หรือไม่
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'");
        
        // ถ้าตารางไม่มีอยู่ ให้สร้างใหม่
        if (!$table_exists) {
            ckan_history_create_table();
            wp_die('สร้างตาราง CKAN History เรียบร้อยแล้ว');
        } else {
            // ตรวจสอบจำนวนรายการในตาราง
            $count = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
            wp_die("ตาราง CKAN History มีอยู่แล้ว และมีข้อมูลทั้งหมด $count รายการ");
        }
    }
}

// เพิ่ม hook ใหม่สำหรับตรวจจับการแก้ไขโพสต์
add_action('edit_post', 'ckan_log_post_edit', 10, 2);
function ckan_log_post_edit($post_id, $post) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    if ($post->post_type !== 'ckan') {
        return;
    }
    
    // บันทึก log เพื่อตรวจสอบ
    error_log('CKAN History: มีการแก้ไขโพสต์ ID: ' . $post_id);
    
    // สร้างข้อมูลใหม่
    $new_data = array(
        DGA_POST_TYPE_FIELD => $post->post_type,
        'post_title' => $post->post_title,
        'post_content' => $post->post_content
    );
    
    // บันทึกประวัติ
    if (function_exists('ckan_save_revision_history')) {
        ckan_save_revision_history($post_id, $new_data);
    }
}

// เพิ่ม shortcode สำหรับตรวจสอบสถานะตาราง
add_shortcode('check_ckan_table', 'check_ckan_table_shortcode');
function check_ckan_table_shortcode() {
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return 'คุณไม่มีสิทธิ์เข้าถึงข้อมูลนี้';
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    // ตรวจสอบว่าตารางมีอยู่หรือไม่
    $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'");
    
    if (!$table_exists) {
        return '<div style="padding:15px;background:#f8d7da;border:1px solid #f5c6cb;color:#721c24;border-radius:4px;">ไม่พบตาราง CKAN History ในฐานข้อมูล</div>';
    }
    
    // ตรวจสอบจำนวนรายการในตาราง
    $count = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
    
    // แสดงข้อมูลล่าสุด 5 รายการ
    $latest_items = $wpdb->get_results("SELECT * FROM $table_name ORDER BY revision_date DESC LIMIT 5");
    
    $output = '<div style="padding:15px;background:#d4edda;border:1px solid #c3e6cb;color:#155724;border-radius:4px;margin-bottom:20px;">';
    $output .= '<p>พบตาราง CKAN History ในฐานข้อมูล ทั้งหมด ' . $count . ' รายการ</p>';
    $output .= '</div>';
    
    if (!empty($latest_items)) {
        $output .= '<div style="padding:15px;background:#f8f9fa;border:1px solid #e9ecef;border-radius:4px;">';
        $output .= '<h4>รายการล่าสุด 5 รายการ</h4>';
        $output .= '<table style="width:100%;border-collapse:collapse;">';
        $output .= '<tr style="background:#f1f1f1;"><th style="padding:8px;border:1px solid #ddd;">ID</th><th style="padding:8px;border:1px solid #ddd;">Post ID</th><th style="padding:8px;border:1px solid #ddd;">User</th><th style="padding:8px;border:1px solid #ddd;">Date</th><th style="padding:8px;border:1px solid #ddd;">Title</th></tr>';
        
        foreach ($latest_items as $item) {
            $user_info = get_userdata($item->user_id);
            $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
            
            $output .= '<tr>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $item->id . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $item->post_id . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $username . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $item->revision_date . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . esc_html(wp_trim_words($item->new_title, 5)) . '</td>';
            $output .= '</tr>';
        }
        
        $output .= '</table>';
        $output .= '</div>';
    }
    
    return $output;
}

// เพิ่ม URL พารามิเตอร์สำหรับบังคับให้สร้างตาราง
add_action('init', 'force_create_ckan_table');
function force_create_ckan_table() {
    if (current_user_can(DGA_MANAGE_OPTIONS_CAP) && isset($_GET['create_ckan_table'])) {
        ckan_history_create_table();
        wp_die('สร้างตาราง CKAN History เรียบร้อยแล้ว กรุณาลองใช้งานอีกครั้ง');
    }
}




/**
 * Hook เข้ากับการบันทึก Post เพื่อเก็บประวัติการแก้ไข
 */
function ckan_save_post_history($post_id, $post, $update) {
    // ตรวจสอบการแก้ไขเบื้องต้น
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }
    
    if (wp_is_post_revision($post_id) || $post->post_status == 'auto-draft') {
        return;
    }
    
    // สร้างข้อมูลที่จำเป็น
    $new_data = array(
        DGA_POST_TYPE_FIELD => $post->post_type,
        'post_title' => $post->post_title,
        'post_content' => $post->post_content
    );
    
    // ดึงข้อมูลเก่าถ้าเป็นการอัพเดต
    $old_data = null;
    if ($update) {
        $old_post = wp_get_post_revision($post_id);
        if ($old_post) {
            $old_data = array(
                'post_title' => $old_post->post_title,
                'post_content' => $old_post->post_content
            );
        }
    }
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_id, $new_data, $old_data);
}
add_action('wp_insert_post', 'ckan_save_post_history', 10, 3);

/**
 * Hook สำหรับ Frontend Forms (ตัวอย่างสำหรับ ACF)
 * หมายเหตุ: ต้องปรับ hook ให้ตรงกับ plugin ที่ใช้สำหรับ frontend editing
 */
function ckan_acf_save_post($post_id) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    $post_type = get_post_type($post_id);
    if ($post_type !== 'ckan') {
        return;
    }
    
    // สร้างข้อมูลใหม่
    $post = get_post($post_id);
    $new_data = array(
        DGA_POST_TYPE_FIELD => $post_type,
        'post_title' => $post->post_title,
        'post_content' => $post->post_content
    );
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_id, $new_data);
}
add_action('acf/save_post', 'ckan_acf_save_post', 20);


/**
 * Hook ทั่วไปสำหรับจับการแก้ไขโพสต์
 */
function ckan_catch_post_update($post_ID, $post_after, $post_before) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    if ($post_after->post_type !== 'ckan') {
        return;
    }
    
    // ข้อมูลใหม่
    $new_data = array(
        DGA_POST_TYPE_FIELD => $post_after->post_type,
        'post_title' => $post_after->post_title,
        'post_content' => $post_after->post_content
    );
    
    // ข้อมูลเก่า
    $old_data = array(
        'post_title' => $post_before->post_title,
        'post_content' => $post_before->post_content
    );
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_ID, $new_data, $old_data);
}
add_action('post_updated', 'ckan_catch_post_update', 10, 3);


/**
 * เพิ่ม API Endpoint สำหรับบันทึกประวัติจาก Frontend ด้วย AJAX
 */
function ckan_save_frontend_history() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_frontend_nonce', 'nonce');
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $new_title = isset($_POST['new_title']) ? sanitize_text_field($_POST['new_title']) : '';
    $new_content = isset($_POST['new_content']) ? wp_kses_post($_POST['new_content']) : '';
    
    if (!$post_id) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบ Post ID'));
        return;
    }
    
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    $post_type = get_post_type($post_id);
    if ($post_type !== 'ckan') {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่ใช่ประเภทโพสต์ที่รองรับ'));
        return;
    }
    
    // ดึงข้อมูลเก่า
    $old_post = get_post($post_id);
    
    // สร้างข้อมูลใหม่
    $new_data = array(
        DGA_POST_TYPE_FIELD => $post_type,
        'post_title' => $new_title,
        'post_content' => $new_content
    );
    
    // ข้อมูลเก่า
    $old_data = array(
        'post_title' => $old_post->post_title,
        'post_content' => $old_post->post_content
    );
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_id, $new_data, $old_data);
    
    wp_send_json_success(array(DGA_MESSAGE_KEY => 'บันทึกประวัติการแก้ไขเรียบร้อยแล้ว'));
}
add_action('wp_ajax_ckan_save_frontend_history', 'ckan_save_frontend_history');

/**
 * Shortcode สำหรับแสดงประวัติการแก้ไข
 */
function ckan_history_shortcode($atts) {
    $atts = shortcode_atts(
        array(
            DGA_POST_ID_FIELD => get_the_ID(),
            'limit' => 5
        ),
        $atts,
        'ckan_history'
    );
    
    $post_id = intval($atts[DGA_POST_ID_FIELD]);
    $limit = intval($atts['limit']);
    
    // ตรวจสอบว่า post นี้เป็น type "ckan" หรือไม่
    $post_type = get_post_type($post_id);
    if ($post_type !== 'ckan') {
        return '<div class="ckan-history-error">ไม่พบข้อมูลประวัติการแก้ไข</div>';
    }
    
    // ดึงข้อมูลประวัติการแก้ไข
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_items = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE post_id = %d ORDER BY revision_date DESC LIMIT %d",
            $post_id,
            $limit
        )
    );
    
    // ตรวจสอบจำนวนรายการทั้งหมด
    $total_items = $wpdb->get_var(
        $wpdb->prepare(
            "SELECT COUNT(*) FROM $table_name WHERE post_id = %d",
            $post_id
        )
    );
    
    // ถ้าไม่มีประวัติการแก้ไข
    if (empty($history_items)) {
        return '<div class="ckan-history-container"><p>ยังไม่มีประวัติการแก้ไข</p></div>';
    }
    
    // เริ่มสร้าง output
    $output = '<div class="ckan-history-container" data-post-id="' . esc_attr($post_id) . '">';
    $output .= '<h3 class="ckan-history-title">ประวัติการแก้ไข</h3>';
    $output .= '<div class="ckan-history-list">';
    
    // สร้างรายการประวัติการแก้ไข
    foreach ($history_items as $item) {
        $user_info = get_userdata($item->user_id);
        $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
        $date_time = mysql2date(DGA_DATETIME_FORMAT_TH, $item->revision_date);
        $time_elapsed = ckan_time_elapsed_string($item->revision_date);
        
        $output .= '<div class="ckan-history-item" data-history-id="' . esc_attr($item->id) . '">';
        $output .= '<div class="ckan-history-meta">';
        $output .= '<span class="ckan-history-user"><i class="dashicons dashicons-admin-users"></i> ' . esc_html($username) . '</span>';
        $output .= '<span class="ckan-history-date"><i class="dashicons dashicons-calendar-alt"></i> ' . esc_html($date_time) . '</span>';
        $output .= '<span class="ckan-history-elapsed"><i class="dashicons dashicons-clock"></i> ' . esc_html($time_elapsed) . '</span>';
        $output .= '</div>';
        $output .= '<div class="ckan-history-title-changed">';
        $output .= '<h4>' . esc_html($item->new_title) . '</h4>';
        $output .= '</div>';
        
        // เพิ่มการแสดงตัวอย่างการเปลี่ยนแปลงเนื้อหาแบบย่อ
        $content_preview = wp_trim_words(strip_tags($item->new_content), 20, '...');
        $output .= '<div class="ckan-history-content-preview">' . esc_html($content_preview) . '</div>';
        
        $output .= '<button class="ckan-view-diff-btn" data-history-id="' . esc_attr($item->id) . '">';
        $output .= '<i class="dashicons dashicons-visibility"></i> ดูความเปลี่ยนแปลง';
        $output .= '</button>';
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    // ถ้ามีรายการมากกว่าที่กำหนด แสดงปุ่ม "ดูทั้งหมด"
    if ($total_items > $limit) {
        $output .= '<button class="ckan-view-all-history-btn" data-post-id="' . esc_attr($post_id) . '">';
        $output .= 'ดูประวัติทั้งหมด (' . esc_html($total_items) . ' รายการ)';
        $output .= '</button>';
    }
    
    // เพิ่ม Modal สำหรับแสดงประวัติทั้งหมด
    $output .= '<div id="ckan-history-modal" class="ckan-modal">';
    $output .= '<div class="ckan-modal-content">';
    $output .= '<span class="ckan-modal-close">&times;</span>';
    $output .= '<h3>ประวัติการแก้ไขทั้งหมด</h3>';
    $output .= '<div class="ckan-modal-history-list">';
    // ส่วนนี้จะถูกเติมด้วย JavaScript/AJAX
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
    
    // เพิ่ม Modal สำหรับแสดงความเปลี่ยนแปลง
    $output .= '<div id="ckan-diff-modal" class="ckan-modal">';
    $output .= '<div class="ckan-modal-content">';
    $output .= '<span class="ckan-modal-close">&times;</span>';
    $output .= '<h3>ความเปลี่ยนแปลง</h3>';
    $output .= '<div class="ckan-diff-container">';
    // ส่วนนี้จะถูกเติมด้วย JavaScript/AJAX
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
    
    $output .= '</div>';
    
    // เรียกใช้ไฟล์ CSS และ JavaScript ที่จำเป็น
    wp_enqueue_style('dashicons');
    wp_enqueue_style('ckan-history-css', get_stylesheet_directory_uri() . '/css/ckan-history.css');
    wp_enqueue_script('ckan-history-js', get_stylesheet_directory_uri() . '/js/ckan-history.js', array(DGA_JQUERY_HANDLE), null, true);
    
    // ส่งข้อมูลที่จำเป็นไปยัง JavaScript
    wp_localize_script('ckan-history-js', 'ckanHistoryData', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_history_nonce')
    ));
    
    return $output;
}
add_shortcode('ckan_history', 'ckan_history_shortcode');

/**
 * AJAX handler สำหรับดึงประวัติการแก้ไขทั้งหมด
 */
function ckan_get_all_history() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_history_nonce', 'nonce');
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    
    if (!$post_id) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบ Post ID'));
        return;
    }
    
    // ดึงประวัติการแก้ไขทั้งหมด
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_items = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE post_id = %d ORDER BY revision_date DESC",
            $post_id
        )
    );
    
    $items = array();
    
    foreach ($history_items as $item) {
        $user_info = get_userdata($item->user_id);
        $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
        $time_elapsed = ckan_time_elapsed_string($item->revision_date);
        
        // ตรวจสอบการเปลี่ยนแปลงของเนื้อหา
        $content_changed = ($item->old_content != $item->new_content);
        $title_changed = ($item->old_title != $item->new_title);
        
        // สร้างข้อความสรุปการเปลี่ยนแปลง
        $change_summary = '';
        if ($title_changed && $content_changed) {
            $change_summary = 'แก้ไขหัวข้อและเนื้อหา';
        } elseif ($title_changed) {
            $change_summary = 'แก้ไขหัวข้อ';
        } elseif ($content_changed) {
            $change_summary = 'แก้ไขเนื้อหา';
        }
        
        // สร้างตัวอย่างเนื้อหาที่เปลี่ยนแปลง
        $content_preview = wp_trim_words(strip_tags($item->new_content), 20, '...');
        
        $items[] = array(
            'id' => $item->id,
            'user_id' => $item->user_id,
            'username' => $username,
            'date' => mysql2date(DGA_DATETIME_FORMAT_TH, $item->revision_date),
            'time_elapsed' => $time_elapsed,
            DGA_TITLE_FIELD => $item->new_title,
            'change_summary' => $change_summary,
            'content_preview' => $content_preview
        );
    }
    
    wp_send_json_success(array(
        'items' => $items
    ));
}
add_action('wp_ajax_ckan_get_all_history', 'ckan_get_all_history');
add_action('wp_ajax_nopriv_ckan_get_all_history', 'ckan_get_all_history');

/**
 * AJAX handler สำหรับดึงข้อมูลความเปลี่ยนแปลง
 */
function ckan_get_revision_diff() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_history_nonce', 'nonce');
    
    $history_id = isset($_POST['history_id']) ? intval($_POST['history_id']) : 0;
    
    if (!$history_id) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบ History ID'));
        return;
    }
    
    // ดึงข้อมูลความเปลี่ยนแปลง
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_item = $wpdb->get_row(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE id = %d",
            $history_id
        )
    );
    
    if (!$history_item) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบข้อมูลประวัติการแก้ไข'));
        return;
    }
    
    // ดึงข้อมูลผู้ใช้
    $user_info = get_userdata($history_item->user_id);
    $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
    $time_elapsed = ckan_time_elapsed_string($history_item->revision_date);
    
    // ตรวจสอบการเปลี่ยนแปลงของเนื้อหา
    $content_changed = ($history_item->old_content != $history_item->new_content);
    $title_changed = ($history_item->old_title != $history_item->new_title);
    
    // สร้างข้อความสรุปการเปลี่ยนแปลง
    $change_summary = '';
    if ($title_changed && $content_changed) {
        $change_summary = 'แก้ไขหัวข้อและเนื้อหา';
    } elseif ($title_changed) {
        $change_summary = 'แก้ไขหัวข้อ';
    } elseif ($content_changed) {
        $change_summary = 'แก้ไขเนื้อหา';
    }
    
    // เตรียมข้อมูลสำหรับส่งกลับ
    $diff_data = array(
        'id' => $history_item->id,
        DGA_POST_ID_FIELD => $history_item->post_id,
        'user_id' => $history_item->user_id,
        'username' => $username,
        'date' => mysql2date(DGA_DATETIME_FORMAT_TH, $history_item->revision_date),
        'time_elapsed' => $time_elapsed,
        'old_title' => $history_item->old_title,
        'new_title' => $history_item->new_title,
        'old_content' => $history_item->old_content,
        'new_content' => $history_item->new_content,
        'change_summary' => $change_summary
    );
    
    wp_send_json_success(array(
        'diff' => $diff_data
    ));
}
add_action('wp_ajax_ckan_get_revision_diff', 'ckan_get_revision_diff');
add_action('wp_ajax_nopriv_ckan_get_revision_diff', 'ckan_get_revision_diff');

/**
 * ฟังก์ชันสำหรับบันทึกประวัติการแก้ไข CKAN
 * รองรับทั้งการแก้ไขผ่าน backend และ frontend
 */
function ckan_save_revision_history($post_id, $new_data, $old_data = null) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    if (!isset($new_data[DGA_POST_TYPE_FIELD]) || $new_data[DGA_POST_TYPE_FIELD] !== 'ckan') {
        return;
    }
    
    // ถ้าไม่มีข้อมูลเก่า ให้ดึงจากฐานข้อมูล
    if ($old_data === null) {
        $old_post = get_post($post_id, ARRAY_A);
    } else {
        $old_post = $old_data;
    }
    
    // ตรวจสอบการเปลี่ยนแปลง
    $title_changed = ($old_post && isset($old_post['post_title']) && isset($new_data['post_title']) && 
                      $old_post['post_title'] !== $new_data['post_title']);
    $content_changed = ($old_post && isset($old_post['post_content']) && isset($new_data['post_content']) && 
                        $old_post['post_content'] !== $new_data['post_content']);
    
    // บันทึกประวัติถ้ามีการเปลี่ยนแปลง
    if ($title_changed || $content_changed) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'ckan_post_history';
        
        $wpdb->insert(
            $table_name,
            array(
                DGA_POST_ID_FIELD => $post_id,
                'user_id' => get_current_user_id(),
                'revision_date' => current_time('mysql'),
                'old_title' => $old_post ? $old_post['post_title'] : '',
                'new_title' => $new_data['post_title'],
                'old_content' => $old_post ? $old_post['post_content'] : '',
                'new_content' => $new_data['post_content']
            )
        );
        
        // สร้าง log เพื่อตรวจสอบ (สามารถเอาออกได้เมื่อแก้ไขเสร็จแล้ว)
        error_log('CKAN History: บันทึกประวัติการแก้ไข สำหรับโพสต์ ID: ' . $post_id);
    }
}



/***** CKAN CONSENT SWITCH ******/

function ckan_consent_yns423_shortcode($atts) {
    // Enqueue required scripts and styles from ChildTheme
    wp_enqueue_style('ckan-consent-css-yns423', get_stylesheet_directory_uri() . '/css/ckan-consent-yns423.css', array(), DGA_THEME_VERSION);
    wp_enqueue_script('ckan-consent-js-yns423', get_stylesheet_directory_uri() . '/js/ckan-consent-yns423.js', array(DGA_JQUERY_HANDLE), DGA_THEME_VERSION, true);
    
    // Localize script for AJAX URL and nonce
    wp_localize_script('ckan-consent-js-yns423', 'ckanConsentData', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan-consent-nonce-yns423'),
    ));
    
    // Get current post ID
    $post_id = get_the_ID();
    
    // Check edit permissions
    if (!current_user_can('edit_post', $post_id)) {
        return '<div class="ckan-consent-notice-yns423">' . __('คุณไม่มีสิทธิ์เปลี่ยนสถานะข้อมูลนี้', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    // Get current post object
    $post = get_post($post_id);
    
    // Get current terms
    $current_terms = wp_get_post_terms($post_id, 'cgov', array(DGA_FIELDS_PARAMETER => 'names'));
    
    // Check consent status based on BOTH term and post status
    // Consent = published AND ข้อมูลสาธารณะ
    // No Consent = pending OR ข้อมูลลับ
    $is_secret = in_array('ข้อมูลลับ', $current_terms);
    $is_pending = ($post->post_status === 'pending');
    
    // Determine consent state
    $has_consent = ($post->post_status === DGA_PUBLISH_STATUS && !$is_secret);
    
    // Set class based on current state
    $toggle_class = $has_consent ? 'is-consent' : 'is-no-consent';
    
    // Debug info (comment out in production)
    $debug_info = '<!-- Debug: Post Status=' . $post->post_status . ', Is Secret=' . ($is_secret ? 'true' : 'false') . ', Has Consent=' . ($has_consent ? 'true' : 'false') . ' -->';
    
    // Create HTML for toggle switch
    $output = $debug_info . '
    <div class="ckan-consent-toggle-container-yns423" data-post-id="' . esc_attr($post_id) . '">
        <div class="ckan-consent-toggle-wrapper-yns423">
            <div class="ckan-consent-label-yns423 consent-label-yns423">' . __('ยินยอม (ON)', DGA_TEXT_DOMAIN) . '</div>
            <div class="ckan-consent-toggle-yns423 ' . $toggle_class . '" data-current-consent="' . ($has_consent ? 'true' : 'false') . '">
                <div class="ckan-consent-toggle-slider-yns423"></div>
            </div>
            <div class="ckan-consent-label-yns423 no-consent-label-yns423">' . __('ไม่ยินยอม (OFF)', DGA_TEXT_DOMAIN) . '</div>
        </div>
        <div class="ckan-consent-status-yns423">
            <span class="status-text-yns423">' . ($has_consent ? __('สถานะ: ยินยอม', DGA_TEXT_DOMAIN) : __('สถานะ: ไม่ยินยอม', DGA_TEXT_DOMAIN)) . '</span>
            <span class="status-icon-yns423"></span>
        </div>
    </div>';
    
    return $output;
}
add_shortcode('ckan_consent', 'ckan_consent_yns423_shortcode');

/**
 * AJAX handler for updating consent status
 */
function ckan_consent_update_yns423() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan-consent-nonce-yns423')) {
        wp_send_json_error(__('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN));
        die();
    }
    
    // Get post ID and new consent state
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $give_consent = isset($_POST['give_consent']) && $_POST['give_consent'] === 'true';
    
    // Debug log
    error_log('CKAN Consent Update - Post ID: ' . $post_id . ', Give Consent: ' . ($give_consent ? 'true' : 'false'));
    
    if ($post_id <= 0) {
        wp_send_json_error(__('ID โพสต์ไม่ถูกต้อง', DGA_TEXT_DOMAIN));
        die();
    }
    
    // Check edit permissions
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(__('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้', DGA_TEXT_DOMAIN));
        die();
    }
    
    $success = true;
    $errors = array();
    
    // Update based on consent state
    if ($give_consent) {
        // User gives consent - make public
        
        // 1. Update taxonomy to ข้อมูลสาธารณะ
        $term_result = wp_set_object_terms($post_id, 'ข้อมูลสาธารณะ', 'cgov', false);
        if (is_wp_error($term_result)) {
            $errors[] = 'Term update failed: ' . $term_result->get_error_message();
            $success = false;
        }
        
        // 2. Update post status to publish
        $post_data = array(
            'ID' => $post_id,
            DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
        );
        $status_result = wp_update_post($post_data, true);
        
        if (is_wp_error($status_result)) {
            $errors[] = 'Status update failed: ' . $status_result->get_error_message();
            $success = false;
        }
        
    } else {
        // User doesn't give consent - make private/pending
        
        // 1. Update taxonomy to ข้อมูลลับ
        $term_result = wp_set_object_terms($post_id, 'ข้อมูลลับ', 'cgov', false);
        if (is_wp_error($term_result)) {
            $errors[] = 'Term update failed: ' . $term_result->get_error_message();
            $success = false;
        }
        
        // 2. Update post status to pending
        $post_data = array(
            'ID' => $post_id,
            DGA_POST_STATUS_FIELD => 'pending'
        );
        $status_result = wp_update_post($post_data, true);
        
        if (is_wp_error($status_result)) {
            $errors[] = 'Status update failed: ' . $status_result->get_error_message();
            $success = false;
        }
    }
    
    // Clear any caches
    clean_post_cache($post_id);
    
    // Get updated post to confirm changes
    $updated_post = get_post($post_id);
    $updated_terms = wp_get_post_terms($post_id, 'cgov', array(DGA_FIELDS_PARAMETER => 'names'));
    
    if ($success) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('อัปเดตสถานะการยินยอมเรียบร้อย', DGA_TEXT_DOMAIN),
            'give_consent' => $give_consent,
            DGA_POST_STATUS_FIELD => $updated_post->post_status,
            'term' => $give_consent ? 'ข้อมูลสาธารณะ' : 'ข้อมูลลับ',
            'current_terms' => $updated_terms
        ));
    } else {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาดในการอัปเดต', DGA_TEXT_DOMAIN),
            'errors' => $errors,
            'debug' => array(
                DGA_POST_STATUS_FIELD => $updated_post->post_status,
                'terms' => $updated_terms
            )
        ));
    }
    
    die();
}
add_action('wp_ajax_ckan_consent_update_yns423', 'ckan_consent_update_yns423');


/**** EGP FILE DOWNLOAD *****/

// ลงทะเบียน shortcode และเรียกใช้ไฟล์ JS, CSS
function egp_file_download_init() {
    // ลงทะเบียน shortcode
    add_shortcode('egp_file_download', 'egp_file_download_shortcode');
    
    // เรียกใช้ไฟล์ JS และ CSS
    wp_enqueue_style('dashicons'); // สำหรับไอคอนของ WordPress
    wp_enqueue_media(); // สำหรับการอัพโหลดไฟล์ผ่าน Media Library
    wp_enqueue_script('egp-file-download-js', get_stylesheet_directory_uri() . '/js/egp-file-download.js', array(DGA_JQUERY_HANDLE), '1.0.4', true);
    wp_enqueue_style('egp-file-download-css', get_stylesheet_directory_uri() . '/css/egp-file-download.css', array(), '1.0.4');
    
    // ส่งข้อมูล AJAX URL ไปยัง JavaScript
    wp_localize_script('egp-file-download-js', 'egp_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('egp_file_download_nonce'),
        'current_date' => thai_date(time())
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'egp_file_download_init');

// ฟังก์ชั่นแปลงวันที่เป็นรูปแบบ พ.ศ.
function thai_date($timestamp) {
    $thai_month_arr = array(
        "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน",
        "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
    );
    
    $thai_date = date("j", $timestamp);
    $thai_month = $thai_month_arr[date("m", $timestamp) - 1];
    $thai_year = date("Y", $timestamp) + 543;
    
    return "$thai_date $thai_month $thai_year";
}

// ฟังก์ชั่น shortcode
function egp_file_download_shortcode($atts) {
    // ค่าเริ่มต้นของ attribute
    $atts = shortcode_atts(array(
        DGA_POST_ID_FIELD => get_the_ID(), // ใช้โพสต์ปัจจุบันถ้าไม่ได้ระบุ
    ), $atts);
    
    $post_id = $atts[DGA_POST_ID_FIELD];
    
    // ตรวจสอบว่าโพสต์มีอยู่จริงและเป็นประเภทที่ถูกต้อง
    if (!$post_id || get_post_type($post_id) !== 'egp') {
        return '<div class="egp-error-message">ไม่พบข้อมูลหรือประเภทโพสต์ไม่ถูกต้อง</div>';
    }
    
    // ดึงข้อมูล repeater field
    $files = get_field('egp_files', $post_id);
    
    // สร้าง ID เฉพาะสำหรับ instance นี้
    $unique_id = uniqid();
    $container_id = 'egp-file-download-' . $unique_id;
    $modal_id = 'egp-file-modal-' . $unique_id;
    
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการแก้ไขโพสต์นี้หรือไม่
    $can_edit = current_user_can('edit_post', $post_id);
    
    // เริ่มการเก็บ output
    ob_start();
    ?>
    <div class="egp-file-container" id="<?php echo esc_attr($container_id); ?>" data-post-id="<?php echo esc_attr($post_id); ?>">
        <div class="egp-file-header">
            <h3 class="egp-file-title">เอกสาร/ไฟล์แนบ</h3>
            <?php if ($can_edit) : ?>
            <button type=DGA_BUTTON_TYPE class="egp-add-file-btn">
                <span class="dashicons dashicons-plus-alt"></span> แนบไฟล์เพิ่ม
            </button>
            <?php endif; ?>
        </div>
        
        <div class="egp-file-table-container">
            <table class="egp-file-table">
                <thead>
                    <tr>
                        <th class="egp-file-name">ชื่อไฟล์</th>
                        <th class="egp-file-date">วันที่อัพเดต</th>
                        <th class="egp-file-action">ดาวน์โหลด</th>
                        <?php if ($can_edit) : ?>
                        <th class="egp-file-manage">จัดการ</th>
                        <?php endif; ?>
                    </tr>
                </thead>
                <tbody>
                    <?php
                    // ตรวจสอบว่ามีข้อมูลหรือไม่
                    if ($files && is_array($files) && count($files) > 0) {
                        foreach ($files as $index => $file) {
                            if (isset($file['egp_rp_name']) && isset($file['egp_rp_date']) && isset($file['egp_rp_link'])) {
                                // เข้ารหัส URL ของไฟล์เพื่อความปลอดภัย
                                $encoded_url = base64_encode($file['egp_rp_link']);
                                $download_url = '?egp_download=' . $encoded_url;
                                ?>
                                <tr data-index="<?php echo esc_attr($index); ?>">
                                    <td class="egp-file-name">
                                        <span class="egp-file-icon">
                                            <?php echo egp_get_file_icon($file['egp_rp_link']); ?>
                                        </span>
                                        <?php echo esc_html($file['egp_rp_name']); ?>
                                    </td>
                                    <td class="egp-file-date"><?php echo esc_html($file['egp_rp_date']); ?></td>
                                    <td class="egp-file-action">
                                        <a href="<?php echo esc_url($download_url); ?>" class="egp-download-button">
                                            <span class="dashicons dashicons-download"></span>
                                            <span class="egp-btn-text">ดาวน์โหลด</span>
                                        </a>
                                    </td>
                                    <?php if ($can_edit) : ?>
                                    <td class="egp-file-manage">
                                        <button type=DGA_BUTTON_TYPE class="egp-edit-file-btn" data-index="<?php echo esc_attr($index); ?>" 
                                            data-name="<?php echo esc_attr($file['egp_rp_name']); ?>"
                                            data-date="<?php echo esc_attr($file['egp_rp_date']); ?>"
                                            data-url="<?php echo esc_attr($file['egp_rp_link']); ?>">
                                            <span class="dashicons dashicons-edit"></span>
                                        </button>
                                        <button type=DGA_BUTTON_TYPE class="egp-delete-file-btn" data-index="<?php echo esc_attr($index); ?>">
                                            <span class="dashicons dashicons-trash"></span>
                                        </button>
                                    </td>
                                    <?php endif; ?>
                                </tr>
                                <?php
                            }
                        }
                    } else {
                        // ไม่พบข้อมูล
                        $colspan = $can_edit ? 4 : 3;
                        ?>
                        <tr class="egp-no-files-row">
                            <td colspan="<?php echo esc_attr($colspan); ?>" class="egp-no-files">
                                <div class="egp-empty-state">
                                    <span class="dashicons dashicons-media-document"></span>
                                    <p>ไม่พบไฟล์เอกสาร</p>
                                </div>
                            </td>
                        </tr>
                        <?php
                    }
                    ?>
                </tbody>
            </table>
        </div>
    </div>
    
    <?php if ($can_edit) : ?>
    <!-- Modal Popup สำหรับเพิ่ม/แก้ไขไฟล์ -->
    <div class="egp-modal" id="<?php echo esc_attr($modal_id); ?>">
        <div class="egp-modal-overlay"></div>
        <div class="egp-modal-container">
            <div class="egp-modal-header">
                <h3 class="egp-modal-title">เพิ่มไฟล์เอกสาร</h3>
                <button type=DGA_BUTTON_TYPE class="egp-modal-close">
                    <span class="dashicons dashicons-no-alt"></span>
                </button>
            </div>
            <div class="egp-modal-body">
                <form id="egp-file-form-<?php echo esc_attr($unique_id); ?>" class="egp-file-form" enctype="multipart/form-data">
                    <input type="hidden" name="action" value="egp_save_file">
                    <input type="hidden" name="security" value="<?php echo wp_create_nonce('egp_file_download_nonce'); ?>">
                    <input type="hidden" name="post_id" value="<?php echo esc_attr($post_id); ?>">
                    <input type="hidden" name="file_index" value="-1">
                    <input type="hidden" name="file_url" value="">
                    <input type="hidden" name="upload_type" value="direct">
                    
                    <div class="egp-form-group">
                        <label for="egp-file-name-<?php echo esc_attr($unique_id); ?>">ชื่อไฟล์ <span class="required">*</span></label>
                        <input type="text" id="egp-file-name-<?php echo esc_attr($unique_id); ?>" name="file_name" required>
                    </div>
                    
                    <div class="egp-form-group">
                        <label for="egp-file-date-<?php echo esc_attr($unique_id); ?>">วันที่อัพเดต <span class="required">*</span></label>
                        <input type="text" id="egp-file-date-<?php echo esc_attr($unique_id); ?>" name="file_date" value="<?php echo thai_date(time()); ?>" required>
                    </div>
                    
                    <div class="egp-form-group">
                        <label>ไฟล์ <span class="required">*</span></label>
                        <div class="egp-upload-tabs">
                            <div class="egp-tab-buttons">
                                <button type=DGA_BUTTON_TYPE class="egp-tab-btn active" data-tab="upload">อัพโหลดไฟล์</button>
                                <button type=DGA_BUTTON_TYPE class="egp-tab-btn" data-tab="media">Media Library</button>
                            </div>
                            
                            <div class="egp-tab-content active" data-tab="upload">
                                <div class="egp-file-drop-area">
                                    <span class="egp-drop-instructions">
                                        <span class="dashicons dashicons-upload"></span>
                                        <span>ลากไฟล์มาที่นี่หรือ</span>
                                    </span>
                                    <input type="file" name="file_upload" class="egp-file-input" required>
                                    <button type=DGA_BUTTON_TYPE class="egp-browse-btn">เลือกไฟล์</button>
                                </div>
                                <div class="egp-file-name-display"></div>
                            </div>
                            
                            <div class="egp-tab-content" data-tab="media">
                                <div class="egp-media-select-area">
                                    <button type=DGA_BUTTON_TYPE class="egp-select-media-btn">
                                        <span class="dashicons dashicons-admin-media"></span>
                                        เลือกไฟล์จาก Media Library
                                    </button>
                                </div>
                                <div class="egp-file-preview"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="egp-form-actions">
                        <button type=DGA_BUTTON_TYPE class="egp-cancel-btn">ยกเลิก</button>
                        <button type=DGA_SUBMIT_TYPE class="egp-save-btn">บันทึก</button>
                    </div>
                </form>
                <div class="egp-debug-info" style="display: none;"></div>
            </div>
        </div>
    </div>
    <?php endif; ?>
    
    <?php
    
    // ส่งคืนเนื้อหาที่เก็บไว้
    return ob_get_clean();
}

// ฟังก์ชั่นสำหรับแสดงไอคอนตามประเภทไฟล์
function egp_get_file_icon($file_url) {
    $file_ext = strtolower(pathinfo($file_url, PATHINFO_EXTENSION));
    
    $icon = '<span class="dashicons dashicons-media-default"></span>';
    
    switch ($file_ext) {
        case 'pdf':
            $icon = '<span class="dashicons dashicons-pdf"></span>';
            break;
        case 'doc':
        case 'docx':
            $icon = '<span class="dashicons dashicons-media-document"></span>';
            break;
        case 'xls':
        case 'xlsx':
            $icon = '<span class="dashicons dashicons-spreadsheet"></span>';
            break;
        case 'ppt':
        case 'pptx':
            $icon = '<span class="dashicons dashicons-slides"></span>';
            break;
        case 'jpg':
        case 'jpeg':
        case 'png':
        case 'gif':
            $icon = '<span class="dashicons dashicons-format-image"></span>';
            break;
        case 'zip':
        case 'rar':
        case '7z':
            $icon = '<span class="dashicons dashicons-archive"></span>';
            break;
    }
    
    return $icon;
}

// AJAX endpoint สำหรับเพิ่ม/แก้ไขไฟล์
function egp_save_file() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('egp_file_download_nonce', 'security');
    
    $response = array(DGA_SUCCESS_STATUS => false, DGA_MESSAGE_KEY => '', 'debug' => array());
    
    try {
        // รับข้อมูลจาก AJAX request
        $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
        $file_index = isset($_POST['file_index']) ? intval($_POST['file_index']) : -1;
        $file_name = isset($_POST['file_name']) ? sanitize_text_field($_POST['file_name']) : '';
        $file_date = isset($_POST['file_date']) ? sanitize_text_field($_POST['file_date']) : '';
        $upload_type = isset($_POST['upload_type']) ? sanitize_text_field($_POST['upload_type']) : 'direct';
        
        $response['debug']['post_data'] = array(
            DGA_POST_ID_FIELD => $post_id,
            'file_index' => $file_index,
            'file_name' => $file_name,
            'file_date' => $file_date,
            'upload_type' => $upload_type
        );
        
        // ตรวจสอบสิทธิ์ในการแก้ไขโพสต์
        if (!current_user_can('edit_post', $post_id)) {
            throw new Exception('คุณไม่มีสิทธิ์ในการแก้ไขข้อมูลนี้');
        }
        
        // ตรวจสอบความถูกต้องของข้อมูลพื้นฐาน
        if (empty($post_id) || empty($file_name) || empty($file_date)) {
            throw new Exception('ข้อมูลไม่ครบถ้วน');
        }
        
        $file_url = '';
        
        // จัดการกับไฟล์ตามประเภทการอัพโหลด
        if ($upload_type === 'direct' && isset($_FILES['file_upload']) && !empty($_FILES['file_upload']['name'])) {
            // อัพโหลดไฟล์ใหม่
            if (!function_exists('wp_handle_upload')) {
                require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
            }
            
            $response['debug']['upload_process'] = 'Direct upload started';
            $response['debug']['files_data'] = $_FILES;
            
            $uploadedfile = $_FILES['file_upload'];
            $upload_overrides = array('test_form' => false);
            
            $movefile = wp_handle_upload($uploadedfile, $upload_overrides);
            
            $response['debug']['upload_result'] = $movefile;
            
            if ($movefile && !isset($movefile[DGA_ERROR_STATUS])) {
                // อัพโหลดสำเร็จ
                $file_url = $movefile['url'];
                
                // เพิ่มไฟล์ลงใน Media Library
                if (!function_exists('wp_generate_attachment_metadata')) {
                    require_once ABSPATH . 'wp-admin/includes/image.php';
                }
                if (!function_exists('wp_insert_attachment')) {
                    require_once ABSPATH . 'wp-admin/includes/media.php';
                }
                
                $filename = $uploadedfile['name'];
                $wp_filetype = wp_check_filetype($filename, null);
                
                $attachment = array(
                    'post_mime_type' => $wp_filetype['type'],
                    'post_title' => sanitize_file_name($filename),
                    'post_content' => '',
                    DGA_POST_STATUS_FIELD => 'inherit'
                );
                
                $attachment_id = wp_insert_attachment($attachment, $movefile['file'], $post_id);
                $response['debug']['attachment_id'] = $attachment_id;
                
                if (is_wp_error($attachment_id)) {
                    throw new Exception('ไม่สามารถเพิ่มไฟล์ลงใน Media Library ได้: ' . $attachment_id->get_error_message());
                }
                
                // ถ้าเป็นรูปภาพให้สร้าง thumbnail
                if (strpos($wp_filetype['type'], 'image') !== false) {
                    $attachment_data = wp_generate_attachment_metadata($attachment_id, $movefile['file']);
                    wp_update_attachment_metadata($attachment_id, $attachment_data);
                }
            } else {
                // อัพโหลดไม่สำเร็จ
                $error_message = isset($movefile[DGA_ERROR_STATUS]) ? $movefile[DGA_ERROR_STATUS] : 'เกิดข้อผิดพลาดในการอัพโหลดไฟล์';
                throw new Exception($error_message);
            }
        } else if ($upload_type === 'media') {
            // ใช้ URL ที่มีอยู่แล้ว (จาก Media Library)
            $file_url = isset($_POST['file_url']) ? esc_url_raw($_POST['file_url']) : '';
            $response['debug']['media_url'] = $file_url;
            
            if (empty($file_url)) {
                throw new Exception('URL ไฟล์ไม่ถูกต้อง');
            }
        } else {
            throw new Exception('ไม่ได้ระบุไฟล์ที่ต้องการอัพโหลดหรือเลือกจาก Media Library');
        }
        
        // ตรวจสอบว่า file_url ไม่ว่าง
        if (empty($file_url)) {
            throw new Exception('ไม่สามารถรับข้อมูล URL ของไฟล์ได้');
        }
        
        // ดึงข้อมูล repeater field ปัจจุบัน
        $files = get_field('egp_files', $post_id, false);
        $response['debug']['current_files'] = $files;
        
        if (empty($files) || !is_array($files)) {
            $files = array(); // สร้างอาร์เรย์ว่างถ้าไม่มีข้อมูล
        }
        
        // สร้างข้อมูลไฟล์ใหม่ตามโครงสร้าง ACF
        $new_row = array(
            'egp_rp_name' => $file_name,
            'egp_rp_date' => $file_date,
            'egp_rp_link' => $file_url
        );
        
        // เพิ่มหรือแก้ไขข้อมูล
        if ($file_index >= 0 && isset($files[$file_index])) {
            // แก้ไขข้อมูลที่มีอยู่แล้ว
            $files[$file_index] = $new_row;
            $response['debug']['action'] = 'update_row';
        } else {
            // เพิ่มข้อมูลใหม่
            $files[] = $new_row;
            $response['debug']['action'] = 'add_row';
        }
        
        $response['debug']['new_files'] = $files;
        
        // บันทึกข้อมูลลงใน ACF Repeater Field
        $update_result = update_field('egp_files', $files, $post_id);
        
        if ($update_result === false) {
            // ลองใช้วิธีการแบบ flexible content หรือ repeater
            $flexible_content_updated = false;
            
            // ถ้าเป็นการเพิ่มข้อมูลใหม่
            if ($file_index < 0) {
                // ลองใช้ add_row ของ ACF
                if (function_exists('add_row')) {
                    $add_row_result = add_row('egp_files', $new_row, $post_id);
                    $response['debug']['add_row_result'] = $add_row_result;
                    
                    if ($add_row_result !== false) {
                        $flexible_content_updated = true;
                    }
                }
            } else {
                // ถ้าเป็นการแก้ไขข้อมูลที่มีอยู่แล้ว
                if (function_exists('update_row')) {
                    $update_row_result = update_row('egp_files', $file_index + 1, $new_row, $post_id);
                    $response['debug']['update_row_result'] = $update_row_result;
                    
                    if ($update_row_result !== false) {
                        $flexible_content_updated = true;
                    }
                }
            }
            
            // ถ้ายังไม่สามารถบันทึกได้ ให้ลองใช้การอัพเดตข้อมูลโพสต์เมต้า
            if (!$flexible_content_updated) {
                // ลองใช้ update_post_meta
                $meta_key = 'egp_files';
                $update_meta_result = update_post_meta($post_id, $meta_key, $files);
                $response['debug']['update_meta_result'] = $update_meta_result;
                
                // ลองใช้ ACF update_post_meta ซึ่งมีรูปแบบพิเศษ
                $acf_meta_key = '_' . $meta_key;
                $update_acf_meta_result = update_post_meta($post_id, $acf_meta_key, 'field_egp_files');
                $response['debug']['update_acf_meta_result'] = $update_acf_meta_result;
                
                if ($update_meta_result === false && $update_acf_meta_result === false) {
                    throw new Exception('ไม่สามารถบันทึกข้อมูลลงใน ACF Repeater Field ได้');
                }
            }
        }
        
        // ดึงข้อมูลล่าสุดหลังจากบันทึก
        $updated_files = get_field('egp_files', $post_id);
        $response['debug']['updated_files'] = $updated_files;
        
        // สำเร็จ
        $response[DGA_SUCCESS_STATUS] = true;
        $response['message'] = 'บันทึกข้อมูลเรียบร้อยแล้ว';
        $response['files'] = $updated_files;
        
    } catch (Exception $e) {
        $response[DGA_SUCCESS_STATUS] = false;
        $response['message'] = $e->getMessage();
    }
    
    // ส่งผลลัพธ์กลับ
    wp_send_json($response);
}
add_action('wp_ajax_egp_save_file', 'egp_save_file');

// AJAX endpoint สำหรับลบไฟล์
function egp_delete_file() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('egp_file_download_nonce', 'nonce');
    
    $response = array(DGA_SUCCESS_STATUS => false, DGA_MESSAGE_KEY => '', 'debug' => array());
    
    try {
        // รับข้อมูลจาก AJAX request
        $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
        $file_index = isset($_POST['file_index']) ? intval($_POST['file_index']) : -1;
        
        $response['debug']['post_data'] = array(
            DGA_POST_ID_FIELD => $post_id,
            'file_index' => $file_index
        );
        
        // ตรวจสอบความถูกต้องของข้อมูล
        if (empty($post_id) || $file_index < 0) {
            throw new Exception('ข้อมูลไม่ถูกต้อง');
        }
        
        // ตรวจสอบสิทธิ์ในการแก้ไขโพสต์
        if (!current_user_can('edit_post', $post_id)) {
            throw new Exception('คุณไม่มีสิทธิ์ในการลบข้อมูลนี้');
        }
        
        // ลองใช้ delete_row ของ ACF
        $deleted = false;
        if (function_exists('delete_row')) {
            $delete_result = delete_row('egp_files', $file_index + 1, $post_id);
            $response['debug']['delete_row_result'] = $delete_result;
            
            if ($delete_result !== false) {
                $deleted = true;
            }
        }
        
        // ถ้าใช้ delete_row ไม่สำเร็จ ให้ลองใช้วิธีการดึงข้อมูลทั้งหมดและลบออกแล้วบันทึกใหม่
        if (!$deleted) {
            // ดึงข้อมูล repeater field ปัจจุบัน
            $files = get_field('egp_files', $post_id, false);
            $response['debug']['current_files'] = $files;
            
            if (empty($files) || !is_array($files) || !isset($files[$file_index])) {
                throw new Exception('ไม่พบข้อมูลที่ต้องการลบ');
            }
            
            // ลบข้อมูลออกจากอาร์เรย์
            array_splice($files, $file_index, 1);
            $response['debug']['new_files'] = $files;
            
            // บันทึกข้อมูลลงใน ACF Repeater Field
            $update_result = update_field('egp_files', $files, $post_id);
            $response['debug']['update_result'] = $update_result;
            
            if ($update_result === false) {
                // ลองใช้ update_post_meta
                $meta_key = 'egp_files';
                $update_meta_result = update_post_meta($post_id, $meta_key, $files);
                $response['debug']['update_meta_result'] = $update_meta_result;
                
                if ($update_meta_result === false) {
                    throw new Exception('ไม่สามารถบันทึกข้อมูลลงใน ACF Repeater Field ได้');
                }
            }
        }
        
        // ดึงข้อมูลล่าสุดหลังจากลบ
        $updated_files = get_field('egp_files', $post_id);
        $response['debug']['updated_files'] = $updated_files;
        
        // สำเร็จ
        $response[DGA_SUCCESS_STATUS] = true;
        $response['message'] = 'ลบข้อมูลเรียบร้อยแล้ว';
        $response['files'] = $updated_files;
        
    } catch (Exception $e) {
        $response[DGA_SUCCESS_STATUS] = false;
        $response['message'] = $e->getMessage();
    }
    
    // ส่งผลลัพธ์กลับ
    wp_send_json($response);
}
add_action('wp_ajax_egp_delete_file', 'egp_delete_file');

// ฟังก์ชั่นสำหรับประมวลผล URL ที่เข้ารหัสและดาวน์โหลดไฟล์
function egp_file_download_process() {
    // ตรวจสอบว่าเป็นการร้องขอดาวน์โหลดหรือไม่
    if (isset($_GET['egp_download']) && !empty($_GET['egp_download'])) {
        // ถอดรหัส URL
        $file_url = base64_decode($_GET['egp_download']);
        
        // ตรวจสอบความถูกต้องของ URL
        if (filter_var($file_url, FILTER_VALIDATE_URL) === false) {
            wp_die('URL ไฟล์ไม่ถูกต้อง');
        }
        
        // รับข้อมูลไฟล์
        $file_info = pathinfo($file_url);
        $file_name = $file_info['basename'];
        
        // ตั้งค่า header สำหรับการดาวน์โหลด
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename="' . $file_name . '"');
        header('Pragma: no-cache');
        
        // อ่านไฟล์และส่งออกไปยังเบราว์เซอร์
        readfile($file_url);
        exit;
    }
}
add_action('init', 'egp_file_download_process');


/**** CKAN API *****/

function add_direct_data_api_button() {
    ?>
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        // ทำงานเมื่อมีการคลิกที่ปุ่มดูตัวอย่าง
        $(document).on('click', '.ckan-preview-btn', function() {
            // รอให้ Modal โหลดเสร็จแล้วค่อยเพิ่มปุ่ม Data API
            setTimeout(function() {
                // ตรวจสอบว่ามีปุ่ม Data API แล้วหรือยัง
                if ($('.data-api-btn').length === 0) {
                    const apiButton = $('<button class="data-api-btn" style="background-color: #e91e63; color: white; border: none; border-radius: 4px; padding: 6px 12px; cursor: pointer; position: absolute; right: 45px; top: 15px; z-index: 10;">Data API</button>');
                    $('.ckan-preview-modal-title').after(apiButton);
                    
                    // เมื่อคลิกปุ่ม Data API
                    apiButton.on('click', function() {
                        // เปลี่ยนชื่อปุ่มและหัวข้อ Modal
                        if ($(this).text() === 'Data API') {
                            $('.ckan-preview-modal-title').text('CKAN Data API');
                            $(this).text('ดูตัวอย่างไฟล์');
                            
                            // ดึง ID ของโพสต์
                            const postId = $('.ckan-assets-container').data('post-id');
                            
                            // ดึง URL ของเว็บไซต์และสร้าง REST API URL
                            const siteUrl = window.location.origin;
                            const apiBaseUrl = siteUrl + '/wp-json/ckan-api/v1';
                            
                            // สร้างเนื้อหา API
                            const apiContent = `
                                <div style="padding: 20px;">
                                    <h3 style="margin-top: 0;">API Endpoints</h3>
                                    <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
                                        <tr style="background-color: #f3f4f6;">
                                            <th style="padding: 10px; text-align: left; border: 1px solid #ddd; width: 30%;">Action</th>
                                            <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">URL</th>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">สร้าง</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/datastore_create</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">ปรับปรุง/เพิ่ม</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/datastore_upsert</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูข้อมูล</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/datastore_search</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูข้อมูล Post</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/post/${postId}</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูไฟล์แนบ</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/post/${postId}/assets</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูเมตาดาต้า</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/post/${postId}/metadata</td>
                                        </tr>
                                    </table>
                                    
                                    <h3>ตัวอย่างการเรียกใช้งาน</h3>
                                    <div style="background-color: #f5f5f5; padding: 15px; border-radius: 4px; margin-bottom: 20px; overflow-x: auto;">
                                        <a href="${apiBaseUrl}/datastore_search?resource_id=${postId}" target="_blank" style="color: #2563eb; text-decoration: none;">${apiBaseUrl}/datastore_search?resource_id=${postId}</a>
                                    </div>
                                </div>
                            `;
                            
                            // แสดงเนื้อหา API
                            $('.ckan-preview-data').html(apiContent);
                            $('.ckan-preview-loading').hide();
                        } else {
                            // กลับไปแสดงตัวอย่างไฟล์
                            window.location.reload();
                        }
                    });
                }
            }, 300);
        });
    });
    </script>
    <?php
}


/****** ฟังก์ชั่นตั้งค่าการเข้าถึง CKAN *****/

// ป้องกันการเข้าถึงโดยตรง
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Class CKAN_DGA_Integration
 * Main integration class for CKAN Permission and DGA Role Department Manager
 */
class CKAN_DGA_Integration {
    
    private static $instance = null;
    
    /**
     * Get singleton instance
     */
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor
     */
    private function __construct() {
        // Initialize hooks after both plugins are loaded
        add_action('init', array($this, 'init_integration'), 20);
        add_action('admin_init', array($this, 'admin_init_integration'));
        
        // Override CKAN permission check
        add_filter('ckan_permission_check_access_override', array($this, 'override_access_check'), 10, 3);
        
        // Add DGA roles to CKAN settings
        add_filter('editable_roles', array($this, 'add_dga_roles_to_editable'), 20);
        
        // Modify CKAN settings page
        add_action('ckan_permission_settings_before_form', array($this, 'add_dga_notice'));
        add_filter('ckan_permission_role_groups', array($this, 'modify_role_groups'), 10, 1);
        
        // Enhanced error messages
        add_filter('ckan_permission_denied_message', array($this, 'enhance_denied_message'), 10, 2);
        
        // AJAX handlers for integration
        add_action('wp_ajax_ckan_dga_sync_permissions', array($this, 'ajax_sync_permissions'));
    }
    
    /**
     * Initialize integration
     */
    public function init_integration() {
        // Check if both plugins are active
        if (!$this->check_plugins_active()) {
            return;
        }
        
        // Override CKAN permission functions
        $this->override_permission_functions();
        
        // Add custom capabilities
        $this->add_integration_capabilities();
    }
    
    /**
     * Admin initialization
     */
    public function admin_init_integration() {
        // Add settings section
        add_settings_section(
            'ckan_dga_integration',
            'การตั้งค่า CKAN-DGA Integration',
            array($this, 'settings_section_callback'),
            'ckan-access-settings'
        );
    }
    
    /**
     * Check if required plugins are active
     */
    private function check_plugins_active() {
        // Check if DGA tables exist
        global $wpdb;
        $dga_table = $wpdb->prefix . 'dga_roledep_departments';
        $dga_exists = $wpdb->get_var("SHOW TABLES LIKE '$dga_table'") == $dga_table;
        
        // Check if CKAN permission functions exist
        $ckan_exists = function_exists('ckan_permission_user_can_access');
        
        return $dga_exists && $ckan_exists;
    }
    
    /**
     * Override CKAN permission functions
     */
    private function override_permission_functions() {
        // Remove original template_redirect action
        remove_action('template_redirect', 'ckan_permission_check_access');
        
        // Add our enhanced version
        add_action('template_redirect', array($this, 'check_access_enhanced'));
    }
    
    /**
     * Add integration capabilities
     */
    private function add_integration_capabilities() {
        $admin = get_role(DGA_ADMIN_ROLE);
        if ($admin) {
            $admin->add_cap('manage_ckan_dga_integration');
        }
    }
    
    /**
     * Enhanced access check with DGA support
     */
    public function check_access_enhanced() {
        // Only check on single ckan posts on the frontend
        if (!is_singular('ckan') || is_admin()) {
            return;
        }
        
        global $post;
        $post_id = $post->ID;
        $current_user = wp_get_current_user();
        $user_roles = (array) $current_user->roles;
        
        // Use enhanced access check
        if (!$this->user_can_access_with_dga($post_id, $user_roles, $current_user->ID)) {
            $this->show_access_denied($current_user);
        }
    }
    
    /**
     * Enhanced user access check with DGA integration
     */
    public function user_can_access_with_dga($post_id, $user_roles = array(), $user_id = 0) {
        // Ensure roles is an array
        $user_roles = (array) $user_roles;
        $is_guest = empty($user_roles) || $user_id == 0;
        
        // 1. Administrator always has access
        if (!$is_guest && in_array(DGA_ADMIN_ROLE, $user_roles)) {
            return true;
        }
        
        // 2. Get DGA department roles
        $dga_roles = $this->get_user_dga_roles($user_id);
        if (!empty($dga_roles)) {
            $user_roles = array_merge($user_roles, $dga_roles);
        }
        
        // 3. Get CKAN permission settings
        $settings = get_option('ckan_permission_settings', array());
        
        // If no settings defined, check default behavior
        if (empty($settings)) {
            // Allow department members by default if they have DGA roles
            if (!$is_guest && !empty($dga_roles)) {
                return true;
            }
            return false;
        }
        
        // 4. Check taxonomies
        $taxonomies_to_check = array('ctag', 'cgroup', 'caccess', 'cdata', 'cformat', 'clicense', 'cgov', 'corg');
        
        foreach ($taxonomies_to_check as $taxonomy) {
            if (!taxonomy_exists($taxonomy)) {
                continue;
            }
            
            $post_terms = wp_get_post_terms($post_id, $taxonomy, array(DGA_FIELDS_PARAMETER => 'ids'));
            
            if (!is_wp_error($post_terms) && !empty($post_terms)) {
                $taxonomy_access_granted = false;
                
                foreach ($post_terms as $term_id) {
                    if (isset($settings[$taxonomy][$term_id]) && !empty($settings[$taxonomy][$term_id])) {
                        $term_permissions = $settings[$taxonomy][$term_id];
                        
                        if ($is_guest) {
                            if (isset($term_permissions['guest'])) {
                                $taxonomy_access_granted = true;
                                break;
                            }
                        } else {
                            // Check all roles including DGA roles
                            foreach ($user_roles as $role) {
                                if (isset($term_permissions[$role])) {
                                    $taxonomy_access_granted = true;
                                    break 2;
                                }
                            }
                        }
                    }
                }
                
                if (!$taxonomy_access_granted) {
                    return false;
                }
            }
        }
        
        return true;
    }
    
    /**
     * Get user's DGA roles
     */
    private function get_user_dga_roles($user_id) {
        if (!$user_id) {
            return array();
        }
        
        global $wpdb;
        $table_departments = $wpdb->prefix . 'dga_roledep_departments';
        $table_department_users = $wpdb->prefix . 'dga_roledep_department_users';
        
        // Check if tables exist
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_department_users'") != $table_department_users) {
            return array();
        }
        
        // Get user's department info
        $dept_info = $wpdb->get_row($wpdb->prepare(
            "SELECT du.is_head, du.department_id, d.role_name, d.name as dept_name
             FROM $table_department_users du 
             JOIN $table_departments d ON du.department_id = d.id
             WHERE du.user_id = %d",
            $user_id
        ));
        
        $roles = array();
        
        if ($dept_info) {
            // Add department role
            $roles[] = $dept_info->role_name;
            
            // Add head role if applicable
            if ($dept_info->is_head) {
                $roles[] = 'dga_department_head';
            }
            
            // Add general member role
            $roles[] = 'dga_department_member';
        }
        
        return $roles;
    }
    
    /**
     * Show access denied page with enhanced information
     */
    private function show_access_denied($user) {
        $additional_info = '';
        
        if ($user->ID > 0) {
            // Get department info
            global $wpdb;
            $table_departments = $wpdb->prefix . 'dga_roledep_departments';
            $table_department_users = $wpdb->prefix . 'dga_roledep_department_users';
            
            $dept_info = $wpdb->get_row($wpdb->prepare(
                "SELECT d.name, d.color, du.is_head 
                 FROM $table_department_users du 
                 JOIN $table_departments d ON du.department_id = d.id
                 WHERE du.user_id = %d",
                $user->ID
            ));
            
            if ($dept_info) {
                $position = $dept_info->is_head ? 'หัวหน้าแผนก' : 'สมาชิกแผนก';
                $additional_info = sprintf(
                    '<div style="background: #f8f9fa; border-left: 4px solid %s; padding: 15px; margin: 20px 0; border-radius: 4px;">
                        <h3 style="margin-top: 0; color: #333;">ข้อมูลสมาชิก</h3>
                        <p style="margin: 5px 0;"><strong>ชื่อผู้ใช้:</strong> %s</p>
                        <p style="margin: 5px 0;"><strong>อีเมล:</strong> %s</p>
                        <p style="margin: 5px 0;"><strong>แผนก:</strong> <span style="color: %s; font-weight: bold;">%s</span></p>
                        <p style="margin: 5px 0;"><strong>ตำแหน่ง:</strong> %s</p>
                        <p style="margin: 15px 0 0 0; padding: 10px; background: #fff3cd; border-radius: 4px; color: #856404;">
                            <strong>เหตุผล:</strong> แผนกของคุณไม่ได้รับอนุญาตให้เข้าถึงเนื้อหานี้
                        </p>
                    </div>',
                    esc_attr($dept_info->color),
                    esc_html($user->display_name),
                    esc_html($user->user_email),
                    esc_attr($dept_info->color),
                    esc_html($dept_info->name),
                    esc_html($position)
                );
            } else {
                $additional_info = sprintf(
                    '<div style="background: #f8f9fa; padding: 15px; margin: 20px 0; border-radius: 4px;">
                        <p><strong>ผู้ใช้:</strong> %s (%s)</p>
                        <p style="color: #dc3545;"><strong>สถานะ:</strong> ไม่ได้สังกัดแผนกใดๆ</p>
                    </div>',
                    esc_html($user->display_name),
                    esc_html($user->user_email)
                );
            }
        }
        
        // Custom styled error page
        wp_die(
            '<div style="max-width: 700px; margin: 50px auto; padding: 30px; font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif; background: white; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-radius: 8px;">
                <div style="text-align: center; margin-bottom: 30px;">
                    <div style="display: inline-block; width: 80px; height: 80px; background: #dc3545; border-radius: 50%; line-height: 80px; color: white; font-size: 40px;">⚠</div>
                </div>
                <h1 style="color: #dc3545; font-size: 32px; text-align: center; margin-bottom: 20px;">ขออภัย! คุณไม่มีสิทธิ์เข้าถึง</h1>
                <p style="font-size: 18px; line-height: 1.6; color: #666; text-align: center;">
                    คุณไม่มีสิทธิ์ในการเข้าถึงเนื้อหาส่วนนี้
                </p>
                ' . $additional_info . '
                <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
                    <h4 style="color: #333;">ต้องการความช่วยเหลือ?</h4>
                    <ul style="color: #666; line-height: 1.8;">
                        <li>ติดต่อผู้ดูแลระบบเพื่อขอสิทธิ์เข้าถึง</li>
                        <li>ตรวจสอบว่าคุณเข้าสู่ระบบด้วยบัญชีที่ถูกต้อง</li>
                        <li>หากคุณเชื่อว่านี่เป็นข้อผิดพลาด กรุณาแจ้งผู้ดูแลระบบ</li>
                    </ul>
                </div>
                <div style="text-align: center; margin-top: 30px;">
                    <a href="' . esc_url(home_url('/')) . '" style="display: inline-block; padding: 12px 30px; background: #007cba; color: white; text-decoration: none; border-radius: 4px; margin-right: 10px;">
                        กลับสู่หน้าหลัก
                    </a>
                    <a href="javascript:history.back()" style="display: inline-block; padding: 12px 30px; background: #6c757d; color: white; text-decoration: none; border-radius: 4px;">
                        ย้อนกลับ
                    </a>
                </div>
            </div>',
            'ไม่มีสิทธิ์เข้าถึง | ' . get_bloginfo('name'),
            array(
                'response' => 403,
                'back_link' => false
            )
        );
        exit;
    }
    
    /**
     * Add DGA roles to editable roles list
     */
    public function add_dga_roles_to_editable($roles) {
        // Only modify on CKAN settings page
        if (!isset($_GET['page']) || $_GET['page'] !== 'ckan-access-settings') {
            return $roles;
        }
        
        global $wpdb;
        $table_departments = $wpdb->prefix . 'dga_roledep_departments';
        
        // Check if DGA tables exist
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_departments'") != $table_departments) {
            return $roles;
        }
        
        // Get all departments
        $departments = $wpdb->get_results("SELECT * FROM $table_departments ORDER BY name");
        
        if (!empty($departments)) {
            foreach ($departments as $department) {
                $role_obj = get_role($department->role_name);
                if ($role_obj) {
                    $roles[$department->role_name] = array(
                        DGA_NAME_FIELD => '🏢 ' . $department->name,
                        'capabilities' => $role_obj->capabilities
                    );
                }
            }
        }
        
        // Add default DGA roles
        if (get_role('dga_department_head')) {
            $roles['dga_department_head'] = array(
                DGA_NAME_FIELD => '👔 หัวหน้าแผนก (ทุกแผนก)',
                'capabilities' => get_role('dga_department_head')->capabilities
            );
        }
        
        if (get_role('dga_department_member')) {
            $roles['dga_department_member'] = array(
                DGA_NAME_FIELD => '👤 สมาชิกแผนก (ทั่วไป)',
                'capabilities' => get_role('dga_department_member')->capabilities
            );
        }
        
        return $roles;
    }
    
    /**
     * Add DGA notice to CKAN settings page
     */
    public function add_dga_notice() {
        if (!$this->check_plugins_active()) {
            return;
        }
        
        global $wpdb;
        $table_departments = $wpdb->prefix . 'dga_roledep_departments';
        $dept_count = $wpdb->get_var("SELECT COUNT(*) FROM $table_departments");
        
        if ($dept_count > 0) {
            echo '<div class="notice notice-info" style="margin: 20px 0;">
                <p><strong>🏢 DGA Department Integration Active:</strong> 
                ระบบตรวจพบ ' . $dept_count . ' แผนก/หน่วยงาน ที่สามารถกำหนดสิทธิ์การเข้าถึง CKAN ได้</p>
                <p>คุณสามารถกำหนดสิทธิ์ให้กับแต่ละแผนกในส่วน "แผนก/หน่วยงาน (DGA)" ด้านล่าง</p>
            </div>';
        }
    }
    
    /**
     * Modify role groups for CKAN settings
     */
    public function modify_role_groups($groups) {
        global $wpdb;
        $table_departments = $wpdb->prefix . 'dga_roledep_departments';
        
        // Check if DGA tables exist
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_departments'") != $table_departments) {
            return $groups;
        }
        
        // Get all departments
        $departments = $wpdb->get_results("SELECT role_name FROM $table_departments");
        
        if (!empty($departments)) {
            $dept_roles = array('dga_department_head', 'dga_department_member');
            
            foreach ($departments as $dept) {
                $dept_roles[] = $dept->role_name;
            }
            
            // Add department group before 'other'
            $new_groups = array();
            foreach ($groups as $key => $group) {
                if ($key === 'other') {
                    $new_groups['departments'] = array(
                        DGA_TITLE_FIELD => '🏢 แผนก/หน่วยงาน (DGA)',
                        'roles' => $dept_roles
                    );
                }
                $new_groups[$key] = $group;
            }
            
            return $new_groups;
        }
        
        return $groups;
    }
    
    /**
     * AJAX handler for syncing permissions
     */
    public function ajax_sync_permissions() {
        // Check nonce
        check_ajax_referer('ckan_dga_sync_nonce', 'nonce');
        
        // Check permission
        if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
        }
        
        // Sync logic here
        $result = $this->sync_department_permissions();
        
        if ($result) {
            wp_send_json_success('Permissions synced successfully');
        } else {
            wp_send_json_error('Failed to sync permissions');
        }
    }
    
    /**
     * Sync department permissions
     */
    private function sync_department_permissions() {
        // Implementation for syncing permissions between CKAN and DGA
        // This is a placeholder for future enhancement
        return true;
    }
    
    /**
     * Get debug information
     */
    public static function debug_user_access($user_id = null) {
        if (!$user_id) {
            $user_id = get_current_user_id();
        }
        
        $instance = self::get_instance();
        
        $debug_info = array(
            'user_id' => $user_id,
            'wordpress_roles' => array(),
            'dga_roles' => array(),
            'department_info' => null,
            'can_access_ckan' => false
        );
        
        // Get user
        $user = get_userdata($user_id);
        if (!$user) {
            return $debug_info;
        }
        
        // Get WordPress roles
        $debug_info['wordpress_roles'] = $user->roles;
        
        // Get DGA roles
        $debug_info['dga_roles'] = $instance->get_user_dga_roles($user_id);
        
        // Get department info
        global $wpdb;
        $table_departments = $wpdb->prefix . 'dga_roledep_departments';
        $table_department_users = $wpdb->prefix . 'dga_roledep_department_users';
        
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_department_users'") == $table_department_users) {
            $dept_info = $wpdb->get_row($wpdb->prepare(
                "SELECT d.*, du.is_head 
                 FROM $table_department_users du 
                 JOIN $table_departments d ON du.department_id = d.id
                 WHERE du.user_id = %d",
                $user_id
            ));
            
            if ($dept_info) {
                $debug_info['department_info'] = array(
                    'id' => $dept_info->id,
                    DGA_NAME_FIELD => $dept_info->name,
                    'role_name' => $dept_info->role_name,
                    'color' => $dept_info->color,
                    'is_head' => (bool)$dept_info->is_head
                );
            }
        }
        
        return $debug_info;
    }
}

// Initialize the integration
CKAN_DGA_Integration::get_instance();

/**
 * Global helper function to check CKAN access with DGA support
 * This overrides the original ckan_permission_user_can_access function
 */
if (!function_exists('ckan_permission_user_can_access_integrated')) {
    function ckan_permission_user_can_access_integrated($post_id, $user_roles = array(), $user_id = 0) {
        $integration = CKAN_DGA_Integration::get_instance();
        return $integration->user_can_access_with_dga($post_id, $user_roles, $user_id);
    }
}

/**
 * Override the original function if it exists
 */
add_action('init', function() {
    if (function_exists('ckan_permission_user_can_access')) {
        // Override using runkit if available
        if (function_exists('runkit_function_redefine')) {
            runkit_function_redefine('ckan_permission_user_can_access', 
                '$post_id, $user_roles = array()', 
                'return ckan_permission_user_can_access_integrated($post_id, $user_roles, get_current_user_id());'
            );
        } else {
            // Alternative: use filter/action hooks if the original function supports them
            add_filter('ckan_permission_access_check', function($has_access, $post_id, $user_roles) {
                $user_id = get_current_user_id();
                return ckan_permission_user_can_access_integrated($post_id, $user_roles, $user_id);
            }, 10, 3);
        }
    }
}, 100);

/**
 * Add admin menu for integration settings
 */
add_action('admin_menu', function() {
    add_submenu_page(
        'edit.php?post_type=ckan',
        'CKAN-DGA Integration',
        'DGA Integration',
        DGA_MANAGE_OPTIONS_CAP,
        'ckan-dga-integration',
        'ckan_dga_integration_settings_page'
    );
}, 20);

/**
 * Integration settings page
 */
function ckan_dga_integration_settings_page() {
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return;
    }
    
    // Get debug info for current user
    $debug_info = CKAN_DGA_Integration::debug_user_access();
    
    ?>
    <div class="wrap">
        <h1>CKAN-DGA Integration Settings</h1>
        
        <div class="card" style="max-width: 800px; margin-top: 20px;">
            <h2>สถานะการเชื่อมต่อ</h2>
            <?php
            global $wpdb;
            $dga_table = $wpdb->prefix . 'dga_roledep_departments';
            $dga_exists = $wpdb->get_var("SHOW TABLES LIKE '$dga_table'") == $dga_table;
            $ckan_exists = function_exists('ckan_permission_user_can_access');
            ?>
            
            <table class="widefat">
                <tr>
                    <td><strong>DGA Role Department Manager</strong></td>
                    <td><?php echo $dga_exists ? '<span style="color: green;">✅ Active</span>' : '<span style="color: red;">❌ Not Found</span>'; ?></td>
                </tr>
                <tr>
                    <td><strong>CKAN Permission System</strong></td>
                    <td><?php echo $ckan_exists ? '<span style="color: green;">✅ Active</span>' : '<span style="color: red;">❌ Not Found</span>'; ?></td>
                </tr>
                <tr>
                    <td><strong>Integration Status</strong></td>
                    <td><?php echo ($dga_exists && $ckan_exists) ? '<span style="color: green;">✅ Working</span>' : '<span style="color: red;">❌ Not Working</span>'; ?></td>
                </tr>
            </table>
        </div>
        
        <?php if ($dga_exists): ?>
        <div class="card" style="max-width: 800px; margin-top: 20px;">
            <h2>สถิติแผนก/หน่วยงาน</h2>
            <?php
            $dept_count = $wpdb->get_var("SELECT COUNT(*) FROM $dga_table");
            $user_count = $wpdb->get_var("SELECT COUNT(DISTINCT user_id) FROM {$wpdb->prefix}dga_roledep_department_users");
            ?>
            <table class="widefat">
                <tr>
                    <td><strong>จำนวนแผนกทั้งหมด</strong></td>
                    <td><?php echo $dept_count; ?> แผนก</td>
                </tr>
                <tr>
                    <td><strong>จำนวนผู้ใช้ในแผนก</strong></td>
                    <td><?php echo $user_count; ?> คน</td>
                </tr>
            </table>
        </div>
        <?php endif; ?>
        
        <div class="card" style="max-width: 800px; margin-top: 20px;">
            <h2>Debug Information (Current User)</h2>
            <pre style="background: #f5f5f5; padding: 15px; overflow: auto;">
<?php print_r($debug_info); ?>
            </pre>
        </div>
        
        <div class="card" style="max-width: 800px; margin-top: 20px;">
            <h2>วิธีใช้งาน</h2>
            <ol>
                <li>ไปที่ <a href="<?php echo admin_url('edit.php?post_type=ckan&page=ckan-access-settings'); ?>">CKAN > ตั้งค่าการเข้าถึง</a></li>
                <li>เลือกแท็บ Taxonomy ที่ต้องการกำหนดสิทธิ์</li>
                <li>ในแต่ละ Term จะมีกลุ่ม "แผนก/หน่วยงาน (DGA)" ให้เลือก</li>
                <li>เลือกแผนกที่ต้องการให้เข้าถึง Term นั้นๆ</li>
                <li>กดบันทึกการตั้งค่า</li>
            </ol>
            
            <h3>หมายเหตุ:</h3>
            <ul>
                <li>หัวหน้าแผนกจะได้สิทธิ์ "dga_department_head" เพิ่มเติม</li>
                <li>สมาชิกแผนกจะได้สิทธิ์ตาม role ของแผนกนั้นๆ</li>
                <li>Administrator มีสิทธิ์เข้าถึงทุกเนื้อหาเสมอ</li>
            </ul>
        </div>
    </div>
    <?php
}

/**
 * Shortcode for testing access
 * Usage: [ckan_dga_test_access post_id="123"]
 */
add_shortcode('ckan_dga_test_access', function($atts) {
    $atts = shortcode_atts(array(
        DGA_POST_ID_FIELD => get_the_ID(),
        'user_id' => get_current_user_id()
    ), $atts);
    
    $can_access = ckan_permission_user_can_access_integrated(
        $atts[DGA_POST_ID_FIELD], 
        array(), 
        $atts['user_id']
    );
    
    $debug = CKAN_DGA_Integration::debug_user_access($atts['user_id']);
    
    ob_start();
    ?>
    <div style="background: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
        <h4>CKAN-DGA Access Test</h4>
        <p><strong>Post ID:</strong> <?php echo $atts[DGA_POST_ID_FIELD]; ?></p>
        <p><strong>User ID:</strong> <?php echo $atts['user_id']; ?></p>
        <p><strong>Can Access:</strong> 
            <?php echo $can_access ? '<span style="color: green;">✅ YES</span>' : '<span style="color: red;">❌ NO</span>'; ?>
        </p>
        <?php if (current_user_can(DGA_MANAGE_OPTIONS_CAP)): ?>
            <details>
                <summary>Debug Details</summary>
                <pre><?php print_r($debug); ?></pre>
            </details>
        <?php endif; ?>
    </div>
    <?php
    return ob_get_clean();
});

// Add custom CSS for CKAN settings page when DGA is active
add_action('admin_head', function() {
    if (isset($_GET['page']) && $_GET['page'] === 'ckan-access-settings') {
        ?>
        <style>
        /* DGA Department roles styling */
        .role-options label input[data-role-key^="dga_"] + span {
            background-image: linear-gradient(45deg, #e3f2fd 25%, transparent 25%);
            background-size: 10px 10px;
        }
        
        .role-options label:has(input[data-role-key^="dga_"]) {
            background: #e3f2fd;
            border-color: #2196f3;
        }
        
        .role-options label:has(input[data-role-key^="dga_"]:checked) {
            background: #bbdefb;
            border-color: #1976d2;
            font-weight: 600;
        }
        
        .role-group-title:contains("แผนก/หน่วยงาน") {
            color: #1976d2;
            font-size: 14px;
            border-bottom: 2px solid #2196f3;
            padding-bottom: 5px;
            margin-bottom: 10px;
        }
        </style>
        <?php
    }
});



/**** แสดงรายการ CKAN TAXO ORG LIST *****/

function ckan_taxo_orglist_enqueue_scripts() {
    // Get the child theme directory URI
    $child_theme_dir = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style(
        'ckan-taxo-orglist-style',
        $child_theme_dir . '/css/ckan-taxo-orglist.css',
        array(),
        DGA_VERSION_NUMBER
    );
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'ckan-taxo-orglist-script',
        $child_theme_dir . '/js/ckan-taxo-orglist.js',
        array(DGA_JQUERY_HANDLE),
        DGA_VERSION_NUMBER,
        true
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'ckan_taxo_orglist_enqueue_scripts');

/**
 * Shortcode เพื่อแสดงรายการทั้งหมดของ taxonomy 'corg'
 * 
 * @return string HTML output สำหรับแสดงรายการ taxonomy
 */
function ckan_taxo_orglist_shortcode() {
    // เริ่ม output buffering
    ob_start();
    
    // ดึงรายการ term ทั้งหมดจาก taxonomy 'corg' รวมถึงที่มีจำนวนโพสต์เป็น 0
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'corg',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    // ตรวจสอบว่ามี terms อยู่และไม่มีข้อผิดพลาด
    if (!is_wp_error($terms) && !empty($terms)) {
        ?>
        <div class="ckan-taxo-container">
            <div class="ckan-taxo-header">
                <h3 class="ckan-taxo-title">Organizations</h3>
            </div>
            <div class="ckan-taxo-content">
                <ul class="ckan-taxo-list">
                    <?php foreach ($terms as $term) : 
                        // นับจำนวนโพสต์สำหรับ term นี้
                        $post_count = $term->count;
                        
                        // รับลิงก์ของ term
                        $term_link = get_term_link($term);
                        
                        // ตรวจสอบว่าลิงก์ถูกต้อง
                        if (!is_wp_error($term_link)) :
                    ?>
                        <li class="ckan-taxo-item">
                            <a href="<?php echo esc_url($term_link); ?>" class="ckan-taxo-item-link">
                                <span class="ckan-taxo-item-name"><?php echo esc_html($term->name); ?></span>
                                <span class="ckan-taxo-item-count"><?php echo esc_html($post_count); ?></span>
                            </a>
                        </li>
                    <?php 
                        endif;
                    endforeach; ?>
                </ul>
            </div>
        </div>
        <?php
    } else {
        // แสดงข้อความผิดพลาดถ้าไม่พบ terms
        ?>
        <div class="ckan-taxo-error">
            ไม่พบรายการองค์กร
        </div>
        <?php
    }
    
    // รับค่า output และจบการ buffering
    $output = ob_get_clean();
    
    return $output;
}

// ลงทะเบียน shortcode
add_shortcode('ckan_taxo_orglist', 'ckan_taxo_orglist_shortcode');




/**** ฟังก์ชั่นบริหารจัดการหมวดหมู่ CKAN ******/


add_shortcode('ckan_edit_taxo_term_modern', 'ckan_edit_taxo_term_modern_wkp789');

function ckan_edit_taxo_term_modern_wkp789() {
    // Security Check
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        return '<div class="ckan-access-denied-wkp789">
            <svg viewBox="0 0 24 24" width="36" height="36">
                <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
            </svg>
            <p>' . __('ขออภัย คุณไม่มีสิทธิ์เข้าถึงส่วนนี้', DGA_TEXT_DOMAIN) . '</p>
        </div>';
    }

    // Enqueue assets
    wp_enqueue_style(
        'ckan-modern-ui-style-wkp789',
        get_stylesheet_directory_uri() . '/css/ckan-modern-ui-wkp789.css',
        array(),
        filemtime(get_stylesheet_directory() . '/css/ckan-modern-ui-wkp789.css')
    );

    wp_enqueue_script(
        'ckan-modern-ui-script-wkp789',
        get_stylesheet_directory_uri() . '/js/ckan-modern-ui-wkp789.js',
        array(),
        filemtime(get_stylesheet_directory() . '/js/ckan-modern-ui-wkp789.js'),
        true
    );

    // Localize script
    wp_localize_script('ckan-modern-ui-script-wkp789', 'ckanModernAjax', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_modern_nonce_wkp789'),
        'strings' => array(
            'editTitle' => __('แก้ไข Term', DGA_TEXT_DOMAIN),
            'deleteConfirm' => __('คุณแน่ใจหรือไม่ว่าต้องการลบ', DGA_TEXT_DOMAIN),
            'deleteWarning' => __('การกระทำนี้ไม่สามารถย้อนกลับได้', DGA_TEXT_DOMAIN),
            'saving' => __('กำลังบันทึก...', DGA_TEXT_DOMAIN),
            'deleting' => __('กำลังลบ...', DGA_TEXT_DOMAIN),
            DGA_SUCCESS_STATUS => __('ดำเนินการสำเร็จ', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'cancel' => __('ยกเลิก', DGA_TEXT_DOMAIN),
            'save' => __('บันทึก', DGA_TEXT_DOMAIN),
            'delete' => __('ลบ', DGA_TEXT_DOMAIN),
            'termName' => __('ชื่อ Term', DGA_TEXT_DOMAIN),
            'termNamePlaceholder' => __('กรุณาใส่ชื่อ Term', DGA_TEXT_DOMAIN),
            'noTerms' => __('ยังไม่มี Term ในหมวดหมู่นี้', DGA_TEXT_DOMAIN),
            'posts' => __('โพสต์', DGA_TEXT_DOMAIN),
            'searchPlaceholder' => __('ค้นหา term...', DGA_TEXT_DOMAIN)
        )
    ));

    $post_type = 'ckan';
    $taxonomies = get_object_taxonomies($post_type, 'objects');

    ob_start();
    ?>
    
    <!-- Compact Header -->
    <div class="ckan-modern-wrapper-wkp789 ckan-compact-wkp789">
        <div class="ckan-header-wkp789">
            <div class="ckan-header-content-wkp789">
                <h1 class="ckan-title-wkp789">
                    <svg class="ckan-icon-wkp789" viewBox="0 0 24 24" width="20" height="20">
                        <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    <?php echo esc_html(sprintf(__('จัดการ %s', DGA_TEXT_DOMAIN), get_post_type_object($post_type)->labels->name)); ?>
                </h1>
                <div class="ckan-stats-wkp789">
                    <?php 
                    $total_taxonomies = count($taxonomies);
                    $total_terms = 0;
                    foreach ($taxonomies as $tax) {
                        $terms = wp_count_terms($tax->name, array(DGA_HIDE_EMPTY_FIELD => false));
                        if (!is_wp_error($terms)) {
                            $total_terms += $terms;
                        }
                    }
                    ?>
                    <div class="ckan-stat-item-wkp789">
                        <span class="ckan-stat-number-wkp789"><?php echo esc_html($total_taxonomies); ?></span>
                        <span class="ckan-stat-label-wkp789"><?php _e('หมวด', DGA_TEXT_DOMAIN); ?></span>
                    </div>
                    <div class="ckan-stat-item-wkp789">
                        <span class="ckan-stat-number-wkp789"><?php echo esc_html($total_terms); ?></span>
                        <span class="ckan-stat-label-wkp789"><?php _e('Terms', DGA_TEXT_DOMAIN); ?></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Bar -->
        <div class="ckan-search-bar-wkp789">
            <svg class="ckan-search-icon-wkp789" viewBox="0 0 24 24" width="20" height="20">
                <path fill="currentColor" d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
            </svg>
            <input type="text" class="ckan-search-input-wkp789" placeholder="<?php echo esc_attr(__('ค้นหา term...', DGA_TEXT_DOMAIN)); ?>">
        </div>

        <!-- Toast Container -->
        <div class="ckan-toast-container-wkp789" id="ckan-toast-container"></div>

        <!-- Taxonomies Grid -->
        <div class="ckan-taxonomies-grid-wkp789">
            <?php if (empty($taxonomies)) : ?>
                <div class="ckan-empty-state-wkp789">
                    <svg viewBox="0 0 24 24" width="48" height="48">
                        <path fill="currentColor" d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 14H7v-2h5v2zm5-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                    <p><?php echo esc_html(sprintf(__('ไม่พบ Taxonomy สำหรับ %s', DGA_TEXT_DOMAIN), $post_type)); ?></p>
                </div>
            <?php else : ?>
                <?php foreach ($taxonomies as $taxonomy) : 
                    if ($taxonomy->name === 'post_format') continue;
                    
                    $terms = get_terms(array(
                        DGA_TAXONOMY_FIELD => $taxonomy->name,
                        DGA_HIDE_EMPTY_FIELD => false,
                        DGA_ORDERBY_FIELD_VALUE => 'name',
                        DGA_ORDER_FIELD => 'ASC',
                    ));
                ?>
                    <div class="ckan-taxonomy-card-wkp789" data-taxonomy="<?php echo esc_attr($taxonomy->name); ?>">
                        <div class="ckan-card-header-wkp789">
                            <h2 class="ckan-card-title-wkp789">
                                <?php echo esc_html($taxonomy->labels->name); ?>
                                <span class="ckan-badge-wkp789"><?php echo esc_html($taxonomy->name); ?></span>
                            </h2>
                            <span class="ckan-term-count-wkp789">
                                <?php echo is_array($terms) ? count($terms) : 0; ?>
                            </span>
                        </div>
                        
                        <div class="ckan-card-body-wkp789">
                            <?php if (is_wp_error($terms)) : ?>
                                <div class="ckan-error-message-wkp789">
                                    <?php echo esc_html($terms->get_error_message()); ?>
                                </div>
                            <?php elseif (empty($terms)) : ?>
                                <div class="ckan-empty-terms-wkp789">
                                    <svg viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                                    </svg>
                                    <p><?php _e('ยังไม่มี Terms', DGA_TEXT_DOMAIN); ?></p>
                                </div>
                            <?php else : ?>
                                <div class="ckan-terms-list-wkp789">
                                    <?php foreach ($terms as $term) : ?>
                                        <div class="ckan-term-item-wkp789" data-term-id="<?php echo esc_attr($term->term_id); ?>">
                                            <div class="ckan-term-info-wkp789">
                                                <div class="ckan-term-name-wkp789">
                                                    <?php echo esc_html($term->name); ?>
                                                </div>
                                                <div class="ckan-term-meta-wkp789">
                                                    <span class="ckan-term-slug-wkp789"><?php echo esc_html($term->slug); ?></span>
                                                    <span class="ckan-term-posts-wkp789">
                                                        <svg viewBox="0 0 24 24">
                                                            <path fill="currentColor" d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                                                        </svg>
                                                        <?php echo esc_html($term->count); ?>
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="ckan-term-actions-wkp789">
                                                <button class="ckan-btn-icon-wkp789 ckan-btn-edit-wkp789" 
                                                        data-term-id="<?php echo esc_attr($term->term_id); ?>"
                                                        data-taxonomy="<?php echo esc_attr($taxonomy->name); ?>"
                                                        data-term-name="<?php echo esc_attr($term->name); ?>"
                                                        title="<?php _e('แก้ไข', DGA_TEXT_DOMAIN); ?>">
                                                    <svg viewBox="0 0 24 24">
                                                        <path fill="currentColor" d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                                                    </svg>
                                                </button>
                                                <button class="ckan-btn-icon-wkp789 ckan-btn-delete-wkp789"
                                                        data-term-id="<?php echo esc_attr($term->term_id); ?>"
                                                        data-taxonomy="<?php echo esc_attr($taxonomy->name); ?>"
                                                        data-term-name="<?php echo esc_attr($term->name); ?>"
                                                        title="<?php _e('ลบ', DGA_TEXT_DOMAIN); ?>">
                                                    <svg viewBox="0 0 24 24">
                                                        <path fill="currentColor" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                            <?php endif; ?>
                        </div>
                    </div>
                <?php endforeach; ?>
            <?php endif; ?>
        </div>

        <!-- Modal Template -->
        <div class="ckan-modal-wkp789" id="ckan-edit-modal">
            <div class="ckan-modal-backdrop-wkp789"></div>
            <div class="ckan-modal-content-wkp789">
                <div class="ckan-modal-header-wkp789">
                    <h3 class="ckan-modal-title-wkp789"></h3>
                    <button class="ckan-modal-close-wkp789">
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                        </svg>
                    </button>
                </div>
                <div class="ckan-modal-body-wkp789"></div>
                <div class="ckan-modal-footer-wkp789"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Edit
add_action('wp_ajax_ckan_modern_edit_term_wkp789', 'ckan_modern_ajax_edit_term_wkp789');
function ckan_modern_ajax_edit_term_wkp789() {
    check_ajax_referer('ckan_modern_nonce_wkp789', 'nonce');
    
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ไม่มีสิทธิ์ดำเนินการ', DGA_TEXT_DOMAIN)), 403);
    }

    $term_id = isset($_POST[DGA_TERM_ID_FIELD]) ? intval($_POST[DGA_TERM_ID_FIELD]) : 0;
    $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_key($_POST[DGA_TAXONOMY_FIELD]) : '';
    $new_name = isset($_POST['new_name']) ? sanitize_text_field($_POST['new_name']) : '';

    if (empty($term_id) || empty($taxonomy) || empty($new_name)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ข้อมูลไม่ครบถ้วน', DGA_TEXT_DOMAIN)), 400);
    }

    $update_result = wp_update_term($term_id, $taxonomy, array(
        DGA_NAME_FIELD => $new_name
    ));

    if (is_wp_error($update_result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $update_result->get_error_message()), 500);
    } else {
        $updated_term = get_term($term_id, $taxonomy);
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => __('บันทึกสำเร็จ', DGA_TEXT_DOMAIN),
            'term' => array(
                DGA_TERM_ID_FIELD => $updated_term->term_id,
                DGA_NAME_FIELD => $updated_term->name,
                'slug' => $updated_term->slug,
                'count' => $updated_term->count
            )
        ));
    }
}

// AJAX Handler for Delete
add_action('wp_ajax_ckan_modern_delete_term_wkp789', 'ckan_modern_ajax_delete_term_wkp789');
function ckan_modern_ajax_delete_term_wkp789() {
    check_ajax_referer('ckan_modern_nonce_wkp789', 'nonce');
    
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ไม่มีสิทธิ์ดำเนินการ', DGA_TEXT_DOMAIN)), 403);
    }

    $term_id = isset($_POST[DGA_TERM_ID_FIELD]) ? intval($_POST[DGA_TERM_ID_FIELD]) : 0;
    $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_key($_POST[DGA_TAXONOMY_FIELD]) : '';

    if (empty($term_id) || empty($taxonomy)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ข้อมูลไม่ครบถ้วน', DGA_TEXT_DOMAIN)), 400);
    }

    $delete_result = wp_delete_term($term_id, $taxonomy);

    if (is_wp_error($delete_result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $delete_result->get_error_message()), 500);
    } elseif ($delete_result === false) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('ไม่สามารถลบได้', DGA_TEXT_DOMAIN)), 500);
    } else {
        wp_send_json_success(array(DGA_MESSAGE_KEY => __('ลบสำเร็จ', DGA_TEXT_DOMAIN)));
    }
}




/****** CKAN ACTIVITY LOG ********/



/**
 * CKAN Activity Log System - Complete Version
 * Version: 5.0
 * Description: ระบบบันทึกและแสดงผล Activity Log อัตโนมัติสำหรับ WordPress
 * Author: Your Name
 * License: GPL v2 or later
 */

// ============================================
// ========== CONFIGURATION ===================
// ============================================

if (!defined('CKAN_ACTION_TYPES_HJK729')) {
    define('CKAN_ACTION_TYPES_HJK729', [
        // กิจกรรมหลัก
        'Created' => [DGA_LABEL_FIELD => 'สร้าง', 'color' => '#4CAF50', 'icon' => 'dashicons-plus-alt'],
        'Edited' => [DGA_LABEL_FIELD => 'แก้ไข', 'color' => '#2196F3', 'icon' => 'dashicons-edit'],
        'Deleted' => [DGA_LABEL_FIELD => 'ลบ', 'color' => '#F44336', 'icon' => 'dashicons-trash'],
        'Viewed' => [DGA_LABEL_FIELD => 'ดู', 'color' => '#9C27B0', 'icon' => 'dashicons-visibility'],
        'Downloaded' => [DGA_LABEL_FIELD => 'ดาวน์โหลด', 'color' => '#FF9800', 'icon' => 'dashicons-download'],
        'API_Request' => [DGA_LABEL_FIELD => 'เรียก API', 'color' => '#00BCD4', 'icon' => 'dashicons-cloud'],
        'Published' => [DGA_LABEL_FIELD => 'เผยแพร่', 'color' => '#8BC34A', 'icon' => 'dashicons-admin-site'],
        'Unpublished' => [DGA_LABEL_FIELD => 'ยกเลิกเผยแพร่', 'color' => '#FFC107', 'icon' => 'dashicons-hidden'],
        // กิจกรรม User
        'User_Login' => [DGA_LABEL_FIELD => DGA_LOGIN_TEXT_TH, 'color' => '#4CAF50', 'icon' => 'dashicons-unlock'],
        'User_Logout' => [DGA_LABEL_FIELD => DGA_LOGOUT_TEXT_TH, 'color' => '#9E9E9E', 'icon' => 'dashicons-lock'],
        'Failed_Login' => [DGA_LABEL_FIELD => 'เข้าสู่ระบบไม่สำเร็จ', 'color' => '#F44336', 'icon' => 'dashicons-warning'],
        // กิจกรรมอื่นๆ
        'Uploaded' => [DGA_LABEL_FIELD => 'อัพโหลด', 'color' => '#00BCD4', 'icon' => 'dashicons-upload'],
        'Search' => [DGA_LABEL_FIELD => 'ค้นหา', 'color' => '#FF5722', 'icon' => 'dashicons-search'],
        'Commented' => [DGA_LABEL_FIELD => 'แสดงความคิดเห็น', 'color' => '#607D8B', 'icon' => 'dashicons-admin-comments'],
    ]);
}

// ============================================
// ========== REGISTER POST TYPE ==============
// ============================================

add_action('init', 'ckan_register_log_post_type_hjk729');
function ckan_register_log_post_type_hjk729() {
    if (!post_type_exists('ckan_term_log')) {
        register_post_type('ckan_term_log', [
            'labels' => [
                DGA_NAME_FIELD => 'CKAN Logs',
                'singular_name' => 'CKAN Log',
            ],
            'public' => false,
            'show_ui' => false,
            'show_in_menu' => false,
            'capability_type' => 'post',
            'supports' => [DGA_TITLE_FIELD],
            'rewrite' => false,
        ]);
    }
}

// ============================================
// ========== MAIN SHORTCODE ==================
// ============================================

function ckan_usage_report_shortcode_hjk729($atts) {
    // Parse attributes
    $atts = shortcode_atts([
        'period' => 'month',
        'limit' => 10,
    ], $atts, 'ckan-usage-report');
    
    // Security check
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        return '<div class="ckan-error-hjk729">⚠️ คุณไม่มีสิทธิ์เข้าถึงรายงานนี้</div>';
    }
    
    // Enqueue assets
    wp_enqueue_style(
        'ckan-history-style-hjk729',
        get_stylesheet_directory_uri() . '/css/ckan-history.css',
        [],
        '5.0'
    );
    
    wp_enqueue_script(
        'chart-js',
        'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js',
        [],
        '4.4.0',
        true
    );
    
    wp_enqueue_script(
        'ckan-history-script-hjk729',
        get_stylesheet_directory_uri() . '/js/ckan-history.js',
        [DGA_JQUERY_HANDLE, 'chart-js'],
        '5.0',
        true
    );
    
    // Localize script
    wp_localize_script('ckan-history-script-hjk729', 'ckanReport', [
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_nonce_hjk729'),
        'period' => $atts['period'],
        'limit' => intval($atts['limit']),
        'actionTypes' => CKAN_ACTION_TYPES_HJK729,
    ]);
    
    ob_start();
    ?>
    
    <div class="ckan-container-hjk729" data-period="<?php echo esc_attr($atts['period']); ?>">
        
        <!-- Header -->
        <div class="ckan-header-hjk729">
            <h2><span class="dashicons dashicons-chart-area"></span> รายงานการใช้งาน CKAN</h2>
            <div class="ckan-controls-hjk729">
                <select id="ckan-period" class="ckan-select-hjk729">
                    <option value="today">วันนี้</option>
                    <option value="week">7 วัน</option>
                    <option value="month" selected>30 วัน</option>
                    <option value="year">1 ปี</option>
                </select>
                <button id="ckan-refresh" class="ckan-btn-hjk729">
                    <span class="dashicons dashicons-update"></span> รีเฟรช
                </button>
                <button id="ckan-export" class="ckan-btn-hjk729">
                    <span class="dashicons dashicons-download"></span> CSV
                </button>
            </div>
        </div>
        
        <!-- Summary Cards -->
        <div class="ckan-cards-hjk729">
            <div class="ckan-card-hjk729">
                <div class="ckan-card-icon-hjk729" style="color: #4CAF50;">
                    <span class="dashicons dashicons-plus-alt"></span>
                </div>
                <div class="ckan-card-body-hjk729">
                    <div class="ckan-card-label-hjk729">สร้างใหม่</div>
                    <div class="ckan-card-value-hjk729" id="total-created">0</div>
                </div>
            </div>
            
            <div class="ckan-card-hjk729">
                <div class="ckan-card-icon-hjk729" style="color: #2196F3;">
                    <span class="dashicons dashicons-edit"></span>
                </div>
                <div class="ckan-card-body-hjk729">
                    <div class="ckan-card-label-hjk729">แก้ไข</div>
                    <div class="ckan-card-value-hjk729" id="total-edited">0</div>
                </div>
            </div>
            
            <div class="ckan-card-hjk729">
                <div class="ckan-card-icon-hjk729" style="color: #F44336;">
                    <span class="dashicons dashicons-trash"></span>
                </div>
                <div class="ckan-card-body-hjk729">
                    <div class="ckan-card-label-hjk729">ลบ</div>
                    <div class="ckan-card-value-hjk729" id="total-deleted">0</div>
                </div>
            </div>
            
            <div class="ckan-card-hjk729">
                <div class="ckan-card-icon-hjk729" style="color: #9C27B0;">
                    <span class="dashicons dashicons-admin-users"></span>
                </div>
                <div class="ckan-card-body-hjk729">
                    <div class="ckan-card-label-hjk729">ผู้ใช้งาน</div>
                    <div class="ckan-card-value-hjk729" id="total-users">0</div>
                </div>
            </div>
        </div>
        
        <!-- Charts -->
        <div class="ckan-charts-hjk729">
            <div class="ckan-chart-box-hjk729">
                <h3>แนวโน้มการใช้งาน</h3>
                <div style="position: relative; height: 250px;">
                    <canvas id="trend-chart"></canvas>
                </div>
            </div>
            
            <div class="ckan-chart-row-hjk729">
                <div class="ckan-chart-box-hjk729">
                    <h3>สัดส่วนการดำเนินการ</h3>
                    <div style="position: relative; height: 200px;">
                        <canvas id="action-chart"></canvas>
                    </div>
                </div>
                
                <div class="ckan-chart-box-hjk729">
                    <h3>ผู้ใช้งานมากที่สุด</h3>
                    <div style="position: relative; height: 200px;">
                        <canvas id="users-chart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Activities Table -->
        <div class="ckan-table-section-hjk729">
            <h3>กิจกรรมล่าสุด</h3>
            <div class="ckan-table-wrapper-hjk729">
                <table class="ckan-table-hjk729">
                    <thead>
                        <tr>
                            <th width="15%">วันที่-เวลา</th>
                            <th width="10%">การดำเนินการ</th>
                            <th width="20%">รายการ</th>
                            <th width="25%">รายละเอียด</th>
                            <th width="15%">ผู้ดำเนินการ</th>
                            <th width="15%">Taxonomy</th>
                        </tr>
                    </thead>
                    <tbody id="activities-tbody">
                        <tr><td colspan="6">กำลังโหลด...</td></tr>
                    </tbody>
                </table>
            </div>
            
            <div class="ckan-pagination-hjk729">
                <button id="prev-page" disabled>← ก่อนหน้า</button>
                <span>หน้า <span id="current-page">1</span> / <span id="total-pages">1</span></span>
                <button id="next-page">ถัดไป →</button>
            </div>
        </div>
        
    </div>
    
    <?php
    return ob_get_clean();
}
add_shortcode('ckan-usage-report', 'ckan_usage_report_shortcode_hjk729');

// ============================================
// ========== AJAX HANDLERS ===================
// ============================================

// Get dashboard data
add_action('wp_ajax_ckan_get_data_hjk729', 'ckan_ajax_get_data_hjk729');
function ckan_ajax_get_data_hjk729() {
    check_ajax_referer('ckan_nonce_hjk729', 'nonce');
    
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error('Unauthorized', 403);
    }
    
    global $wpdb;
    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'month';
    $start_date = ckan_get_start_date_hjk729($period);
    
    // Get filters
    $filters = isset($_POST['filters']) ? $_POST['filters'] : [];
    
    // Build filter conditions
    $where_conditions = [
        "p.post_type = 'ckan_term_log'",
        "p.post_status = DGA_PUBLISH_STATUS",
        $wpdb->prepare("p.post_date >= %s", $start_date)
    ];
    
    if (!empty($filters['action']) && $filters['action'] !== 'all') {
        $where_conditions[] = $wpdb->prepare("pm.meta_value = %s", $filters['action']);
    }
    
    if (!empty($filters['user']) && $filters['user'] !== 'all') {
        $where_conditions[] = $wpdb->prepare("pm2.meta_value LIKE %s", '%' . $wpdb->esc_like($filters['user']) . '%');
    }
    
    $where_clause = implode(' AND ', $where_conditions);
    
    // Optimized single query for summary
    $summary = $wpdb->get_results($wpdb->prepare("
        SELECT 
            SUM(CASE WHEN pm.meta_value = 'Created' THEN 1 ELSE 0 END) as created,
            SUM(CASE WHEN pm.meta_value = 'Edited' THEN 1 ELSE 0 END) as edited,
            SUM(CASE WHEN pm.meta_value = 'Deleted' THEN 1 ELSE 0 END) as deleted,
            SUM(CASE WHEN pm.meta_value = 'Downloaded' THEN 1 ELSE 0 END) as downloaded,
            SUM(CASE WHEN pm.meta_value = 'API_Request' THEN 1 ELSE 0 END) as api_requests,
            SUM(CASE WHEN pm.meta_value = 'User_Login' THEN 1 ELSE 0 END) as logins,
            SUM(CASE WHEN pm.meta_value = 'Uploaded' THEN 1 ELSE 0 END) as uploads,
            COUNT(DISTINCT pm2.meta_value) as users
        FROM {$wpdb->posts} p
        LEFT JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id AND pm.meta_key = '_ckan_log_action'
        LEFT JOIN {$wpdb->postmeta} pm2 ON p.ID = pm2.post_id AND pm2.meta_key = '_ckan_log_user_name'
        WHERE p.post_type = 'ckan_term_log'
        AND p.post_status = DGA_PUBLISH_STATUS
        AND p.post_date >= %s
    ", $start_date));
    
    // Get trend data for main action types
    $trend_data = $wpdb->get_results($wpdb->prepare("
        SELECT 
            DATE(p.post_date) as date,
            pm.meta_value as action,
            COUNT(*) as count
        FROM {$wpdb->posts} p
        INNER JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id
        WHERE p.post_type = 'ckan_term_log'
        AND p.post_status = DGA_PUBLISH_STATUS
        AND p.post_date >= %s
        AND pm.meta_key = '_ckan_log_action'
        AND pm.meta_value IN ('Created', 'Edited', 'Deleted', 'Downloaded')
        GROUP BY DATE(p.post_date), pm.meta_value
        ORDER BY date ASC
    ", $start_date));
    
    // Get action distribution
    $action_dist = $wpdb->get_results($wpdb->prepare("
        SELECT 
            pm.meta_value as action,
            COUNT(*) as count
        FROM {$wpdb->posts} p
        INNER JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id
        WHERE p.post_type = 'ckan_term_log'
        AND p.post_status = DGA_PUBLISH_STATUS
        AND p.post_date >= %s
        AND pm.meta_key = '_ckan_log_action'
        GROUP BY pm.meta_value
        ORDER BY count DESC
    ", $start_date));
    
    // Get top users
    $top_users = $wpdb->get_results($wpdb->prepare("
        SELECT 
            pm.meta_value as user,
            COUNT(*) as count
        FROM {$wpdb->posts} p
        INNER JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id
        WHERE p.post_type = 'ckan_term_log'
        AND p.post_status = DGA_PUBLISH_STATUS
        AND p.post_date >= %s
        AND pm.meta_key = '_ckan_log_user_name'
        AND pm.meta_value != ''
        GROUP BY pm.meta_value
        ORDER BY count DESC
        LIMIT 5
    ", $start_date));
    
    // Calculate total activities
    $total_activities = array_sum([
        intval($summary[0]->created),
        intval($summary[0]->edited),
        intval($summary[0]->deleted),
        intval($summary[0]->downloaded),
        intval($summary[0]->api_requests),
        intval($summary[0]->logins),
        intval($summary[0]->uploads)
    ]);
    
    wp_send_json_success([
        'summary' => [
            'created' => $summary[0]->created,
            'edited' => $summary[0]->edited,
            'deleted' => $summary[0]->deleted,
            'users' => $total_activities > 0 ? $summary[0]->users : 0,
            'logins' => $summary[0]->logins,
            'uploads' => $summary[0]->uploads
        ],
        'trend' => ckan_format_trend_data_hjk729($trend_data, $period),
        'actions' => ckan_format_action_data_hjk729($action_dist),
        'users' => ckan_format_users_data_hjk729($top_users),
    ]);
}

// Get activities
add_action('wp_ajax_ckan_get_activities_hjk729', 'ckan_ajax_get_activities_hjk729');
function ckan_ajax_get_activities_hjk729() {
    check_ajax_referer('ckan_nonce_hjk729', 'nonce');
    
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error('Unauthorized', 403);
    }
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'month';
    $filters = isset($_POST['filters']) ? $_POST['filters'] : [];
    
    $args = [
        DGA_POST_TYPE_FIELD => 'ckan_term_log',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => $per_page,
        DGA_PAGED_PARAMETER => $page,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC',
    ];
    
    // Date filter
    if ($period !== 'all') {
        $args['date_query'] = [
            ['after' => ckan_get_start_date_hjk729($period), 'inclusive' => true]
        ];
    }
    
    // Meta query for filters
    $meta_query = [];
    
    if (!empty($filters['action']) && $filters['action'] !== 'all') {
        $meta_query[] = [
            'key' => '_ckan_log_action',
            'value' => sanitize_text_field($filters['action']),
            'compare' => '='
        ];
    }
    
    if (!empty($filters['user']) && $filters['user'] !== 'all') {
        $meta_query[] = [
            'key' => '_ckan_log_user_name',
            'value' => sanitize_text_field($filters['user']),
            'compare' => 'LIKE'
        ];
    }
    
    if (!empty($meta_query)) {
        $args['meta_query'] = $meta_query;
    }
    
    $query = new WP_Query($args);
    $activities = [];
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // Get all metadata
            $action = get_post_meta($post_id, '_ckan_log_action', true);
            $term_name = get_post_meta($post_id, '_ckan_log_term_name', true) ?: '-';
            $user_name = get_post_meta($post_id, '_ckan_log_user_name', true) ?: 'Unknown';
            $taxonomy = get_post_meta($post_id, '_ckan_log_taxonomy_label', true) ?: get_post_meta($post_id, '_ckan_log_taxonomy', true) ?: '-';
            
            // Get detailed information based on action type
            $details = ckan_get_activity_details_hjk729($post_id, $action);
            
            $activities[] = [
                'time' => get_the_date('d/m/Y H:i:s'),
                'action' => $action,
                'term_name' => $term_name,
                'details' => $details,
                'user_name' => $user_name,
                DGA_TAXONOMY_FIELD => $taxonomy,
            ];
        }
        wp_reset_postdata();
    }
    
    wp_send_json_success([
        'activities' => $activities,
        'total_pages' => $query->max_num_pages,
        'current_page' => $page,
    ]);
}

// Export CSV
add_action('wp_ajax_ckan_export_csv_hjk729', 'ckan_ajax_export_csv_hjk729');
function ckan_ajax_export_csv_hjk729() {
    check_ajax_referer('ckan_nonce_hjk729', 'nonce');
    
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error('Unauthorized', 403);
    }
    
    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'month';
    $filters = isset($_POST['filters']) ? $_POST['filters'] : [];
    
    $args = [
        DGA_POST_TYPE_FIELD => 'ckan_term_log',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => 1000,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC',
    ];
    
    if ($period !== 'all') {
        $args['date_query'] = [
            ['after' => ckan_get_start_date_hjk729($period), 'inclusive' => true]
        ];
    }
    
    // Apply filters
    $meta_query = [];
    if (!empty($filters['action']) && $filters['action'] !== 'all') {
        $meta_query[] = [
            'key' => '_ckan_log_action',
            'value' => sanitize_text_field($filters['action']),
            'compare' => '='
        ];
    }
    
    if (!empty($meta_query)) {
        $args['meta_query'] = $meta_query;
    }
    
    $query = new WP_Query($args);
    $csv_data = [['วันที่-เวลา', 'การดำเนินการ', 'รายการ', 'รายละเอียด', 'ผู้ดำเนินการ', 'Taxonomy']];
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            $action = get_post_meta($post_id, '_ckan_log_action', true);
            $term_name = get_post_meta($post_id, '_ckan_log_term_name', true);
            $user_name = get_post_meta($post_id, '_ckan_log_user_name', true);
            $taxonomy = get_post_meta($post_id, '_ckan_log_taxonomy_label', true);
            
            $details = ckan_get_activity_details_hjk729($post_id, $action);
            
            $csv_data[] = [
                get_the_date('Y-m-d H:i:s'),
                CKAN_ACTION_TYPES_HJK729[$action][DGA_LABEL_FIELD] ?? $action,
                $term_name,
                strip_tags($details) ?: '-',
                $user_name,
                $taxonomy
            ];
        }
        wp_reset_postdata();
    }
    
    wp_send_json_success(['csv_data' => $csv_data]);
}

// ============================================
// ========== HELPER FUNCTIONS ================
// ============================================

function ckan_get_start_date_hjk729($period) {
    switch ($period) {
        case 'today': return date('Y-m-d 00:00:00');
        case 'week': return date('Y-m-d 00:00:00', strtotime('-7 days'));
        case 'month': return date('Y-m-d 00:00:00', strtotime('-30 days'));
        case 'year': return date('Y-m-d 00:00:00', strtotime('-365 days'));
        default: return date('Y-m-d 00:00:00', strtotime('-30 days'));
    }
}

function ckan_get_activity_details_hjk729($post_id, $action) {
    $details = '';
    
    switch($action) {
        case 'Edited':
            $field_changed = get_post_meta($post_id, '_ckan_log_field_changed', true);
            $old_value = get_post_meta($post_id, '_ckan_log_old_value', true);
            $new_value = get_post_meta($post_id, '_ckan_log_new_value', true);
            if ($field_changed) {
                $details = sprintf('แก้ไข %s: "%s" → "%s"', 
                    $field_changed, 
                    $old_value ?: '(ว่าง)', 
                    $new_value ?: '(ว่าง)'
                );
            } else {
                $details = 'แก้ไขข้อมูลทั่วไป';
            }
            break;
            
        case 'Downloaded':
            $file_name = get_post_meta($post_id, '_ckan_log_file_name', true);
            $file_size = get_post_meta($post_id, '_ckan_log_file_size', true);
            if ($file_name) {
                $details = sprintf('ไฟล์: %s', $file_name);
                if ($file_size) {
                    $details .= ' (' . ckan_format_bytes_hjk729($file_size) . ')';
                }
            } else {
                $details = 'ดาวน์โหลดไฟล์';
            }
            break;
            
        case 'API_Request':
            $dataset_id = get_post_meta($post_id, '_ckan_log_dataset_id', true);
            $api_method = get_post_meta($post_id, '_ckan_log_api_method', true);
            $api_endpoint = get_post_meta($post_id, '_ckan_log_api_endpoint', true);
            if ($api_endpoint) {
                $details = sprintf('[%s] %s', $api_method ?: 'GET', $api_endpoint);
            } else {
                $details = 'เรียกใช้ API';
            }
            break;
            
        case 'Published':
            $visibility = get_post_meta($post_id, '_ckan_log_visibility', true);
            $details = $visibility ? 'เผยแพร่แบบ: ' . $visibility : 'เผยแพร่ข้อมูล';
            break;
            
        case 'Unpublished':
            $new_status = get_post_meta($post_id, '_ckan_log_new_status', true);
            $details = $new_status ? 'เปลี่ยนสถานะเป็น: ' . $new_status : 'ยกเลิกเผยแพร่';
            break;
            
        case 'Created':
            $resource_type = get_post_meta($post_id, '_ckan_log_resource_type', true);
            $details = $resource_type ? 'ประเภท: ' . $resource_type : 'สร้างรายการใหม่';
            break;
            
        case 'User_Login':
            $login_time = get_post_meta($post_id, '_ckan_log_login_time', true);
            $user_role = get_post_meta($post_id, '_ckan_log_user_role', true);
            $details = $user_role ? 'Role: ' . $user_role : DGA_LOGIN_TEXT_TH;
            break;
            
        case 'Failed_Login':
            $ip_address = get_post_meta($post_id, '_ckan_log_ip_address', true);
            $details = $ip_address ? 'IP: ' . $ip_address : 'พยายามเข้าสู่ระบบไม่สำเร็จ';
            break;
            
        case 'Search':
            $search_query = get_post_meta($post_id, '_ckan_log_search_query', true);
            $results_count = get_post_meta($post_id, '_ckan_log_results_count', true);
            if ($search_query) {
                $details = sprintf('ค้นหา: "%s"', $search_query);
                if ($results_count !== false) {
                    $details .= sprintf(' (พบ %d รายการ)', $results_count);
                }
            }
            break;
            
        case 'Uploaded':
            $file_name = get_post_meta($post_id, '_ckan_log_file_name', true);
            $file_type = get_post_meta($post_id, '_ckan_log_file_type', true);
            if ($file_name) {
                $details = sprintf('ไฟล์: %s [%s]', $file_name, $file_type ?: 'unknown');
            } else {
                $details = 'อัพโหลดไฟล์';
            }
            break;
            
        case 'Commented':
            $comment_excerpt = get_post_meta($post_id, '_ckan_log_comment_excerpt', true);
            $details = $comment_excerpt ?: 'แสดงความคิดเห็น';
            break;
            
        default:
            $additional_info = get_post_meta($post_id, '_ckan_log_details', true);
            $details = $additional_info ?: '-';
    }
    
    return $details;
}

function ckan_format_trend_data_hjk729($data, $period) {
    $formatted = ['labels' => [], 'datasets' => []];
    
    // Main actions for trend chart
    $main_actions = ['Created', 'Edited', 'Deleted', 'Downloaded'];
    $colors = [
        'Created' => '#4CAF50',
        'Edited' => '#2196F3',
        'Deleted' => '#F44336',
        'Downloaded' => '#FF9800'
    ];
    
    // Generate date range
    $start = strtotime(ckan_get_start_date_hjk729($period));
    $end = strtotime('today 23:59:59');
    $date_format = ($period === 'year') ? 'M' : 'd/m';
    
    $date_data = [];
    for ($date = $start; $date <= $end; $date = strtotime('+1 day', $date)) {
        $date_key = date('Y-m-d', $date);
        $date_data[$date_key] = array_fill_keys($main_actions, 0);
        $formatted['labels'][] = date($date_format, $date);
    }
    
    // Fill actual data
    foreach ($data as $row) {
        if (isset($date_data[$row->date]) && in_array($row->action, $main_actions)) {
            $date_data[$row->date][$row->action] = intval($row->count);
        }
    }
    
    // Create datasets
    foreach ($main_actions as $action) {
        $action_info = CKAN_ACTION_TYPES_HJK729[$action];
        $dataset = [
            DGA_LABEL_FIELD => $action_info[DGA_LABEL_FIELD],
            'data' => array_column($date_data, $action),
            'borderColor' => $colors[$action],
            'backgroundColor' => $colors[$action] . '20',
            'tension' => 0.3,
        ];
        $formatted['datasets'][] = $dataset;
    }
    
    return $formatted;
}

function ckan_format_action_data_hjk729($data) {
    $formatted = ['labels' => [], 'data' => [], 'colors' => []];
    
    foreach ($data as $row) {
        $action_info = CKAN_ACTION_TYPES_HJK729[$row->action] ?? [DGA_LABEL_FIELD => $row->action, 'color' => '#999'];
        $formatted['labels'][] = $action_info[DGA_LABEL_FIELD];
        $formatted['data'][] = intval($row->count);
        $formatted['colors'][] = $action_info['color'];
    }
    
    return $formatted;
}

function ckan_format_users_data_hjk729($data) {
    $formatted = ['labels' => [], 'data' => []];
    
    foreach ($data as $row) {
        $formatted['labels'][] = $row->user;
        $formatted['data'][] = intval($row->count);
    }
    
    return $formatted;
}

function ckan_format_bytes_hjk729($bytes, $precision = 2) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    
    $bytes /= pow(1024, $pow);
    
    return round($bytes, $precision) . ' ' . $units[$pow];
}

// ============================================
// ========== LOGGING FUNCTION ================
// ============================================

function ckan_log_activity_hjk729($action, $term_name, $taxonomy, $user_id = null, $details = []) {
    if (!$user_id) {
        $user_id = get_current_user_id();
    }
    
    // Get user info
    if ($user_id > 0) {
        $user = get_user_by('id', $user_id);
        $user_name = $user ? $user->display_name : 'Unknown';
    } else {
        // Guest user
        $user_name = 'Guest (' . ($_SERVER['REMOTE_ADDR'] ?? 'Unknown IP') . ')';
    }
    
    $log_id = wp_insert_post([
        DGA_POST_TYPE_FIELD => 'ckan_term_log',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        'post_title' => sprintf('%s: %s', $action, $term_name),
        'post_author' => $user_id ?: 1 // Use admin ID if no user
    ]);
    
    if ($log_id && !is_wp_error($log_id)) {
        // Basic metadata
        update_post_meta($log_id, '_ckan_log_action', $action);
        update_post_meta($log_id, '_ckan_log_term_name', $term_name);
        update_post_meta($log_id, '_ckan_log_taxonomy', $taxonomy);
        
        // Get taxonomy label
        if (taxonomy_exists($taxonomy)) {
            $taxonomy_obj = get_taxonomy($taxonomy);
            update_post_meta($log_id, '_ckan_log_taxonomy_label', $taxonomy_obj->label);
        } else {
            update_post_meta($log_id, '_ckan_log_taxonomy_label', $taxonomy);
        }
        
        update_post_meta($log_id, '_ckan_log_user_id', $user_id);
        update_post_meta($log_id, '_ckan_log_user_name', $user_name);
        update_post_meta($log_id, '_ckan_log_timestamp', current_time('timestamp'));
        
        // IP Address
        if (isset($_SERVER['REMOTE_ADDR'])) {
            update_post_meta($log_id, '_ckan_log_ip_address', $_SERVER['REMOTE_ADDR']);
        }
        
        // Store additional details
        if (!empty($details)) {
            foreach ($details as $key => $value) {
                update_post_meta($log_id, '_ckan_log_' . $key, $value);
            }
        }
    }
    
    return $log_id;
}

// ============================================
// ========== AUTO LOGGING HOOKS ==============
// ============================================

/**
 * 1. TAXONOMY HOOKS - บันทึกการจัดการ Terms
 */

// Hook: สร้าง Term ใหม่
add_action('created_term', 'ckan_log_term_created_xyz456', 10, 3);
function ckan_log_term_created_xyz456($term_id, $tt_id, $taxonomy) {
    $allowed_taxonomies = apply_filters('ckan_allowed_taxonomies', ['category', 'post_tag']);
    
    if (in_array($taxonomy, $allowed_taxonomies) || apply_filters('ckan_log_all_taxonomies', false)) {
        $term = get_term($term_id);
        $taxonomy_obj = get_taxonomy($taxonomy);
        
        ckan_log_activity_hjk729(
            'Created',
            $term->name,
            $taxonomy,
            get_current_user_id(),
            [
                'resource_type' => 'taxonomy_term',
                DGA_TERM_ID_FIELD => $term_id,
                'term_slug' => $term->slug,
                'taxonomy_label' => $taxonomy_obj->label,
                'parent' => $term->parent,
                'details' => sprintf('สร้าง %s ใหม่', $taxonomy_obj->labels->singular_name)
            ]
        );
    }
}

// Hook: แก้ไข Term
add_action('edited_term', 'ckan_log_term_edited_xyz456', 10, 3);
function ckan_log_term_edited_xyz456($term_id, $tt_id, $taxonomy) {
    $allowed_taxonomies = apply_filters('ckan_allowed_taxonomies', ['category', 'post_tag']);
    
    if (in_array($taxonomy, $allowed_taxonomies) || apply_filters('ckan_log_all_taxonomies', false)) {
        $term = get_term($term_id);
        $taxonomy_obj = get_taxonomy($taxonomy);
        
        // ดึงข้อมูลเก่าจาก transient
        $old_data = get_transient('ckan_term_old_data_' . $term_id);
        
        $details = [
            'resource_type' => 'taxonomy_term',
            DGA_TERM_ID_FIELD => $term_id,
            'taxonomy_label' => $taxonomy_obj->label
        ];
        
        if ($old_data) {
            if ($old_data['name'] !== $term->name) {
                $details['field_changed'] = 'ชื่อ';
                $details['old_value'] = $old_data['name'];
                $details['new_value'] = $term->name;
            } elseif ($old_data['slug'] !== $term->slug) {
                $details['field_changed'] = 'slug';
                $details['old_value'] = $old_data['slug'];
                $details['new_value'] = $term->slug;
            } elseif ($old_data['description'] !== $term->description) {
                $details['field_changed'] = 'คำอธิบาย';
                $details['old_value'] = wp_trim_words($old_data['description'], 20);
                $details['new_value'] = wp_trim_words($term->description, 20);
            }
            delete_transient('ckan_term_old_data_' . $term_id);
        }
        
        ckan_log_activity_hjk729(
            'Edited',
            $term->name,
            $taxonomy,
            get_current_user_id(),
            $details
        );
    }
}

// Hook: เก็บข้อมูลเก่าก่อนแก้ไข
add_action('edit_term', 'ckan_store_old_term_data_xyz456', 10, 3);
function ckan_store_old_term_data_xyz456($term_id, $tt_id, $taxonomy) {
    $term = get_term($term_id);
    set_transient('ckan_term_old_data_' . $term_id, [
        DGA_NAME_FIELD => $term->name,
        'slug' => $term->slug,
        'description' => $term->description,
        'parent' => $term->parent
    ], 60);
}

// Hook: ลบ Term
add_action('pre_delete_term', 'ckan_log_term_deleted_xyz456', 10, 2);
function ckan_log_term_deleted_xyz456($term_id, $taxonomy) {
    $allowed_taxonomies = apply_filters('ckan_allowed_taxonomies', ['category', 'post_tag']);
    
    if (in_array($taxonomy, $allowed_taxonomies) || apply_filters('ckan_log_all_taxonomies', false)) {
        $term = get_term($term_id);
        $taxonomy_obj = get_taxonomy($taxonomy);
        
        ckan_log_activity_hjk729(
            'Deleted',
            $term->name,
            $taxonomy,
            get_current_user_id(),
            [
                'resource_type' => 'taxonomy_term',
                DGA_TERM_ID_FIELD => $term_id,
                'taxonomy_label' => $taxonomy_obj->label,
                'post_count' => $term->count,
                'details' => sprintf('ลบ %s (มี %d รายการ)', $taxonomy_obj->labels->singular_name, $term->count)
            ]
        );
    }
}

/**
 * 2. POST HOOKS - บันทึกการจัดการ Posts
 */

// Hook: สร้าง/เผยแพร่ Post
add_action('transition_post_status', 'ckan_log_post_status_xyz456', 10, 3);
function ckan_log_post_status_xyz456($new_status, $old_status, $post) {
    // Skip revisions and logs
    if ($post->post_type === 'revision' || $post->post_type === 'ckan_term_log') {
        return;
    }
    
    $allowed_post_types = apply_filters('ckan_allowed_post_types', ['post', 'page']);
    if (!in_array($post->post_type, $allowed_post_types) && !apply_filters('ckan_log_all_post_types', false)) {
        return;
    }
    
    $post_type_obj = get_post_type_object($post->post_type);
    
    // เผยแพร่ใหม่
    if ($old_status !== DGA_PUBLISH_STATUS && $new_status === DGA_PUBLISH_STATUS) {
        ckan_log_activity_hjk729(
            'Published',
            $post->post_title,
            $post->post_type,
            $post->post_author,
            [
                'resource_type' => $post->post_type,
                DGA_POST_ID_FIELD => $post->ID,
                'visibility' => 'public',
                'post_type_label' => $post_type_obj->label,
                'details' => sprintf('เผยแพร่ %s', $post_type_obj->labels->singular_name)
            ]
        );
    }
    // ยกเลิกเผยแพร่
    elseif ($old_status === DGA_PUBLISH_STATUS && $new_status !== DGA_PUBLISH_STATUS) {
        ckan_log_activity_hjk729(
            'Unpublished',
            $post->post_title,
            $post->post_type,
            $post->post_author,
            [
                'resource_type' => $post->post_type,
                DGA_POST_ID_FIELD => $post->ID,
                'new_status' => $new_status,
                'post_type_label' => $post_type_obj->label,
                'details' => sprintf('ยกเลิกเผยแพร่ %s', $post_type_obj->labels->singular_name)
            ]
        );
    }
    // สร้างใหม่
    elseif ($old_status === 'new' && $new_status === 'draft') {
        ckan_log_activity_hjk729(
            'Created',
            $post->post_title ?: 'ไม่มีชื่อ',
            $post->post_type,
            $post->post_author,
            [
                'resource_type' => $post->post_type,
                DGA_POST_ID_FIELD => $post->ID,
                DGA_STATUS_FIELD => $new_status,
                'post_type_label' => $post_type_obj->label,
                'details' => sprintf('สร้าง %s แบบร่าง', $post_type_obj->labels->singular_name)
            ]
        );
    }
}

// Hook: แก้ไข Post
add_action('post_updated', 'ckan_log_post_updated_xyz456', 10, 3);
function ckan_log_post_updated_xyz456($post_id, $post_after, $post_before) {
    // Skip auto-save and revision
    if (wp_is_post_revision($post_id) || wp_is_post_autosave($post_id)) {
        return;
    }
    
    if ($post_after->post_type === 'ckan_term_log') {
        return;
    }
    
    $allowed_post_types = apply_filters('ckan_allowed_post_types', ['post', 'page']);
    if (!in_array($post_after->post_type, $allowed_post_types) && !apply_filters('ckan_log_all_post_types', false)) {
        return;
    }
    
    // Check for actual changes
    $changes = [];
    if ($post_before->post_title !== $post_after->post_title) {
        $changes[DGA_TITLE_FIELD] = ['old' => $post_before->post_title, 'new' => $post_after->post_title];
    }
    if ($post_before->post_content !== $post_after->post_content) {
        $changes['content'] = ['old' => wp_trim_words($post_before->post_content, 20), 'new' => wp_trim_words($post_after->post_content, 20)];
    }
    
    if (!empty($changes)) {
        $post_type_obj = get_post_type_object($post_after->post_type);
        $field_changed = array_keys($changes)[0];
        
        ckan_log_activity_hjk729(
            'Edited',
            $post_after->post_title,
            $post_after->post_type,
            get_current_user_id(),
            [
                'resource_type' => $post_after->post_type,
                DGA_POST_ID_FIELD => $post_id,
                'field_changed' => $field_changed === DGA_TITLE_FIELD ? 'ชื่อ' : 'เนื้อหา',
                'old_value' => $changes[$field_changed]['old'],
                'new_value' => $changes[$field_changed]['new'],
                'post_type_label' => $post_type_obj->label
            ]
        );
    }
}

// Hook: ลบ Post
add_action('before_delete_post', 'ckan_log_post_deleted_xyz456', 10, 2);
function ckan_log_post_deleted_xyz456($post_id, $post) {
    if ($post->post_type === 'ckan_term_log') {
        return;
    }
    
    $allowed_post_types = apply_filters('ckan_allowed_post_types', ['post', 'page']);
    if (!in_array($post->post_type, $allowed_post_types) && !apply_filters('ckan_log_all_post_types', false)) {
        return;
    }
    
    $post_type_obj = get_post_type_object($post->post_type);
    
    ckan_log_activity_hjk729(
        'Deleted',
        $post->post_title,
        $post->post_type,
        get_current_user_id(),
        [
            'resource_type' => $post->post_type,
            DGA_POST_ID_FIELD => $post_id,
            'post_type_label' => $post_type_obj->label,
            'details' => sprintf('ลบ %s', $post_type_obj->labels->singular_name)
        ]
    );
}

/**
 * 3. VIEW TRACKING - บันทึกการเข้าดู
 */

// Hook: บันทึกการดู Single Post
add_action('wp', 'ckan_log_post_view_xyz456');
function ckan_log_post_view_xyz456() {
    if (is_singular() && !is_admin()) {
        global $post;
        
        $allowed_post_types = apply_filters('ckan_allowed_post_types', ['post', 'page']);
        if (!in_array($post->post_type, $allowed_post_types) && !apply_filters('ckan_log_all_views', false)) {
            return;
        }
        
        // Prevent duplicate logging in same session
        $session_key = 'viewed_post_' . $post->ID;
        if (!isset($_SESSION[$session_key])) {
            $_SESSION[$session_key] = true;
            
            $post_type_obj = get_post_type_object($post->post_type);
            
            ckan_log_activity_hjk729(
                'Viewed',
                $post->post_title,
                $post->post_type,
                get_current_user_id() ?: 0,
                [
                    'resource_type' => $post->post_type,
                    DGA_POST_ID_FIELD => $post->ID,
                    'post_type_label' => $post_type_obj->label,
                    'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? '',
                    'referer' => $_SERVER['HTTP_REFERER'] ?? ''
                ]
            );
        }
    }
}

/**
 * 4. USER ACTIVITY TRACKING
 */

// Hook: User Login
add_action('wp_login', 'ckan_log_user_login_xyz456', 10, 2);
function ckan_log_user_login_xyz456($user_login, $user) {
    ckan_log_activity_hjk729(
        'User_Login',
        $user_login,
        'user_activity',
        $user->ID,
        [
            'resource_type' => 'user',
            'user_email' => $user->user_email,
            'user_role' => implode(', ', $user->roles),
            'login_time' => current_time('mysql'),
            'details' => DGA_LOGIN_TEXT_TH
        ]
    );
}

// Hook: User Logout
add_action('wp_logout', 'ckan_log_user_logout_xyz456');
function ckan_log_user_logout_xyz456() {
    $user = wp_get_current_user();
    
    if ($user->ID) {
        ckan_log_activity_hjk729(
            'User_Logout',
            $user->user_login,
            'user_activity',
            $user->ID,
            [
                'resource_type' => 'user',
                'logout_time' => current_time('mysql'),
                'details' => DGA_LOGOUT_TEXT_TH
            ]
        );
    }
}

// Hook: Failed Login
add_action('wp_login_failed', 'ckan_log_failed_login_xyz456');
function ckan_log_failed_login_xyz456($username) {
    ckan_log_activity_hjk729(
        'Failed_Login',
        $username ?: 'Unknown',
        'user_activity',
        0,
        [
            'resource_type' => 'security',
            'ip_address' => $_SERVER['REMOTE_ADDR'] ?? '',
            'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? '',
            'details' => 'พยายามเข้าสู่ระบบไม่สำเร็จ'
        ]
    );
}

/**
 * 5. MEDIA UPLOAD TRACKING
 */

// Hook: Media Upload
add_action('add_attachment', 'ckan_log_media_upload_xyz456');
function ckan_log_media_upload_xyz456($attachment_id) {
    $attachment = get_post($attachment_id);
    $file_path = get_attached_file($attachment_id);
    
    ckan_log_activity_hjk729(
        'Uploaded',
        $attachment->post_title ?: basename($file_path),
        'media',
        get_current_user_id(),
        [
            'resource_type' => 'media',
            'attachment_id' => $attachment_id,
            'file_name' => basename($file_path),
            'file_size' => filesize($file_path),
            'file_type' => $attachment->post_mime_type,
            'details' => 'อัพโหลดไฟล์'
        ]
    );
}

/**
 * 6. SEARCH TRACKING
 */

// Hook: Search Queries
add_action('pre_get_posts', 'ckan_log_search_query_xyz456');
function ckan_log_search_query_xyz456($query) {
    if (!is_admin() && $query->is_main_query() && $query->is_search()) {
        $search_term = get_search_query();
        
        if ($search_term && !isset($_SESSION['searched_' . md5($search_term)])) {
            $_SESSION['searched_' . md5($search_term)] = true;
            
            ckan_log_activity_hjk729(
                'Search',
                $search_term,
                'search',
                get_current_user_id() ?: 0,
                [
                    'resource_type' => 'search',
                    'search_query' => $search_term,
                    'results_count' => $query->found_posts,
                    'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? '',
                    'referer' => $_SERVER['HTTP_REFERER'] ?? '',
                    'details' => sprintf('ค้นหา: %s', $search_term)
                ]
            );
        }
    }
}

/**
 * 7. SESSION MANAGEMENT
 */

// Start session
add_action('init', 'ckan_start_session_xyz456', 1);
function ckan_start_session_xyz456() {
    if (!session_id()) {
        session_start();
    }
}

// End session on logout
add_action('wp_logout', 'ckan_end_session_xyz456');
function ckan_end_session_xyz456() {
    session_destroy();
}

/**
 * 8. DATABASE CLEANUP
 */

// Schedule cleanup
add_action('wp', 'ckan_schedule_log_cleanup_xyz456');
function ckan_schedule_log_cleanup_xyz456() {
    if (!wp_next_scheduled('ckan_cleanup_old_logs')) {
        wp_schedule_event(time(), 'daily', 'ckan_cleanup_old_logs');
    }
}

// Clean old logs
add_action('ckan_cleanup_old_logs', 'ckan_cleanup_old_logs_xyz456');
function ckan_cleanup_old_logs_xyz456() {
    $days_to_keep = apply_filters('ckan_log_retention_days', 90);
    
    $args = [
        DGA_POST_TYPE_FIELD => 'ckan_term_log',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        'date_query' => [
            'before' => date('Y-m-d', strtotime("-{$days_to_keep} days"))
        ],
        DGA_POSTS_PER_PAGE => 100,
        DGA_FIELDS_PARAMETER => 'ids'
    ];
    
    $old_logs = get_posts($args);
    
    foreach ($old_logs as $log_id) {
        wp_delete_post($log_id, true);
    }
}

/**
 * 9. ADMIN SETTINGS PAGE
 */

// Add settings page
add_action('admin_menu', 'ckan_add_settings_page_xyz456');
function ckan_add_settings_page_xyz456() {
    add_submenu_page(
        'tools.php',
        'CKAN Log Settings',
        'CKAN Logs',
        DGA_MANAGE_OPTIONS_CAP,
        'ckan-log-settings',
        'ckan_settings_page_xyz456'
    );
}

// Settings page content
function ckan_settings_page_xyz456() {
    ?>
    <div class="wrap">
        <h1>CKAN Activity Log Settings</h1>
        
        <div class="card">
            <h2>📊 สถิติการใช้งาน</h2>
            <?php
            $total_logs = wp_count_posts('ckan_term_log')->publish;
            $today_logs = get_posts([
                DGA_POST_TYPE_FIELD => 'ckan_term_log',
                'date_query' => [['after' => 'today']],
                DGA_POSTS_PER_PAGE => -1,
                DGA_FIELDS_PARAMETER => 'ids'
            ]);
            ?>
            <p>Total Logs: <strong><?php echo number_format($total_logs); ?></strong></p>
            <p>Today's Activities: <strong><?php echo count($today_logs); ?></strong></p>
        </div>
        
        <div class="card">
            <h2>📝 วิธีใช้งาน Shortcode</h2>
            <p>คัดลอก shortcode นี้ไปวางในหน้าที่ต้องการแสดงรายงาน:</p>
            <pre style="background: #f5f5f5; padding: 10px; border-radius: 4px;">
[ckan-usage-report period="month" limit="20"]</pre>
            <p><strong>Parameters:</strong></p>
            <ul>
                <li><code>period</code>: today, week, month, year (default: month)</li>
                <li><code>limit</code>: จำนวนรายการต่อหน้า (default: 10)</li>
            </ul>
        </div>
        
        <div class="card">
            <h2>🗑️ ทำความสะอาด Database</h2>
            <p>ระบบจะลบ log ที่เก่ากว่า 90 วันอัตโนมัติทุกวัน</p>
            <form method="post">
                <?php wp_nonce_field('ckan_clear_logs', 'ckan_nonce'); ?>
                <button type=DGA_SUBMIT_TYPE name="clear_old_logs" class=DGA_BUTTON_TYPE>ลบ Log เก่าตอนนี้</button>
                <button type=DGA_SUBMIT_TYPE name="clear_all_logs" class="button button-secondary" 
                        onclick="return confirm('แน่ใจหรือไม่? การดำเนินการนี้ไม่สามารถย้อนกลับได้')">
                    ลบ Log ทั้งหมด
                </button>
            </form>
        </div>
    </div>
    <?php
    
    // Handle form submission
    if (isset($_POST['clear_old_logs']) && wp_verify_nonce($_POST['ckan_nonce'], 'ckan_clear_logs')) {
        ckan_cleanup_old_logs_xyz456();
        echo '<div class="notice notice-success"><p>✅ ลบ log เก่าเรียบร้อยแล้ว</p></div>';
    }
    
    if (isset($_POST['clear_all_logs']) && wp_verify_nonce($_POST['ckan_nonce'], 'ckan_clear_logs')) {
        $all_logs = get_posts([
            DGA_POST_TYPE_FIELD => 'ckan_term_log',
            DGA_POSTS_PER_PAGE => -1,
            DGA_FIELDS_PARAMETER => 'ids'
        ]);
        foreach ($all_logs as $log_id) {
            wp_delete_post($log_id, true);
        }
        echo '<div class="notice notice-success"><p>✅ ลบ log ทั้งหมดเรียบร้อยแล้ว</p></div>';
    }
}

// Flush rewrite rules on activation
register_activation_hook(__FILE__, 'ckan_flush_rewrite_rules_xyz456');
function ckan_flush_rewrite_rules_xyz456() {
    flush_rewrite_rules();
}









/****** ลบชุดข้อมูล CKAN ********/

// Shortcode function to display delete button for administrators
function cpd_delete_post_button_shortcode() {
    // Check if user is an administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        return ''; // Return empty if not an administrator
    }
    
    // Get current post ID
    $post_id = get_the_ID();
    
    // Enqueue necessary scripts and styles
    wp_enqueue_script(
        'cpd-delete-dataset-js', 
        get_stylesheet_directory_uri() . '/js/ckan-delete-dataset.js', 
        array(DGA_JQUERY_HANDLE), 
        DGA_VERSION_NUMBER, 
        true
    );
    
    wp_enqueue_style(
        'cpd-delete-dataset-css', 
        get_stylesheet_directory_uri() . '/css/ckan-delete-dataset.css', 
        array(), 
        DGA_VERSION_NUMBER
    );
    
    // Pass post ID to JavaScript
    wp_localize_script(
        'cpd-delete-dataset-js', 
        'cpdDeleteVars', 
        array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_POST_ID_FIELD => $post_id,
            DGA_NONCE_KEY => wp_create_nonce('cpd_delete_post_nonce')
        )
    );
    
    // Return the button HTML
    return '<button class="cpd-delete-post-btn" data-post-id="' . $post_id . '">Delete Post</button>
            <div id="cpd-delete-modal" class="cpd-modal">
                <div class="cpd-modal-content">
                    <div class="cpd-modal-header">
                        <h2>WARNING</h2>
                        <span class="cpd-close">&times;</span>
                    </div>
                    <div class="cpd-modal-body">
                        <div class="cpd-warning-icon">
                            <i class="dashicons dashicons-warning"></i>
                        </div>
                        <p>You are about to permanently delete this post.</p>
                        <p>This action cannot be undone. Are you sure?</p>
                    </div>
                    <div class="cpd-modal-footer">
                        <button class="cpd-cancel-btn">Cancel</button>
                        <button class="cpd-confirm-delete-btn">Delete Permanently</button>
                    </div>
                </div>
            </div>';
}
add_shortcode('cpd_delete_button', 'cpd_delete_post_button_shortcode');

// AJAX handler for post deletion
function cpd_delete_post_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'cpd_delete_post_nonce')) {
        wp_send_json_error(DGA_SECURITY_FAILED_MSG);
        exit;
    }
    
    // Check if user is an administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
        exit;
    }
    
    // Get post ID from request
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    
    // Delete the post
    if ($post_id > 0) {
        $result = wp_delete_post($post_id, true); // true means force delete
        
        if ($result) {
            wp_send_json_success(array(
                DGA_MESSAGE_KEY => 'Post deleted successfully',
                'redirect' => home_url()
            ));
        } else {
            wp_send_json_error('Failed to delete post');
        }
    } else {
        wp_send_json_error('Invalid post ID');
    }
    
    exit;
}
add_action('wp_ajax_cpd_delete_post', 'cpd_delete_post_ajax');


/**** ฟังก์ชั่นแสดงไฟล์ที่แนบสำหรับ โพสทั่วไป (ไม่ใช่ CKAN) *******/

function normal_post_attfile($atts) {
    // Enqueue necessary scripts and styles
    wp_enqueue_style('normal-post-attfile-css', get_stylesheet_directory_uri() . '/css/normal-post-attfile.css');
    wp_enqueue_script('normal-post-attfile-js', get_stylesheet_directory_uri() . '/js/normal-post-attfile.js', array(DGA_JQUERY_HANDLE), '1.0', true);
    
    // Pass AJAX URL to JavaScript
    wp_localize_script('normal-post-attfile-js', 'normal_post_attfile_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('normal_post_attfile_nonce')
    ));
    
    // Generate a unique ID for this instance
    $unique_id = 'normal-post-attfile-' . uniqid();
    
    // Start output buffering
    ob_start();
    
    // HTML Structure
    ?>
    <div class="normal-post-attfile-container" id="<?php echo $unique_id; ?>">
        <div class="normal-post-attfile-loading">กำลังโหลด...</div>
        <table class="normal-post-attfile-table">
            <thead>
                <tr>
                    <th>ชื่อไฟล์</th>
                    <th>วันที่นำเข้า</th>
                    <th>ดาวน์โหลด</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be loaded here via AJAX -->
            </tbody>
        </table>
    </div>
    
    <!-- Modal Popup -->
    <div id="normal-post-attfile-modal" class="normal-post-attfile-modal">
        <div class="normal-post-attfile-modal-content">
            <span class="normal-post-attfile-close">&times;</span>
            <div class="normal-post-attfile-modal-body">
                <!-- Preview content will be loaded here -->
            </div>
        </div>
    </div>
    
    <script>
        jQuery(document).ready(function($) {
            normalPostAttfileInit('<?php echo $unique_id; ?>');
        });
    </script>
    <?php
    
    // Return the buffered content
    return ob_get_clean();
}
add_shortcode('normal_post_attfile', 'normal_post_attfile');

/**
 * AJAX handler to fetch attachment files data
 */
function normal_post_attfile_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('normal_post_attfile_nonce', 'nonce');
    
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : get_the_ID();
    $files_data = array();
    
    // Get repeater field data
    if (function_exists('have_rows') && have_rows('at_file_standard', $post_id)) {
        while (have_rows('at_file_standard', $post_id)) {
            the_row();
            
            $file_name = get_sub_field('at_rp_file_name');
            $file_create = get_sub_field('at_rp_file_create');
            $file_url = get_sub_field('at_rp_file_url'); // Assuming there's a file URL field
            
            // Determine file type
            $file_extension = pathinfo($file_url, PATHINFO_EXTENSION);
            $file_type = 'other';
            
            if ($file_extension === 'pdf') {
                $file_type = 'pdf';
            } elseif (in_array($file_extension, array('jpg', 'jpeg', 'png', 'gif', 'webp'))) {
                $file_type = 'image';
            }
            
            $files_data[] = array(
                DGA_NAME_FIELD => $file_name,
                'date' => $file_create,
                'url' => $file_url,
                DGA_TYPE_FIELD => $file_type,
                'extension' => $file_extension
            );
        }
    }
    
    wp_send_json_success($files_data);
}
add_action('wp_ajax_normal_post_attfile', 'normal_post_attfile_ajax_handler');
add_action('wp_ajax_nopriv_normal_post_attfile', 'normal_post_attfile_ajax_handler');


/**** กำหนดให้เลืกใช้ Featuredimages กับทุกโพส โดยอัตโนมัติ ******/

/**
 * Post Featured Images
 *
 * Sets a default featured image for all posts (including custom post types)
 * that don't have a featured image. Uses an external image URL without
 * requiring the image to be uploaded again.
 *
 * @package     WordPress
 * @subpackage  Post_Featured_Images
 */

/**
 * Set default featured image for posts without one
 *
 * @param int $batch_size Number of posts to process at once
 * @return array Results of the process
 */
function post_featured_images_set_default($batch_size = 50) {
    // Make sure the required files are included
    if (!function_exists('media_handle_sideload')) {
        require_once ABSPATH . 'wp-admin/includes/media.php';
        require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
        require_once ABSPATH . 'wp-admin/includes/image.php';
    }
    
    // Default image URL
    $default_image_url = 'https://standard.wpdevs.co/wp-content/uploads/2025/03/no-images-scaled-2.jpg';
    
    // Results tracking
    $results = array(
        'processed' => 0,
        'updated' => 0,
        'skipped' => 0,
        'post_types' => array()
    );
    
    // Get all post types
    $post_types = get_post_types(array('public' => true));
    
    // Process each post type
    foreach ($post_types as $post_type) {
        // Initialize post type stats
        $results['post_types'][$post_type] = array(
            'processed' => 0,
            'updated' => 0,
            'skipped' => 0
        );
        
        // Get all posts without featured image for this post type
        $args = array(
            DGA_POST_TYPE_FIELD      => $post_type,
            DGA_POSTS_PER_PAGE => $batch_size,
            DGA_FIELDS_PARAMETER         => 'ids', // Only get post IDs for better performance
            'meta_query'     => array(
                array(
                    'key'     => '_thumbnail_id',
                    'compare' => 'NOT EXISTS'
                )
            )
        );
        
        $query = new WP_Query($args);
        $posts_without_thumbnail = $query->posts;
        $total_posts = $query->found_posts;
        
        if (!empty($posts_without_thumbnail)) {
            foreach ($posts_without_thumbnail as $post_id) {
                $results['processed']++;
                $results['post_types'][$post_type]['processed']++;
                
                // Set default featured image
                if (post_featured_images_set_image($post_id, $default_image_url)) {
                    $results['updated']++;
                    $results['post_types'][$post_type]['updated']++;
                } else {
                    $results['skipped']++;
                    $results['post_types'][$post_type]['skipped']++;
                }
            }
        }
        
        // Update total posts count
        $results['post_types'][$post_type][DGA_TOTAL_FIELD_KEY] = $total_posts;
    }
    
    // Mark as processed
    update_option('post_featured_images_last_run', current_time('mysql'));
    
    return $results;
}

/**
 * Helper function to set the featured image from URL
 *
 * @param int $post_id The post ID
 * @param string $image_url The image URL
 * @return bool True on success, false on failure
 */
function post_featured_images_set_image($post_id, $image_url) {
    // Skip if already has featured image
    if (has_post_thumbnail($post_id)) {
        return false;
    }
    
    // Make sure the required files are included
    if (!function_exists('media_handle_sideload')) {
        require_once ABSPATH . 'wp-admin/includes/media.php';
        require_once ABSPATH . DGA_WP_FILE_INCLUDE_PATH;
        require_once ABSPATH . 'wp-admin/includes/image.php';
    }
    
    // First, check if the image already exists in the media library
    $image_id = post_featured_images_get_image_id($image_url);
    
    // If image doesn't exist in media library, we need to add it
    if (!$image_id) {
        // Get the file name and type
        $file = array();
        $file['name'] = basename($image_url);
        $file['tmp_name'] = download_url($image_url);
        
        // Check for download errors
        if (is_wp_error($file['tmp_name'])) {
            @unlink($file['tmp_name']);
            return false;
        }
        
        // Upload the image and get attachment ID
        $attachment_id = media_handle_sideload($file, $post_id);
        
        // Check for upload errors
        if (is_wp_error($attachment_id)) {
            @unlink($file['tmp_name']);
            return false;
        }
        
        $image_id = $attachment_id;
    }
    
    // Set the featured image
    return set_post_thumbnail($post_id, $image_id);
}

/**
 * Get attachment ID from image URL
 *
 * @param string $image_url The image URL
 * @return int|bool The attachment ID if found, or false if not
 */
function post_featured_images_get_image_id($image_url) {
    global $wpdb;
    
    // Get the filename from URL
    $filename = basename($image_url);
    
    // Search for the image in the database
    $attachment = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE guid LIKE %s OR post_name = %s;", '%' . $filename, pathinfo($filename, PATHINFO_FILENAME)));
    
    // Return the attachment ID if found, or false if not
    return isset($attachment[0]) ? $attachment[0] : false;
}

/**
 * Check and set featured image when post is saved
 *
 * @param int $post_id The post ID
 * @return void
 */
function post_featured_images_check_on_save($post_id) {
    // Skip REST API requests
    if (defined('REST_REQUEST') && REST_REQUEST) {
        return;
    }
    
    // Skip autosaves and revisions
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }
    
    // Get post type
    $post_type = get_post_type($post_id);
    
    // Skip if not a public post type
    if (!in_array($post_type, get_post_types(array('public' => true)))) {
        return;
    }
    
    // Check if post already has a featured image
    if (!has_post_thumbnail($post_id)) {
        // Set default featured image
        post_featured_images_set_image($post_id, 'https://standard.wpdevs.co/wp-content/uploads/2025/03/no-images-scaled-2.jpg');
    }
}
add_action('save_post', 'post_featured_images_check_on_save');

/**
 * Enqueue scripts and styles
 *
 * @return void
 */
function post_featured_images_enqueue_scripts() {
    // Get the theme directory URI
    $theme_uri = get_stylesheet_directory_uri();
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'post-featured-images-js',
        $theme_uri . '/js/post-featured-images.js',
        array(DGA_JQUERY_HANDLE),
        DGA_VERSION_NUMBER,
        true
    );
    
    // Enqueue CSS
    wp_enqueue_style(
        'post-featured-images-css',
        $theme_uri . '/css/post-featured-images.css',
        array(),
        DGA_VERSION_NUMBER
    );
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'post_featured_images_enqueue_scripts');

/**
 * Process existing posts in batches via AJAX
 */
function post_featured_images_process_existing_posts_ajax() {
    // Verify nonce
    check_admin_referer('post_featured_images_action');
    
    // Check permissions
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error(DGA_PERMISSION_DENIED_MESSAGE);
    }
    
    // Process batch
    $batch_size = isset($_POST['batch_size']) ? intval($_POST['batch_size']) : 20;
    $results = post_featured_images_set_default($batch_size);
    
    // Send response
    wp_send_json_success($results);
}
add_action('wp_ajax_post_featured_images_process_batch', 'post_featured_images_process_existing_posts_ajax');

/**
 * Add admin menu
 *
 * @return void
 */
function post_featured_images_admin_menu() {
    add_management_page(
        'Set Default Featured Images',
        'Set Default Featured Images',
        DGA_MANAGE_OPTIONS_CAP,
        'post-featured-images',
        'post_featured_images_admin_page'
    );
}
add_action('admin_menu', 'post_featured_images_admin_menu');

/**
 * Admin page callback
 *
 * @return void
 */
function post_featured_images_admin_page() {
    // Process form submission for manual processing
    if (isset($_POST['post_featured_images_submit']) && check_admin_referer('post_featured_images_action')) {
        $batch_size = isset($_POST['batch_size']) ? intval($_POST['batch_size']) : 50;
        $results = post_featured_images_set_default($batch_size);
        
        if ($results['updated'] > 0) {
            echo '<div class="notice notice-success"><p>' . 
                sprintf(
                    __('Default featured images have been set for %d posts. %d posts were processed in total.', 'post-featured-images'),
                    $results['updated'],
                    $results['processed']
                ) . 
                '</p></div>';
        } else {
            echo '<div class="notice notice-info"><p>' . 
                __('No posts were updated. All posts may already have featured images.', 'post-featured-images') . 
                '</p></div>';
        }
    }
    
    // Display the admin page
    ?>
    <div class="wrap">
        <h1><?php _e('Set Default Featured Images', 'post-featured-images'); ?></h1>
        
        <div class="card">
            <h2><?php _e('Process All Posts', 'post-featured-images'); ?></h2>
            <p><?php _e('This will set the default featured image for all posts (including custom post types) that do not have a featured image.', 'post-featured-images'); ?></p>
            
            <form method="post" action="">
                <?php wp_nonce_field('post_featured_images_action'); ?>
                <div class="form-field">
                    <label for="batch_size">
                        <?php _e('Posts to process per batch:', 'post-featured-images'); ?>
                    </label>
                    <input type="number" id="batch_size" name="batch_size" value="50" min="1" max="100">
                    <p class="description">
                        <?php _e('Larger values are faster but may timeout on some servers.', 'post-featured-images'); ?>
                    </p>
                </div>
                
                <input type=DGA_SUBMIT_TYPE name="post_featured_images_submit" class="button button-primary" value="<?php _e('Process Now', 'post-featured-images'); ?>">
            </form>
        </div>
        
        <div class="card" style="margin-top: 20px;">
            <h2><?php _e('AJAX Processing', 'post-featured-images'); ?></h2>
            <p><?php _e('For sites with many posts, use this method to process posts in batches without timeouts.', 'post-featured-images'); ?></p>
            
            <div id="post-featured-images-ajax-form">
                <input type="hidden" id="post-featured-images-nonce" value="<?php echo wp_create_nonce('post_featured_images_action'); ?>">
                
                <div class="form-field">
                    <label for="ajax_batch_size">
                        <?php _e('Posts to process per batch:', 'post-featured-images'); ?>
                    </label>
                    <input type="number" id="ajax_batch_size" value="20" min="1" max="50">
                </div>
                
                <div id="post-featured-images-progress" style="display: none; margin: 15px 0;">
                    <div class="progress-bar" style="background-color: #f1f1f1; height: 20px; position: relative; width: 100%;">
                        <div class="progress-bar-fill" style="background-color: #0073aa; height: 20px; width: 0%; transition: width 0.3s;"></div>
                        <div class="progress-bar-text" style="position: absolute; top: 0; left: 0; right: 0; text-align: center; line-height: 20px; color: #000;"></div>
                    </div>
                    <p class="description progress-status"></p>
                </div>
                
                <button id="post-featured-images-start-ajax" class="button button-primary">
                    <?php _e('Start Processing', 'post-featured-images'); ?>
                </button>
                <button id="post-featured-images-stop-ajax" class=DGA_BUTTON_TYPE style="display: none;">
                    <?php _e('Stop Processing', 'post-featured-images'); ?>
                </button>
            </div>
            
            <div id="post-featured-images-results" style="margin-top: 20px; display: none;">
                <h3><?php _e('Processing Results', 'post-featured-images'); ?></h3>
                <pre id="post-featured-images-results-data" style="background: #f1f1f1; padding: 10px; overflow: auto;"></pre>
            </div>
        </div>
    </div>
    
    <script>
    jQuery(document).ready(function($) {
        let isProcessing = false;
        let shouldStop = false;
        let totalProcessed = 0;
        let totalUpdated = 0;
        
        $('#post-featured-images-start-ajax').on('click', function(e) {
            e.preventDefault();
            
            // Reset counters
            totalProcessed = 0;
            totalUpdated = 0;
            shouldStop = false;
            
            // Update UI
            $('#post-featured-images-progress').show();
            $('#post-featured-images-results').hide();
            $('#post-featured-images-start-ajax').hide();
            $('#post-featured-images-stop-ajax').show();
            $('.progress-bar-fill').width('0%');
            $('.progress-bar-text').text('0%');
            $('.progress-status').text('<?php _e('Processing...', 'post-featured-images'); ?>');
            
            // Start processing
            isProcessing = true;
            processBatch();
        });
        
        $('#post-featured-images-stop-ajax').on('click', function(e) {
            e.preventDefault();
            shouldStop = true;
            $(this).text('<?php _e('Stopping...', 'post-featured-images'); ?>');
        });
        
        function processBatch() {
            if (shouldStop) {
                isProcessing = false;
                $('#post-featured-images-stop-ajax').hide();
                $('#post-featured-images-start-ajax').show();
                $('.progress-status').text('<?php _e('Processing stopped by user.', 'post-featured-images'); ?>');
                return;
            }
            
            const batchSize = $('#ajax_batch_size').val();
            
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'post_featured_images_process_batch',
                    _wpnonce: $('#post-featured-images-nonce').val(),
                    batch_size: batchSize
                },
                success: function(response) {
                    if (response.success) {
                        const data = response.data;
                        
                        // Update counters
                        totalProcessed += data.processed;
                        totalUpdated += data.updated;
                        
                        // Update progress display
                        $('#post-featured-images-results-data').html(
                            'Processed: ' + totalProcessed + '\n' +
                            'Updated: ' + totalUpdated + '\n' +
                            'Skipped: ' + (totalProcessed - totalUpdated)
                        );
                        
                        // Display results
                        $('#post-featured-images-results').show();
                        
                        // Continue if there are more posts to process
                        if (data.processed > 0) {
                            // Update progress bar (approximation as we don't know total count)
                            $('.progress-status').text('Processed ' + totalProcessed + ' posts, updated ' + totalUpdated + ' posts.');
                            
                            // Continue processing
                            processBatch();
                        } else {
                            // Finished
                            isProcessing = false;
                            $('#post-featured-images-stop-ajax').hide();
                            $('#post-featured-images-start-ajax').show();
                            $('.progress-bar-fill').width('100%');
                            $('.progress-bar-text').text('100%');
                            $('.progress-status').text('<?php _e('Processing complete!', 'post-featured-images'); ?>');
                        }
                    } else {
                        // Error
                        isProcessing = false;
                        $('#post-featured-images-stop-ajax').hide();
                        $('#post-featured-images-start-ajax').show();
                        $('.progress-status').text('<?php _e('Error: ', 'post-featured-images'); ?>' + response.data);
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Error
                    isProcessing = false;
                    $('#post-featured-images-stop-ajax').hide();
                    $('#post-featured-images-start-ajax').show();
                    $('.progress-status').text('<?php _e('Error: ', 'post-featured-images'); ?>' + textStatus + ' - ' + errorThrown);
                }
            });
        }
    });
    </script>
    <?php
}

/**
 * Process all existing posts automatically
 * This is executed when the code is first loaded
 */
function post_featured_images_auto_process_existing() {
    // Check if already processed
    if (get_option('post_featured_images_auto_processed')) {
        return;
    }
    
    // Process small batch (10 posts) immediately
    post_featured_images_set_default(10);
    
    // Schedule a single event to process more posts in the background
    if (!wp_next_scheduled('post_featured_images_process_batch')) {
        wp_schedule_single_event(time() + 60, 'post_featured_images_process_batch');
    }
    
    // Mark as processed
    update_option('post_featured_images_auto_processed', true);
}

/**
 * Process batch of posts in the background
 */
function post_featured_images_process_batch_callback() {
    // Process a batch of 50 posts
    post_featured_images_set_default(50);
    
    // Schedule next batch if needed
    $args = array(
        DGA_POST_TYPE_FIELD      => get_post_types(array('public' => true)),
        DGA_POSTS_PER_PAGE => 1,
        DGA_FIELDS_PARAMETER         => 'ids',
        'meta_query'     => array(
            array(
                'key'     => '_thumbnail_id',
                'compare' => 'NOT EXISTS'
            )
        )
    );
    
    $query = new WP_Query($args);
    
    if ($query->found_posts > 0) {
        // Schedule next batch
        wp_schedule_single_event(time() + 300, 'post_featured_images_process_batch');
    }
}
add_action('post_featured_images_process_batch', 'post_featured_images_process_batch_callback');

// Run the auto-processor when the code is loaded
post_featured_images_auto_process_existing();

/**
 * Create JS and CSS files if they don't exist
 */
function post_featured_images_create_files() {
    // Check child theme directory paths
    $child_theme_dir = get_stylesheet_directory();
    $js_dir = $child_theme_dir . '/js';
    $css_dir = $child_theme_dir . '/css';
    
    // Create directories if they don't exist
    if (!file_exists($js_dir)) {
        wp_mkdir_p($js_dir);
    }
    
    if (!file_exists($css_dir)) {
        wp_mkdir_p($css_dir);
    }
    
    // Create JS file if it doesn't exist
    $js_file = $js_dir . '/post-featured-images.js';
    if (!file_exists($js_file)) {
        $js_content = <<<'EOT'
/**
 * Post Featured Images JavaScript
 */
(function($) {
    'use strict';
    
    // Wait for the document to be ready
    $(document).ready(function() {
        // Handle image loading errors
        $('.post-featured-image').on(DGA_ERROR_STATUS, function() {
            $(this).attr('src', 'https://standard.wpdevs.co/wp-content/uploads/2025/03/no-images-scaled-2.jpg');
            $(this).addClass('fallback-featured-image');
        });
    });
    
})(jQuery);
EOT;
        file_put_contents($js_file, $js_content);
    }
    
    // Create CSS file if it doesn't exist
    $css_file = $css_dir . '/post-featured-images.css';
    if (!file_exists($css_file)) {
        $css_content = <<<'EOT'
/**
 * Post Featured Images CSS
 */

/* Styles for post featured images */
.post-featured-image {
    display: block;
    width: 100%;
    height: auto;
    margin-bottom: 20px;
}

/* Style for fallback image */
.fallback-featured-image {
    border: 1px solid #ddd;
}

/* Style for no-image placeholder */
.no-featured-image {
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    padding: 20px;
    text-align: center;
}
EOT;
        file_put_contents($css_file, $css_content);
    }
}
add_action('init', 'post_featured_images_create_files');



/**** ระบบเปิด-ปิด Post CKAN *****/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Initialize Post Status Toggle System
 */
function ckan_post_status_pst638_init() {
    // Register shortcode
    add_shortcode('ckan_post_status', 'ckan_post_status_pst638_shortcode');
    
    // Register AJAX handlers
    add_action('wp_ajax_ckan_post_status_pst638', 'ckan_post_status_pst638_ajax_handler');
    add_action('wp_ajax_nopriv_ckan_post_status_pst638', 'ckan_post_status_pst638_ajax_denied');
}
add_action('init', 'ckan_post_status_pst638_init');

/**
 * Shortcode function with Consent-style UI
 */
function ckan_post_status_pst638_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        DGA_POST_ID_FIELD => get_the_ID(),
        'style' => 'default', // default, compact
        'show_icon' => 'yes',
        'confirm' => 'no'
    ), $atts, 'ckan_post_status');
    
    // Enqueue assets
    wp_enqueue_style('ckan-post-status-css-pst638', get_stylesheet_directory_uri() . '/css/ckan-post-status-pst638.css', array(), '2.1.0');
    wp_enqueue_script('ckan-post-status-js-pst638', get_stylesheet_directory_uri() . '/js/ckan-post-status-pst638.js', array(DGA_JQUERY_HANDLE), '2.1.0', true);
    
    // Localize script
    wp_localize_script('ckan-post-status-js-pst638', 'ckanStatusConfig', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_status_pst638_nonce'),
        'confirm' => $atts['confirm']
    ));
    
    $post_id = absint($atts[DGA_POST_ID_FIELD]);
    $post = get_post($post_id);
    
    // Validate post
    if (!$post) {
        return sprintf(
            '<div class="ckan-status-notice-pst638">%s</div>',
            esc_html__('ไม่พบโพสต์', DGA_TEXT_DOMAIN)
        );
    }
    
    // Check permissions
    $current_user_id = get_current_user_id();
    $can_edit = false;
    
    if ($current_user_id == $post->post_author) {
        $can_edit = current_user_can('edit_post', $post_id);
    } elseif (current_user_can('edit_others_posts')) {
        $can_edit = true;
    }
    
    if (!$can_edit) {
        return '<div class="ckan-status-notice-pst638">' . __('คุณไม่มีสิทธิ์เปลี่ยนสถานะโพสต์นี้', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    // Get current status and terms
    $status = $post->post_status;
    $is_published = ($status === DGA_PUBLISH_STATUS);
    $current_terms = wp_get_post_terms($post_id, 'cgov', array(DGA_FIELDS_PARAMETER => 'names'));
    $is_secret = in_array('ข้อมูลลับ', $current_terms);
    
    // Determine toggle state
    $toggle_class = $is_published && !$is_secret ? 'is-public' : 'is-private';
    
    // Build output with Consent-style UI
    $output = '
    <div class="ckan-status-toggle-container-pst638 ' . esc_attr($atts['style']) . '" data-post-id="' . esc_attr($post_id) . '" data-confirm="' . esc_attr($atts['confirm']) . '">
        <div class="ckan-status-toggle-wrapper-pst638">
            <div class="ckan-status-label-pst638 public-label-pst638">' . __('เผยแพร่ (เปิด)', DGA_TEXT_DOMAIN) . '</div>
            <div class="ckan-status-toggle-pst638 ' . $toggle_class . '" data-current-status="' . esc_attr($status) . '">
                <div class="ckan-status-toggle-slider-pst638"></div>
            </div>
            <div class="ckan-status-label-pst638 private-label-pst638">' . __('ซ่อน (ปิด)', DGA_TEXT_DOMAIN) . '</div>
        </div>
        <div class="ckan-status-display-pst638">
            <span class="status-text-pst638">' . ($is_published && !$is_secret ? __('สถานะ: เผยแพร่อยู่', DGA_TEXT_DOMAIN) : __('สถานะ: ซ่อนอยู่', DGA_TEXT_DOMAIN)) . '</span>
            <span class="status-icon-pst638"></span>
        </div>';
    
    // Add post info
    if ($status === 'pending') {
        $output .= '<div class="ckan-status-info-pst638">' . __('โพสต์นี้รอการอนุมัติ', DGA_TEXT_DOMAIN) . '</div>';
    } elseif ($status === 'draft') {
        $output .= '<div class="ckan-status-info-pst638">' . __('โพสต์นี้เป็นแบบร่าง', DGA_TEXT_DOMAIN) . '</div>';
    }
    
    $output .= '</div>';
    
    return $output;
}

/**
 * AJAX handler for status change
 */
function ckan_post_status_pst638_ajax_handler() {
    // Verify nonce
    if (!check_ajax_referer('ckan_status_pst638_nonce', 'nonce', false)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)
        ), 403);
    }
    
    // Get inputs
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? absint($_POST[DGA_POST_ID_FIELD]) : 0;
    $make_public = isset($_POST['make_public']) && $_POST['make_public'] === 'true';
    
    if (!$post_id) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('ID โพสต์ไม่ถูกต้อง', DGA_TEXT_DOMAIN)
        ), 400);
    }
    
    // Get post
    $post = get_post($post_id);
    if (!$post) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('ไม่พบโพสต์', DGA_TEXT_DOMAIN)
        ), 404);
    }
    
    // Check permissions
    $current_user_id = get_current_user_id();
    $can_edit = false;
    
    if ($current_user_id == $post->post_author) {
        $can_edit = current_user_can('edit_post', $post_id);
    } elseif (current_user_can('edit_others_posts')) {
        $can_edit = true;
    }
    
    if (!$can_edit) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้', DGA_TEXT_DOMAIN)
        ), 403);
    }
    
    $success = true;
    $errors = array();
    
    // Update based on public/private state
    if ($make_public) {
        // Make public - publish and set as public data
        
        // Update taxonomy to ข้อมูลสาธารณะ
        $term_result = wp_set_object_terms($post_id, 'ข้อมูลสาธารณะ', 'cgov', false);
        if (is_wp_error($term_result)) {
            $errors[] = $term_result->get_error_message();
            $success = false;
        }
        
        // Update post status to publish
        $status_result = wp_update_post(array(
            'ID' => $post_id,
            DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
        ), true);
        
        if (is_wp_error($status_result)) {
            $errors[] = $status_result->get_error_message();
            $success = false;
        }
        
        $new_status = DGA_PUBLISH_STATUS;
        $message = __('โพสต์เผยแพร่เรียบร้อยแล้ว', DGA_TEXT_DOMAIN);
        
    } else {
        // Make private - set to pending and mark as secret
        
        // Update taxonomy to ข้อมูลลับ
        $term_result = wp_set_object_terms($post_id, 'ข้อมูลลับ', 'cgov', false);
        if (is_wp_error($term_result)) {
            $errors[] = $term_result->get_error_message();
            $success = false;
        }
        
        // Update post status to pending
        $status_result = wp_update_post(array(
            'ID' => $post_id,
            DGA_POST_STATUS_FIELD => 'pending'
        ), true);
        
        if (is_wp_error($status_result)) {
            $errors[] = $status_result->get_error_message();
            $success = false;
        }
        
        $new_status = 'pending';
        $message = __('ซ่อนโพสต์เรียบร้อยแล้ว', DGA_TEXT_DOMAIN);
    }
    
    // Clear caches
    clean_post_cache($post_id);
    
    // Get updated post info
    $updated_post = get_post($post_id);
    $updated_terms = wp_get_post_terms($post_id, 'cgov', array(DGA_FIELDS_PARAMETER => 'names'));
    
    if ($success) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => $message,
            DGA_STATUS_FIELD => $new_status,
            'make_public' => $make_public,
            DGA_POST_STATUS_FIELD => $updated_post->post_status,
            'terms' => $updated_terms
        ));
    } else {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('เกิดข้อผิดพลาดในการอัปเดต', DGA_TEXT_DOMAIN),
            'errors' => $errors
        ));
    }
    
    die();
}

/**
 * AJAX handler for non-logged in users
 */
function ckan_post_status_pst638_ajax_denied() {
    wp_send_json_error(array(
        DGA_MESSAGE_KEY => __('กรุณาเข้าสู่ระบบ', DGA_TEXT_DOMAIN)
    ), 401);
}




/**** ระบบสถิติข้อมูลมาตรฐานองค์กร *****/


// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Register the shortcode
add_shortcode('news_statistics', 'news_statistics_shortcode');

// Register scripts and styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'news_statistics_enqueue_assets');

// Register AJAX handlers
add_action('wp_ajax_get_news_statistics', 'get_news_statistics_ajax_handler');
add_action('wp_ajax_nopriv_get_news_statistics', 'get_news_statistics_ajax_handler');

/**
 * Enqueue required scripts and styles
 */
function news_statistics_enqueue_assets() {
    // Only enqueue on pages where the shortcode is used
    global $post;
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'news_statistics')) {
        // Enqueue Chart.js
        wp_enqueue_script('chartjs', 'https://cdn.jsdelivr.net/npm/chart.js', array(), '3.9.1', true);
        
        // Enqueue Date Range Picker
        wp_enqueue_script('moment', 'https://cdn.jsdelivr.net/momentjs/latest/moment.min.js', array(), null, true);
        wp_enqueue_script('daterangepicker', 'https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js', array(DGA_JQUERY_HANDLE, 'moment'), null, true);
        wp_enqueue_style('daterangepicker', 'https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css', array(), null);
        
        // Enqueue custom scripts and styles
        wp_enqueue_script('news-statistics-js', get_stylesheet_directory_uri() . '/js/news-statistics.js', array(DGA_JQUERY_HANDLE, 'chartjs', 'daterangepicker'), DGA_VERSION_NUMBER, true);
        wp_enqueue_style('news-statistics-css', get_stylesheet_directory_uri() . '/css/news-statistics.css', array(), DGA_VERSION_NUMBER);
        
        // Pass Ajax URL and nonce to JavaScript
        wp_localize_script('news-statistics-js', 'news_statistics_vars', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('news_statistics_nonce'),
        ));
    }
}

/**
 * Shortcode callback function
 */
function news_statistics_shortcode($atts) {
    // Parse shortcode attributes
    $atts = shortcode_atts(array(
        DGA_TITLE_FIELD => 'รายงานสถิติข่าวสาร',
    ), $atts);
    
    // Get all terms from the "tnews" taxonomy
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tnews',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    // Start output buffering
    ob_start();
    ?>
    <div class="news-statistics-dashboard">
        <h2><?php echo esc_html($atts[DGA_TITLE_FIELD]); ?></h2>
        
        <div class="news-statistics-controls">
            <div class="date-range-filter">
                <label for="date-range">เลือกช่วงเวลา:</label>
                <input type="text" id="date-range" name="date-range" class="date-range-picker" />
            </div>
            
            <div class="taxonomy-filter">
                <label for="term-filter">เลือกหมวดหมู่:</label>
                <select id="term-filter" name="term-filter">
                    <option value="">ทั้งหมด</option>
                    <?php foreach ($terms as $term) : ?>
                        <option value="<?php echo esc_attr($term->term_id); ?>"><?php echo esc_html($term->name); ?></option>
                    <?php endforeach; ?>
                </select>
            </div>
            
            <button id="apply-filters" class="apply-filters-btn">ใช้ตัวกรอง</button>
        </div>
        
        <div class="news-statistics-loader">กำลังโหลดข้อมูล...</div>
        
        <div class="news-statistics-charts">
            <div class="chart-container">
                <h3>จำนวนโพส</h3>
                <canvas id="posts-chart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>กิจกรรมโพส</h3>
                <canvas id="activities-chart"></canvas>
            </div>
        </div>
        
        <div class="news-statistics-summary">
            <div class="summary-card total-posts">
                <span class="card-title">จำนวนโพสทั้งหมด</span>
                <span class="card-value" id="total-posts">0</span>
            </div>
            
            <div class="summary-card total-views">
                <span class="card-title">จำนวนการเข้าชมทั้งหมด</span>
                <span class="card-value" id="total-views">0</span>
            </div>
            
            <div class="summary-card total-updates">
                <span class="card-title">จำนวนการอัพเดตทั้งหมด</span>
                <span class="card-value" id="total-updates">0</span>
            </div>
            
            <div class="summary-card total-deleted">
                <span class="card-title">จำนวนโพสที่ถูกลบทั้งหมด</span>
                <span class="card-value" id="total-deleted">0</span>
            </div>
        </div>
    </div>
    <?php
    // Return the buffered content
    return ob_get_clean();
}

/**
 * AJAX handler for fetching statistics
 */
function get_news_statistics_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'news_statistics_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Get filter parameters
    $start_date = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : '';
    $end_date = isset($_POST['end_date']) ? sanitize_text_field($_POST['end_date']) : '';
    $term_id = isset($_POST[DGA_TERM_ID_FIELD]) ? intval($_POST[DGA_TERM_ID_FIELD]) : 0;
    
    // Convert dates to DateTime objects
    $start_datetime = !empty($start_date) ? new DateTime($start_date . ' 00:00:00') : new DateTime('30 days ago');
    $end_datetime = !empty($end_date) ? new DateTime($end_date . ' 23:59:59') : new DateTime('now');
    
    // Format dates for WP_Query
    $start_date_query = $start_datetime->format('Y-m-d H:i:s');
    $end_date_query = $end_datetime->format('Y-m-d H:i:s');
    
    // Prepare tax query if term ID is provided
    $tax_query = array();
    if ($term_id > 0) {
        $tax_query = array(
            array(
                DGA_TAXONOMY_FIELD => 'tnews',
                DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                'terms' => $term_id,
            ),
        );
    }
    
    // Get post counts within date range
    $post_counts = get_post_counts_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get post views
    $post_views = get_post_views_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get post updates
    $post_updates = get_post_updates_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get deleted posts
    $deleted_posts = get_deleted_posts_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get overall statistics
    $total_posts = get_total_posts($tax_query);
    $total_views = get_total_views($tax_query);
    $total_updates = array_sum(array_values($post_updates));
    $total_deleted = array_sum(array_values($deleted_posts));
    
    // Prepare and send response
    wp_send_json_success(array(
        'post_counts' => $post_counts,
        'post_views' => $post_views,
        'post_updates' => $post_updates,
        'deleted_posts' => $deleted_posts,
        'summary' => array(
            'total_posts' => $total_posts,
            'total_views' => $total_views,
            'total_updates' => $total_updates,
            'total_deleted' => $total_deleted,
        ),
    ));
    
    wp_die();
}

/**
 * Get post counts grouped by date within a date range
 */
function get_post_counts_by_date($start_date, $end_date, $tax_query = array()) {
    $args = array(
        DGA_POST_TYPE_FIELD => 'news',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => -1,
        'date_query' => array(
            array(
                'after' => $start_date,
                'before' => $end_date,
                'inclusive' => true,
            ),
        ),
        DGA_FIELDS_PARAMETER => 'ids',
    );
    
    if (!empty($tax_query)) {
        $args['tax_query'] = $tax_query;
    }
    
    $posts = get_posts($args);
    
    // Group posts by date
    $post_counts_by_date = array();
    foreach ($posts as $post_id) {
        $post_date = get_the_date('Y-m-d', $post_id);
        
        if (!isset($post_counts_by_date[$post_date])) {
            $post_counts_by_date[$post_date] = 0;
        }
        
        $post_counts_by_date[$post_date]++;
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($post_counts_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get post views grouped by date within a date range
 */
function get_post_views_by_date($start_date, $end_date, $tax_query = array()) {
    global $wpdb;
    
    $tax_join = '';
    $tax_where = '';
    
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_join = "INNER JOIN {$wpdb->term_relationships} tr ON p.ID = tr.object_id
                     INNER JOIN {$wpdb->term_taxonomy} tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";
        $tax_where = $wpdb->prepare("AND tt.taxonomy = 'tnews' AND tt.term_id = %d", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT DATE(pm.meta_value) AS view_date, COUNT(*) AS view_count
        FROM {$wpdb->postmeta} pm
        INNER JOIN {$wpdb->posts} p ON pm.post_id = p.ID
        {$tax_join}
        WHERE pm.meta_key = 'post_view_date'
        AND p.post_type = 'news'
        AND p.post_status = DGA_PUBLISH_STATUS
        AND DATE(pm.meta_value) BETWEEN %s AND %s
        {$tax_where}
        GROUP BY view_date
        ORDER BY view_date
    ", $start_date, $end_date);
    
    $results = $wpdb->get_results($query);
    
    $views_by_date = array();
    foreach ($results as $row) {
        $views_by_date[$row->view_date] = intval($row->view_count);
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($views_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get post updates grouped by date within a date range
 */
function get_post_updates_by_date($start_date, $end_date, $tax_query = array()) {
    global $wpdb;
    
    $tax_join = '';
    $tax_where = '';
    
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_join = "INNER JOIN {$wpdb->term_relationships} tr ON p.ID = tr.object_id
                     INNER JOIN {$wpdb->term_taxonomy} tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";
        $tax_where = $wpdb->prepare("AND tt.taxonomy = 'tnews' AND tt.term_id = %d", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT DATE(p.post_modified) AS update_date, COUNT(*) AS update_count
        FROM {$wpdb->posts} p
        {$tax_join}
        WHERE p.post_type = 'news'
        AND p.post_status = DGA_PUBLISH_STATUS
        AND DATE(p.post_modified) BETWEEN %s AND %s
        AND p.post_modified > p.post_date
        {$tax_where}
        GROUP BY update_date
        ORDER BY update_date
    ", $start_date, $end_date);
    
    $results = $wpdb->get_results($query);
    
    $updates_by_date = array();
    foreach ($results as $row) {
        $updates_by_date[$row->update_date] = intval($row->update_count);
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($updates_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get deleted posts grouped by date
 * หมายเหตุ: ต้องมีการเก็บข้อมูลโพสที่ถูกลบด้วย custom table ตามฟังก์ชัน track_post_deletions ด้านล่าง
 */
function get_deleted_posts_by_date($start_date, $end_date, $tax_query = array()) {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'deleted_posts_log';
    
    $tax_where = '';
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_where = $wpdb->prepare("AND FIND_IN_SET(%d, tax_terms)", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT DATE(deleted_date) AS deletion_date, COUNT(*) AS deleted_count
        FROM $table_name
        WHERE post_type = 'news'
        AND DATE(deleted_date) BETWEEN %s AND %s
        $tax_where
        GROUP BY deletion_date
        ORDER BY deletion_date
    ", $start_date, $end_date);
    
    $results = $wpdb->get_results($query);
    
    $deletions_by_date = array();
    foreach ($results as $row) {
        $deletions_by_date[$row->deletion_date] = intval($row->deleted_count);
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($deletions_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get the total number of posts
 */
function get_total_posts($tax_query = array()) {
    $args = array(
        DGA_POST_TYPE_FIELD => 'news',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => -1,
        DGA_FIELDS_PARAMETER => 'ids',
    );
    
    if (!empty($tax_query)) {
        $args['tax_query'] = $tax_query;
    }
    
    $query = new WP_Query($args);
    return $query->found_posts;
}

/**
 * Get the total number of views
 */
function get_total_views($tax_query = array()) {
    global $wpdb;
    
    $tax_join = '';
    $tax_where = '';
    
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_join = "INNER JOIN {$wpdb->term_relationships} tr ON p.ID = tr.object_id
                     INNER JOIN {$wpdb->term_taxonomy} tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";
        $tax_where = $wpdb->prepare("AND tt.taxonomy = 'tnews' AND tt.term_id = %d", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT SUM(CAST(pm.meta_value AS UNSIGNED)) AS total_views
        FROM {$wpdb->postmeta} pm
        INNER JOIN {$wpdb->posts} p ON pm.post_id = p.ID
        {$tax_join}
        WHERE pm.meta_key = 'post_views'
        AND p.post_type = 'news'
        AND p.post_status = DGA_PUBLISH_STATUS
        {$tax_where}
    ");
    
    $result = $wpdb->get_var($query);
    
    return $result ? intval($result) : 0;
}

/**
 * Helper function to fill in missing dates in a date-indexed array
 */
function fill_date_gaps($data_array, $start_date, $end_date) {
    $start = new DateTime($start_date);
    $end = new DateTime($end_date);
    $interval = new DateInterval('P1D');
    $date_range = new DatePeriod($start, $interval, $end);
    
    $result = array();
    foreach ($date_range as $date) {
        $date_str = $date->format('Y-m-d');
        $result[$date_str] = isset($data_array[$date_str]) ? $data_array[$date_str] : 0;
    }
    
    // Add the end date as well
    $end_date_str = $end->format('Y-m-d');
    $result[$end_date_str] = isset($data_array[$end_date_str]) ? $data_array[$end_date_str] : 0;
    
    return $result;
}

/**
 * Create and initialize custom table for tracking deleted posts
 * ใช้เรียกครั้งเดียวเมื่อเปิดใช้งานปลั๊กอิน
 */
function create_deleted_posts_table() {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'deleted_posts_log';
    
    $charset_collate = $wpdb->get_charset_collate();
    
    $sql = "CREATE TABLE $table_name (
        id bigint(20) NOT NULL AUTO_INCREMENT,
        post_id bigint(20) NOT NULL,
        post_title text NOT NULL,
        post_type varchar(20) NOT NULL,
        deleted_date datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
        tax_terms text,
        PRIMARY KEY  (id)
    ) $charset_collate;";
    
    require_once ABSPATH . 'wp-admin/includes/upgrade.php';
    dbDelta($sql);
}
// คอมเม้นต์บรรทัดด้านล่างและรันฟังก์ชันนี้เมื่อติดตั้งแรกครั้งเดียว
// register_activation_hook(__FILE__, 'create_deleted_posts_table');

/**
 * Track post views
 */
function track_news_post_views() {
    if (is_singular('news')) {
        $post_id = get_the_ID();
        
        // Get current view count
        $views = get_post_meta($post_id, 'post_views', true);
        $views = $views ? intval($views) : 0;
        
        // Update the view count
        update_post_meta($post_id, 'post_views', $views + 1);
        
        // Store the view date for statistics
        add_post_meta($post_id, 'post_view_date', current_time('mysql'));
    }
}
add_action('wp_head', 'track_news_post_views');

/**
 * Track post deletions
 */
function track_post_deletions($post_id) {
    global $wpdb;
    
    $post = get_post($post_id);
    
    if ($post && $post->post_type === 'news') {
        $table_name = $wpdb->prefix . 'deleted_posts_log';
        
        // Get taxonomy terms
        $terms = get_the_terms($post_id, 'tnews');
        $term_ids = array();
        
        if ($terms && !is_wp_error($terms)) {
            foreach ($terms as $term) {
                $term_ids[] = $term->term_id;
            }
        }
        
        $wpdb->insert(
            $table_name,
            array(
                DGA_POST_ID_FIELD => $post_id,
                'post_title' => $post->post_title,
                DGA_POST_TYPE_FIELD => $post->post_type,
                'deleted_date' => current_time('mysql'),
                'tax_terms' => !empty($term_ids) ? implode(',', $term_ids) : '',
            )
        );
    }
}
add_action('before_delete_post', 'track_post_deletions');


/***** ตารางแสดงโพสที่เกี่ยวของกับสถิติ *******/

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Register the shortcode
add_shortcode('news_posts_table', 'news_posts_table_shortcode');

// Register scripts and styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'news_posts_table_enqueue_assets');

// Register AJAX handlers
add_action('wp_ajax_update_news_category', 'update_news_category_ajax_handler');
add_action('wp_ajax_delete_news_post', 'delete_news_post_ajax_handler');

/**
 * Enqueue required scripts and styles
 */
function news_posts_table_enqueue_assets() {
    // Only enqueue on pages where the shortcode is used
    global $post;
    if (is_a($post, 'WP_Post') && 
        (has_shortcode($post->post_content, 'news_posts_table') || 
         has_shortcode($post->post_content, 'news_statistics'))) {
        
        // Enqueue Dashicons for front-end use
        wp_enqueue_style('dashicons');
        
        // Enqueue custom scripts and styles
        wp_enqueue_script('news-posts-table-js', get_stylesheet_directory_uri() . '/js/news-posts-table.js', array(DGA_JQUERY_HANDLE), '1.0.2', true);
        wp_enqueue_style('news-posts-table-css', get_stylesheet_directory_uri() . '/css/news-posts-table.css', array(), '1.0.2');
        
        // Pass Ajax URL and nonce to JavaScript
        wp_localize_script('news-posts-table-js', 'news_posts_table_vars', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('news_posts_table_nonce'),
            'confirm_delete_message' => 'คุณต้องการลบเนื้อหานี้ใช่หรือไม่? คุณจะไม่สามารถกู้คืนข้อมูลนี้ได้อีก',
            'delete_success_message' => 'ลบโพสต์เรียบร้อยแล้ว',
            'update_success_message' => 'อัพเดตหมวดหมู่เรียบร้อยแล้ว',
            'error_message' => 'เกิดข้อผิดพลาด โปรดลองอีกครั้ง',
            'processing_message' => 'กำลังดำเนินการ...'
        ));
    }
}

/**
 * Shortcode callback function
 */
function news_posts_table_shortcode($atts) {
    // User must be logged in to see this table
    if (!is_user_logged_in()) {
        return '<div class="news-posts-error">กรุณาเข้าสู่ระบบเพื่อจัดการโพสต์</div>';
    }
    
    // Check if user has capability to edit posts
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        return '<div class="news-posts-error">คุณไม่มีสิทธิ์เข้าถึงหน้านี้</div>';
    }
    
    // Parse shortcode attributes
    $atts = shortcode_atts(array(
        DGA_TITLE_FIELD => 'จัดการโพสต์ข่าวสาร',
        DGA_POSTS_PER_PAGE => 10,
        DGA_TAXONOMY_FIELD => 'tnews',
        DGA_TERM_ID_FIELD => 0,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC',
    ), $atts);
    
    // Get term ID from URL parameter if available
    $term_id = isset($_GET[DGA_TERM_ID_FIELD]) ? intval($_GET[DGA_TERM_ID_FIELD]) : intval($atts[DGA_TERM_ID_FIELD]);
    
    // Get date filter from URL if available
    $date_filter = isset($_GET['date']) ? sanitize_text_field($_GET['date']) : '';
    
    // Get all terms from the specified taxonomy
    $terms = get_terms(array(
        DGA_TAXONOMY_FIELD => $atts[DGA_TAXONOMY_FIELD],
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    // Query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => 'news',
        DGA_POSTS_PER_PAGE => intval($atts[DGA_POSTS_PER_PAGE]),
        DGA_PAGED_PARAMETER => get_query_var(DGA_PAGED_PARAMETER) ? get_query_var(DGA_PAGED_PARAMETER) : 1,
        DGA_ORDERBY_FIELD_VALUE => $atts[DGA_ORDERBY_FIELD_VALUE],
        DGA_ORDER_FIELD => $atts[DGA_ORDER_FIELD],
    );
    
    // Add taxonomy query if term ID is specified
    if ($term_id > 0) {
        $args['tax_query'] = array(
            array(
                DGA_TAXONOMY_FIELD => $atts[DGA_TAXONOMY_FIELD],
                DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                'terms' => $term_id,
            ),
        );
    }
    
    // Add date query if date filter is specified
    if (!empty($date_filter) && strtotime($date_filter)) {
        $date = new DateTime($date_filter);
        $args['date_query'] = array(
            array(
                'year' => $date->format('Y'),
                'month' => $date->format('m'),
                'day' => $date->format('d'),
            ),
        );
    }
    
    // Get current page for pagination
    $paged = (get_query_var(DGA_PAGED_PARAMETER)) ? get_query_var(DGA_PAGED_PARAMETER) : 1;
    $args[DGA_PAGED_PARAMETER] = $paged;
    
    // Run the query
    $news_query = new WP_Query($args);
    
    // Start output buffering
    ob_start();
    ?>
    <div class="news-posts-management">
        <h2><?php echo esc_html($atts[DGA_TITLE_FIELD]); ?></h2>
        
        <div class="news-posts-filters">
            <form method="get" action="" class="auto-submit">
                <label for="term-filter">กรองตามหมวดหมู่:</label>
                <select id="term-filter" name="term_id" class="term-filter">
                    <option value="0">ทั้งหมด</option>
                    <?php foreach ($terms as $term) : ?>
                        <option value="<?php echo esc_attr($term->term_id); ?>" <?php selected($term_id, $term->term_id); ?>>
                            <?php echo esc_html($term->name); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
                
                <?php if (!empty($date_filter)) : ?>
                    <input type="hidden" name="date" value="<?php echo esc_attr($date_filter); ?>">
                    <div class="date-filter-badge">
                        <span>กรองตามวันที่: <?php echo esc_html(date_i18n(DGA_DATE_FORMAT_SHORT, strtotime($date_filter))); ?></span>
                        <a href="<?php echo esc_url(remove_query_arg('date')); ?>" class="clear-date-filter" title="ล้างตัวกรองวันที่">×</a>
                    </div>
                <?php endif; ?>
                
                <button type=DGA_SUBMIT_TYPE class="filter-button">กรอง</button>
            </form>
        </div>
        
        <?php if ($news_query->have_posts()) : ?>
            <div class="news-posts-table-container">
                <table class="news-posts-table">
                    <thead>
                        <tr>
                            <th class="col-title">ชื่อโพสต์</th>
                            <th class="col-date">วันที่สร้าง</th>
                            <th class="col-modified">วันที่อัพเดต</th>
                            <th class="col-category">หมวดหมู่</th>
                            <th class="col-actions">การจัดการ</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php while ($news_query->have_posts()) : $news_query->the_post(); ?>
                            <?php 
                                $post_id = get_the_ID();
                                $post_terms = get_the_terms($post_id, $atts[DGA_TAXONOMY_FIELD]);
                                $term_names = array();
                                $post_term_ids = array();
                                
                                if ($post_terms && !is_wp_error($post_terms)) {
                                    foreach ($post_terms as $term) {
                                        $term_names[] = $term->name;
                                        $post_term_ids[] = $term->term_id;
                                    }
                                }
                                
                                // Get post view count if available
                                $post_views = get_post_meta($post_id, 'post_views', true);
                                $post_views = $post_views ? number_format($post_views) : '0';
                            ?>
                            <tr id="post-row-<?php echo $post_id; ?>">
                                <td class="col-title">
                                    <a href="<?php the_permalink(); ?>" target="_blank"><?php the_title(); ?></a>
                                    <span class="post-views-count" title="จำนวนการเข้าชม">
                                        <span class="dashicons dashicons-visibility"></span> <?php echo $post_views; ?>
                                    </span>
                                </td>
                                <td class="col-date"><?php echo get_the_date(DGA_DATE_FORMAT_SHORT); ?></td>
                                <td class="col-modified"><?php echo get_the_modified_date(DGA_DATE_FORMAT_SHORT); ?></td>
                                <td class="col-category"><?php echo implode(', ', $term_names); ?></td>
                                <td class="col-actions">
                                    <div class="action-buttons-container">
                                        <button type=DGA_BUTTON_TYPE class="action-btn edit-category-btn" 
                                                data-post-id="<?php echo $post_id; ?>"
                                                data-tooltip="แก้ไขหมวดหมู่ของโพสต์นี้"
                                                data-current-terms="<?php echo esc_attr(implode(',', $post_term_ids)); ?>">
                                            <i class="dashicons dashicons-category"></i>
                                            แก้ไขหมวดหมู่
                                        </button>
                                        
                                        <button type=DGA_BUTTON_TYPE class="action-btn delete-post-btn" 
                                                data-post-id="<?php echo $post_id; ?>"
                                                data-tooltip="ลบโพสต์นี้ออกจากระบบ"
                                                data-post-title="<?php echo esc_attr(get_the_title()); ?>">
                                            <i class="dashicons dashicons-trash"></i>
                                            ลบโพสต์
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <?php endwhile; ?>
                    </tbody>
                </table>
            </div>
            
            <?php if ($news_query->max_num_pages > 1) : ?>
                <div class="news-posts-pagination">
                    <?php
                    echo paginate_links(array(
                        'base' => add_query_arg(DGA_PAGED_PARAMETER, '%#%'),
                        'format' => '',
                        'prev_text' => '<span class="dashicons dashicons-arrow-left-alt2"></span> ก่อนหน้า',
                        'next_text' => 'ถัดไป <span class="dashicons dashicons-arrow-right-alt2"></span>',
                        DGA_TOTAL_FIELD_KEY => $news_query->max_num_pages,
                        'current' => max(1, get_query_var(DGA_PAGED_PARAMETER)),
                        'mid_size' => 1,
                    ));
                    ?>
                </div>
            <?php endif; ?>
            
            <div class="news-posts-summary">
                <p>แสดงผล <?php echo $news_query->post_count; ?> รายการ จาก <?php echo $news_query->found_posts; ?> รายการ</p>
            </div>
            
        <?php else : ?>
            <div class="news-posts-no-results">ไม่พบโพสต์ที่ตรงกับเงื่อนไข</div>
        <?php endif; ?>
        
        <?php wp_reset_postdata(); ?>
    </div>
    
    <!-- Edit Category Modal -->
    <div id="edit-category-modal" class="news-modal">
        <div class="news-modal-content">
            <span class="news-modal-close">&times;</span>
            <h3>แก้ไขหมวดหมู่</h3>
            <form id="update-category-form">
                <input type="hidden" id="edit-post-id" name="post_id" value="">
                <div class="form-group">
                    <label for="new-category">เลือกหมวดหมู่:</label>
                    <select id="new-category" name="new_term_id" class="new-category-select" multiple>
                        <?php foreach ($terms as $term) : ?>
                            <option value="<?php echo esc_attr($term->term_id); ?>">
                                <?php echo esc_html($term->name); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                    <p class="form-description">เลือกได้หลายหมวดหมู่โดยกด Ctrl (Windows) หรือ Command (Mac) ค้างไว้ขณะคลิก</p>
                </div>
                <div class="form-actions">
                    <button type=DGA_SUBMIT_TYPE class="update-category-submit">บันทึก</button>
                    <button type=DGA_BUTTON_TYPE class="cancel-modal">ยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Delete Post Modal -->
    <div id="delete-post-modal" class="news-modal">
        <div class="news-modal-content">
            <span class="news-modal-close">&times;</span>
            <h3>ยืนยันการลบ</h3>
            <p class="delete-confirmation-message">
                <span class="dashicons dashicons-warning"></span> 
                คุณต้องการลบโพสต์ "<span id="delete-post-title"></span>" ใช่หรือไม่? 
                <br><br>
                <strong>หมายเหตุ:</strong> คุณจะไม่สามารถกู้คืนข้อมูลนี้ได้อีก
            </p>
            <input type="hidden" id="delete-post-id" value="">
            <div class="form-actions">
                <button type=DGA_BUTTON_TYPE class="confirm-delete-btn">ยืนยันการลบ</button>
                <button type=DGA_BUTTON_TYPE class="cancel-modal">ยกเลิก</button>
            </div>
        </div>
    </div>
    
    <!-- Notification -->
    <div id="news-notification" class="news-notification">
        <div class="news-notification-content">
            <span class="news-notification-message"></span>
        </div>
    </div>
    <?php
    // Return the buffered content
    return ob_get_clean();
}

/**
 * AJAX handler for updating post category
 */
function update_news_category_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'news_posts_table_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check user permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์แก้ไขโพสต์'));
        wp_die();
    }
    
    // Get parameters
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $new_term_ids = isset($_POST['new_term_ids']) ? array_map('intval', (array) $_POST['new_term_ids']) : array();
    
    // Validate parameters
    if ($post_id <= 0) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'รหัสโพสต์ไม่ถูกต้อง'));
        wp_die();
    }
    
    // Check if the post exists and is of the correct type
    $post = get_post($post_id);
    if (!$post || $post->post_type !== 'news') {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบโพสต์หรือโพสต์ไม่ใช่ประเภทข่าวสาร'));
        wp_die();
    }
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $new_term_ids, 'tnews');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => $result->get_error_message()));
        wp_die();
    }
    
    // Get the updated term names for response
    $updated_terms = get_the_terms($post_id, 'tnews');
    $term_names = array();
    
    if ($updated_terms && !is_wp_error($updated_terms)) {
        foreach ($updated_terms as $term) {
            $term_names[] = $term->name;
        }
    }
    
    $term_names_str = !empty($term_names) ? implode(', ', $term_names) : 'ไม่มีหมวดหมู่';
    
    // Log the activity if needed
    do_action('news_post_category_updated', $post_id, $new_term_ids);
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'อัพเดตหมวดหมู่เรียบร้อยแล้ว',
        'term_names' => $term_names_str,
        DGA_POST_ID_FIELD => $post_id
    ));
    
    wp_die();
}

/**
 * AJAX handler for deleting a post
 */
function delete_news_post_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'news_posts_table_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check user permissions
    if (!current_user_can('delete_posts')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ลบโพสต์'));
        wp_die();
    }
    
    // Get post ID
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    
    // Validate post ID
    if ($post_id <= 0) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'รหัสโพสต์ไม่ถูกต้อง'));
        wp_die();
    }
    
    // Check if the post exists and is of the correct type
    $post = get_post($post_id);
    if (!$post || $post->post_type !== 'news') {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบโพสต์หรือโพสต์ไม่ใช่ประเภทข่าวสาร'));
        wp_die();
    }
    
    // Track post terms before deletion for statistics purposes
    $post_terms = wp_get_post_terms($post_id, 'tnews', array(DGA_FIELDS_PARAMETER => 'ids'));
    
    // Delete the post
    $result = wp_delete_post($post_id, true); // true = force delete (skip trash)
    
    if (!$result) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการลบโพสต์'));
        wp_die();
    }
    
    // Log the deletion if needed
    do_action('news_post_deleted', $post_id, $post->post_title, $post_terms);
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'ลบโพสต์เรียบร้อยแล้ว',
        DGA_POST_ID_FIELD => $post_id
    ));
    
    wp_die();
}

/**
 * Add custom column for post views in admin
 */
function add_news_posts_admin_columns($columns) {
    $new_columns = array();
    
    foreach ($columns as $key => $value) {
        $new_columns[$key] = $value;
        
        // Add views column after title
        if ($key === DGA_TITLE_FIELD) {
            $new_columns['post_views'] = 'การเข้าชม';
        }
    }
    
    return $new_columns;
}
add_filter('manage_news_posts_columns', 'add_news_posts_admin_columns');

/**
 * Display post views in admin column
 */
function display_news_posts_admin_columns($column, $post_id) {
    if ($column === 'post_views') {
        $views = get_post_meta($post_id, 'post_views', true);
        echo !empty($views) ? number_format($views) : '0';
    }
}
add_action('manage_news_posts_custom_column', 'display_news_posts_admin_columns', 10, 2);

/**
 * Make post views column sortable in admin
 */
function make_news_posts_views_sortable($columns) {
    $columns['post_views'] = 'post_views';
    return $columns;
}
add_filter('manage_edit-news_sortable_columns', 'make_news_posts_views_sortable');

/**
 * Handle sorting by post views in admin
 */
function news_posts_views_orderby($query) {
    if (!is_admin() || !$query->is_main_query()) {
        return;
    }
    
    if ($query->get(DGA_ORDERBY_FIELD_VALUE) === 'post_views') {
        $query->set('meta_key', 'post_views');
        $query->set(DGA_ORDERBY_FIELD_VALUE, 'meta_value_num');
    }
}
add_action('pre_get_posts', 'news_posts_views_orderby');

/**
 * Helper function to log post deletion for statistics
 */
function track_news_post_deletion($post_id, $post_title, $term_ids) {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'deleted_posts_log';
    
    // Check if table exists, if not, skip logging
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
        return;
    }
    
    $wpdb->insert(
        $table_name,
        array(
            DGA_POST_ID_FIELD => $post_id,
            'post_title' => $post_title,
            DGA_POST_TYPE_FIELD => 'news',
            'deleted_date' => current_time('mysql'),
            'tax_terms' => is_array($term_ids) ? implode(',', $term_ids) : '',
        )
    );
}
add_action('news_post_deleted', 'track_news_post_deletion', 10, 3);

/**
 * Helper function to check if a date filter is active
 */
function is_news_date_filter_active() {
    return isset($_GET['date']) && !empty($_GET['date']);
}

/**
 * Helper function to get the current date filter
 */
function get_news_current_date_filter() {
    if (is_news_date_filter_active()) {
        return sanitize_text_field($_GET['date']);
    }
    return '';
}



/***** ฟังก์ชั่นแสดง PostLoop จาก Standard Post ******/

define('STD_EXCERPT_WORDS', 150);

// Make sure we don't expose any info if called directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register shortcode and necessary scripts/styles
 */
function std_looppost_init() {
    add_shortcode('std_looppost', 'std_looppost_shortcode');
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'std_looppost_enqueue_scripts');
    add_action('wp_ajax_std_looppost_load', 'std_looppost_ajax_handler');
    add_action('wp_ajax_nopriv_std_looppost_load', 'std_looppost_ajax_handler');
}
add_action('init', 'std_looppost_init');

/**
 * Enqueue necessary scripts and styles with accessibility improvements
 */
function std_looppost_enqueue_scripts() {
    global $post;
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'std_looppost')) {
        // Enqueue CSS - Updated version with WCAG compliance
        wp_enqueue_style(
            'std-looppost-style',
            get_stylesheet_directory_uri() . '/css/std-looppost.css',
            array(),
            '2.1.0' // Updated version number
        );
        
        // Enqueue JavaScript - Updated version with accessibility
        wp_enqueue_script(
            'std-looppost-script',
            get_stylesheet_directory_uri() . '/js/std-looppost.js',
            array(DGA_JQUERY_HANDLE),
            '2.1.0', // Updated version number
            true
        );
        
        // Pass data to JavaScript with accessibility labels
        wp_localize_script(
            'std-looppost-script',
            'stdLoopPost',
            array(
                'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('std_looppost_nonce'),
                'no_image_url' => 'https://standard.wpdevs.co/wp-content/uploads/2025/01/no-images-scaled-2.jpg',
                'i18n' => array(
                    'loading' => __('กำลังโหลด...', DGA_TEXT_DOMAIN),
                    'load_more' => __('โหลดเพิ่ม', DGA_TEXT_DOMAIN),
                    'no_results' => __('ไม่พบโพสต์ที่ตรงตามเงื่อนไขการค้นหา', DGA_TEXT_DOMAIN),
                    'error_message' => __('เกิดข้อผิดพลาดในการโหลดข้อมูล กรุณาลองใหม่อีกครั้ง', DGA_TEXT_DOMAIN),
                    'search_placeholder' => __('ค้นหา...', DGA_TEXT_DOMAIN),
                    'mrdh_label' => __('มาตรฐาน มรด.', DGA_TEXT_DOMAIN),
                    'msprr_label' => __('มาตรฐาน มสพร.', DGA_TEXT_DOMAIN),
                    'published_date' => __('ประกาศ:', DGA_TEXT_DOMAIN),
                    'updated_date' => __('อัพเดต:', DGA_TEXT_DOMAIN),
                    'page_of' => __('หน้าที่ %1$d จาก %2$d', DGA_TEXT_DOMAIN),
                    'found_posts' => __('พบ %d รายการ', DGA_TEXT_DOMAIN)
                )
            )
        );
    }
}

/**
 * Convert Gregorian year to Buddhist year (พ.ศ.)
 */
function std_convert_to_buddhist_year($gregorian_date) {
    $date_obj = date_create($gregorian_date);
    if (!$date_obj) {
        return $gregorian_date;
    }
    
    $year = intval(date_format($date_obj, 'Y')) + 543;
    $month_day = date_format($date_obj, 'd M');
    
    return $month_day . ' ' . $year;
}

/**
 * Get available years for filtering (2560-2568 พ.ศ.)
 */
function std_get_filter_years() {
    $years = array();
    for ($i = 2017; $i <= 2025; $i++) {
        $buddhist_year = $i + 543;
        $years[$i] = $buddhist_year;
    }
    return $years;
}

/**
 * Generate accessible badge HTML
 * @param string $type Badge type (mrdh/msprr)
 * @param string $value Document number value
 * @return string HTML for badge
 */
function std_generate_accessible_badge($type, $value) {
    if (empty($value)) {
        return '';
    }
    
    $badge_text = '';
    $aria_label = '';
    
    switch ($type) {
        case 'mrdh':
            $badge_text = sprintf(__('เลขที่ มรด. %s', DGA_TEXT_DOMAIN), esc_html($value));
            $aria_label = sprintf(__('หมายเลขเอกสารมาตรฐาน มรด. %s', DGA_TEXT_DOMAIN), esc_html($value));
            break;
        case 'msprr':
            $badge_text = sprintf(__('เลขที่ มสพร. %s', DGA_TEXT_DOMAIN), esc_html($value));
            $aria_label = sprintf(__('หมายเลขเอกสารมาตรฐาน มสพร. %s', DGA_TEXT_DOMAIN), esc_html($value));
            break;
        default:
            return '';
    }
    
    return sprintf(
        '<span class="doc-number %s" role="text" aria-label="%s">%s</span>',
        esc_attr($type),
        esc_attr($aria_label),
        $badge_text
    );
}

/**
 * Shortcode callback function with accessibility improvements
 */
function std_looppost_shortcode($atts) {
    $atts = shortcode_atts(
        array(
            DGA_POSTS_PER_PAGE => 15,
        ),
        $atts,
        'std_looppost'
    );
    
    ob_start();
    
    $filter_years = std_get_filter_years();
    $unique_id = 'std-looppost-' . uniqid();
    
    // Get terms from tnews taxonomy
    $std_terms = get_terms(array(
        DGA_TAXONOMY_FIELD => 'tnews',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    // Main container with accessibility attributes
    ?>
    <div class="std-looppost-container" 
         id="<?php echo esc_attr($unique_id); ?>" 
         data-posts-per-page="<?php echo esc_attr($atts[DGA_POSTS_PER_PAGE]); ?>"
         role="region"
         aria-label="<?php _e('ระบบค้นหาและแสดงผลมาตรฐาน', DGA_TEXT_DOMAIN); ?>">

        <!-- Skip link for keyboard users -->
        <a href="#<?php echo esc_attr($unique_id); ?>-results" class="sr-only">
            <?php _e('ข้ามไปยังผลการค้นหา', DGA_TEXT_DOMAIN); ?>
        </a>

        <!-- Controls Section with enhanced accessibility -->
        <div class="std-looppost-controls" 
             role="search" 
             aria-label="<?php _e('ควบคุมการค้นหาและตัวกรอง', DGA_TEXT_DOMAIN); ?>">
            
            <div class="std-looppost-search-filter">
                <div class="std-looppost-search">
                    <label for="search-input-<?php echo esc_attr($unique_id); ?>" class="sr-only">
                        <?php _e('ค้นหามาตรฐาน', DGA_TEXT_DOMAIN); ?>
                    </label>
                    <input type="text" 
                           id="search-input-<?php echo esc_attr($unique_id); ?>"
                           class="std-looppost-search-input" 
                           placeholder="<?php _e('ค้นหา...', DGA_TEXT_DOMAIN); ?>" 
                           aria-label="<?php _e('ค้นหามาตรฐาน', DGA_TEXT_DOMAIN); ?>"
                           aria-describedby="search-help-<?php echo esc_attr($unique_id); ?>">
                    <div id="search-help-<?php echo esc_attr($unique_id); ?>" class="sr-only">
                        <?php _e('พิมพ์คำค้นหาและรอ 0.5 วินาทีเพื่อค้นหาอัตโนมัติ', DGA_TEXT_DOMAIN); ?>
                    </div>
                </div>
                
                <div class="std-looppost-filters">
                    <div class="std-looppost-year-filter">
                        <label for="year-select-<?php echo esc_attr($unique_id); ?>" class="sr-only">
                            <?php _e('เลือกปีที่ต้องการดู', DGA_TEXT_DOMAIN); ?>
                        </label>
                        <select id="year-select-<?php echo esc_attr($unique_id); ?>" 
                                class="std-looppost-year-select" 
                                aria-label="<?php _e('เลือกปีที่ต้องการดู', DGA_TEXT_DOMAIN); ?>">
                            <option value=""><?php _e('ทุกปี', DGA_TEXT_DOMAIN); ?></option>
                            <?php foreach ($filter_years as $year_value => $year_label) : ?>
                                <option value="<?php echo esc_attr($year_value); ?>">
                                    <?php echo esc_html($year_label); ?>
                                </option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    
                    <div class="std-looppost-custom-filters">
                        <label for="taxonomy-select-<?php echo esc_attr($unique_id); ?>" class="sr-only">
                            <?php _e('เลือกประเภทมาตรฐาน', DGA_TEXT_DOMAIN); ?>
                        </label>
                        <select id="taxonomy-select-<?php echo esc_attr($unique_id); ?>" 
                                class="std-looppost-taxonomy-select" 
                                aria-label="<?php _e('เลือกประเภทมาตรฐาน', DGA_TEXT_DOMAIN); ?>">
                            <option value=""><?php _e('ทุกประเภทมาตรฐาน', DGA_TEXT_DOMAIN); ?></option>
                            <?php 
                            if (!empty($std_terms) && !is_wp_error($std_terms)) {
                                foreach ($std_terms as $term) {
                                    $term_count = get_term_post_count($term->term_id, 'tnews', 'news');
                                    printf(
                                        '<option value="%s">%s (%d)</option>',
                                        esc_attr($term->slug),
                                        esc_html($term->name),
                                        $term_count
                                    );
                                }
                            }
                            ?>
                        </select>
                        
                        <button class="std-looppost-filter-reset" 
                                type=DGA_BUTTON_TYPE
                                aria-label="<?php _e('รีเซ็ตตัวกรองทั้งหมด', DGA_TEXT_DOMAIN); ?>">
                            <?php _e('แสดงทั้งหมด', DGA_TEXT_DOMAIN); ?>
                        </button>
                    </div>
                </div>
                
                <div class="std-looppost-sort-view">
                    <div class="std-looppost-sort">
                        <label for="sort-select-<?php echo esc_attr($unique_id); ?>" class="sr-only">
                            <?php _e('เรียงลำดับตาม', DGA_TEXT_DOMAIN); ?>
                        </label>
                        <select id="sort-select-<?php echo esc_attr($unique_id); ?>" 
                                class="std-looppost-sort-select" 
                                aria-label="<?php _e('เรียงลำดับตาม', DGA_TEXT_DOMAIN); ?>">
                            <option value="newest"><?php _e('ล่าสุด', DGA_TEXT_DOMAIN); ?></option>
                            <option value="oldest"><?php _e('เก่าสุด', DGA_TEXT_DOMAIN); ?></option>
                            <option value="title_asc"><?php _e('ชื่อเรื่อง ก-ฮ', DGA_TEXT_DOMAIN); ?></option>
                            <option value="title_desc"><?php _e('ชื่อเรื่อง ฮ-ก', DGA_TEXT_DOMAIN); ?></option>
                        </select>
                    </div>
                    
                    <div class="std-looppost-view-toggle" role="group" aria-label="<?php _e('เลือกรูปแบบการแสดงผล', DGA_TEXT_DOMAIN); ?>">
                        <button class="std-looppost-view-btn" 
                                data-view="card" 
                                type=DGA_BUTTON_TYPE
                                role=DGA_BUTTON_TYPE
                                aria-pressed="false"
                                aria-label="<?php _e('แสดงเป็นมุมมองการ์ด', DGA_TEXT_DOMAIN); ?>"
                                title="<?php _e('มุมมองการ์ด', DGA_TEXT_DOMAIN); ?>">
                            <span class="dashicons dashicons-grid-view" aria-hidden="true"></span>
                        </button>
                        <button class="std-looppost-view-btn active" 
                                data-view="table" 
                                type=DGA_BUTTON_TYPE
                                role=DGA_BUTTON_TYPE
                                aria-pressed="true"
                                aria-label="<?php _e('แสดงเป็นมุมมองตาราง', DGA_TEXT_DOMAIN); ?>"
                                title="<?php _e('มุมมองตาราง', DGA_TEXT_DOMAIN); ?>">
                            <span class="dashicons dashicons-editor-table" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Accessible table header -->
        <div class="std-looppost-table-header" role="row">
            <div role="columnheader" aria-sort="none">
                <?php _e('เลขที่', DGA_TEXT_DOMAIN); ?>
            </div>
            <div role="columnheader" aria-sort="none">
                <?php _e('ชื่อมาตรฐาน', DGA_TEXT_DOMAIN); ?>
            </div>
            <div role="columnheader" aria-sort="none">
                <?php _e('วัตถุประสงค์', DGA_TEXT_DOMAIN); ?>
            </div>
        </div>
        
        <!-- Content Section with accessibility -->
        <div class="std-looppost-content">
            <div class="std-looppost-posts-container table-view" 
                 id="<?php echo esc_attr($unique_id); ?>-results"
                 role="region" 
                 aria-live="polite" 
                 aria-label="<?php _e('ผลการค้นหา', DGA_TEXT_DOMAIN); ?>">
                <?php
                // Initial post loading with accessibility improvements
                $args = array(
                    DGA_POST_TYPE_FIELD => 'news',
                    DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
                    DGA_POSTS_PER_PAGE => $atts[DGA_POSTS_PER_PAGE],
                    DGA_ORDERBY_FIELD_VALUE => 'date',
                    DGA_ORDER_FIELD => 'DESC',
                    'meta_query' => array(
                        'relation' => 'OR',
                        array(
                            'key' => 'at_status',
                            'value' => 'inactive',
                            'compare' => '!=',
                        ),
                        array(
                            'key' => 'at_status',
                            'compare' => 'NOT EXISTS',
                        )
                    )
                );
                
                $query = new WP_Query($args);
                
                if ($query->have_posts()) :
                    $row_index = 1;
                    while ($query->have_posts()) : $query->the_post();
                        std_render_accessible_post_row(get_the_ID(), $row_index);
                        $row_index++;
                    endwhile;
                    wp_reset_postdata();
                else : ?>
                    <div class="std-looppost-no-results" role="status" aria-live="polite">
                        <p><?php _e('ไม่พบโพสต์ที่ตรงตามเงื่อนไขการค้นหา', DGA_TEXT_DOMAIN); ?></p>
                    </div>
                <?php endif; ?>
                
                <!-- Accessible skeleton loader -->
                <div class="std-looppost-skeleton" style="display: none;" aria-hidden="true">
                    <!-- Table view skeleton -->
                    <div class="std-looppost-skeleton-table">
                        <?php for ($i = 0; $i < $atts[DGA_POSTS_PER_PAGE]; $i++) : ?>
                            <div class="std-looppost-skeleton-table-row">
                                <div class="std-looppost-skeleton-cell doc-number-cell" aria-hidden="true"></div>
                                <div class="std-looppost-skeleton-cell title-cell" aria-hidden="true"></div>
                                <div class="std-looppost-skeleton-cell content-cell" aria-hidden="true"></div>
                            </div>
                        <?php endfor; ?>
                    </div>
                    <!-- Card view skeleton -->
                    <div class="std-looppost-skeleton-cards">
                        <?php for ($i = 0; $i < $atts[DGA_POSTS_PER_PAGE]; $i++) : ?>
                            <div class="std-looppost-skeleton-card">
                                <div class="std-looppost-skeleton-image" aria-hidden="true"></div>
                                <div class="std-looppost-skeleton-content">
                                    <div class="std-looppost-skeleton-title" aria-hidden="true"></div>
                                    <div class="std-looppost-skeleton-text" aria-hidden="true"></div>
                                    <div class="std-looppost-skeleton-button" aria-hidden="true"></div>
                                </div>
                            </div>
                        <?php endfor; ?>
                    </div>
                </div>
            </div>
            
            <!-- Accessible pagination -->
            <div class="std-looppost-pagination" 
                 role="navigation" 
                 aria-label="<?php _e('การนำทางหน้า', DGA_TEXT_DOMAIN); ?>">
                <button class="std-looppost-load-more" 
                        type=DGA_BUTTON_TYPE
                        aria-label="<?php _e('โหลดเพิ่ม', DGA_TEXT_DOMAIN); ?>">
                    <?php _e('โหลดเพิ่ม', DGA_TEXT_DOMAIN); ?>
                </button>
                <div class="std-looppost-page-numbers" aria-label="<?php _e('หมายเลขหน้า', DGA_TEXT_DOMAIN); ?>"></div>
            </div>
        </div>
        
        <!-- Live region for announcements -->
        <div class="std-looppost-loading-announcement sr-only" 
             aria-live="assertive" 
             aria-atomic="true"></div>
    </div>
    
    <script>
    jQuery(document).ready(function($) {
        $('#<?php echo esc_js($unique_id); ?>').trigger('std_looppost_load');
    });
    </script>
    <?php
    
    return ob_get_clean();
}

/**
 * Render accessible post row for table view
 * @param int $post_id Post ID
 * @param int $row_index Row index for ARIA
 */
function std_render_accessible_post_row($post_id, $row_index = 1) {
    $title = get_the_title($post_id);
    $permalink = get_permalink($post_id);
    $date = std_convert_to_buddhist_year(get_the_date('Y-m-d', $post_id));
    
    // Get custom fields
    $at_content = get_post_meta($post_id, 'at_content', true);
    $excerpt_table = mb_substr(strip_tags($at_content), 0, 200) . (mb_strlen(strip_tags($at_content)) > 200 ? '...' : '');
    
    // Get document numbers
    $mrdh_value = get_post_meta($post_id, 'at_docnum_2', true);
    $msprr_value = get_post_meta($post_id, 'at_docnum_1', true);
    
    // Check modification date
    $modified_date = get_the_modified_date('Y-m-d', $post_id);
    $is_modified = $modified_date != get_the_date('Y-m-d', $post_id);
    $modified_date_display = $is_modified ? std_convert_to_buddhist_year($modified_date) : '';
    
    // Generate accessible badge
    $doc_badge = '';
    if (!empty($mrdh_value)) {
        $doc_badge = std_generate_accessible_badge('mrdh', $mrdh_value);
    } elseif (!empty($msprr_value)) {
        $doc_badge = std_generate_accessible_badge('msprr', $msprr_value);
    }
    
    ?>
    <div class="std-looppost-table-row" 
         data-post-id="<?php echo esc_attr($post_id); ?>" 
         role="row" 
         aria-rowindex="<?php echo esc_attr($row_index); ?>"
         tabindex="0">
        <a href="<?php echo esc_url($permalink); ?>" 
           class="std-looppost-table-link"
           aria-label="<?php echo esc_attr(sprintf(__('อ่านรายละเอียด: %s', DGA_TEXT_DOMAIN), $title)); ?>">
            
            <div class="std-looppost-table-cell doc-number-cell<?php echo !empty($mrdh_value) ? ' mrdh' : (!empty($msprr_value) ? ' msprr' : ''); ?>" 
                 role="cell">
                <?php echo $doc_badge; ?>
            </div>
            
            <div class="std-looppost-table-cell title-cell" role="cell">
                <div class="post-title"><?php echo esc_html($title); ?></div>
                <div class="post-date">
                    <span class="publish-date">
                        <span class="sr-only"><?php _e('วันที่ประกาศ:', DGA_TEXT_DOMAIN); ?></span>
                        <?php _e('ประกาศ:', DGA_TEXT_DOMAIN); ?> <?php echo esc_html($date); ?>
                    </span>
                    <?php if ($is_modified) : ?>
                        <span class="modified-date">
                            <span class="sr-only"><?php _e('วันที่อัพเดต:', DGA_TEXT_DOMAIN); ?></span>
                            <?php _e('อัพเดต:', DGA_TEXT_DOMAIN); ?> <?php echo esc_html($modified_date_display); ?>
                        </span>
                    <?php endif; ?>
                </div>
            </div>
            
            <div class="std-looppost-table-cell content-cell" 
                 role="cell"
                 title="<?php echo esc_attr($excerpt_table); ?>">
                <?php echo esc_html($excerpt_table); ?>
            </div>
        </a>
    </div>
    <?php
}

/**
 * Render accessible card view - IMPLEMENTED
 * @param int $post_id Post ID
 */
function std_render_accessible_card($post_id) {
    $title = get_the_title($post_id);
    $permalink = get_permalink($post_id);
    $date = std_convert_to_buddhist_year(get_the_date('Y-m-d', $post_id));
    
    // Get custom fields
    $at_content = get_post_meta($post_id, 'at_content', true);
    $excerpt_card = mb_substr(strip_tags($at_content), 0, 300) . (mb_strlen(strip_tags($at_content)) > 300 ? '...' : '');
    
    // Get featured image or default
    $thumbnail_url = get_the_post_thumbnail_url($post_id, 'medium');
    if (!$thumbnail_url) {
        $thumbnail_url = stdLoopPost::$no_image_url ?? 'https://standard.wpdevs.co/wp-content/uploads/2025/01/no-images-scaled-2.jpg';
    }
    
    // Get document numbers
    $mrdh_value = get_post_meta($post_id, 'at_docnum_2', true);
    $msprr_value = get_post_meta($post_id, 'at_docnum_1', true);
    
    // Check modification date
    $modified_date = get_the_modified_date('Y-m-d', $post_id);
    $is_modified = $modified_date != get_the_date('Y-m-d', $post_id);
    $modified_date_display = $is_modified ? std_convert_to_buddhist_year($modified_date) : '';
    
    ?>
    <article class="std-looppost-item" 
             data-post-id="<?php echo esc_attr($post_id); ?>" 
             role="article"
             aria-labelledby="post-title-<?php echo esc_attr($post_id); ?>">
        
        <div class="std-looppost-image" 
             style="background-image: url('<?php echo esc_url($thumbnail_url); ?>');"
             role="img"
             aria-label="<?php echo esc_attr(sprintf(__('รูปภาพสำหรับ: %s', DGA_TEXT_DOMAIN), $title)); ?>">
            
            <?php if (!empty($mrdh_value)) : ?>
                <span class="std-looppost-badge mrdh" 
                      role="text" 
                      aria-label="<?php echo esc_attr(sprintf(__('หมายเลขเอกสารมาตรฐาน มรด. %s', DGA_TEXT_DOMAIN), $mrdh_value)); ?>">
                    <?php echo esc_html(sprintf(__('มรด. %s', DGA_TEXT_DOMAIN), $mrdh_value)); ?>
                </span>
            <?php endif; ?>
            
            <?php if (!empty($msprr_value)) : ?>
                <span class="std-looppost-badge msprr" 
                      role="text" 
                      aria-label="<?php echo esc_attr(sprintf(__('หมายเลขเอกสารมาตรฐาน มสพร. %s', DGA_TEXT_DOMAIN), $msprr_value)); ?>">
                    <?php echo esc_html(sprintf(__('มสพร. %s', DGA_TEXT_DOMAIN), $msprr_value)); ?>
                </span>
            <?php endif; ?>
        </div>
        
        <div class="std-looppost-content-wrapper">
            <div class="std-looppost-meta">
                <span class="std-looppost-date publish-date">
                    <span class="sr-only"><?php _e('วันที่ประกาศ:', DGA_TEXT_DOMAIN); ?></span>
                    <?php echo esc_html($date); ?>
                </span>
                <?php if ($is_modified) : ?>
                    <span class="std-looppost-date modified-date">
                        <span class="sr-only"><?php _e('วันที่อัพเดต:', DGA_TEXT_DOMAIN); ?></span>
                        <?php _e('อัพเดต:', DGA_TEXT_DOMAIN); ?> <?php echo esc_html($modified_date_display); ?>
                    </span>
                <?php endif; ?>
            </div>
            
            <h3 class="std-looppost-title" id="post-title-<?php echo esc_attr($post_id); ?>">
                <a href="<?php echo esc_url($permalink); ?>" 
                   aria-label="<?php echo esc_attr(sprintf(__('อ่านรายละเอียด: %s', DGA_TEXT_DOMAIN), $title)); ?>">
                    <?php echo esc_html($title); ?>
                </a>
            </h3>
            
            <div class="std-looppost-excerpt">
                <?php echo esc_html($excerpt_card); ?>
            </div>
            
            <div class="std-looppost-read-more">
                <a href="<?php echo esc_url($permalink); ?>" 
                   class="std-looppost-read-more-btn"
                   aria-label="<?php echo esc_attr(sprintf(__('อ่านเพิ่มเติมเกี่ยวกับ: %s', DGA_TEXT_DOMAIN), $title)); ?>">
                    <?php _e('อ่านเพิ่มเติม', DGA_TEXT_DOMAIN); ?>
                </a>
            </div>
        </div>
    </article>
    <?php
}

/**
 * Enhanced AJAX handler with accessibility features
 */
function std_looppost_ajax_handler() {
    // Security check
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'std_looppost_nonce')) {
        wp_send_json_error(__('Invalid security token', DGA_TEXT_DOMAIN));
        wp_die();
    }
    
    // Sanitize parameters
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $year = isset($_POST['year']) ? intval($_POST['year']) : '';
    $custom_field = isset($_POST['custom_field']) ? sanitize_text_field($_POST['custom_field']) : '';
    $taxonomy_term = isset($_POST['taxonomy_term']) ? sanitize_text_field($_POST['taxonomy_term']) : '';
    $sort = isset($_POST['sort']) ? sanitize_text_field($_POST['sort']) : 'newest';
    $view = isset($_POST['view']) ? sanitize_text_field($_POST['view']) : 'table';
    $paged = isset($_POST[DGA_PAGED_PARAMETER]) ? intval($_POST[DGA_PAGED_PARAMETER]) : 1;
    $posts_per_page = isset($_POST[DGA_POSTS_PER_PAGE]) ? intval($_POST[DGA_POSTS_PER_PAGE]) : 15;
    
    // Set up query arguments
    $args = array(
        DGA_POST_TYPE_FIELD => 'news',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => $posts_per_page,
        DGA_PAGED_PARAMETER => $paged
    );
    
    // Add search parameter
    if (!empty($search)) {
        $args['s'] = $search;
    }
    
    // Add year filter
    if (!empty($year)) {
        $args['date_query'] = array(
            array('year' => $year)
        );
    }
    
    // Add taxonomy filter
    if (!empty($taxonomy_term)) {
        $args['tax_query'] = array(
            array(
                DGA_TAXONOMY_FIELD => 'tnews',
                DGA_FIELD_KEY => 'slug',
                'terms' => $taxonomy_term
            )
        );
    }
    
    // Meta query for inactive posts
    $inactive_filter = array(
        'relation' => 'OR',
        array(
            'key' => 'at_status',
            'value' => 'inactive',
            'compare' => '!=',
        ),
        array(
            'key' => 'at_status',
            'compare' => 'NOT EXISTS',
        )
    );
    
    // Add custom field filter
    if (!empty($custom_field)) {
        $args['meta_query'] = array(
            'relation' => 'AND',
            $inactive_filter,
            array(
                'key' => $custom_field,
                'value' => '',
                'compare' => '!=',
                DGA_TYPE_FIELD => 'CHAR'
            )
        );
    } else {
        $args['meta_query'] = $inactive_filter;
    }
    
    // Add sorting
    switch ($sort) {
        case 'oldest':
            $args[DGA_ORDERBY_FIELD_VALUE] = 'date';
            $args[DGA_ORDER_FIELD] = 'ASC';
            break;
        case 'title_asc':
            $args[DGA_ORDERBY_FIELD_VALUE] = DGA_TITLE_FIELD;
            $args[DGA_ORDER_FIELD] = 'ASC';
            break;
        case 'title_desc':
            $args[DGA_ORDERBY_FIELD_VALUE] = DGA_TITLE_FIELD;
            $args[DGA_ORDER_FIELD] = 'DESC';
            break;
        case 'newest':
        default:
            $args[DGA_ORDERBY_FIELD_VALUE] = 'date';
            $args[DGA_ORDER_FIELD] = 'DESC';
            break;
    }
    
    // Execute query
    $query = new WP_Query($args);
    
    // Prepare response
    $response = array(
        'posts' => array(),
        'max_pages' => $query->max_num_pages,
        'found_posts' => $query->found_posts
    );
    
    // Generate posts HTML
    ob_start();
    
    if ($query->have_posts()) {
        $row_index = (($paged - 1) * $posts_per_page) + 1;
        
        while ($query->have_posts()) {
            $query->the_post();
            
            if ($view === 'table') {
                std_render_accessible_post_row(get_the_ID(), $row_index);
            } else {
                std_render_accessible_card(get_the_ID());
            }
            
            $row_index++;
        }
    } else {
        echo '<div class="std-looppost-no-results" role="status" aria-live="polite">';
        echo '<p>' . __('ไม่พบโพสต์ที่ตรงตามเงื่อนไขการค้นหา', DGA_TEXT_DOMAIN) . '</p>';
        echo '</div>';
    }
    
    $posts_html = ob_get_clean();
    wp_reset_postdata();
    
    // Generate pagination HTML
    ob_start();
    if ($response['max_pages'] > 1) {
        std_render_accessible_pagination($paged, $response['max_pages']);
    }
    $pagination_html = ob_get_clean();
    
    // Add HTML to response
    $response['html'] = $posts_html;
    $response['pagination'] = $pagination_html;
    
    wp_send_json_success($response);
    wp_die();
}

/**
 * Render accessible pagination
 * @param int $current_page Current page number
 * @param int $total_pages Total number of pages
 */
function std_render_accessible_pagination($current_page, $total_pages) {
    echo '<div class="std-looppost-pagination-numbers" role="navigation" aria-label="' . __('หมายเลขหน้า', DGA_TEXT_DOMAIN) . '">';
    
    // Previous page
    if ($current_page > 1) {
        printf(
            '<a href="#" class="std-looppost-page-number" data-page="%d" aria-label="%s">«</a>',
            $current_page - 1,
            __('หน้าก่อนหน้า', DGA_TEXT_DOMAIN)
        );
    }
    
    // Page numbers
    for ($i = 1; $i <= $total_pages; $i++) {
        if ($i == $current_page) {
            printf(
                '<span class="std-looppost-page-number current" aria-current="page" aria-label="%s">%d</span>',
                sprintf(__('หน้าปัจจุบัน %d', DGA_TEXT_DOMAIN), $i),
                $i
            );
        } else {
            if ($i <= 3 || $i >= $total_pages - 2 || abs($i - $current_page) <= 1) {
                printf(
                    '<a href="#" class="std-looppost-page-number" data-page="%d" aria-label="%s">%d</a>',
                    $i,
                    sprintf(__('ไปหน้าที่ %d', DGA_TEXT_DOMAIN), $i),
                    $i
                );
            } elseif (abs($i - $current_page) == 2) {
                echo '<span class="std-looppost-page-number dots" aria-hidden="true">...</span>';
            }
        }
    }
    
    // Next page
    if ($current_page < $total_pages) {
        printf(
            '<a href="#" class="std-looppost-page-number" data-page="%d" aria-label="%s">»</a>',
            $current_page + 1,
            __('หน้าถัดไป', DGA_TEXT_DOMAIN)
        );
    }
    
    echo '</div>';
}

/**
 * Get term post count
 * @param int $term_id Term ID
 * @param string $taxonomy Taxonomy name
 * @param string $post_type Post type
 * @return int Post count
 */
function get_term_post_count($term_id, $taxonomy, $post_type = 'post') {
    $args = array(
        DGA_POST_TYPE_FIELD => $post_type,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => -1,
        'tax_query' => array(
            array(
                DGA_TAXONOMY_FIELD => $taxonomy,
                DGA_FIELD_KEY => DGA_TERM_ID_FIELD,
                'terms' => $term_id,
            ),
        ),
        'meta_query' => array(
            'relation' => 'OR',
            array(
                'key' => 'at_status',
                'value' => 'inactive',
                'compare' => '!=',
            ),
            array(
                'key' => 'at_status',
                'compare' => 'NOT EXISTS',
            )
        )
    );
    
    $query = new WP_Query($args);
    return $query->found_posts;
}

/**
 * Enqueue custom styles for WCAG compliance
 */
function std_looppost_custom_styles() {
    global $post;
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'std_looppost')) {
        wp_enqueue_style(
            'std-looppost-wcag-style',
            get_stylesheet_directory_uri() . '/css/std-looppost-wcag.css',
            array('std-looppost-style'),
            '2.1.0'
        );
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'std_looppost_custom_styles', 20);



/***** DGA TAG  *****/

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

// Define plugin constants
define('DGA_TAG_VERSION', '1.0.0');
define('DGA_TAG_PATH', plugin_dir_path(__FILE__));
define('DGA_TAG_URL', plugin_dir_url(__FILE__));

/**
 * Function to register the shortcode and all necessary scripts/styles
 */
function dga_tag_init() {
    // Register shortcode
    add_shortcode('dga_tag', 'dga_tag_shortcode');
    
    // Register scripts and styles
    wp_register_style('dga-tag-style', get_stylesheet_directory_uri() . '/css/dga-tag.css', array(), DGA_TAG_VERSION);
    wp_register_script('dga-tag-script', get_stylesheet_directory_uri() . '/js/dga-tag.js', array(DGA_JQUERY_HANDLE), DGA_TAG_VERSION, true);
    
    // Localize script for AJAX
    wp_localize_script('dga-tag-script', 'dgaTagAjax', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga-tag-nonce')
    ));
}
add_action('init', 'dga_tag_init');

/**
 * The shortcode function
 */
function dga_tag_shortcode($atts) {
    // Enqueue necessary styles and scripts
    wp_enqueue_style('dga-tag-style');
    wp_enqueue_script('dga-tag-script');
    
    // Parse shortcode attributes
    $atts = shortcode_atts(array(
        'limit' => 20, // Default number of tags to display
    ), $atts);
    
    // Start output buffering
    ob_start();
    
    // Get current user
    $current_user = wp_get_current_user();
    $can_edit = current_user_can(DGA_EDIT_POSTS_CAP);
    
    // Display tag management UI for admin/editor
    if ($can_edit) {
        ?>
        <div class="dga-tag-admin" aria-labelledby="dga-tag-admin-heading">
            <h3 id="dga-tag-admin-heading" class="dga-tag-admin-heading">จัดการแท็ก</h3>
            <div class="dga-tag-form">
                <input type="text" id="dga-tag-input" class="dga-tag-input" placeholder="ใส่แท็กใหม่" aria-label="ใส่แท็กใหม่">
                <button id="dga-tag-add" class="dga-tag-button" aria-label="เพิ่มแท็กใหม่">เพิ่มแท็ก</button>
            </div>
            <div id="dga-tag-message" class="dga-tag-message" role="status" aria-live="polite"></div>
        </div>
        <?php
    }
    
    // Display tags
    ?>
    <div class="dga-tag-container" aria-labelledby="dga-tag-heading">
        <h3 id="dga-tag-heading" class="dga-tag-heading">แท็ก</h3>
        <div id="dga-tag-cloud" class="dga-tag-cloud" role="list" aria-label="รายการแท็ก">
            <!-- Tags will be loaded via AJAX -->
            <div class="dga-tag-loading">กำลังโหลดแท็ก...</div>
        </div>
    </div>
    <?php
    
    // Return the buffered content
    return ob_get_clean();
}

/**
 * AJAX handler to get tags
 */
function dga_tag_get_tags() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga-tag-nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
    }
    
    // Get post ID if available
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    
    // Get all tags
    $tags = get_terms(array(
        DGA_TAXONOMY_FIELD => 'post_tag',
        DGA_HIDE_EMPTY_FIELD => false,
    ));
    
    $tag_data = array();
    
    if (!empty($tags) && !is_wp_error($tags)) {
        foreach ($tags as $tag) {
            $tag_data[] = array(
                'id' => $tag->term_id,
                DGA_NAME_FIELD => $tag->name,
                'slug' => $tag->slug,
                'count' => $tag->count,
                'link' => get_term_link($tag),
                'has_tag' => ($post_id > 0) ? has_tag($tag->term_id, $post_id) : false
            );
        }
    }
    
    wp_send_json_success($tag_data);
}
add_action('wp_ajax_dga_tag_get_tags', 'dga_tag_get_tags');
add_action('wp_ajax_nopriv_dga_tag_get_tags', 'dga_tag_get_tags');

/**
 * AJAX handler to add a new tag
 */
function dga_tag_add_tag() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga-tag-nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
    }
    
    // Check user permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error('คุณไม่มีสิทธิ์เพิ่มแท็ก');
    }
    
    // Get the tag name
    $tag_name = isset($_POST['tag_name']) ? sanitize_text_field($_POST['tag_name']) : '';
    
    if (empty($tag_name)) {
        wp_send_json_error('ชื่อแท็กไม่สามารถเว้นว่างได้');
    }
    
    // Create the tag if it doesn't exist
    $tag = wp_create_tag($tag_name);
    
    if (is_wp_error($tag)) {
        wp_send_json_error($tag->get_error_message());
    }
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => 'สร้างแท็กสำเร็จแล้ว',
        'tag' => get_term($tag[DGA_TERM_ID_FIELD], 'post_tag')
    ));
}
add_action('wp_ajax_dga_tag_add_tag', 'dga_tag_add_tag');

/**
 * AJAX handler to assign a tag to a post
 */
function dga_tag_toggle_post_tag() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga-tag-nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
    }
    
    // Check user permissions
    if (!current_user_can(DGA_EDIT_POSTS_CAP)) {
        wp_send_json_error('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้');
    }
    
    // Get post and tag IDs
    $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
    $tag_id = isset($_POST['tag_id']) ? intval($_POST['tag_id']) : 0;
    $action = isset($_POST['action_type']) ? sanitize_text_field($_POST['action_type']) : 'add';
    
    if ($post_id <= 0 || $tag_id <= 0) {
        wp_send_json_error('ID โพสต์หรือแท็กไม่ถูกต้อง');
    }
    
    $tag = get_term($tag_id, 'post_tag');
    
    if (is_wp_error($tag)) {
        wp_send_json_error('ไม่พบแท็ก');
    }
    
    if ($action === 'add') {
        $result = wp_add_post_tags($post_id, $tag->name);
    } else {
        $result = wp_remove_object_terms($post_id, $tag_id, 'post_tag');
    }
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    }
    
    wp_send_json_success(array(
        DGA_MESSAGE_KEY => ($action === 'add') ? 'เพิ่มแท็กให้กับโพสต์แล้ว' : 'ลบแท็กออกจากโพสต์แล้ว',
        'tag_id' => $tag_id,
        DGA_POST_ID_FIELD => $post_id,
        'action' => $action
    ));
}
add_action('wp_ajax_dga_tag_toggle_post_tag', 'dga_tag_toggle_post_tag');


/**** DGA USER TOKEN *****/

function dga_user_token_shortcode() {
    // Check if user is logged in
    if (!is_user_logged_in()) {
        return '<p>กรุณาเข้าสู่ระบบเพื่อจัดการ API TOKEN</p>';
    }
    
    // Enqueue required styles and scripts
    wp_enqueue_style('dga-user-token-css', get_stylesheet_directory_uri() . '/css/dga-user-token.css', array(), DGA_VERSION_NUMBER);
    wp_enqueue_script('dga-user-token-js', get_stylesheet_directory_uri() . '/js/dga-user-token.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    
    // Add AJAX URL to the script
    wp_localize_script('dga-user-token-js', 'dgaUserToken', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_user_token_nonce')
    ));
    
    // Get current user and API key
    $current_user = wp_get_current_user();
    $current_api_key = get_user_meta($current_user->ID, 'api_key', true);
    $masked_api_key = $current_api_key ? substr($current_api_key, 0, 4) . '****' . substr($current_api_key, -4) : '';
    
    // Prepare output
    $output = '<div class="dga-user-token-container">';
    $output .= '<div class="dga-user-token-content">';
    
    if ($current_api_key) {
        $output .= '<div class="dga-token-info">';
        $output .= '<span class="dga-token-label">API TOKEN ปัจจุบัน:</span> ';
        $output .= '<span class="dga-token-value">' . esc_html($masked_api_key) . '</span>';
        $output .= '</div>';
        
        // Add buttons container with update and delete buttons
        $output .= '<div class="dga-token-actions">';
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
        $output .= '<button id="dga-delete-token-btn" class="dga-btn dga-btn-danger">ลบ TOKEN</button>';
        $output .= '</div>';
    } else {
        // If no token exists, only show the update button
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
    }
    
    $output .= '</div>'; // End of dga-user-token-content
    
    // Modal popup for update
    $output .= '
    <div id="dga-token-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h2>อัพเดต API TOKEN</h2>
            <div class="dga-modal-body">
                <div class="dga-form-group">
                    <label for="dga-api-key">API KEY</label>
                    <input type="text" id="dga-api-key" class="dga-form-control" placeholder="กรอก API KEY ของคุณ">
                </div>
                <div class="dga-form-actions">
                    <button id="dga-save-token" class="dga-btn dga-btn-success">บันทึก</button>
                    <button id="dga-cancel-token" class="dga-btn dga-btn-secondary">ยกเลิก</button>
                </div>
            </div>
            <div id="dga-modal-message" class="dga-modal-message"></div>
        </div>
    </div>';
    
    // Confirmation modal for delete
    $output .= '
    <div id="dga-delete-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h2>ลบ API TOKEN</h2>
            <div class="dga-modal-body">
                <p>คุณต้องการลบ API TOKEN ของคุณใช่หรือไม่?</p>
                <div class="dga-form-actions">
                    <button id="dga-confirm-delete" class="dga-btn dga-btn-danger">ยืนยันการลบ</button>
                    <button id="dga-cancel-delete" class="dga-btn dga-btn-secondary">ยกเลิก</button>
                </div>
            </div>
            <div id="dga-delete-modal-message" class="dga-modal-message"></div>
        </div>
    </div>';
    
    $output .= '</div>'; // End of dga-user-token-container
    
    return $output;
}
add_shortcode('dga_user_token', 'dga_user_token_shortcode');

/**
 * Helper function to get widget HTML content
 */
function dga_get_token_widget_content() {
    $current_user = wp_get_current_user();
    $current_api_key = get_user_meta($current_user->ID, 'api_key', true);
    $masked_api_key = $current_api_key ? substr($current_api_key, 0, 4) . '****' . substr($current_api_key, -4) : '';
    
    $output = '';
    
    if ($current_api_key) {
        $output .= '<div class="dga-token-info">';
        $output .= '<span class="dga-token-label">API TOKEN ปัจจุบัน:</span> ';
        $output .= '<span class="dga-token-value">' . esc_html($masked_api_key) . '</span>';
        $output .= '</div>';
        
        // Add buttons container with update and delete buttons
        $output .= '<div class="dga-token-actions">';
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
        $output .= '<button id="dga-delete-token-btn" class="dga-btn dga-btn-danger">ลบ TOKEN</button>';
        $output .= '</div>';
    } else {
        // If no token exists, only show the update button
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
    }
    
    return $output;
}

/**
 * AJAX handler to update user API key
 */
function dga_update_user_api_key() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_token_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'User not logged in'));
        wp_die();
    }
    
    // Get and sanitize API key
    $api_key = isset($_POST['api_key']) ? sanitize_text_field($_POST['api_key']) : '';
    
    if (empty($api_key)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'API KEY ไม่สามารถเป็นค่าว่างได้'));
        wp_die();
    }
    
    // Update user meta
    $current_user_id = get_current_user_id();
    $update_result = update_user_meta($current_user_id, 'api_key', $api_key);
    
    if ($update_result) {
        $masked_api_key = substr($api_key, 0, 4) . '****' . substr($api_key, -4);
        
        // Get updated widget content
        $updated_content = dga_get_token_widget_content();
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'อัพเดต API KEY สำเร็จ',
            'masked_key' => $masked_api_key,
            'widget_content' => $updated_content
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่สามารถอัพเดต API KEY ได้ โปรดลองอีกครั้ง'));
    }
    
    wp_die();
}
add_action('wp_ajax_dga_update_user_api_key', 'dga_update_user_api_key');

/**
 * AJAX handler to delete user API key
 */
function dga_delete_user_api_key() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_token_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'User not logged in'));
        wp_die();
    }
    
    // Delete user meta
    $current_user_id = get_current_user_id();
    $delete_result = delete_user_meta($current_user_id, 'api_key');
    
    if ($delete_result) {
        // Get updated widget content
        $updated_content = dga_get_token_widget_content();
        
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'ลบ API TOKEN สำเร็จ',
            'widget_content' => $updated_content
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่สามารถลบ API TOKEN ได้ โปรดลองอีกครั้ง'));
    }
    
    wp_die();
}
add_action('wp_ajax_dga_delete_user_api_key', 'dga_delete_user_api_key');

/**
 * AJAX handler to refresh widget content
 */
function dga_refresh_token_widget() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_token_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'User not logged in'));
        wp_die();
    }
    
    // Get updated widget content
    $updated_content = dga_get_token_widget_content();
    
    wp_send_json_success(array(
        'widget_content' => $updated_content
    ));
    
    wp_die();
}
add_action('wp_ajax_dga_refresh_token_widget', 'dga_refresh_token_widget');



/***** API READER TEST *****/

function dga_endpoint_test_shortcode_xy34() {
    // ตรวจสอบการล็อกอิน
    if (!is_user_logged_in()) {
        return '<div class="dga-endpoint-test-container-xy34">
                    <div class="dga-notice-warning-xy34">
                        <p>' . __('กรุณาเข้าสู่ระบบเพื่อทดสอบ API Endpoint', DGA_TEXT_DOMAIN) . '</p>
                    </div>
                </div>';
    }
    
    // โหลด styles และ scripts
    wp_enqueue_style(
        'dga-endpoint-test-css-xy34', 
        get_stylesheet_directory_uri() . '/css/dga-endpoint-test.css', 
        array(), 
        '1.2.0'
    );
    
    wp_enqueue_script(
        'dga-endpoint-test-js-xy34', 
        get_stylesheet_directory_uri() . '/js/dga-endpoint-test.js', 
        array(DGA_JQUERY_HANDLE), 
        '1.2.0', 
        true
    );
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('dga-endpoint-test-js-xy34', 'dgaEndpointTestData', array(
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_endpoint_test_nonce_xy34'),
        'strings' => array(
            'loading' => __('กำลังดึงข้อมูล...', DGA_TEXT_DOMAIN),
            'error_url_required' => __('กรุณาระบุ URL Endpoint', DGA_TEXT_DOMAIN),
            'error_connection' => __('เกิดข้อผิดพลาดในการเชื่อมต่อ', DGA_TEXT_DOMAIN),
            'success_copied' => __('คัดลอกข้อมูลสำเร็จ', DGA_TEXT_DOMAIN),
            'view_compact' => __('แสดงแบบย่อ', DGA_TEXT_DOMAIN),
            'view_full' => __('แสดงแบบเต็ม', DGA_TEXT_DOMAIN)
        )
    ));
    
    // ดึงข้อมูลผู้ใช้และ API key
    $current_user = wp_get_current_user();
    $api_key = get_user_meta($current_user->ID, 'api_key', true);
    
    // เริ่มสร้าง HTML output
    $output = '<div class="dga-endpoint-test-container-xy34">';
    
    // ตรวจสอบการมีอยู่ของ API key
    if (empty($api_key)) {
        $output .= '<div class="dga-notice-warning-xy34">';
        $output .= '<h4>' . __('ไม่พบ API TOKEN', DGA_TEXT_DOMAIN) . '</h4>';
        $output .= '<p>' . __('คุณยังไม่ได้ตั้งค่า API TOKEN สำหรับเข้าถึง data.go.th', DGA_TEXT_DOMAIN) . '</p>';
        $output .= '<p>' . __('โปรดตั้งค่า API TOKEN ก่อนทดสอบ API หรือติดต่อผู้ดูแลระบบ', DGA_TEXT_DOMAIN) . '</p>';
        $output .= '</div>';
    } else {
        // แสดงส่วนทดสอบ API
        $output .= dga_build_test_interface_xy34($api_key);
    }
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('dga_endpoint_test', 'dga_endpoint_test_shortcode_xy34');

/**
 * สร้างส่วนติดต่อผู้ใช้สำหรับทดสอบ API
 */
function dga_build_test_interface_xy34($api_key) {
    // สร้าง masked API key สำหรับแสดง (รักษาความปลอดภัย)
    $masked_api_key = substr($api_key, 0, 4) . str_repeat('*', max(0, strlen($api_key) - 8)) . substr($api_key, -4);
    
    $output = '<div class="dga-test-header-xy34">';
    $output .= '<h3>' . __('ทดสอบ API Endpoint จาก data.go.th', DGA_TEXT_DOMAIN) . '</h3>';
    
    // แสดงสถานะ API Token
    $output .= '<div class="dga-token-status-xy34">';
    $output .= '<span class="dga-token-label-xy34">' . __('API TOKEN:', DGA_TEXT_DOMAIN) . '</span> ';
    $output .= '<span class="dga-token-value-xy34">' . esc_html($masked_api_key) . '</span>';
    $output .= '<span class="dga-token-status-active-xy34">✓ ' . __('พร้อมใช้งาน', DGA_TEXT_DOMAIN) . '</span>';
    $output .= '</div>';
    $output .= '</div>';
    
    // ฟอร์มทดสอบ API
    $output .= '<div class="dga-test-form-xy34">';
    
    // URL input พร้อมตัวอย่าง
    $output .= '<div class="dga-form-group-xy34">';
    $output .= '<label for="dga-endpoint-url-xy34">' . __('URL Endpoint', DGA_TEXT_DOMAIN) . '</label>';
    $output .= '<div class="dga-input-group-xy34">';
    $output .= '<input type="url" id="dga-endpoint-url-xy34" class="dga-form-control-xy34" 
                       placeholder="https://api.data.go.th/..." 
                       aria-describedby="dga-url-help-xy34" required>';
    $output .= '<button id="dga-test-btn-xy34" class="dga-btn-primary-xy34" type=DGA_BUTTON_TYPE>';
    $output .= __('ทดสอบ', DGA_TEXT_DOMAIN) . '</button>';
    $output .= '</div>';
    $output .= '<div id="dga-url-help-xy34" class="dga-help-text-xy34">';
    $output .= __('ระบุ URL ของ API endpoint ที่ต้องการทดสอบ', DGA_TEXT_DOMAIN);
    $output .= '</div>';
    $output .= '</div>';
    
    // ตัวอย่าง API endpoints
    $output .= '<div class="dga-examples-xy34">';
    $output .= '<div class="dga-examples-label-xy34">' . __('ตัวอย่าง API Endpoints:', DGA_TEXT_DOMAIN) . '</div>';
    $output .= '<div class="dga-examples-list-xy34">';
    
    $examples = array(
        'https://api.data.go.th/catalog/api/3/action/package_list' => __('รายการชุดข้อมูล', DGA_TEXT_DOMAIN),
        'https://api.data.go.th/catalog/api/3/action/group_list' => __('รายการกลุ่มข้อมูล', DGA_TEXT_DOMAIN),
        'https://api.data.go.th/catalog/api/3/search/dataset?q=covid' => __('ค้นหาข้อมูล COVID', DGA_TEXT_DOMAIN),
        'https://api.data.go.th/catalog/api/3/action/organization_list' => __('รายการหน่วยงาน', DGA_TEXT_DOMAIN)
    );
    
    foreach ($examples as $url => $label) {
        $output .= '<button class="dga-example-btn-xy34" data-url="' . esc_attr($url) . '" type=DGA_BUTTON_TYPE>';
        $output .= esc_html($label) . '</button>';
    }
    
    $output .= '</div>';
    $output .= '</div>';
    
    // HTTP Method และ Parameters
    $output .= '<div class="dga-form-row-xy34">';
    
    // HTTP Method
    $output .= '<div class="dga-form-col-xy34">';
    $output .= '<label for="dga-http-method-xy34">' . __('HTTP Method', DGA_TEXT_DOMAIN) . '</label>';
    $output .= '<select id="dga-http-method-xy34" class="dga-form-control-xy34">';
    $output .= '<option value="GET" selected>GET</option>';
    $output .= '<option value="POST">POST</option>';
    $output .= '</select>';
    $output .= '</div>';
    
    // Custom Headers (เพิ่มเติม)
    $output .= '<div class="dga-form-col-xy34">';
    $output .= '<label for="dga-custom-headers-xy34">' . __('Headers เพิ่มเติม (JSON)', DGA_TEXT_DOMAIN) . '</label>';
    $output .= '<textarea id="dga-custom-headers-xy34" class="dga-form-control-xy34" rows="2" 
                         placeholder=\'{"Content-Type": "application/json"}\'></textarea>';
    $output .= '<div class="dga-help-text-xy34">' . __('api-key จะถูกเพิ่มอัตโนมัติ', DGA_TEXT_DOMAIN) . '</div>';
    $output .= '</div>';
    
    $output .= '</div>';
    
    // POST Parameters (ซ่อนไว้เริ่มต้น)
    $output .= '<div id="dga-post-params-xy34" class="dga-form-group-xy34" style="display: none;">';
    $output .= '<label for="dga-post-data-xy34">' . __('POST Data (JSON)', DGA_TEXT_DOMAIN) . '</label>';
    $output .= '<textarea id="dga-post-data-xy34" class="dga-form-control-xy34" rows="4" 
                         placeholder=\'{"key": "value"}\'></textarea>';
    $output .= '</div>';
    
    $output .= '</div>'; // End test form
    
    // ส่วนแสดงผลลัพธ์
    $output .= dga_build_results_section_xy34();
    
    // ส่วนช่วยเหลือและแก้ไขปัญหา
    $output .= dga_build_help_section_xy34();
    
    return $output;
}

/**
 * สร้างส่วนแสดงผลลัพธ์
 */
function dga_build_results_section_xy34() {
    $output = '<div id="dga-results-xy34" class="dga-results-xy34" style="display: none;">';
    
    // Loading indicator
    $output .= '<div id="dga-loading-xy34" class="dga-loading-xy34" style="display: none;">';
    $output .= '<div class="dga-spinner-xy34"></div>';
    $output .= '<span>' . __('กำลังทดสอบ API...', DGA_TEXT_DOMAIN) . '</span>';
    $output .= '</div>';
    
    // Results header
    $output .= '<div class="dga-results-header-xy34">';
    $output .= '<h4>' . __('ผลลัพธ์การทดสอบ', DGA_TEXT_DOMAIN) . '</h4>';
    $output .= '<div class="dga-results-actions-xy34">';
    $output .= '<button id="dga-copy-response-xy34" class="dga-btn-secondary-xy34" type=DGA_BUTTON_TYPE>';
    $output .= __('คัดลอกผลลัพธ์', DGA_TEXT_DOMAIN) . '</button>';
    $output .= '<button id="dga-toggle-view-xy34" class="dga-btn-secondary-xy34" type=DGA_BUTTON_TYPE>';
    $output .= __('เปลี่ยนมุมมอง', DGA_TEXT_DOMAIN) . '</button>';
    $output .= '</div>';
    $output .= '</div>';
    
    // Status และเวลาตอบสนอง
    $output .= '<div class="dga-status-bar-xy34">';
    $output .= '<div class="dga-status-item-xy34">';
    $output .= '<span class="dga-status-label-xy34">' . __('สถานะ:', DGA_TEXT_DOMAIN) . '</span>';
    $output .= '<span id="dga-status-value-xy34" class="dga-status-value-xy34">-</span>';
    $output .= '</div>';
    $output .= '<div class="dga-status-item-xy34">';
    $output .= '<span class="dga-status-label-xy34">' . __('เวลาตอบสนอง:', DGA_TEXT_DOMAIN) . '</span>';
    $output .= '<span id="dga-response-time-xy34" class="dga-status-value-xy34">-</span>';
    $output .= '</div>';
    $output .= '</div>';
    
    // Tabs สำหรับแสดงผลลัพธ์
    $output .= '<div class="dga-result-tabs-xy34">';
    $output .= '<div class="dga-tab-nav-xy34">';
    $output .= '<button class="dga-tab-btn-xy34 active" data-tab="response">' . __('API Response', DGA_TEXT_DOMAIN) . '</button>';
    $output .= '<button class="dga-tab-btn-xy34" data-tab="headers">' . __('Headers', DGA_TEXT_DOMAIN) . '</button>';
    $output .= '<button class="dga-tab-btn-xy34" data-tab="preview">' . __('ตัวอย่างข้อมูล', DGA_TEXT_DOMAIN) . '</button>';
    $output .= '</div>';
    
    // Tab content
    $output .= '<div class="dga-tab-content-xy34">';
    
    // Response tab
    $output .= '<div id="dga-tab-response-xy34" class="dga-tab-pane-xy34 active">';
    $output .= '<pre id="dga-response-json-xy34" class="dga-code-block-xy34"></pre>';
    $output .= '</div>';
    
    // Headers tab
    $output .= '<div id="dga-tab-headers-xy34" class="dga-tab-pane-xy34">';
    $output .= '<pre id="dga-response-headers-xy34" class="dga-code-block-xy34"></pre>';
    $output .= '</div>';
    
    // Preview tab
    $output .= '<div id="dga-tab-preview-xy34" class="dga-tab-pane-xy34">';
    $output .= '<div id="dga-data-preview-xy34" class="dga-data-preview-xy34"></div>';
    $output .= '</div>';
    
    $output .= '</div>'; // End tab content
    $output .= '</div>'; // End result tabs
    $output .= '</div>'; // End results
    
    return $output;
}

/**
 * สร้างส่วนช่วยเหลือ
 */
function dga_build_help_section_xy34() {
    $output = '<div class="dga-help-section-xy34">';
    $output .= '<details class="dga-help-details-xy34">';
    $output .= '<summary>' . __('💡 คำแนะนำและการแก้ไขปัญหา', DGA_TEXT_DOMAIN) . '</summary>';
    $output .= '<div class="dga-help-content-xy34">';
    
    $output .= '<h5>' . __('ปัญหาที่พบบ่อย:', DGA_TEXT_DOMAIN) . '</h5>';
    $output .= '<ul>';
    $output .= '<li><strong>' . __('403 Forbidden:', DGA_TEXT_DOMAIN) . '</strong> ' . __('ตรวจสอบ API Token หรือสิทธิ์การเข้าถึง', DGA_TEXT_DOMAIN) . '</li>';
    $output .= '<li><strong>' . __('404 Not Found:', DGA_TEXT_DOMAIN) . '</strong> ' . __('ตรวจสอบ URL ของ API endpoint', DGA_TEXT_DOMAIN) . '</li>';
    $output .= '<li><strong>' . __('Connection Timeout:', DGA_TEXT_DOMAIN) . '</strong> ' . __('API server อาจทำงานช้า ลองใหม่อีกครั้ง', DGA_TEXT_DOMAIN) . '</li>';
    $output .= '</ul>';
    
    $output .= '<h5>' . __('แหล่งข้อมูล API:', DGA_TEXT_DOMAIN) . '</h5>';
    $output .= '<ul>';
    $output .= '<li><a href="https://data.go.th/developer" target="_blank">' . __('เอกสาร API data.go.th', DGA_TEXT_DOMAIN) . '</a></li>';
    $output .= '<li><a href="https://data.go.th/dataset" target="_blank">' . __('รายการชุดข้อมูล', DGA_TEXT_DOMAIN) . '</a></li>';
    $output .= '</ul>';
    
    $output .= '</div>';
    $output .= '</details>';
    $output .= '</div>';
    
    return $output;
}

/**
 * AJAX Handler สำหรับทดสอบ API endpoint
 */
function dga_test_api_endpoint_ajax_xy34() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_endpoint_test_nonce_xy34')) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)
        ));
    }
    
    // ตรวจสอบการล็อกอิน
    if (!is_user_logged_in()) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('กรุณาเข้าสู่ระบบก่อนใช้งาน', DGA_TEXT_DOMAIN)
        ));
    }
    
    // รับและตรวจสอบข้อมูล input
    $endpoint_url = isset($_POST['endpoint']) ? esc_url_raw($_POST['endpoint']) : '';
    $http_method = isset($_POST['method']) ? sanitize_text_field($_POST['method']) : 'GET';
    $custom_headers = isset($_POST['headers']) ? sanitize_textarea_field($_POST['headers']) : '';
    $post_data = isset($_POST['post_data']) ? sanitize_textarea_field($_POST['post_data']) : '';
    
    // ตรวจสอบ URL
    if (empty($endpoint_url)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('กรุณาระบุ URL Endpoint', DGA_TEXT_DOMAIN)
        ));
    }
    
    // ดึง API key ของผู้ใช้
    $current_user_id = get_current_user_id();
    $api_key = get_user_meta($current_user_id, 'api_key', true);
    
    if (empty($api_key)) {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => __('ไม่พบ API KEY โปรดตั้งค่า API KEY ก่อนทดสอบ', DGA_TEXT_DOMAIN)
        ));
    }
    
    // สร้าง headers สำหรับ API request (จำลอง browser)
    $headers = array(
        'api-key' => trim($api_key),
        'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept' => 'application/json, text/plain, */*',
        'Accept-Language' => 'en-US,en;q=0.9,th;q=0.8',
        'Accept-Encoding' => 'gzip, deflate, br',
        'Connection' => 'keep-alive',
        'Upgrade-Insecure-Requests' => '1',
        'Sec-Fetch-Dest' => 'document',
        'Sec-Fetch-Mode' => 'navigate',
        'Sec-Fetch-Site' => 'none',
        'Sec-Fetch-User' => '?1',
        'Cache-Control' => 'max-age=0'
    );
    
    // เพิ่ม custom headers ถ้ามี
    if (!empty($custom_headers)) {
        $decoded_headers = json_decode($custom_headers, true);
        if (json_last_error() === JSON_ERROR_NONE && is_array($decoded_headers)) {
            foreach ($decoded_headers as $key => $value) {
                // ไม่ให้แทนที่ api-key ที่มีอยู่แล้ว
                if (strtolower($key) !== 'api-key') {
                    $headers[sanitize_text_field($key)] = sanitize_text_field($value);
                }
            }
        } else {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('รูปแบบ Headers ไม่ถูกต้อง (ต้องเป็น JSON)', DGA_TEXT_DOMAIN)
            ));
        }
    }
    
    // ตั้งค่าพารามิเตอร์สำหรับ HTTP request (เพิ่มการป้องกันการถูกบล็อค)
    $request_args = array(
        'timeout' => 30,
        'headers' => $headers,
        'sslverify' => true,
        'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'httpversion' => '1.1',
        'redirection' => 5,
        'blocking' => true,
        'cookies' => array(),
        'decompress' => true
    );
    
    // เพิ่ม delay เล็กน้อยเพื่อหลีกเลี่ยง rate limiting
    usleep(500000); // 0.5 วินาที
    
    // เพิ่ม POST data ถ้าเป็น POST method
    if ($http_method === 'POST' && !empty($post_data)) {
        $decoded_data = json_decode($post_data, true);
        if (json_last_error() === JSON_ERROR_NONE) {
            $request_args['body'] = $post_data;
            if (!isset($headers['Content-Type'])) {
                $request_args['headers']['Content-Type'] = 'application/json';
            }
        } else {
            wp_send_json_error(array(
                DGA_MESSAGE_KEY => __('รูปแบบ POST Data ไม่ถูกต้อง (ต้องเป็น JSON)', DGA_TEXT_DOMAIN)
            ));
        }
    }
    
    // บันทึกเวลาเริ่มต้น
    $start_time = microtime(true);
    
    // ส่ง HTTP request
    if ($http_method === 'POST') {
        $response = wp_remote_post($endpoint_url, $request_args);
    } else {
        $response = wp_remote_get($endpoint_url, $request_args);
    }
    
    // คำนวณเวลาตอบสนอง
    $response_time = round((microtime(true) - $start_time) * 1000);
    
    // ตรวจสอบข้อผิดพลาด
    if (is_wp_error($response)) {
        $error_message = $response->get_error_message();
        $error_code = $response->get_error_code();
        
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => sprintf(__('เกิดข้อผิดพลาด: %s', DGA_TEXT_DOMAIN), $error_message),
            'error_code' => $error_code,
            'response_time' => $response_time . ' ms'
        ));
    }
    
    // ดึงข้อมูลจาก response
    $status_code = wp_remote_retrieve_response_code($response);
    $response_headers = wp_remote_retrieve_headers($response);
    $body = wp_remote_retrieve_body($response);
    
    // แปลง JSON response
    $parsed_body = json_decode($body, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        $parsed_body = $body; // ถ้าไม่ใช่ JSON ให้ใช้ข้อมูลดิบ
    }
    
    // สร้างข้อมูลตัวอย่างสำหรับแสดงผล
    $preview_data = dga_extract_preview_data_xy34($parsed_body);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success(array(
        'status_code' => $status_code,
        'response_time' => $response_time . ' ms',
        'headers' => $response_headers,
        'response' => $parsed_body,
        'preview_data' => $preview_data,
        'request_info' => array(
            'url' => $endpoint_url,
            'method' => $http_method,
            'headers_sent' => $headers,
            'api_key_used' => substr($api_key, 0, 4) . '...' . substr($api_key, -4),
            'api_key_length' => strlen($api_key),
            'custom_headers_count' => !empty($custom_headers) ? count(json_decode($custom_headers, true) ?: array()) : 0,
            DGA_SUCCESS_STATUS => true
        ),
        'debug_info' => array(
            'api_key_exists' => !empty($api_key),
            'api_key_preview' => substr($api_key, 0, 4) . '***' . substr($api_key, -4),
            'headers_count' => count($headers),
            'wp_version' => get_bloginfo('version'),
            'user_id' => $current_user_id
        )
    ));
}
add_action('wp_ajax_dga_test_api_endpoint', 'dga_test_api_endpoint_ajax_xy34');

/**
 * แยกข้อมูลสำหรับแสดงตัวอย่าง
 */
function dga_extract_preview_data_xy34($response) {
    if (empty($response) || !is_array($response)) {
        return array(
            DGA_TYPE_FIELD => DGA_ERROR_STATUS,
            DGA_MESSAGE_KEY => __('ไม่สามารถแสดงตัวอย่างข้อมูลได้', DGA_TEXT_DOMAIN)
        );
    }
    
    // ตรวจสอบรูปแบบ data.go.th standard
    if (isset($response['result'])) {
        $result = $response['result'];
        
        // รายการแบบง่าย (package_list, group_list)
        if (is_array($result) && !empty($result) && is_string($result[0])) {
            return array(
                DGA_TYPE_FIELD => 'list',
                'data' => array_slice($result, 0, 20), // แสดงแค่ 20 รายการแรก
                DGA_TOTAL_FIELD_KEY => count($result),
                DGA_TITLE_FIELD => __('รายการข้อมูล', DGA_TEXT_DOMAIN)
            );
        }
        
        // ผลการค้นหา (search results)
        if (isset($result['results']) && is_array($result['results'])) {
            return array(
                DGA_TYPE_FIELD => 'table',
                'data' => array_slice($result['results'], 0, 10),
                DGA_TOTAL_FIELD_KEY => isset($result['count']) ? $result['count'] : count($result['results']),
                DGA_TITLE_FIELD => __('ผลการค้นหา', DGA_TEXT_DOMAIN)
            );
        }
        
        // ข้อมูลในรูปแบบ object array
        if (is_array($result) && !empty($result) && is_array($result[0])) {
            return array(
                DGA_TYPE_FIELD => 'table',
                'data' => array_slice($result, 0, 10),
                DGA_TOTAL_FIELD_KEY => count($result),
                DGA_TITLE_FIELD => __('ข้อมูลจาก API', DGA_TEXT_DOMAIN)
            );
        }
    }
    
    // รูปแบบ API อื่นๆ
    if (isset($response['data']) && is_array($response['data'])) {
        return array(
            DGA_TYPE_FIELD => 'table',
            'data' => array_slice($response['data'], 0, 10),
            DGA_TOTAL_FIELD_KEY => isset($response[DGA_TOTAL_FIELD_KEY]) ? $response[DGA_TOTAL_FIELD_KEY] : count($response['data']),
            DGA_TITLE_FIELD => __('ข้อมูลจาก API', DGA_TEXT_DOMAIN)
        );
    }
    
    // Fallback: แสดงข้อมูลดิบ
    return array(
        DGA_TYPE_FIELD => 'raw',
        'data' => $response,
        DGA_TITLE_FIELD => __('ข้อมูลดิบจาก API', DGA_TEXT_DOMAIN)
    );
}

/**
 * Shortcode สำหรับตรวจสอบ API Token ของผู้ใช้ปัจจุบัน
 */
function check_user_api_token_xy34() {
    if (!is_user_logged_in()) {
        return '<div style="padding: 15px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px;">
                    <strong>ไม่ได้เข้าสู่ระบบ:</strong> กรุณาเข้าสู่ระบบก่อนตรวจสอบ API Token
                </div>';
    }
    
    $current_user = wp_get_current_user();
    $api_key = get_user_meta($current_user->ID, 'api_key', true);
    
    $output = '<div style="padding: 15px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;">';
    $output .= '<h4>ข้อมูล API Token ของคุณ</h4>';
    $output .= '<p><strong>ผู้ใช้:</strong> ' . esc_html($current_user->display_name) . ' (' . esc_html($current_user->user_email) . ')</p>';
    
    if (empty($api_key)) {
        $output .= '<div style="padding: 10px; background: #f8d7da; color: #721c24; border-radius: 3px;">';
        $output .= '<strong>❌ ไม่พบ API Token</strong><br>';
        $output .= 'คุณยังไม่ได้ตั้งค่า API Token สำหรับเข้าถึง data.go.th<br>';
        $output .= 'โปรดติดต่อผู้ดูแลระบบเพื่อตั้งค่า API Token';
        $output .= '</div>';
        
        // แสดงวิธีการตั้งค่า API Token (สำหรับ Admin)
        if (current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
            $output .= '<div style="margin-top: 10px; padding: 10px; background: #d1ecf1; color: #0c5460; border-radius: 3px;">';
            $output .= '<strong>🔧 สำหรับผู้ดูแล:</strong><br>';
            $output .= 'ใช้โค้ดนี้เพื่อตั้งค่า API Token:<br>';
            $output .= '<code>update_user_meta(' . $current_user->ID . ', "api_key", "your_api_token_here");</code>';
            $output .= '</div>';
        }
    } else {
        // แสดง API key แบบ masked
        $masked_key = substr($api_key, 0, 4) . str_repeat('*', max(0, strlen($api_key) - 8)) . substr($api_key, -4);
        
        $output .= '<div style="padding: 10px; background: #d4edda; color: #155724; border-radius: 3px;">';
        $output .= '<strong>✅ พบ API Token</strong><br>';
        $output .= '<strong>Token:</strong> <code>' . esc_html($masked_key) . '</code><br>';
        $output .= '<strong>ความยาว:</strong> ' . strlen($api_key) . ' ตัวอักษร<br>';
        $output .= '<strong>สถานะ:</strong> พร้อมใช้งาน';
        $output .= '</div>';
        
        // แสดงตัวอย่างการใช้งาน
        $output .= '<div style="margin-top: 10px; padding: 10px; background: #cce5ff; color: #004085; border-radius: 3px;">';
        $output .= '<strong>💡 วิธีใช้งาน:</strong><br>';
        $output .= '1. ใส่ URL endpoint ในช่อง "URL Endpoint"<br>';
        $output .= '2. <strong>ไม่ต้องใส่ api-key ใน Headers</strong> (จะถูกเพิ่มอัตโนมัติ)<br>';
        $output .= '3. กดปุ่ม "ทดสอบ" เพื่อส่งคำขอ API';
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('check_api_token', 'check_user_api_token_xy34');

/**
 * ฟังก์ชันสำหรับ Admin ตั้งค่า API Token ให้ผู้ใช้
 */
function set_user_api_token_xy34($user_id, $api_token) {
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return false;
    }
    
    return update_user_meta($user_id, 'api_key', sanitize_text_field($api_token));
}

/**
 * Admin interface สำหรับตั้งค่า API Token (สำหรับผู้ดูแล)
 */
function admin_set_api_token_interface_xy34() {
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return '<div style="color: red;">คุณไม่มีสิทธิ์เข้าถึงส่วนนี้</div>';
    }
    
    $output = '<div style="max-width: 600px; margin: 20px 0;">';
    $output .= '<h3>🔑 จัดการ API Tokens ของผู้ใช้</h3>';
    
    // ฟอร์มตั้งค่า API Token
    $output .= '<form method="post" style="background: #f8f9fa; padding: 20px; border-radius: 5px; border: 1px solid #dee2e6;">';
    $output .= wp_nonce_field('set_api_token_action', 'set_api_token_nonce', true, false);
    
    $output .= '<div style="margin-bottom: 15px;">';
    $output .= '<label for="user_id"><strong>ผู้ใช้:</strong></label><br>';
    $output .= '<select name="user_id" id="user_id" style="width: 100%; padding: 8px; margin-top: 5px;" required>';
    $output .= '<option value="">เลือกผู้ใช้...</option>';
    
    // ดึงรายชื่อผู้ใช้ทั้งหมด
    $users = get_users(array(DGA_ORDERBY_FIELD_VALUE => 'display_name'));
    foreach ($users as $user) {
        $current_token = get_user_meta($user->ID, 'api_key', true);
        $status = empty($current_token) ? '(ไม่มี Token)' : '(มี Token แล้ว)';
        $output .= '<option value="' . $user->ID . '">' . esc_html($user->display_name) . ' - ' . esc_html($user->user_email) . ' ' . $status . '</option>';
    }
    
    $output .= '</select>';
    $output .= '</div>';
    
    $output .= '<div style="margin-bottom: 15px;">';
    $output .= '<label for="api_token"><strong>API Token:</strong></label><br>';
    $output .= '<input type="text" name="api_token" id="api_token" style="width: 100%; padding: 8px; margin-top: 5px;" placeholder="ใส่ API Token จาก data.go.th" required>';
    $output .= '<small style="color: #6c757d;">ได้รับจาก <a href="https://data.go.th/developer" target="_blank">data.go.th/developer</a></small>';
    $output .= '</div>';
    
    $output .= '<button type=DGA_SUBMIT_TYPE name="submit_api_token" style="background: #007cba; color: white; padding: 10px 20px; border: none; border-radius: 3px; cursor: pointer;">บันทึก API Token</button>';
    $output .= '</form>';
    
    // ประมวลผลฟอร์ม
    if (isset($_POST['submit_api_token']) && wp_verify_nonce($_POST['set_api_token_nonce'], 'set_api_token_action')) {
        $user_id = intval($_POST['user_id']);
        $api_token = sanitize_text_field($_POST['api_token']);
        
        if ($user_id && $api_token) {
            $result = update_user_meta($user_id, 'api_key', $api_token);
            $user_info = get_userdata($user_id);
            
            if ($result !== false) {
                $output .= '<div style="background: #d4edda; color: #155724; padding: 10px; border-radius: 3px; margin-top: 15px;">';
                $output .= '<strong>✅ สำเร็จ!</strong> บันทึก API Token สำหรับผู้ใช้ ' . esc_html($user_info->display_name) . ' เรียบร้อยแล้ว';
                $output .= '</div>';
            } else {
                $output .= '<div style="background: #f8d7da; color: #721c24; padding: 10px; border-radius: 3px; margin-top: 15px;">';
                $output .= '<strong>❌ ข้อผิดพลาด!</strong> ไม่สามารถบันทึก API Token ได้';
                $output .= '</div>';
            }
        }
    }
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('admin_api_tokens', 'admin_set_api_token_interface_xy34');


/**
 * ฟังก์ชันสำหรับการเรียก API ผ่าน CORS Proxy (แก้ปัญหาการถูกบล็อค)
 */
function dga_call_api_with_proxy_xy34($endpoint_url, $headers, $method = 'GET', $body = null) {
    $proxy_services = array(
        // CORS Proxy Services (ใช้เป็นทางเลือก)
        'https://api.allorigins.win/raw?url=' . urlencode($endpoint_url),
        'https://corsproxy.io/?' . urlencode($endpoint_url),
        'https://cors-anywhere.herokuapp.com/' . $endpoint_url
    );
    
    // ลองเรียก API โดยตรงก่อน
    $response = dga_try_direct_api_call_xy34($endpoint_url, $headers, $method, $body);
    
    if (!is_wp_error($response)) {
        $status_code = wp_remote_retrieve_response_code($response);
        $body_content = wp_remote_retrieve_body($response);
        
        // ตรวจสอบว่าไม่ใช่หน้า "Access Denied"
        if ($status_code === 200 && strpos($body_content, 'Access Denied') === false) {
            return $response;
        }
    }
    
    // ถ้าโดนบล็อค ลองใช้ proxy services
    foreach ($proxy_services as $proxy_url) {
        $proxy_headers = $headers;
        // ลบ api-key ออกจาก headers เมื่อใช้ proxy (จะใส่ใน URL แทน)
        unset($proxy_headers['api-key']);
        
        // เพิ่ม api-key ใน URL parameter
        $separator = strpos($proxy_url, '?') !== false ? '&' : '?';
        $proxy_url_with_key = $proxy_url . $separator . 'api-key=' . urlencode($headers['api-key']);
        
        $proxy_args = array(
            'timeout' => 45,
            'headers' => $proxy_headers,
            'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'sslverify' => false // บาง proxy service อาจมีปัญหา SSL
        );
        
        if ($method === 'POST' && $body) {
            $proxy_args['body'] = $body;
        }
        
        $proxy_response = wp_remote_get($proxy_url_with_key, $proxy_args);
        
        if (!is_wp_error($proxy_response)) {
            $proxy_status = wp_remote_retrieve_response_code($proxy_response);
            $proxy_body = wp_remote_retrieve_body($proxy_response);
            
            if ($proxy_status === 200 && strpos($proxy_body, 'Access Denied') === false) {
                // เพิ่ม header เพื่อระบุว่าใช้ proxy
                $proxy_headers_response = wp_remote_retrieve_headers($proxy_response);
                $proxy_headers_response['X-Proxy-Used'] = basename(parse_url($proxy_url, PHP_URL_HOST));
                
                // สร้าง response object ใหม่
                return array(
                    'headers' => $proxy_headers_response,
                    'body' => $proxy_body,
                    'response' => array(
                        'code' => $proxy_status,
                        DGA_MESSAGE_KEY => 'OK (via proxy)'
                    )
                );
            }
        }
        
        // รอสักครู่ก่อนลอง proxy ถัดไป
        usleep(1000000); // 1 วินาที
    }
    
    // ถ้าทุก proxy ล้มเหลว ส่งข้อมูลการถูกบล็อคกลับไป
    return new WP_Error(
        'api_blocked', 
        'เซิร์ฟเวอร์ของคุณถูกบล็อคโดย data.go.th โปรดลองใช้วิธีอื่น',
        array(
            'blocked_ip' => $_SERVER['SERVER_ADDR'] ?? 'unknown',
            'suggested_solutions' => array(
                'ใช้ VPN หรือ Proxy',
                'ติดต่อ data.go.th เพื่อขอ whitelist IP',
                'ใช้ Postman หรือ curl ทดสอบจากเครื่องตัวเอง',
                'ใช้เครื่องมือทดสอบ API อื่น'
            )
        )
    );
}

/**
 * ฟังก์ชันสำหรับเรียก API โดยตรง
 */
function dga_try_direct_api_call_xy34($endpoint_url, $headers, $method = 'GET', $body = null) {
    $args = array(
        'timeout' => 30,
        'headers' => $headers,
        'sslverify' => true,
        'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'httpversion' => '1.1'
    );
    
    if ($method === 'POST' && $body) {
        $args['body'] = $body;
        if (!isset($headers['Content-Type'])) {
            $args['headers']['Content-Type'] = 'application/json';
        }
    }
    
    // เพิ่ม delay เพื่อหลีกเลี่ยง rate limiting
    usleep(500000); // 0.5 วินาที
    
    if ($method === 'POST') {
        return wp_remote_post($endpoint_url, $args);
    } else {
        return wp_remote_get($endpoint_url, $args);
    }
}

/**
 * สร้าง shortcode สำหรับแสดงวิธีแก้ปัญหาการถูกบล็อค
 */
function dga_show_block_solutions_xy34() {
    $output = '<div class="dga-block-solutions-xy34" style="max-width: 800px; margin: 20px auto; padding: 20px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">';
    
    $output .= '<h3 style="color: #856404; margin-top: 0;">🚫 ปัญหาการถูกบล็อคโดย data.go.th</h3>';
    
    $output .= '<div style="background: #f8d7da; color: #721c24; padding: 12px; border-radius: 5px; margin-bottom: 15px;">';
    $output .= '<strong>สาเหตุ:</strong> IP ของเซิร์ฟเวอร์ WordPress ถูกบล็อคโดยระบบความปลอดภัยของ data.go.th';
    $output .= '</div>';
    
    $output .= '<h4 style="color: #856404;">💡 วิธีแก้ไขปัญหา:</h4>';
    
    $output .= '<div style="display: grid; gap: 15px; margin-bottom: 20px;">';
    
    // วิธีที่ 1: ใช้เครื่องมือภายนอก
    $output .= '<div style="background: white; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">';
    $output .= '<h5 style="color: #007cba; margin-top: 0;">🔧 วิธีที่ 1: ใช้เครื่องมือภายนอก</h5>';
    $output .= '<ul style="margin: 10px 0;">';
    $output .= '<li><strong>Postman:</strong> ทดสอบ API จากเครื่องคอมพิวเตอร์ของคุณโดยตรง</li>';
    $output .= '<li><strong>cURL:</strong> ใช้ command line ทดสอบ API</li>';
    $output .= '<li><strong>Browser:</strong> เข้าถึง API ผ่าน browser โดยตรง</li>';
    $output .= '</ul>';
    $output .= '</div>';
    
    // วิธีที่ 2: ติดต่อ data.go.th
    $output .= '<div style="background: white; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">';
    $output .= '<h5 style="color: #007cba; margin-top: 0;">📞 วิธีที่ 2: ติดต่อ data.go.th</h5>';
    $output .= '<p>ติดต่อทีม data.go.th เพื่อขอ whitelist IP ของเซิร์ฟเวอร์:</p>';
    $output .= '<ul style="margin: 10px 0;">';
    $output .= '<li><strong>IP ของเซิร์ฟเวอร์:</strong> <code>' . ($_SERVER['SERVER_ADDR'] ?? 'unknown') . '</code></li>';
    $output .= '<li><strong>อีเมล:</strong> <a href="mailto:support@data.go.th">support@data.go.th</a></li>';
    $output .= '<li><strong>เว็บไซต์:</strong> <a href="https://data.go.th/contact" target="_blank">data.go.th/contact</a></li>';
    $output .= '</ul>';
    $output .= '</div>';
    
    // วิธีที่ 3: ใช้ Proxy
    $output .= '<div style="background: white; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">';
    $output .= '<h5 style="color: #007cba; margin-top: 0;">🌐 วิธีที่ 3: ใช้ VPN หรือ Proxy</h5>';
    $output .= '<ul style="margin: 10px 0;">';
    $output .= '<li>ใช้ VPN เพื่อเปลี่ยน IP address</li>';
    $output .= '<li>ตั้งค่า Proxy server สำหรับ WordPress</li>';
    $output .= '<li>ใช้ CDN หรือ reverse proxy</li>';
    $output .= '</ul>';
    $output .= '</div>';
    
    $output .= '</div>';
    
    // ตัวอย่าง cURL command
    $output .= '<div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 15px;">';
    $output .= '<h5 style="margin-top: 0;">📋 ตัวอย่าง cURL Command (ทดสอบจากเครื่องตัวเอง):</h5>';
    $output .= '<pre style="background: #2d3748; color: #e2e8f0; padding: 10px; border-radius: 3px; overflow-x: auto; font-size: 12px;"><code>';
    $output .= 'curl -X GET "https://opend.data.go.th/get-ckan/datastore_search?resource_id=c4445f13-0ca4-436c-ab2d-2b05579d01a6&limit=5" \\' . "\n";
    $output .= '     -H "api-key: YOUR_API_TOKEN_HERE" \\' . "\n";
    $output .= '     -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"';
    $output .= '</code></pre>';
    $output .= '</div>';
    
    // ข้อมูล technical details
    $output .= '<details style="margin-top: 15px;">';
    $output .= '<summary style="cursor: pointer; font-weight: bold; color: #007cba;">🔍 รายละเอียดทางเทคนิค</summary>';
    $output .= '<div style="margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;">';
    $output .= '<p><strong>Error Code:</strong> HTTP 403 Forbidden / Access Denied</p>';
    $output .= '<p><strong>Server IP:</strong> ' . ($_SERVER['SERVER_ADDR'] ?? 'unknown') . '</p>';
    $output .= '<p><strong>User Agent:</strong> WordPress HTTP Client</p>';
    $output .= '<p><strong>เหตุผล:</strong> ระบบความปลอดภัยของ data.go.th ตรวจพบการเข้าถึงจาก automated system</p>';
    $output .= '</div>';
    $output .= '</details>';
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('dga_block_solutions', 'dga_show_block_solutions_xy34');






/**** ฟังก์ชั่นสร้าง user ใหม่ ******/

// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main shortcode for user creation with horizontal layout
 * Usage: [dga_create_user_horizontal]
 */
function dga_create_user_shortcode_hjk456() {
    // ตรวจสอบสิทธิ์
    if (!current_user_can('create_users')) {
        return '<div class="dga-alert-hjk456 dga-alert-error-hjk456">
            <i class="dashicons dashicons-warning"></i>
            <span>' . __('คุณไม่มีสิทธิ์ในการสร้างผู้ใช้', DGA_TEXT_DOMAIN) . '</span>
        </div>';
    }
    
    // Process form submission via AJAX only
    $output = '<div class="dga-user-system-hjk456">';
    
    // Notification area
    $output .= '<div id="dga-notifications-hjk456"></div>';
    
    // Horizontal form
    $output .= '
    <div class="dga-form-horizontal-hjk456">
        <form id="dga-create-user-form-hjk456" class="dga-flex-form-hjk456">
            <div class="dga-form-fields-hjk456">
                <div class="dga-field-group-hjk456">
                    <input 
                        type="email" 
                        id="user_email_hjk456" 
                        name="user_email" 
                        class="dga-input-hjk456" 
                        placeholder="' . __('อีเมลผู้ใช้ใหม่', DGA_TEXT_DOMAIN) . '"
                        required
                    />
                    <span class="dga-field-icon-hjk456"><i class="dashicons dashicons-email"></i></span>
                    <button type=DGA_BUTTON_TYPE class="dga-clear-btn-hjk456" aria-label="' . __('ล้างข้อความ', DGA_TEXT_DOMAIN) . '">
                        <i class="dashicons dashicons-no-alt"></i>
                    </button>
                    <span class="dga-field-status-hjk456"></span>
                </div>
                
                <div class="dga-field-group-hjk456">
                    <select name="user_role" id="user_role_hjk456" class="dga-select-hjk456">
                        <option value="subscriber">' . __('Subscriber', DGA_TEXT_DOMAIN) . '</option>
                        <option value="contributor">' . __('Contributor', DGA_TEXT_DOMAIN) . '</option>
                        <option value="author">' . __('Author', DGA_TEXT_DOMAIN) . '</option>
                    </select>
                    <span class="dga-field-icon-hjk456"><i class="dashicons dashicons-admin-users"></i></span>
                </div>
                
                <button type=DGA_SUBMIT_TYPE class="dga-btn-submit-hjk456">
                    <span class="dga-btn-text-hjk456">' . __('สร้างผู้ใช้', DGA_TEXT_DOMAIN) . '</span>
                    <span class="dga-btn-loading-hjk456"></span>
                </button>
            </div>
            
            ' . wp_nonce_field('dga_create_user_nonce_hjk456', 'nonce', true, false) . '
        </form>
        
        <div class="dga-form-hint-hjk456">
            <i class="dashicons dashicons-info"></i>
            <span>' . __('ผู้ใช้จะได้รับอีเมลพร้อมลิงก์ตั้งรหัสผ่าน (ใช้ได้ 24 ชั่วโมง)', DGA_TEXT_DOMAIN) . '</span>
        </div>
    </div>';
    
    // Modal Popup
    $output .= '
    <div id="dga-modal-hjk456" class="dga-modal-hjk456">
        <div class="dga-modal-content-hjk456">
            <div class="dga-modal-header-hjk456">
                <h3>' . __('ยืนยันการสร้างผู้ใช้', DGA_TEXT_DOMAIN) . '</h3>
                <button type=DGA_BUTTON_TYPE class="dga-modal-close-hjk456" aria-label="' . __('ปิด', DGA_TEXT_DOMAIN) . '">
                    <i class="dashicons dashicons-no"></i>
                </button>
            </div>
            <div class="dga-modal-body-hjk456">
                <div class="dga-confirm-info-hjk456">
                    <div class="dga-confirm-item-hjk456">
                        <span class="dga-confirm-label-hjk456">' . __('อีเมล:', DGA_TEXT_DOMAIN) . '</span>
                        <span class="dga-confirm-value-hjk456" id="dga-confirm-email-hjk456"></span>
                    </div>
                    <div class="dga-confirm-item-hjk456">
                        <span class="dga-confirm-label-hjk456">' . __('บทบาท:', DGA_TEXT_DOMAIN) . '</span>
                        <span class="dga-confirm-value-hjk456" id="dga-confirm-role-hjk456"></span>
                    </div>
                </div>
                <div class="dga-modal-notice-hjk456">
                    <i class="dashicons dashicons-info"></i>
                    <p>' . __('ระบบจะส่งอีเมลพร้อมลิงก์สำหรับตั้งรหัสผ่านไปยังผู้ใช้', DGA_TEXT_DOMAIN) . '</p>
                </div>
            </div>
            <div class="dga-modal-footer-hjk456">
                <button type=DGA_BUTTON_TYPE class="dga-modal-cancel-hjk456">' . __('ยกเลิก', DGA_TEXT_DOMAIN) . '</button>
                <button type=DGA_BUTTON_TYPE class="dga-modal-confirm-hjk456">
                    <span class="dga-modal-confirm-text-hjk456">' . __('ยืนยันการสร้าง', DGA_TEXT_DOMAIN) . '</span>
                    <span class="dga-modal-confirm-loading-hjk456"></span>
                </button>
            </div>
        </div>
    </div>';
    
    $output .= '</div>';
    
    // Enqueue assets
    wp_enqueue_style('dashicons');
    wp_enqueue_style('dga-horizontal-style', get_stylesheet_directory_uri() . '/css/dga-horizontal.css', [], '1.1.0');
    wp_enqueue_script('dga-horizontal-script', get_stylesheet_directory_uri() . '/js/dga-horizontal.js', [], '1.1.0', true);
    
    // Localize script
    wp_localize_script('dga-horizontal-script', 'dgaAjax', [
        'url' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_create_user_nonce_hjk456'),
        'strings' => [
            'creating' => __('กำลังสร้าง...', DGA_TEXT_DOMAIN),
            DGA_SUCCESS_STATUS => __('สร้างผู้ใช้สำเร็จ!', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'emailInvalid' => __('กรุณากรอกอีเมลให้ถูกต้อง', DGA_TEXT_DOMAIN),
            'emailExists' => __('อีเมลนี้มีอยู่ในระบบแล้ว', DGA_TEXT_DOMAIN),
            'confirmCreate' => __('ยืนยันการสร้างผู้ใช้', DGA_TEXT_DOMAIN),
            'cancel' => __('ยกเลิก', DGA_TEXT_DOMAIN),
            'confirm' => __('ยืนยัน', DGA_TEXT_DOMAIN)
        ]
    ]);
    
    return $output;
}
add_shortcode('dga_create_user_horizontal', 'dga_create_user_shortcode_hjk456');

/**
 * AJAX handler for user creation
 */
function dga_ajax_create_user_hjk456() {
    // ตรวจสอบ nonce
    if (!check_ajax_referer('dga_create_user_nonce_hjk456', 'nonce', false)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)]);
    }
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can('create_users')) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('คุณไม่มีสิทธิ์ในการสร้างผู้ใช้', DGA_TEXT_DOMAIN)]);
    }
    
    // รับและตรวจสอบข้อมูล
    $email = sanitize_email($_POST['email'] ?? '');
    $role = sanitize_text_field($_POST['role'] ?? 'subscriber');
    
    // Validate email
    if (!is_email($email)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณากรอกอีเมลให้ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }
    
    // ตรวจสอบว่ามีอีเมลอยู่แล้วหรือไม่
    if (email_exists($email)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('อีเมลนี้มีอยู่ในระบบแล้ว', DGA_TEXT_DOMAIN)]);
    }
    
    // สร้างผู้ใช้
    $username = $email;
    $password = wp_generate_password(16, true, true);
    $user_id = wp_create_user($username, $password, $email);
    
    if (is_wp_error($user_id)) {
        wp_send_json_error([DGA_MESSAGE_KEY => $user_id->get_error_message()]);
    }
    
    // กำหนด role
    $user = new WP_User($user_id);
    $user->set_role($role);
    
    // สร้าง reset key
    $reset_key = dga_generate_password_reset_key_hjk456($user_id);
    
    if (!$reset_key) {
        // ลบ user ที่สร้างไว้
        wp_delete_user($user_id);
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่สามารถสร้างลิงก์รีเซ็ตรหัสผ่านได้', DGA_TEXT_DOMAIN)]);
    }
    
    // สร้างลิงก์
    $reset_link = add_query_arg([
        'action' => 'dga_set_password',
        'key' => $reset_key,
        'login' => rawurlencode($username)
    ], home_url());
    
    // ส่งอีเมล
    $email_sent = dga_send_welcome_email_hjk456($email, $reset_link, $role);
    
    if ($email_sent) {
        wp_send_json_success([
            DGA_MESSAGE_KEY => __('สร้างผู้ใช้สำเร็จ! ระบบได้ส่งอีเมลไปยังผู้ใช้แล้ว', DGA_TEXT_DOMAIN),
            'user_id' => $user_id,
            'email' => $email
        ]);
    } else {
        wp_send_json_success([
            DGA_MESSAGE_KEY => __('สร้างผู้ใช้สำเร็จ แต่การส่งอีเมลล้มเหลว', DGA_TEXT_DOMAIN),
            'user_id' => $user_id,
            'email' => $email,
            'warning' => true
        ]);
    }
}
add_action('wp_ajax_dga_create_user', 'dga_ajax_create_user_hjk456');

/**
 * AJAX handler for checking email
 */
function dga_ajax_check_email_hjk456() {
    $email = sanitize_email($_POST['email'] ?? '');
    
    if (!is_email($email)) {
        wp_send_json_error([DGA_MESSAGE_KEY => 'Invalid email']);
    }
    
    $exists = email_exists($email);
    wp_send_json_success(['exists' => (bool)$exists]);
}
add_action('wp_ajax_dga_check_email', 'dga_ajax_check_email_hjk456');

/**
 * Generate secure password reset key
 */
function dga_generate_password_reset_key_hjk456($user_id) {
    $user = get_user_by('id', $user_id);
    if (!$user) return false;
    
    // ใช้ WordPress built-in function
    $key = get_password_reset_key($user);
    
    if (is_wp_error($key)) {
        return false;
    }
    
    // บันทึกข้อมูลเพิ่มเติม
    update_user_meta($user_id, 'dga_reset_requested_hjk456', time());
    
    return $key;
}

/**
 * Send welcome email with password reset link
 */
function dga_send_welcome_email_hjk456($email, $reset_link, $role) {
    $site_name = get_bloginfo('name');
    $subject = sprintf(__('ยินดีต้อนรับสู่ %s', DGA_TEXT_DOMAIN), $site_name);
    
    // Email template
    $message = '<!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body style="margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f4f4f4;">
        <table width="100%" cellpadding="0" cellspacing="0" style="background-color: #f4f4f4; padding: 20px 0;">
            <tr>
                <td align="center">
                    <table width="600" cellpadding="0" cellspacing="0" style="background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <!-- Header -->
                        <tr>
                            <td style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 30px; text-align: center;">
                                <h1 style="color: #ffffff; margin: 0; font-size: 28px;">ยินดีต้อนรับ!</h1>
                                <p style="color: #e0e7ff; margin: 10px 0 0; font-size: 16px;">บัญชีของคุณพร้อมใช้งานแล้ว</p>
                            </td>
                        </tr>
                        
                        <!-- Content -->
                        <tr>
                            <td style="padding: 40px 30px;">
                                <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0 0 20px;">
                                    ขอบคุณที่เข้าร่วมกับเรา! บัญชีของคุณได้ถูกสร้างเรียบร้อยแล้ว
                                </p>
                                
                                <div style="background-color: #f7f8fa; border-radius: 6px; padding: 20px; margin: 20px 0;">
                                    <p style="color: #555; font-size: 14px; margin: 0;">
                                        <strong>อีเมล:</strong> ' . esc_html($email) . '<br>
                                        <strong>บทบาท:</strong> ' . esc_html(translate_user_role(ucfirst($role))) . '
                                    </p>
                                </div>
                                
                                <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 20px 0;">
                                    กรุณาคลิกปุ่มด้านล่างเพื่อตั้งรหัสผ่านของคุณ:
                                </p>
                                
                                <table width="100%" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td align="center" style="padding: 20px 0;">
                                            <a href="' . esc_url($reset_link) . '" style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #ffffff; text-decoration: none; padding: 14px 32px; border-radius: 6px; font-weight: bold; font-size: 16px;">
                                                ตั้งรหัสผ่าน
                                            </a>
                                        </td>
                                    </tr>
                                </table>
                                
                                <div style="background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0; border-radius: 4px;">
                                    <p style="color: #856404; font-size: 14px; margin: 0;">
                                        <strong>⚠️ สำคัญ:</strong> ลิงก์นี้จะหมดอายุใน 24 ชั่วโมง
                                    </p>
                                </div>
                                
                                <hr style="border: none; border-top: 1px solid #e0e0e0; margin: 30px 0;">
                                
                                <p style="color: #666; font-size: 13px; line-height: 1.6; margin: 0;">
                                    หากปุ่มไม่ทำงาน คัดลอกลิงก์นี้:<br>
                                    <a href="' . esc_url($reset_link) . '" style="color: #667eea; word-break: break-all;">' . esc_html($reset_link) . '</a>
                                </p>
                            </td>
                        </tr>
                        
                        <!-- Footer -->
                        <tr>
                            <td style="background-color: #f7f8fa; padding: 30px; text-align: center; border-top: 1px solid #e0e0e0;">
                                <p style="color: #999; font-size: 13px; margin: 0;">
                                    © ' . date('Y') . ' ' . esc_html($site_name) . '. All rights reserved.
                                </p>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    </body>
    </html>';
    
    $headers = [
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . $site_name . ' <' . get_option('admin_email') . '>'
    ];
    
    return wp_mail($email, $subject, $message, $headers);
}

/**
 * Handle password reset page
 */
function dga_handle_password_reset_hjk456() {
    if (!isset($_GET['action']) || $_GET['action'] !== 'dga_set_password') {
        return;
    }
    
    if (!isset($_GET['key']) || !isset($_GET['login'])) {
        wp_die(__('ลิงก์ไม่ถูกต้อง', DGA_TEXT_DOMAIN));
    }
    
    $key = sanitize_text_field($_GET['key']);
    $login = sanitize_user($_GET['login']);
    
    // ตรวจสอบ key
    $user = check_password_reset_key($key, $login);
    
    if (is_wp_error($user)) {
        wp_die($user->get_error_message());
    }
    
    // แสดงฟอร์มตั้งรหัสผ่าน
    dga_display_password_reset_form_hjk456($user, $key, $login);
    exit;
}
add_action('template_redirect', 'dga_handle_password_reset_hjk456');

/**
 * Display password reset form
 */
function dga_display_password_reset_form_hjk456($user, $key, $login) {
    ?>
    <!DOCTYPE html>
    <html <?php language_attributes(); ?>>
    <head>
        <meta charset="<?php bloginfo('charset'); ?>">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title><?php _e('ตั้งรหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?> - <?php bloginfo('name'); ?></title>
        <?php wp_head(); ?>
        <style>
            body { 
                margin: 0; 
                padding: 0; 
                background: #f5f5f5; 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                display: flex;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
            }
            .dga-reset-container-hjk456 {
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                padding: 40px;
                width: 100%;
                max-width: 400px;
                margin: 20px;
            }
            .dga-reset-header-hjk456 {
                text-align: center;
                margin-bottom: 30px;
            }
            .dga-reset-header-hjk456 h1 {
                color: #333;
                font-size: 24px;
                margin: 0 0 10px;
            }
            .dga-reset-header-hjk456 p {
                color: #666;
                margin: 0;
            }
            .dga-user-info-hjk456 {
                background: #f8f9fa;
                border-radius: 6px;
                padding: 15px;
                margin-bottom: 20px;
                font-size: 14px;
                color: #555;
            }
            .dga-form-group-hjk456 {
                margin-bottom: 20px;
            }
            .dga-form-group-hjk456 label {
                display: block;
                margin-bottom: 8px;
                color: #333;
                font-weight: 500;
            }
            .dga-form-group-hjk456 input {
                width: 100%;
                padding: 10px 15px;
                border: 2px solid #e0e0e0;
                border-radius: 6px;
                font-size: 16px;
                transition: border-color 0.3s;
                box-sizing: border-box;
            }
            .dga-form-group-hjk456 input:focus {
                outline: none;
                border-color: #667eea;
            }
            .dga-submit-btn-hjk456 {
                width: 100%;
                padding: 12px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 6px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: transform 0.2s;
            }
            .dga-submit-btn-hjk456:hover {
                transform: translateY(-1px);
            }
            .dga-submit-btn-hjk456:disabled {
                opacity: 0.6;
                cursor: not-allowed;
            }
            .dga-messages-hjk456 {
                margin-bottom: 20px;
            }
            .dga-message-hjk456 {
                padding: 12px;
                border-radius: 6px;
                margin-bottom: 10px;
            }
            .dga-message-hjk456.success {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            .dga-message-hjk456.error {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
            .dga-password-strength-hjk456 {
                margin-top: 10px;
                font-size: 14px;
            }
            .dga-strength-indicator-hjk456 {
                height: 4px;
                background: #e0e0e0;
                border-radius: 2px;
                margin: 5px 0;
                overflow: hidden;
            }
            .dga-strength-bar-hjk456 {
                height: 100%;
                transition: width 0.3s, background 0.3s;
                width: 0;
            }
        </style>
    </head>
    <body>
        <div class="dga-reset-container-hjk456">
            <div class="dga-reset-header-hjk456">
                <h1><?php _e('ตั้งรหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?></h1>
                <p><?php _e('กรุณาตั้งรหัสผ่านสำหรับบัญชีของคุณ', DGA_TEXT_DOMAIN); ?></p>
            </div>
            
            <div class="dga-user-info-hjk456">
                <strong><?php _e('บัญชี:', DGA_TEXT_DOMAIN); ?></strong> <?php echo esc_html($user->user_email); ?>
            </div>
            
            <div id="dga-messages-hjk456" class="dga-messages-hjk456"></div>
            
            <form id="dga-reset-form-hjk456" method="post">
                <div class="dga-form-group-hjk456">
                    <label for="pass1"><?php _e('รหัสผ่านใหม่', DGA_TEXT_DOMAIN); ?></label>
                    <input type="password" id="pass1" name="pass1" required autocomplete="new-password">
                    <div class="dga-password-strength-hjk456">
                        <div class="dga-strength-indicator-hjk456">
                            <div class="dga-strength-bar-hjk456"></div>
                        </div>
                        <span class="dga-strength-text-hjk456"></span>
                    </div>
                </div>
                
                <div class="dga-form-group-hjk456">
                    <label for="pass2"><?php _e('ยืนยันรหัสผ่าน', DGA_TEXT_DOMAIN); ?></label>
                    <input type="password" id="pass2" name="pass2" required autocomplete="new-password">
                </div>
                
                <input type="hidden" name="key" value="<?php echo esc_attr($key); ?>">
                <input type="hidden" name="login" value="<?php echo esc_attr($login); ?>">
                <input type="hidden" name="user_id" value="<?php echo esc_attr($user->ID); ?>">
                <?php wp_nonce_field('dga_reset_password_hjk456', 'nonce'); ?>
                
                <button type=DGA_SUBMIT_TYPE class="dga-submit-btn-hjk456">
                    <?php _e('ตั้งรหัสผ่าน', DGA_TEXT_DOMAIN); ?>
                </button>
            </form>
        </div>
        
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('dga-reset-form-hjk456');
            const pass1 = document.getElementById('pass1');
            const pass2 = document.getElementById('pass2');
            const messages = document.getElementById('dga-messages-hjk456');
            const strengthBar = document.querySelector('.dga-strength-bar-hjk456');
            const strengthText = document.querySelector('.dga-strength-text-hjk456');
            
            // Password strength checker
            pass1.addEventListener('input', function() {
                const password = this.value;
                let strength = 0;
                
                if (password.length >= 8) strength++;
                if (password.length >= 12) strength++;
                if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
                if (/\d/.test(password)) strength++;
                if (/[^a-zA-Z0-9]/.test(password)) strength++;
                
                const strengthLevels = ['', 'อ่อน', 'ปานกลาง', 'แข็งแรง', 'แข็งแรงมาก'];
                const strengthColors = ['', '#e74c3c', '#f39c12', '#3498db', '#27ae60'];
                
                strength = Math.min(strength, 4);
                
                strengthBar.style.width = (strength * 25) + '%';
                strengthBar.style.background = strengthColors[strength];
                strengthText.textContent = strengthLevels[strength];
            });
            
            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                messages.innerHTML = '';
                
                if (pass1.value.length < 8) {
                    showMessage('รหัสผ่านต้องมีอย่างน้อย 8 ตัวอักษร', DGA_ERROR_STATUS);
                    return;
                }
                
                if (pass1.value !== pass2.value) {
                    showMessage('รหัสผ่านไม่ตรงกัน', DGA_ERROR_STATUS);
                    return;
                }
                
                const submitBtn = form.querySelector('button[type=DGA_SUBMIT_TYPE]');
                submitBtn.disabled = true;
                submitBtn.textContent = 'กำลังดำเนินการ...';
                
                try {
                    const formData = new FormData(form);
                    formData.append('action', 'dga_reset_password');
                    
                    const response = await fetch('<?php echo admin_url(DGA_ADMIN_AJAX_URL); ?>', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showMessage('ตั้งรหัสผ่านสำเร็จ! กำลังเข้าสู่ระบบ...', DGA_SUCCESS_STATUS);
                        form.style.display = 'none';
                        
                        setTimeout(() => {
                            window.location.href = '<?php echo home_url(); ?>';
                        }, 2000);
                    } else {
                        showMessage(result.data.message || DGA_ERROR_MESSAGE_TH, DGA_ERROR_STATUS);
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'ตั้งรหัสผ่าน';
                    }
                } catch (error) {
                    showMessage('เกิดข้อผิดพลาดในการเชื่อมต่อ', DGA_ERROR_STATUS);
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'ตั้งรหัสผ่าน';
                }
            });
            
            function showMessage(text, type) {
                const msg = document.createElement('div');
                msg.className = 'dga-message-hjk456 ' + type;
                msg.textContent = text;
                messages.appendChild(msg);
            }
        });
        </script>
        <?php wp_footer(); ?>
    </body>
    </html>
    <?php
}

/**
 * AJAX handler for password reset
 */
function dga_ajax_reset_password_hjk456() {
    // ตรวจสอบ nonce
    if (!check_ajax_referer('dga_reset_password_hjk456', 'nonce', false)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('การตรวจสอบความปลอดภัยล้มเหลว', DGA_TEXT_DOMAIN)]);
    }
    
    $pass1 = $_POST['pass1'] ?? '';
    $pass2 = $_POST['pass2'] ?? '';
    $key = sanitize_text_field($_POST['key'] ?? '');
    $login = sanitize_user($_POST['login'] ?? '');
    $user_id = intval($_POST['user_id'] ?? 0);
    
    // ตรวจสอบรหัสผ่าน
    if (empty($pass1) || empty($pass2)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณากรอกรหัสผ่าน', DGA_TEXT_DOMAIN)]);
    }
    
    if ($pass1 !== $pass2) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสผ่านไม่ตรงกัน', DGA_TEXT_DOMAIN)]);
    }
    
    if (strlen($pass1) < 8) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('รหัสผ่านต้องมีอย่างน้อย 8 ตัวอักษร', DGA_TEXT_DOMAIN)]);
    }
    
    // ตรวจสอบ key อีกครั้ง
    $user = check_password_reset_key($key, $login);
    
    if (is_wp_error($user) || $user->ID !== $user_id) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ลิงก์ไม่ถูกต้องหรือหมดอายุ', DGA_TEXT_DOMAIN)]);
    }
    
    // ตั้งรหัสผ่านใหม่
    wp_set_password($pass1, $user->ID);
    
    // ล็อกอินอัตโนมัติ
    wp_clear_auth_cookie();
    wp_set_current_user($user->ID);
    wp_set_auth_cookie($user->ID, true);
    
    // ลบ meta ที่เกี่ยวข้อง
    delete_user_meta($user->ID, 'dga_reset_requested_hjk456');
    
    wp_send_json_success([
        DGA_MESSAGE_KEY => __('ตั้งรหัสผ่านสำเร็จ!', DGA_TEXT_DOMAIN),
        'redirect' => home_url()
    ]);
}
add_action('wp_ajax_nopriv_dga_reset_password', 'dga_ajax_reset_password_hjk456');

/**
 * Enqueue assets
 */
function dga_enqueue_assets_hjk456() {
    global $post;
    
    // เช็คว่ามี shortcode หรือไม่
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'dga_create_user_horizontal')) {
        wp_enqueue_style('dga-horizontal-style', get_stylesheet_directory_uri() . '/css/dga-horizontal.css', [], DGA_VERSION_NUMBER);
        wp_enqueue_script('dga-horizontal-script', get_stylesheet_directory_uri() . '/js/dga-horizontal.js', [], DGA_VERSION_NUMBER, true);
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_enqueue_assets_hjk456');




/**** ระบบเลือก Template *******/

// Add shortcode
add_shortcode('dga_template_selector', 'dga_template_selector_function');

// Enqueue necessary scripts and styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_template_selector_scripts');

function dga_template_selector_scripts() {
    // Register and enqueue stylesheet
    wp_register_style(
        'dga-template-style',
        get_stylesheet_directory_uri() . '/css/dga-template.css',
        array(),
        '1.2.0',
        'all'
    );
    wp_enqueue_style('dga-template-style');
    
    // Register and enqueue script
    wp_register_script(
        'dga-template-script',
        get_stylesheet_directory_uri() . '/js/dga-template.js',
        array(DGA_JQUERY_HANDLE),
        '1.2.0',
        true
    );
    wp_enqueue_script('dga-template-script');
    
    // Localize script with WordPress AJAX URL and nonce
    wp_localize_script(
        'dga-template-script',
        'dga_template_vars',
        array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('dga_template_nonce'),
            'current_page_id' => get_the_ID(),
            'success_message' => __('Template applied successfully!', 'dga-template'),
            'error_message' => __('An error occurred. Please try again.', 'dga-template')
        )
    );
}

// Main shortcode function
function dga_template_selector_function($atts) {
    // Extract shortcode attributes with defaults
    $atts = shortcode_atts(
        array(
            'authorized_users' => '', // Comma-separated list of user IDs
            'authorized_roles' => 'administrator,editor', // Comma-separated list of roles
        ),
        $atts,
        'dga_template_selector'
    );
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        return ''; // Return empty if not logged in
    }
    
    // Get current user
    $current_user = wp_get_current_user();
    $user_id = $current_user->ID;
    $user_roles = $current_user->roles;
    
    // Parse authorized users and roles
    $authorized_users = array_map('trim', explode(',', $atts['authorized_users']));
    $authorized_roles = array_map('trim', explode(',', $atts['authorized_roles']));
    
    // Check if user is authorized
    $is_authorized = false;
    
    // Check by user ID
    if (in_array($user_id, $authorized_users)) {
        $is_authorized = true;
    }
    
    // Check by role
    if (!$is_authorized) {
        foreach ($user_roles as $role) {
            if (in_array($role, $authorized_roles)) {
                $is_authorized = true;
                break;
            }
        }
    }
    
    // Return empty if not authorized
    if (!$is_authorized) {
        return '';
    }
    
    // Add our title filter to the posts query
    add_filter('posts_where', 'dga_filter_template_titles', 10, 2);
    
    function dga_filter_template_titles($where, $query) {
        global $wpdb;
        if ($title_filter = $query->get('title_filter')) {
            $where .= " AND " . $wpdb->posts . ".post_title LIKE '$title_filter%'";
        }
        return $where;
    }
    
    // Get all template pages after applying our filter
    $templates = get_posts(array(
        DGA_POST_TYPE_FIELD => 'page',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_POSTS_PER_PAGE => -1,
        'title_filter' => 'Template-'
    ));
    
    // Remove our filter
    remove_filter('posts_where', 'dga_filter_template_titles', 10);
    
    // Prepare output
    $output = '<div class="dga-template-selector">';
    $output .= '<button class="dga-template-button" id="dga-template-toggle" data-tooltip="เปลี่ยนเทมเพลต"><i class="dga-cog-icon"></i></button>';
    $output .= '<div class="dga-template-modal" id="dga-template-modal">';
    $output .= '<div class="dga-template-modal-content">';
    $output .= '<div class="dga-template-modal-header">';
    $output .= '<h2>' . __('เลือกรูปแบบเทมเพลต', 'dga-template') . '</h2>';
    $output .= '<span class="dga-template-close">&times;</span>';
    $output .= '</div>'; // End header
    $output .= '<div class="dga-template-modal-body">';
    
    if (!empty($templates)) {
        $output .= '<div class="dga-template-grid">';
        foreach ($templates as $template) {
            $template_id = $template->ID;
            $template_title = str_replace('Template-', '', $template->post_title);
            $template_featured_image = get_the_post_thumbnail_url($template_id, 'medium');
            
            if (!$template_featured_image) {
                $template_featured_image = get_stylesheet_directory_uri() . '/css/template-placeholder.png';
            }
            
            $output .= '<div class="dga-template-item" data-template-id="' . esc_attr($template_id) . '">';
            $output .= '<div class="dga-template-preview">';
            $output .= '<img src="' . esc_url($template_featured_image) . '" alt="' . esc_attr($template_title) . '">';
            $output .= '</div>';
            $output .= '<div class="dga-template-details">';
            $output .= '<h3>' . esc_html($template_title) . '</h3>';
            $output .= '<button class="dga-template-apply-btn" data-template-id="' . esc_attr($template_id) . '">' . __('ใช้รูปแบบนี้', 'dga-template') . '</button>';
            $output .= '</div>';
            $output .= '</div>';
        }
        $output .= '</div>'; // End grid
    } else {
        $output .= '<p class="dga-no-templates">' . __('ไม่พบเทมเพลตที่พร้อมใช้งาน กรุณาสร้างหน้าที่มีชื่อขึ้นต้นด้วย "Template-"', 'dga-template') . '</p>';
    }
    
    $output .= '</div>'; // End body
    $output .= '<div class="dga-template-modal-footer">';
    $output .= '<div class="dga-template-message" id="dga-template-message"></div>';
    $output .= '</div>'; // End footer
    $output .= '</div>'; // End modal content
    $output .= '</div>'; // End modal
    $output .= '</div>'; // End container
    
    return $output;
}

// AJAX handler for cloning templates - ใช้วิธีที่ 3
add_action('wp_ajax_dga_clone_template', 'dga_clone_template_ajax');

function dga_clone_template_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_template_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        exit;
    }
    
    // Get template ID and current page ID
    $template_id = isset($_POST['template_id']) ? intval($_POST['template_id']) : 0;
    $current_page_id = isset($_POST['current_page_id']) ? intval($_POST['current_page_id']) : 0;
    
    // Check if both IDs are valid
    if ($template_id <= 0 || $current_page_id <= 0) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Invalid page IDs'));
        exit;
    }
    
    // Get template page
    $template_page = get_post($template_id);
    $current_page = get_post($current_page_id);
    
    // Check if template exists
    if (!$template_page || $template_page->post_type !== 'page') {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Template page not found'));
        exit;
    }
    
    // Check if current page exists
    if (!$current_page) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Current page not found'));
        exit;
    }
    
    // Begin transaction
    global $wpdb;
    $wpdb->query('START TRANSACTION');
    
    try {
        // 1. อัปเดตเนื้อหาหลักของหน้าปัจจุบัน
        $update_args = array(
            'ID' => $current_page_id,
            'post_content' => $template_page->post_content,
            // คงสถานะเดิมของเพจปลายทาง
            DGA_POST_STATUS_FIELD => $current_page->post_status,
            // คัดลอกการตั้งค่าอื่นๆ จากเทมเพลต
            'menu_order' => $template_page->menu_order,
        );
        
        $update_result = wp_update_post($update_args, true);
        
        if (is_wp_error($update_result)) {
            throw new Exception($update_result->get_error_message());
        }
        
        // 2. ลบข้อมูล Elementor และ meta ทั้งหมดของหน้าปลายทาง (ยกเว้นข้อมูลสำคัญบางส่วน)
        $preserve_metas = array(
            '_edit_lock',
            '_edit_last',
            'post_date',
            'post_date_gmt',
            'post_modified',
            'post_modified_gmt'
        );
        
        // สร้าง placeholders สำหรับ SQL
        $placeholders = implode(',', array_fill(0, count($preserve_metas), '%s'));
        $query_args = array_merge(array($current_page_id), $preserve_metas);
        
        $wpdb->query(
            $wpdb->prepare(
                "DELETE FROM $wpdb->postmeta WHERE post_id = %d AND meta_key NOT IN ($placeholders)",
                $query_args
            )
        );
        
        // 3. คัดลอกข้อมูล meta ทั้งหมดจากหน้าต้นทาง
        $source_metas = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT meta_key, meta_value FROM $wpdb->postmeta 
                 WHERE post_id = %d AND meta_key NOT IN ('_edit_lock', '_edit_last')",
                $template_id
            )
        );
        
        if (!empty($source_metas)) {
            foreach ($source_metas as $meta) {
                update_post_meta($current_page_id, $meta->meta_key, maybe_unserialize($meta->meta_value));
            }
        }
        
        // 4. คัดลอกข้อมูล Elementor โดยเฉพาะอย่างยิ่ง
        $elementor_keys = array(
            '_elementor_data',
            '_elementor_page_settings',
            '_elementor_edit_mode',
            '_elementor_template_type',
            '_elementor_version',
            '_elementor_pro_version',
            '_elementor_css',
            '_elementor_page_assets',
            '_elementor_controls_usage',
            '_elementor_page_meta',
            '_elementor_cache_version',
            '_elementor_conditions',
            '_elementor_section_usage',
            '_elementor_container_usage'
        );
        
        foreach ($elementor_keys as $key) {
            $value = get_post_meta($template_id, $key, true);
            if (!empty($value)) {
                update_post_meta($current_page_id, $key, $value);
            } else {
                // ลบข้อมูลเดิมที่อาจมีอยู่
                delete_post_meta($current_page_id, $key);
            }
        }
        
        // 5. คัดลอกแฟ้มแนบ (attachments) ที่อาจมีการใช้งานในหน้า
        $thumbnail_id = get_post_meta($template_id, '_thumbnail_id', true);
        if (!empty($thumbnail_id)) {
            update_post_meta($current_page_id, '_thumbnail_id', $thumbnail_id);
        }
        
        // 6. คัดลอก Page Template ที่ใช้
        $template_file = get_post_meta($template_id, '_wp_page_template', true);
        if (!empty($template_file)) {
            update_post_meta($current_page_id, '_wp_page_template', $template_file);
        }
        
        // 7. คัดลอก Taxonomy terms
        $taxonomies = get_object_taxonomies('page');
        foreach ($taxonomies as $taxonomy) {
            // ลบ terms เดิมทั้งหมด
            wp_delete_object_term_relationships($current_page_id, $taxonomy);
            
            // คัดลอก terms จากต้นฉบับ
            $terms = wp_get_object_terms($template_id, $taxonomy, array(DGA_FIELDS_PARAMETER => 'ids'));
            if (!is_wp_error($terms) && !empty($terms)) {
                wp_set_object_terms($current_page_id, $terms, $taxonomy);
            }
        }
        
        // 8. ล้าง Cache ของ Elementor
        if (class_exists('Elementor\Plugin')) {
            // ล้าง cache ที่เกี่ยวข้องทั้งหมด
            Elementor\Plugin::$instance->files_manager->clear_cache();
            
            // ล้าง cache ของไฟล์ CSS
            if (class_exists('\Elementor\Core\Files\Manager')) {
                $css_file = new \Elementor\Core\Files\CSS\Post($current_page_id);
                $css_file->delete();
            }
            
            // อัปเดต document ถ้ามีการใช้งาน
            if (method_exists('\Elementor\Plugin', 'instance') && method_exists(\Elementor\Plugin::instance()->documents, 'get')) {
                $document = \Elementor\Plugin::instance()->documents->get($current_page_id);
                if ($document) {
                    $document->save_template_type();
                }
            }
            
            // ล้าง cache ของธีม
            if (function_exists('wp_cache_flush')) {
                wp_cache_flush();
            }
        }
        
        // Transaction สำเร็จ
        $wpdb->query('COMMIT');
        
        // ส่งผลลัพธ์กลับ
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'Template applied successfully',
            'template_id' => $template_id,
            'page_id' => $current_page_id
        ));
        
    } catch (Exception $e) {
        // ถ้ามีข้อผิดพลาด - rollback transaction
        $wpdb->query('ROLLBACK');
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Error: ' . $e->getMessage()));
    }
    
    exit;
}







/****** ทดสอบ import json template *********/


if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

/**
 * Class DGA_Template_Importer
 * จัดการการนำเข้า JSON Template สำหรับ Elementor
 */
class DGA_Template_Importer {
    /**
     * Singleton instance
     */
    private static $instance = null;

    /**
     * Templates directory path
     */
    private $templates_dir;

    /**
     * Templates directory URL
     */
    private $templates_url;

    /**
     * Get singleton instance
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    private function __construct() {
        // กำหนดค่าเริ่มต้น
        $this->templates_dir = get_stylesheet_directory() . '/templates/';
        $this->templates_url = get_stylesheet_directory_uri() . '/templates/';
        
        // สร้างโฟลเดอร์ templates หากยังไม่มี
        $this->create_templates_folder();
        
        // เพิ่ม scripts และ styles
        add_action(DGA_ENQUEUE_SCRIPTS_HOOK, array($this, 'enqueue_scripts'));
        
        // เพิ่ม Floating Button
        add_action('wp_footer', array($this, 'add_floating_button'));
        
        // ลงทะเบียน shortcodes
        add_shortcode('dga_template_import', array($this, 'render_single_template_shortcode'));
        add_shortcode('dga_template_gallery', array($this, 'render_template_gallery_shortcode'));
        add_shortcode('dga_template_icon', array($this, 'render_template_icon_shortcode'));
        
        // ลงทะเบียน AJAX handlers
        add_action('wp_ajax_import_json_template', array($this, 'ajax_import_json_template'));
        add_action('wp_ajax_get_template_gallery_html', array($this, 'ajax_get_template_gallery_html'));
        
        // เพิ่มปุ่ม Template ใน Elementor Editor
        add_action('elementor/editor/after_enqueue_scripts', array($this, 'add_template_button_to_editor'));
        
        // เพิ่ม admin menu สำหรับการจัดการ Templates
        if (is_admin()) {
            add_action('admin_menu', array($this, 'add_admin_menu'));
        }
    }

    /**
     * เพิ่ม scripts และ styles
     */
    public function enqueue_scripts() {
        // ตรวจสอบว่าเป็น Elementor Editor หรือไม่
        $is_elementor_editor = false;
        if (class_exists('\Elementor\Plugin')) {
            $is_elementor_editor = \Elementor\Plugin::$instance->editor->is_edit_mode() || \Elementor\Plugin::$instance->preview->is_preview_mode();
        }
        
        global $post;
        
        if (!$is_elementor_editor && 
            (is_a($post, 'WP_Post') && 
             (has_shortcode($post->post_content, 'dga_template_import') || 
              has_shortcode($post->post_content, 'dga_template_gallery') ||
              has_shortcode($post->post_content, 'dga_template_icon')))) {
            
            // Font Awesome สำหรับไอคอน
            wp_enqueue_style('fontawesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css', array(), '5.15.4');
            
            // CSS หลัก
            wp_enqueue_style('template-importer-css', get_stylesheet_directory_uri() . '/css/template-importer.css', array(), '1.3.0');
            
            // JavaScript หลัก
            wp_enqueue_script('template-importer-js', get_stylesheet_directory_uri() . '/js/template-importer.js', array(DGA_JQUERY_HANDLE), '1.3.0', true);
            
            // ส่งค่าไปที่ JavaScript
            wp_localize_script('template-importer-js', 'template_importer_ajax', array(
                DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
                DGA_NONCE_KEY => wp_create_nonce('template_importer_nonce'),
                DGA_POST_ID_FIELD => get_the_ID(),
                'loading_text' => __('กำลังนำเข้า...', 'dga-template-importer'),
                'success_text' => __('นำเข้าสำเร็จ!', 'dga-template-importer'),
                'error_text' => __(DGA_ERROR_MESSAGE_TH, 'dga-template-importer')
            ));
        }
    }

    /**
     * เพิ่ม Floating Button ในหน้าเว็บ
     */
    public function add_floating_button() {
        // แสดงเฉพาะ Administrator เท่านั้น
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            return;
        }
        
        // ตรวจสอบว่าเป็น Elementor Editor หรือไม่
        $is_elementor_editor = false;
        if (class_exists('\Elementor\Plugin')) {
            $is_elementor_editor = \Elementor\Plugin::$instance->editor->is_edit_mode() || \Elementor\Plugin::$instance->preview->is_preview_mode();
        }
        
        // ไม่แสดงปุ่มใน Elementor Editor
        if ($is_elementor_editor) {
            return;
        }
        
        // เพิ่ม Scripts สำหรับปุ่ม Floating
        wp_enqueue_style('fontawesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css', array(), '5.15.4');
        wp_enqueue_style('template-importer-css', get_stylesheet_directory_uri() . '/css/template-importer.css', array(), '1.3.0');
        wp_enqueue_script('template-importer-js', get_stylesheet_directory_uri() . '/js/template-importer.js', array(DGA_JQUERY_HANDLE), '1.3.0', true);
        
        // ส่งค่าไปที่ JavaScript
        wp_localize_script('template-importer-js', 'template_importer_ajax', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('template_importer_nonce'),
            DGA_POST_ID_FIELD => get_the_ID(),
            'loading_text' => __('กำลังนำเข้า...', 'dga-template-importer'),
            'success_text' => __('นำเข้าสำเร็จ!', 'dga-template-importer'),
            'error_text' => __(DGA_ERROR_MESSAGE_TH, 'dga-template-importer'),
            'is_admin' => current_user_can(DGA_ADMIN_ROLE)
        ));
        
        // แสดง HTML สำหรับปุ่ม Floating และ Modal
        ?>
        <div class="template-floating-button fixed-position">
            <button title="เลือก Template">
                <i class="fas fa-th-large"></i>
            </button>
        </div>
        
        <div id="template-floating-modal" class="template-modal-container">
            <div class="template-modal-overlay"></div>
            <div class="template-modal-content">
                <div class="template-modal-header">
                    <h3>เลือก Template</h3>
                    <button class="template-modal-close"><i class="fas fa-times"></i></button>
                </div>
                <div class="template-modal-body">
                    <div class="template-modal-loading"><i class="fas fa-spinner fa-spin"></i> กำลังโหลด Template...</div>
                </div>
            </div>
        </div>
        <?php
    }

    /**
     * เพิ่มปุ่ม Template ใน Elementor Editor
     */
    public function add_template_button_to_editor() {
        // เพิ่ม CSS สำหรับปุ่ม
        wp_enqueue_style('template-editor-css', get_stylesheet_directory_uri() . '/css/template-editor.css', array(), DGA_VERSION_NUMBER);
        
        // เพิ่ม JS สำหรับปุ่ม
        wp_enqueue_script('template-editor-js', get_stylesheet_directory_uri() . '/js/template-editor.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
        
        // ส่งค่าไปที่ JavaScript
        wp_localize_script('template-editor-js', 'template_editor_data', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('template_importer_nonce'),
            'templates' => $this->get_available_templates()
        ));
    }

    /**
     * สร้างโฟลเดอร์ templates ถ้ายังไม่มี
     */
    private function create_templates_folder() {
        if (!file_exists($this->templates_dir)) {
            wp_mkdir_p($this->templates_dir);
            
            // สร้างโฟลเดอร์ส่วนย่อย
            $subfolders = array('previews', 'logs');
            foreach ($subfolders as $subfolder) {
                if (!file_exists($this->templates_dir . $subfolder)) {
                    wp_mkdir_p($this->templates_dir . $subfolder);
                    
                    // สร้างไฟล์ .htaccess เพื่อป้องกันการเข้าถึงโดยตรง
                    $htaccess_content = "# Deny direct access\n";
                    $htaccess_content .= "Order Allow,Deny\n";
                    $htaccess_content .= "Deny from all\n";
                    
                    @file_put_contents($this->templates_dir . $subfolder . '/.htaccess', $htaccess_content);
                    
                    // สร้างไฟล์ index.php เพื่อป้องกันการแสดงรายการไฟล์
                    @file_put_contents($this->templates_dir . $subfolder . '/index.php', '<?php // Silence is golden');
                }
            }
            
            // สร้างไฟล์ .htaccess เพื่อป้องกันการเข้าถึงโดยตรง
            $htaccess_content = "# Deny direct access to JSON files\n";
            $htaccess_content .= "<FilesMatch \"\.(json)$\">\n";
            $htaccess_content .= "Order Allow,Deny\n";
            $htaccess_content .= "Deny from all\n";
            $htaccess_content .= "</FilesMatch>";
            
            @file_put_contents($this->templates_dir . '.htaccess', $htaccess_content);
            
            // สร้างไฟล์ index.php เพื่อป้องกันการแสดงรายการไฟล์
            @file_put_contents($this->templates_dir . 'index.php', '<?php // Silence is golden');
        }
    }

    /**
     * ดึงรายการ Template ที่มีทั้งหมด
     */
    public function get_available_templates() {
        $templates = array();
        
        if (is_dir($this->templates_dir)) {
            $files = scandir($this->templates_dir);
            
            foreach ($files as $file) {
                if (pathinfo($file, PATHINFO_EXTENSION) === 'json') {
                    $template_id = pathinfo($file, PATHINFO_FILENAME);
                    $metadata = $this->get_template_metadata($template_id);
                    
                    $templates[$template_id] = $metadata;
                }
            }
        }
        
        return $templates;
    }

    /**
     * ดึงข้อมูล metadata จากไฟล์ JSON และแยกจากชื่อไฟล์
     */
    public function get_template_metadata($template_id) {
        $template_path = $this->templates_dir . $template_id . '.json';
        
        if (!file_exists($template_path)) {
            return array(
                'id' => $template_id,
                DGA_TITLE_FIELD => $template_id,
                'description' => 'No description available',
                'category' => 'general',
                'tags' => array(),
                'preview' => '',
                'created' => time(),
                'modified' => time()
            );
        }
        
        // อ่านข้อมูลจากไฟล์ JSON
        $json_content = file_get_contents($template_path);
        $template_data = json_decode($json_content, true);
        
        // ตรวจสอบข้อมูลจาก metadata
        $title = isset($template_data[DGA_TITLE_FIELD]) ? $template_data[DGA_TITLE_FIELD] : $template_id;
        $description = isset($template_data['description']) ? $template_data['description'] : '';
        $category_from_json = isset($template_data['category']) ? $template_data['category'] : '';
        $preview = isset($template_data['preview']) ? $template_data['preview'] : '';
        $tags = isset($template_data['tags']) ? $template_data['tags'] : array();
        $created = isset($template_data['created']) ? $template_data['created'] : filemtime($template_path);
        $modified = isset($template_data['modified']) ? $template_data['modified'] : filemtime($template_path);
        
        // แยกหมวดหมู่จากชื่อไฟล์ถ้ามีรูปแบบ [category]-[id]
        $filename_parts = explode('-', $template_id);
        $category_from_filename = '';
        
        // ตรวจสอบว่ามีรูปแบบที่ถูกต้องหรือไม่
        if (count($filename_parts) >= 2) {
            $valid_categories = array('homepage', 'landing', 'blog', 'contact', 'about', 'service', 'portfolio', 'gallery', 'team', 'general','dga3.0');
            $first_part = strtolower($filename_parts[0]);
            
            if (in_array($first_part, $valid_categories)) {
                $category_from_filename = $first_part;
            }
        }
        
        // ใช้หมวดหมู่จาก metadata ก่อน ถ้าไม่มีให้ใช้จากชื่อไฟล์
        $category = !empty($category_from_json) ? $category_from_json : $category_from_filename;
        
        // ถ้าไม่มีทั้งสองอย่าง ให้เป็น general
        if (empty($category)) {
            $category = 'general';
        }
        
        // แปลง tags จากข้อความเป็น array ถ้าจำเป็น
        if (is_string($tags)) {
            $tags = array_map('trim', explode(',', $tags));
        }
        
        // ถ้าไม่มี preview ให้ใช้ภาพ placeholder ตามหมวดหมู่
        if (empty($preview)) {
            $preview = get_stylesheet_directory_uri() . '/images/template-' . $category . '.jpg';
            
            // ถ้าไม่มีภาพเฉพาะหมวดหมู่ ให้ใช้ภาพ default
            if (!file_exists(get_stylesheet_directory() . '/images/template-' . $category . '.jpg')) {
                $preview = get_stylesheet_directory_uri() . '/images/template-placeholder.jpg';
            }
        }
        
        return array(
            'id' => $template_id,
            DGA_TITLE_FIELD => $title,
            'description' => $description,
            'category' => $category,
            'tags' => $tags,
            'preview' => $preview,
            'created' => $created,
            'modified' => $modified,
            'color' => $this->get_category_color($category)
        );
    }

    /**
     * กำหนดสีตามหมวดหมู่
     */
    public function get_category_color($category) {
        $colors = array(
            'homepage' => '#4CAF50', // สีเขียว
            'landing' => '#FF9800',  // สีส้ม
            'blog' => '#2196F3',     // สีน้ำเงิน
            'contact' => '#9C27B0',  // สีม่วง
            'about' => '#E91E63',    // สีชมพู
            'service' => '#FF5722',  // สีส้มแดง
            'portfolio' => '#009688', // สีเขียวมิ้นท์
            'gallery' => '#673AB7',  // สีม่วงเข้ม
            'team' => '#3F51B5',     // สีอินดิโก
            'dga3.0' => '#FFEB3B',     // สีอินดิโก
        );
        
        return isset($colors[$category]) ? $colors[$category] : '#607D8B'; // สีเทาถ้าไม่มีในรายการ
    }

    /**
     * Shortcode สำหรับการแสดง Template เดี่ยว
     */
    public function render_single_template_shortcode($atts) {

        // แสดงเฉพาะ Administrator เท่านั้น
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            return '';
        }

        $atts = shortcode_atts(array(
            'template_id' => '',
            DGA_TITLE_FIELD => '',
            'description' => '',
            'preview' => '',
            'button_text' => 'นำเข้า Template'
        ), $atts);
        
        // ตรวจสอบว่ามี template_id หรือไม่
        if (empty($atts['template_id'])) {
            return '<p>กรุณาระบุ template_id</p>';
        }
        
        // ตรวจสอบว่ามีไฟล์ Template หรือไม่
        $template_path = $this->templates_dir . $atts['template_id'] . '.json';
        if (!file_exists($template_path)) {
            return '<p>ไม่พบไฟล์ Template ที่ระบุ</p>';
        }
        
        // ดึง metadata
        $metadata = $this->get_template_metadata($atts['template_id']);
        
        // ใช้ค่าจาก metadata ถ้าไม่ได้กำหนดใน shortcode
        $title = !empty($atts[DGA_TITLE_FIELD]) ? $atts[DGA_TITLE_FIELD] : $metadata[DGA_TITLE_FIELD];
        $description = !empty($atts['description']) ? $atts['description'] : $metadata['description'];
        $preview = !empty($atts['preview']) ? $atts['preview'] : $metadata['preview'];
        
        // สร้าง HTML สำหรับแสดงปุ่ม import
        $output = '<div class="template-import-container">';
        $output .= '<h3>' . esc_html($title) . '</h3>';
        
        if (!empty($preview)) {
            $output .= '<div class="single-template-preview">';
            $output .= '<img src="' . esc_url($preview) . '" alt="Template Preview">';
            $output .= '</div>';
        }
        
        $output .= '<div class="template-description">' . esc_html($description) . '</div>';
        $output .= '<button class="single-template-import-button" data-template-id="' . esc_attr($atts['template_id']) . '">' . esc_html($atts['button_text']) . '</button>';
        $output .= '</div>';
        
        return $output;
    }

    /**
     * Shortcode สำหรับแสดง Template Icon
     */
    public function render_template_icon_shortcode($atts) {

        // แสดงเฉพาะ Administrator เท่านั้น
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            return '';
        }

        $atts = shortcode_atts(array(
            'icon' => 'fa-th-large',
            'position' => 'bottom-right',
            'color' => '#F05123',
            DGA_TITLE_FIELD => 'เลือก Template'
        ), $atts);
        
        // ID เฉพาะสำหรับ modal
        $modal_id = 'template-modal-' . uniqid();
        
        // สร้าง HTML สำหรับไอคอน
        $output = '<div class="template-icon-container template-icon-' . esc_attr($atts['position']) . '">';
        $output .= '<button class="template-icon-button" style="background-color: ' . esc_attr($atts['color']) . ';" title="' . esc_attr($atts[DGA_TITLE_FIELD]) . '" data-modal-id="' . esc_attr($modal_id) . '">';
        $output .= '<i class="fas ' . esc_attr($atts['icon']) . '"></i>';
        $output .= '</button>';
        $output .= '</div>';
        
        // สร้าง HTML สำหรับ Modal
        $output .= '<div id="' . esc_attr($modal_id) . '" class="template-modal-container">';
        $output .= '<div class="template-modal-overlay"></div>';
        $output .= '<div class="template-modal-content">';
        $output .= '<div class="template-modal-header">';
        $output .= '<h3>' . esc_html($atts[DGA_TITLE_FIELD]) . '</h3>';
        $output .= '<button class="template-modal-close"><i class="fas fa-times"></i></button>';
        $output .= '</div>';
        $output .= '<div class="template-modal-body">';
        $output .= '<div class="template-modal-loading"><i class="fas fa-spinner fa-spin"></i> กำลังโหลด...</div>';
        $output .= '</div>'; // End modal-body
        $output .= '</div>'; // End modal-content
        $output .= '</div>'; // End modal-container
        
        return $output;
    }

    /**
     * Shortcode สำหรับแสดง Template Gallery
     */
    public function render_template_gallery_shortcode($atts) {

        // แสดงเฉพาะ Administrator เท่านั้นถ้าอยู่ในโหมด full
        if (isset($atts['mode']) && $atts['mode'] === 'full' && !current_user_can(DGA_ADMIN_ROLE)) {
            return '';
        }


        $atts = shortcode_atts(array(
            DGA_TITLE_FIELD => 'Template Gallery',
            'categories' => 'all,homepage,landing,blog,contact,about,service,portfolio',
            'tags' => '',
            'show_search' => 'true',
            'show_sort' => 'true',
            'show_filter' => 'true',
            'columns' => '3',
            'limit' => '100',
            'mode' => 'full' // full หรือ modal
        ), $atts);
        
        // แยกหมวดหมู่
        $categories = array_map('trim', explode(',', $atts['categories']));
        
        // แยก tags ถ้ามี
        $filter_tags = !empty($atts['tags']) ? array_map('trim', explode(',', $atts['tags'])) : array();
        
        // ดึงรายการ Template ทั้งหมด
        $templates = $this->get_available_templates();
        
        if (empty($templates)) {
            return '<p>ไม่พบ Template ในระบบ</p>';
        }
        
        // จำกัดจำนวน template ถ้ากำหนด
        if (is_numeric($atts['limit']) && count($templates) > (int)$atts['limit']) {
            $templates = array_slice($templates, 0, (int)$atts['limit'], true);
        }
        
        // เริ่มสร้าง output
        $output = '';
        
        // ตรวจสอบโหมดการแสดงผล
        if ($atts['mode'] === 'full') {
            $output .= '<div class="template-gallery-container">';
            
            // สร้างปุ่ม Toggle
            $output .= '<button class="template-gallery-toggle">';
            $output .= esc_html($atts[DGA_TITLE_FIELD]);
            $output .= '<i class="fas fa-chevron-down"></i>';
            $output .= '</button>';
            
            $output .= '<div class="template-gallery-content">';
        }
        
        // ส่วน Toolbar (ค้นหา, กรอง, เรียงลำดับ)
        if ($atts['show_search'] === 'true' || $atts['show_sort'] === 'true' || $atts['show_filter'] === 'true') {
            $output .= '<div class="template-toolbar">';
            
            // ช่องค้นหา
            if ($atts['show_search'] === 'true') {
                $output .= '<div class="template-search-box">';
                $output .= '<i class="fas fa-search"></i>';
                $output .= '<input type="text" id="template-search" placeholder="ค้นหา Template...">';
                $output .= '</div>';
            }
            
            // ตัวเลือกการเรียงลำดับ
            if ($atts['show_sort'] === 'true') {
                $output .= '<div class="template-sort-box">';
                $output .= '<select id="template-sort">';
                $output .= '<option value="name-asc">เรียงตามชื่อ A-Z</option>';
                $output .= '<option value="name-desc">เรียงตามชื่อ Z-A</option>';
                $output .= '<option value="date-new">ใหม่ล่าสุด</option>';
                $output .= '<option value="date-old">เก่าที่สุด</option>';
                $output .= '</select>';
                $output .= '</div>';
            }
            
            $output .= '</div>'; // End toolbar
        }
        
        // สร้าง tab สำหรับหมวดหมู่
        $output .= '<div class="template-categories">';
        foreach ($categories as $category) {
            $category = trim($category);
            $cat_name = ($category === 'all') ? 'ทั้งหมด' : ucfirst($category);
            $output .= '<div class="template-category" data-category="' . esc_attr($category) . '">' . esc_html($cat_name) . '</div>';
        }
        $output .= '</div>';
        
        // แสดง Filter buttons ถ้ามี tags
        if ($atts['show_filter'] === 'true' && !empty($filter_tags)) {
            $output .= '<div class="template-filter-container">';
            foreach ($filter_tags as $tag) {
                $output .= '<button class="template-filter-button" data-filter="' . esc_attr($tag) . '">' . esc_html($tag) . '</button>';
            }
            $output .= '</div>';
        }
        
        // แยก Template ตามหมวดหมู่และสร้าง grid
        foreach ($categories as $category) {
            $category = trim($category);
            $is_all_category = ($category === 'all');
            
            $output .= '<div class="templates-grid" data-category="' . esc_attr($category) . '" style="grid-template-columns: repeat(' . esc_attr($atts['columns']) . ', 1fr);">';
            
            $has_templates = false;
            
            foreach ($templates as $template_id => $metadata) {
                // ข้ามถ้าไม่ตรงกับหมวดหมู่ปัจจุบัน และไม่ใช่หมวด "ทั้งหมด"
                if (!$is_all_category && $metadata['category'] !== $category) {
                    continue;
                }
                
                $has_templates = true;
                
                // แปลง tags เป็น string สำหรับใช้ใน data attribute
                $tags_string = is_array($metadata['tags']) ? implode(' ', $metadata['tags']) : '';
                
                // สร้าง template item
                $output .= '<div class="template-item" data-tags="' . esc_attr($tags_string) . '" data-date="' . esc_attr($metadata['modified']) . '" data-category="' . esc_attr($metadata['category']) . '">';
                
                // Preview image
                $output .= '<div class="template-preview">';
                if (!empty($metadata['preview'])) {
                    $output .= '<img src="' . esc_url($metadata['preview']) . '" alt="' . esc_attr($metadata[DGA_TITLE_FIELD]) . '">';
                } else {
                    // Default placeholder image
                    $output .= '<img src="' . esc_url(get_stylesheet_directory_uri() . '/images/template-placeholder.jpg') . '" alt="Template Preview">';
                }
                
                // Preview overlay (สำหรับดูเต็มหน้าจอ)
                if (!empty($metadata['preview'])) {
                    $output .= '<div class="template-preview-overlay">';
                    $output .= '<button class="template-preview-button" data-preview="' . esc_url($metadata['preview']) . '">';
                    $output .= '<i class="fas fa-search-plus"></i>';
                    $output .= '</button>';
                    $output .= '</div>';
                }
                
                $output .= '</div>'; // End template-preview
                
                // Template info
                $output .= '<div class="template-info">';
                $output .= '<div class="template-title">' . esc_html($metadata[DGA_TITLE_FIELD]) . '</div>';
                $output .= '<div class="template-description">' . esc_html($metadata['description']) . '</div>';
                
                // Tags (ถ้ามี)
                if (!empty($metadata['tags'])) {
                    $output .= '<div class="template-tags">';
                    foreach ($metadata['tags'] as $tag) {
                        $output .= '<span class="template-tag">' . esc_html($tag) . '</span>';
                    }
                    $output .= '</div>';
                }
                
                $output .= '<button class="template-import-button" data-template-id="' . esc_attr($template_id) . '">นำเข้า Template</button>';
                $output .= '</div>'; // End template-info
                
                $output .= '</div>'; // End template-item
            }
            
            // ถ้าไม่มี template ในหมวดหมู่นี้
            if (!$has_templates) {
                $cat_name = ($category === 'all') ? 'ทั้งหมด' : ucfirst($category);
                $output .= '<p class="no-results-message">ไม่พบ Template ในหมวดหมู่ ' . esc_html($cat_name) . '</p>';
            }
            
            $output .= '</div>'; // End templates-grid
        }
        
        // ปิด container ถ้าเป็นโหมด full
        if ($atts['mode'] === 'full') {
            $output .= '</div>'; // End template-gallery-content
            $output .= '</div>'; // End template-gallery-container
        }
        
        return $output;
    }

    /**
     * AJAX handler สำหรับดึง HTML ของ Gallery
     */
    public function ajax_get_template_gallery_html() {
        // ตรวจสอบสิทธิ์ Administrator
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error('คุณไม่มีสิทธิ์ใช้งานฟีเจอร์นี้');
            return;
        }
        
        // ตรวจสอบ nonce เพื่อความปลอดภัย
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'template_importer_nonce')) {
            wp_send_json_error(DGA_SECURITY_FAILED_MSG);
            return;
        }
        
        // ดึง HTML ของ Gallery
        $gallery_html = $this->render_template_gallery_shortcode(array(
            'mode' => 'modal',
            DGA_TITLE_FIELD => 'เลือก Template',
            'show_search' => 'true',
            'show_sort' => 'true'
        ));
        
        wp_send_json_success(array('html' => $gallery_html));
    }

    /**
     * AJAX handler สำหรับการ Import Template
     */
    public function ajax_import_json_template() {

        // ตรวจสอบสิทธิ์ Administrator
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error('คุณไม่มีสิทธิ์ใช้งานฟีเจอร์นี้');
            return;
        }

        // ตรวจสอบ nonce เพื่อความปลอดภัย
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'template_importer_nonce')) {
            wp_send_json_error(DGA_SECURITY_FAILED_MSG);
            return;
        }
        
        // ตรวจสอบว่ามีสิทธิ์แก้ไขโพสต์หรือไม่
        $post_id = isset($_POST[DGA_POST_ID_FIELD]) ? intval($_POST[DGA_POST_ID_FIELD]) : 0;
        if (!current_user_can('edit_post', $post_id)) {
            wp_send_json_error('คุณไม่มีสิทธิ์แก้ไขหน้านี้');
            return;
        }
        
        // ตรวจสอบว่ามี template_id หรือไม่
        if (empty($_POST['template_id'])) {
            wp_send_json_error('Template ID is required');
        }
        
        $template_id = sanitize_text_field($_POST['template_id']);
        $template_path = $this->templates_dir . $template_id . '.json';
        
        // ตรวจสอบว่ามีไฟล์ Template หรือไม่
        if (!file_exists($template_path)) {
            wp_send_json_error('Template file not found');
        }
        
        // อ่านไฟล์ JSON
        $json_content = file_get_contents($template_path);
        $template_data = json_decode($json_content, true);
        
        // ตรวจสอบว่า JSON ถูกต้องหรือไม่
        if (json_last_error() !== JSON_ERROR_NONE) {
            wp_send_json_error('Invalid JSON format: ' . json_last_error_msg());
        }
        
        // ตรวจสอบว่า Elementor พร้อมใช้งานหรือไม่
        if (!did_action('elementor/loaded')) {
            wp_send_json_error('Elementor is not active');
        }
        
        // Import JSON เข้าไปใน Elementor
        try {
            // ใช้ Elementor Document API เพื่อ import JSON
            $elementor = \Elementor\Plugin::$instance;
            $document = $elementor->documents->get($post_id);
            
            if (!$document) {
                wp_send_json_error('Elementor document not found');
            }
            
            // ดึงข้อมูล content จาก JSON
            $content = isset($template_data['content']) ? $template_data['content'] : $template_data;
            
            // บันทึกข้อมูล Template ลงในโพสต์
            $document->save(['elements' => $content]);
            
            // บันทึกข้อมูลว่าใช้ template ไหน
            update_post_meta($post_id, '_dga_used_template', $template_id);
            update_post_meta($post_id, '_dga_template_imported_date', current_time('mysql'));
            
            // ทำการ refresh เพจแคช
            if (function_exists('wp_cache_post_change')) {
                wp_cache_post_change($post_id);
            }
            
            // บันทึกล็อก
            $this->log_template_import($template_id, $post_id);
            
            wp_send_json_success('Template imported successfully');
            
        } catch (Exception $e) {
            wp_send_json_error('Error importing template: ' . $e->getMessage());
        }
        
        wp_die();
    }

    /**
     * บันทึกล็อกการนำเข้า Template
     */
    private function log_template_import($template_id, $post_id) {
        $logs_dir = $this->templates_dir . 'logs/';
        
        // สร้างข้อมูลล็อก
        $log_data = array(
            'template_id' => $template_id,
            DGA_POST_ID_FIELD => $post_id,
            'post_title' => get_the_title($post_id),
            'user_id' => get_current_user_id(),
            'user_name' => wp_get_current_user()->display_name,
            'date' => current_time('mysql'),
            'ip' => $_SERVER['REMOTE_ADDR']
        );
        
        // บันทึกล็อก
        $log_file = $logs_dir . 'template_imports.log';
        $log_line = json_encode($log_data) . "\n";
        @file_put_contents($log_file, $log_line, FILE_APPEND);
    }

    /**
     * เพิ่ม Admin Menu สำหรับการจัดการ Templates
     */
    public function add_admin_menu() {
        add_menu_page(
            'Template Manager',
            'Templates',
            DGA_MANAGE_OPTIONS_CAP,
            'dga-template-manager',
            array($this, 'render_admin_page'),
            'dashicons-layout',
            30
        );
    }

    /**
     * แสดงหน้า Admin
     */
    public function render_admin_page() {
        // รายละเอียดหน้า Admin จะทำในอนาคต
        echo '<div class="wrap">';
        echo '<h1>Template Manager</h1>';
        echo '<p>จัดการ Template สำหรับนำเข้าไปใช้งานใน Elementor</p>';
        echo '</div>';
    }
}

// เริ่มต้นระบบ
DGA_Template_Importer::get_instance();

/**
 * Shortcode แบบสั้น (convenience functions)
 */
function dga_template_import($atts) {
    return DGA_Template_Importer::get_instance()->render_single_template_shortcode($atts);
}

function dga_template_gallery($atts) {
    return DGA_Template_Importer::get_instance()->render_template_gallery_shortcode($atts);
}

function dga_template_icon($atts) {
    return DGA_Template_Importer::get_instance()->render_template_icon_shortcode($atts);
}


/**
 * Fix for Template Gallery Modal not displaying
 */
add_action('wp_footer', 'dga_template_debug_script');
function dga_template_debug_script() {
    ?>
    <script>
    jQuery(document).ready(function($) {
        // Debug helper for modal
        console.log('DGA Template Importer loaded');
        
        // Check if AJAX is configured properly
        if (typeof template_importer_ajax !== 'undefined') {
            console.log('AJAX config loaded:', template_importer_ajax);
        } else {
            console.error('AJAX configuration missing!');
        }
    });
    </script>
    <?php
}

// Enhanced AJAX handler with better error handling
add_action('wp_ajax_get_template_gallery_html', 'dga_enhanced_get_template_gallery_html');
add_action('wp_ajax_nopriv_get_template_gallery_html', 'dga_enhanced_get_template_gallery_html');

function dga_enhanced_get_template_gallery_html() {
    // Verify nonce or skip if missing (for debugging)
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'template_importer_nonce')) {
        // For debugging, still process but log the error
        error_log('Template Gallery: Nonce verification failed');
    }
    
    // Get the template gallery instance
    $importer = DGA_Template_Importer::get_instance();
    
    // Generate gallery HTML with specific settings for modal
    $gallery_html = $importer->render_template_gallery_shortcode(array(
        'mode' => 'modal',
        DGA_TITLE_FIELD => 'เลือก Template',
        'show_search' => 'true',
        'show_sort' => 'true',
        'columns' => '3'
    ));
    
    // Add debug info
    $debug_info = '<!-- Gallery HTML Generated: ' . date('Y-m-d H:i:s') . ' -->';
    
    wp_send_json_success(array(
        'html' => $debug_info . $gallery_html,
        'debug' => array(
            'timestamp' => current_time('mysql'),
            'template_count' => count($importer->get_available_templates())
        )
    ));
}


/***** ฟังก์ชั่น Export ข้้อมูล Wordpress user ออกเป็น A4 และ CSV *******/

// ถ้าเรียกไฟล์นี้โดยตรง ให้ยกเลิกการทำงาน
if (!defined('ABSPATH')) {
    exit;
}

/**
 * สร้าง Shortcode สำหรับแสดงผลผู้ใช้งาน
 */
function dga_user_export_shortcode() {
    // Enqueue necessary scripts and styles
    wp_enqueue_style('dashicons');
    wp_enqueue_style('dga-user-export-style', get_stylesheet_directory_uri() . '/css/dga-user-export.css', array(), DGA_THEME_VERSION);
    wp_enqueue_script('dga-user-export-script', get_stylesheet_directory_uri() . '/js/dga-user-export.js', array(DGA_JQUERY_HANDLE), DGA_THEME_VERSION, true);

    // Localize script with AJAX URL and nonce
    wp_localize_script('dga-user-export-script', 'dga_user_export', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_user_export_nonce'),
    ));

    // Output container for the user export
    ob_start();
    ?>
    <div class="dga-user-export-container">
        <div class="dga-user-export-header">
            <h2>รายงานบทบาทและสิทธิ์ของผู้ใช้</h2>
            <div class="dga-user-export-actions">
                <div class="dga-search-filter">
                    <input type="text" id="dga-search-input" placeholder="ค้นหาผู้ใช้...">
                    <select id="dga-role-filter">
                        <option value="">บทบาททั้งหมด</option>
                        <?php
                        $roles = wp_roles()->get_names();
                        foreach ($roles as $role_key => $role_name) {
                            echo '<option value="' . esc_attr($role_key) . '">' . esc_html($role_name) . '</option>';
                        }
                        ?>
                    </select>
                </div>
                <div class="dga-export-buttons">
                    <button id="dga-print-button" class="dga-button"><i class="dashicons dashicons-printer"></i> พิมพ์</button>
                    <button id="dga-csv-button" class="dga-button"><i class="dashicons dashicons-media-spreadsheet"></i> ส่งออก CSV</button>
                </div>
            </div>
        </div>
        
        <div class="dga-user-export-table-container">
            <table class="dga-user-export-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>ชื่อผู้ใช้</th>
                        <th>ชื่อแสดง</th>
                        <th>อีเมล</th>
                        <th>บทบาท</th>
                        <th>สิทธิ์การเข้าถึง</th>
                    </tr>
                </thead>
                <tbody id="dga-user-export-tbody">
                    <tr>
                        <td colspan="6" class="dga-loading">กำลังโหลดข้อมูลผู้ใช้...</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="dga-pagination">
            <button id="dga-prev-page" class="dga-pagination-button" disabled>ก่อนหน้า</button>
            <span id="dga-page-info">หน้า 1</span>
            <button id="dga-next-page" class="dga-pagination-button">ถัดไป</button>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('dga_user_export', 'dga_user_export_shortcode');

/**
 * AJAX handler สำหรับดึงข้อมูลผู้ใช้
 */
function dga_get_users_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_export_nonce')) {
        wp_send_json_error('รหัสความปลอดภัยไม่ถูกต้อง กรุณารีเฟรชหน้าและลองใหม่อีกครั้ง');
    }

    // Get parameters
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $role_filter = isset($_POST['role']) ? sanitize_text_field($_POST['role']) : '';
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 40; // Default 40 as requested
    
    $offset = ($page - 1) * $per_page;
    
    // Prepare arguments for WP_User_Query
    $args = array(
        'number' => $per_page,
        'offset' => $offset,
        DGA_ORDERBY_FIELD_VALUE => 'display_name',
        DGA_ORDER_FIELD => 'ASC',
    );
    
    // Add role filter if specified
    if (!empty($role_filter)) {
        $args['role'] = $role_filter;
    }
    
    // Add search if specified
    if (!empty($search)) {
        $args['search'] = '*' . $search . '*';
        $args['search_columns'] = array('user_login', 'user_email', 'display_name');
    }
    
    // Get users
    $user_query = new WP_User_Query($args);
    $users = $user_query->get_results();
    $total_users = $user_query->get_total();
    $total_pages = ceil($total_users / $per_page);
    
    $response_data = array(
        'users' => array(),
        'total_pages' => $total_pages,
        'current_page' => $page,
        'total_users' => $total_users
    );
    
    // Prepare user data
    foreach ($users as $user) {
        $user_roles = $user->roles;
        $role_names = array();
        $permissions = array();
        
        // Get role names and permissions
        foreach ($user_roles as $role_key) {
            $role_obj = get_role($role_key);
            
            if (!$role_obj) {
                continue; // Skip if role object doesn't exist
            }
            
            $role_name = wp_roles()->get_names()[$role_key] ?? $role_key;
            $role_names[] = $role_name;
            
            // Get capabilities and organize them by type
            $role_permissions = array(
                'read' => false,
                'write' => false,
                'edit' => false,
                'delete' => false,
                DGA_PUBLISH_STATUS => false,
                'details' => array()
            );
            
            foreach ($role_obj->capabilities as $cap => $allowed) {
                if ($allowed) {
                    // Categorize capabilities
                    if (strpos($cap, 'read') !== false) {
                        $role_permissions['read'] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, 'edit') !== false) {
                        $role_permissions['edit'] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, 'delete') !== false) {
                        $role_permissions['delete'] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, DGA_PUBLISH_STATUS) !== false) {
                        $role_permissions[DGA_PUBLISH_STATUS] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, 'create') !== false || strpos($cap, 'add') !== false) {
                        $role_permissions['write'] = true;
                        $role_permissions['details'][] = $cap;
                    } else {
                        $role_permissions['details'][] = $cap;
                    }
                }
            }
            
            $permissions[$role_key] = $role_permissions;
        }
        
        $response_data['users'][] = array(
            'ID' => $user->ID,
            'user_login' => $user->user_login,
            'display_name' => $user->display_name,
            'user_email' => $user->user_email,
            'roles' => $role_names,
            'permissions' => $permissions
        );
    }
    
    wp_send_json_success($response_data);
}
add_action('wp_ajax_dga_get_users', 'dga_get_users_ajax');
add_action('wp_ajax_nopriv_dga_get_users', 'dga_get_users_ajax');

/**
 * ฟังก์ชันสร้างไฟล์เทมเพลตสำหรับพิมพ์
 */
function dga_user_export_print_template() {
    // ตรวจสอบว่าอยู่ในส่วนแสดงผลข้อมูลผู้ใช้ (Frontend)
    if (!is_admin()) {
        $template_path = get_stylesheet_directory() . '/templates/dga-user-export.php';
        
        // ตรวจสอบว่าไฟล์เทมเพลตมีอยู่จริง
        if (!file_exists($template_path)) {
            // สร้างโฟลเดอร์ templates ถ้ายังไม่มี
            $templates_dir = get_stylesheet_directory() . '/templates';
            if (!file_exists($templates_dir)) {
                wp_mkdir_p($templates_dir);
            }
            
            // สร้างไฟล์เทมเพลตอัตโนมัติ
            $template_content = '<?php
/**
 * Print template for User Roles and Permissions Report
 * 
 * This file is included by the dga_print_template_ajax function
 */

// Prevent direct file access
if (!defined(\'ABSPATH\')) {
    exit;
}

// Access $users variable that was passed from the AJAX handler
if (!isset($users) || !is_array($users)) {
    echo "No data available";
    return;
}

// Get current date and time for the report
$date = current_time(\'Y-m-d H:i:s\');
?>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>รายงานบทบาทและสิทธิ์ของผู้ใช้</title>
    <style>
        /* Print-specific styling */
        @page {
            size: A4;
            margin: 1cm;
        }
        
        body {
            font-family: \'TH Sarabun New\', \'Sarabun\', \'Times New Roman\', Times, serif;
            color: #000;
            margin: 0;
            padding: 0;
            font-size: 12pt;
            background-color: white;
        }
        
        .print-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #002868;
            position: relative;
        }
        
        .print-header::before {
            content: \'\';
            position: absolute;
            width: 40px;
            height: 40px;
            background-image: url(\'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="45" stroke="%23002868" stroke-width="10" fill="none"/><path d="M50 10 v80 M10 50 h80" stroke="%23BB0000" stroke-width="5"/></svg>\');
            background-size: contain;
            background-repeat: no-repeat;
            left: 10px;
            top: 10px;
        }
        
        .print-header h1 {
            color: #002868;
            font-size: 24pt;
            margin: 0 0 10px 0;
        }
        
        .print-header .print-meta {
            font-size: 10pt;
            color: #666;
        }
        
        .print-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            page-break-inside: auto;
        }
        
        .print-table thead {
            display: table-header-group;
        }
        
        .print-table tr {
            page-break-inside: avoid;
            page-break-after: auto;
        }
        
        .print-table th {
            background-color: #002868;
            color: white;
            padding: 8px;
            text-align: left;
            font-size: 10pt;
            font-weight: bold;
        }
        
        .print-table td {
            padding: 6px 8px;
            border-bottom: 1px solid #ddd;
            font-size: 10pt;
        }
        
        .print-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        .permission-yes {
            color: green;
            font-weight: bold;
        }
        
        .permission-no {
            color: #999;
        }
        
        .print-footer {
            text-align: center;
            font-size: 9pt;
            color: #666;
            margin-top: 20px;
            padding-top: 10px;
            border-top: 1px solid #ddd;
        }
        
        .page-break {
            page-break-before: always;
        }
    </style>
</head>
<body>
    <?php
    // Pagination for A4 (40 items per page as requested)
    $users_per_page = 40;
    $total_pages = ceil(count($users) / $users_per_page);
    
    for ($page = 0; $page < $total_pages; $page++) {
        $start = $page * $users_per_page;
        $page_users = array_slice($users, $start, $users_per_page);
        
        // Add page break except for the first page
        if ($page > 0) {
            echo \'<div class="page-break"></div>\';
        }
        
        // Header on each page
        echo \'<div class="print-header">
            <h1>รายงานบทบาทและสิทธิ์ของผู้ใช้</h1>
            <div class="print-meta">
                วันที่สร้าง: \' . esc_html($date) . \'
            </div>
        </div>\';
        
        echo \'<table class="print-table">
            <thead>
                <tr>
                    <th style="width: 5%;">ID</th>
                    <th style="width: 15%;">ชื่อผู้ใช้</th>
                    <th style="width: 15%;">ชื่อแสดง</th>
                    <th style="width: 20%;">อีเมล</th>
                    <th style="width: 15%;">บทบาท</th>
                    <th style="width: 30%;">สิทธิ์การเข้าถึง</th>
                </tr>
            </thead>
            <tbody>\';
        
        foreach ($page_users as $user) {
            $roles_list = implode(\', \', $user[\'roles\']);
            $permissions_html = \'\';
            
            // Format permissions for print
            foreach ($user[\'permissions\'] as $role => $p) {
                $permission_summary = [
                    $p[\'read\'] ? \'<span class="permission-yes">อ่าน</span>\' : \'<span class="permission-no">อ่าน</span>\',
                    $p[\'write\'] ? \'<span class="permission-yes">เขียน</span>\' : \'<span class="permission-no">เขียน</span>\',
                    $p[\'edit\'] ? \'<span class="permission-yes">แก้ไข</span>\' : \'<span class="permission-no">แก้ไข</span>\',
                    $p[\'delete\'] ? \'<span class="permission-yes">ลบ</span>\' : \'<span class="permission-no">ลบ</span>\',
                    $p[\'publish\'] ? \'<span class="permission-yes">เผยแพร่</span>\' : \'<span class="permission-no">เผยแพร่</span>\'
                ];
                
                $permissions_html .= "<div><strong>" . esc_html($role) . ":</strong> " . 
                    implode(\' | \', $permission_summary) . "</div>";
            }
            
            echo \'<tr>
                <td>\' . esc_html($user[\'ID\']) . \'</td>
                <td>\' . esc_html($user[\'user_login\']) . \'</td>
                <td>\' . esc_html($user[\'display_name\']) . \'</td>
                <td>\' . esc_html($user[\'user_email\']) . \'</td>
                <td>\' . esc_html($roles_list) . \'</td>
                <td>\' . $permissions_html . \'</td>
            </tr>\';
        }
        
        echo \'</tbody></table>\';
        
        // Page number footer
        echo \'<div class="print-footer">
            หน้า \' . ($page + 1) . \' จาก \' . $total_pages . \'
        </div>\';
    }
    ?>
    
    <script>
        // Auto-print when loaded
        window.onload = function() {
            setTimeout(function() {
                window.print();
            }, 500);
        };
    </script>
</body>
</html>';
            
            file_put_contents($template_path, $template_content);
        }
    }
}
add_action('wp_footer', 'dga_user_export_print_template');

/**
 * AJAX handler สำหรับพิมพ์รายงาน
 */
function dga_print_template_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_export_nonce')) {
        wp_send_json_error('รหัสความปลอดภัยไม่ถูกต้อง กรุณารีเฟรชหน้าและลองใหม่');
    }
    
    // Get template data
    $data = isset($_POST['data']) ? json_decode(stripslashes($_POST['data']), true) : null;
    
    if (!$data) {
        wp_send_json_error('ข้อมูลไม่ถูกต้อง');
    }
    
    // Get template path
    $template_path = get_stylesheet_directory() . '/templates/dga-user-export.php';
    
    if (!file_exists($template_path)) {
        // ไฟล์เทมเพลตไม่มีอยู่ ให้เรียกฟังก์ชันสร้างเทมเพลต
        dga_user_export_print_template();
        
        // ตรวจสอบอีกครั้ง
        if (!file_exists($template_path)) {
            wp_send_json_error('ไม่พบไฟล์เทมเพลตและไม่สามารถสร้างได้โดยอัตโนมัติ: ' . $template_path);
        }
    }
    
    // Start output buffering
    ob_start();
    
    // Include template file with data
    $users = $data['users'];
    include($template_path);
    
    // Get buffered output
    $html = ob_get_clean();
    
    wp_send_json_success($html);
}
add_action('wp_ajax_dga_print_template', 'dga_print_template_ajax');
add_action('wp_ajax_nopriv_dga_print_template', 'dga_print_template_ajax');


/***** ฟังก์ชั่น reCAPTCHA V.3 *****/

// ป้องกันการเข้าถึงโดยตรง
if (!defined('ABSPATH')) {
    exit;
}

// กำหนดค่า reCAPTCHA
define('DGA_RECAPTCHA_SITE_KEY', '6LcULDkrAAAAAKmcMSBaRZ61-8uYxCRtG6LcEnhy');
define('DGA_RECAPTCHA_SECRET_KEY', '6LcULDkrAAAAAAZ--tIZ5iBJDmhmkchu5_zxBQCJ');

// ลงทะเบียน shortcode
add_shortcode('dga_recaptcha_v3', 'dga_recaptcha_v3_shortcode');

function dga_recaptcha_v3_shortcode($atts) {
    // กำหนดค่าเริ่มต้นของ attributes
    $atts = shortcode_atts(array(
        'action' => 'submit',
        'callback' => '',
        'form_id' => '',
        'button_id' => ''
    ), $atts, 'dga_recaptcha_v3');

    // Generate unique ID
    $unique_id = 'dga-recaptcha-' . wp_rand(1000, 9999);

    ob_start();
    ?>
    <div class="dga-recaptcha-container" 
         id="<?php echo esc_attr($unique_id); ?>"
         data-action="<?php echo esc_attr($atts['action']); ?>"
         data-callback="<?php echo esc_attr($atts['callback']); ?>"
         data-form-id="<?php echo esc_attr($atts['form_id']); ?>"
         data-button-id="<?php echo esc_attr($atts['button_id']); ?>">
        <input type="hidden" id="<?php echo esc_attr($unique_id); ?>-token" name="recaptcha_token" />
        <input type="hidden" name="recaptcha_action" value="<?php echo esc_attr($atts['action']); ?>" />
    </div>
    <?php
    
    return ob_get_clean();
}

// เพิ่ม reCAPTCHA เข้าไปใน Contact Form อัตโนมัติ
add_filter('wp_footer', 'dga_inject_recaptcha_to_contact_form');
function dga_inject_recaptcha_to_contact_form() {
    if (has_shortcode(get_the_content(), 'department_contact')) {
        ?>
        <script>
        jQuery(document).ready(function($) {
            // เพิ่ม reCAPTCHA container เข้าไปใน form
            const recaptchaHtml = `
                <div class="dga-recaptcha-container" 
                     id="contact-form-recaptcha"
                     data-action="contact_form"
                     data-form-id="department-contact-form">
                    <input type="hidden" name="recaptcha_token" />
                    <input type="hidden" name="recaptcha_action" value="contact_form" />
                </div>
            `;
            $('#department-contact-form').append(recaptchaHtml);
        });
        </script>
        <?php
    }
}

// Enqueue scripts และ styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_recaptcha_v3_enqueue_assets');

function dga_recaptcha_v3_enqueue_assets() {
    global $post;
    
    // ตรวจสอบว่ามี shortcode หรือ contact form ในหน้านี้หรือไม่
    $has_recaptcha = (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'dga_recaptcha_v3'));
    $has_contact_form = (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'department_contact'));
    
    if ($has_recaptcha || $has_contact_form) {
        // Enqueue Google reCAPTCHA script
        wp_enqueue_script(
            'google-recaptcha-v3',
            'https://www.google.com/recaptcha/api.js?render=' . DGA_RECAPTCHA_SITE_KEY,
            array(),
            null,
            true
        );
        
        // Enqueue custom JavaScript
        wp_enqueue_script(
            'dga-recap-v3',
            get_stylesheet_directory_uri() . '/js/dga-recap-v3.js',
            array(DGA_JQUERY_HANDLE, 'google-recaptcha-v3'),
            DGA_VERSION_NUMBER,
            true
        );
        
        // Localize script
        wp_localize_script('dga-recap-v3', 'dga_recaptcha_ajax', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('dga_recaptcha_v3_nonce'),
            'site_key' => DGA_RECAPTCHA_SITE_KEY
        ));
        
        // Enqueue custom CSS
        wp_enqueue_style(
            'dga-recap-v3',
            get_stylesheet_directory_uri() . '/css/dga-recap-v3.css',
            array(),
            DGA_VERSION_NUMBER
        );
    }
}

// AJAX handler สำหรับการ verify reCAPTCHA token
add_action('wp_ajax_dga_verify_recaptcha', 'dga_verify_recaptcha_ajax');
add_action('wp_ajax_nopriv_dga_verify_recaptcha', 'dga_verify_recaptcha_ajax');

function dga_verify_recaptcha_ajax() {
    // ตรวจสอบ nonce
    if (!check_ajax_referer('dga_recaptcha_v3_nonce', 'nonce', false)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_INVALID_NONCE_MESSAGE));
    }
    
    // รับ token จาก POST request
    $token = isset($_POST['token']) ? sanitize_text_field($_POST['token']) : '';
    $action = isset($_POST['action']) ? sanitize_text_field($_POST['action']) : '';
    
    if (empty($token)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Token is required'));
    }
    
    // Verify token กับ Google reCAPTCHA
    $response = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', array(
        'body' => array(
            'secret' => DGA_RECAPTCHA_SECRET_KEY,
            'response' => $token,
            'remoteip' => $_SERVER['REMOTE_ADDR']
        )
    ));
    
    if (is_wp_error($response)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'Error verifying reCAPTCHA'));
    }
    
    $body = wp_remote_retrieve_body($response);
    $result = json_decode($body, true);
    
    // ตรวจสอบผลลัพธ์
    if ($result[DGA_SUCCESS_STATUS] && $result['score'] >= 0.5) {
        wp_send_json_success(array(
            DGA_MESSAGE_KEY => 'reCAPTCHA verified successfully',
            'score' => $result['score'],
            'action' => $result['action']
        ));
    } else {
        wp_send_json_error(array(
            DGA_MESSAGE_KEY => 'reCAPTCHA verification failed',
            'score' => isset($result['score']) ? $result['score'] : 0,
            'errors' => isset($result['error-codes']) ? $result['error-codes'] : array()
        ));
    }
}

// เพิ่ม reCAPTCHA verification เข้าไปใน existing contact form handler
add_action('init', 'dga_override_contact_form_handler');
function dga_override_contact_form_handler() {
    remove_action('wp_ajax_contact_form_submit', 'handle_contact_form_submission');
    remove_action('wp_ajax_nopriv_contact_form_submit', 'handle_contact_form_submission');
    
    add_action('wp_ajax_contact_form_submit', 'dga_handle_contact_form_with_recaptcha');
    add_action('wp_ajax_nopriv_contact_form_submit', 'dga_handle_contact_form_with_recaptcha');
}

function dga_handle_contact_form_with_recaptcha() {
    // ตรวจสอบ reCAPTCHA token ก่อน
    $recaptcha_token = isset($_POST['recaptcha_token']) ? sanitize_text_field($_POST['recaptcha_token']) : '';
    $recaptcha_action = isset($_POST['recaptcha_action']) ? sanitize_text_field($_POST['recaptcha_action']) : 'contact_form';
    
    if (empty($recaptcha_token)) {
        wp_send_json(array(
            DGA_STATUS_FIELD => DGA_ERROR_STATUS,
            DGA_MESSAGE_KEY => 'กรุณายืนยันว่าคุณไม่ใช่บอท'
        ));
        return;
    }
    
    // Verify reCAPTCHA
    $verification = dga_verify_recaptcha_server_side($recaptcha_token, $recaptcha_action);
    
    if (!$verification[DGA_SUCCESS_STATUS]) {
        wp_send_json(array(
            DGA_STATUS_FIELD => DGA_ERROR_STATUS,
            DGA_MESSAGE_KEY => 'การยืนยันความปลอดภัยล้มเหลว กรุณาลองใหม่อีกครั้ง'
        ));
        return;
    }
    
    // ถ้า reCAPTCHA ผ่าน ให้ดำเนินการ form submission ต่อ
    $contact_name = sanitize_text_field($_POST['contact_name']);
    $contact_email = sanitize_email($_POST['contact_email']);
    $contact_message = sanitize_textarea_field($_POST['contact_message']);
    
    $data = array(
        'contact_name' => $contact_name,
        'contact_email' => $contact_email,
        'contact_message' => $contact_message
    );

    // Set email headers
    $headers = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . get_bloginfo('name') . ' <' . get_bloginfo('admin_email') . '>'
    );

    // Send email to admin
    $admin_email = get_option('admin_email');
    $admin_subject = '[' . get_bloginfo('name') . '] มีข้อความติดต่อใหม่จาก ' . $contact_name;
    $admin_message = get_contact_email_template($data, 'admin');
    
    $admin_mail_sent = wp_mail($admin_email, $admin_subject, $admin_message, $headers);

    // Send confirmation email to user
    $user_subject = '[' . get_bloginfo('name') . '] ยืนยันการส่งข้อความติดต่อ';
    $user_message = get_contact_email_template($data, 'user');
    
    $user_mail_sent = wp_mail($contact_email, $user_subject, $user_message, $headers);

    // Prepare response
    if ($admin_mail_sent && $user_mail_sent) {
        $response = array(
            DGA_STATUS_FIELD => DGA_SUCCESS_STATUS,
            DGA_MESSAGE_KEY => 'ส่งข้อความเรียบร้อยแล้ว',
            'recaptcha_score' => $verification['score']
        );
    } else {
        $response = array(
            DGA_STATUS_FIELD => DGA_ERROR_STATUS,
            DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการส่งข้อความ กรุณาลองใหม่อีกครั้ง'
        );
    }
    
    wp_send_json($response);
}

// Function สำหรับการตรวจสอบ reCAPTCHA ในฝั่ง server
function dga_verify_recaptcha_server_side($token, $action = 'submit') {
    if (empty($token)) {
        return array(DGA_SUCCESS_STATUS => false, DGA_MESSAGE_KEY => 'Token is required');
    }
    
    $response = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', array(
        'body' => array(
            'secret' => DGA_RECAPTCHA_SECRET_KEY,
            'response' => $token,
            'remoteip' => $_SERVER['REMOTE_ADDR']
        )
    ));
    
    if (is_wp_error($response)) {
        return array(DGA_SUCCESS_STATUS => false, DGA_MESSAGE_KEY => 'Error verifying reCAPTCHA');
    }
    
    $body = wp_remote_retrieve_body($response);
    $result = json_decode($body, true);
    
    // ตรวจสอบว่า action ตรงกันหรือไม่
    $action_match = (!empty($result['action']) && $result['action'] === $action);
    
    if ($result[DGA_SUCCESS_STATUS] && $result['score'] >= 0.5 && $action_match) {
        return array(
            DGA_SUCCESS_STATUS => true,
            'score' => $result['score'],
            'action' => $result['action']
        );
    }
    
    return array(
        DGA_SUCCESS_STATUS => false,
        'score' => isset($result['score']) ? $result['score'] : 0,
        'action' => isset($result['action']) ? $result['action'] : '',
        'errors' => isset($result['error-codes']) ? $result['error-codes'] : array()
    );
}


/****** ฟังก์ชั่น Session timeout แบบตั้งค่าได้ *******/

// สร้างหน้า admin menu
add_action('admin_menu', 'dga_session_timeout_menu');
function dga_session_timeout_menu() {
    add_menu_page(
        'Session Timeout Settings',
        'Session Timeout',
        DGA_MANAGE_OPTIONS_CAP,
        'dga-session-timeout',
        'dga_session_timeout_page',
        'dashicons-clock',
        90
    );
}

// หน้า admin settings
function dga_session_timeout_page() {
    ?>
    <div class="wrap">
        <h1>Session Timeout Settings</h1>
        <form id="dga-timeout-form">
            <table class="form-table">
                <tr>
                    <th scope="row">
                        <label for="dga_timeout_minutes">Timeout Duration</label>
                    </th>
                    <td>
                        <input type="number" 
                               id="dga_timeout_minutes" 
                               name="dga_timeout_minutes" 
                               value="<?php echo esc_attr(get_option('dga_timeout_minutes', 30)); ?>" 
                               min="1" 
                               max="1440" 
                               required>
                        <span class="description">Minutes (1-1440)</span>
                    </td>
                </tr>
                <tr>
                    <th scope="row">
                        <label for="dga_timeout_enabled">Enable Auto Logout</label>
                    </th>
                    <td>
                        <input type="checkbox" 
                               id="dga_timeout_enabled" 
                               name="dga_timeout_enabled" 
                               value="1" 
                               <?php checked(get_option('dga_timeout_enabled', 0), 1); ?>>
                        <span class="description">Enable automatic logout after timeout</span>
                    </td>
                </tr>
                <tr>
                    <th scope="row">
                        <label for="dga_timeout_warning">Warning Time</label>
                    </th>
                    <td>
                        <input type="number" 
                               id="dga_timeout_warning" 
                               name="dga_timeout_warning" 
                               value="<?php echo esc_attr(get_option('dga_timeout_warning', 5)); ?>" 
                               min="1" 
                               max="60" 
                               required>
                        <span class="description">Minutes before timeout to show warning</span>
                    </td>
                </tr>
            </table>
            <?php wp_nonce_field('dga_timeout_nonce', 'dga_timeout_nonce_field'); ?>
            <p class=DGA_SUBMIT_TYPE>
                <button type=DGA_SUBMIT_TYPE class="button-primary">Save Settings</button>
                <span id="dga-timeout-message" class="notice" style="display:none;"></span>
            </p>
        </form>
    </div>
    <?php
}

// AJAX handler สำหรับบันทึกการตั้งค่า
add_action('wp_ajax_dga_save_timeout_settings', 'dga_save_timeout_settings');
function dga_save_timeout_settings() {
    // ตรวจสอบ nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_timeout_nonce')) {
        wp_die(DGA_SECURITY_FAILED_MSG);
    }
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_die('Unauthorized user');
    }
    
    // บันทึกการตั้งค่า
    update_option('dga_timeout_minutes', intval($_POST['timeout_minutes']));
    update_option('dga_timeout_enabled', intval($_POST['timeout_enabled']));
    update_option('dga_timeout_warning', intval($_POST['timeout_warning']));
    
    wp_send_json_success('Settings saved successfully');
}

// AJAX handler สำหรับการ logout
add_action('wp_ajax_dga_session_logout', 'dga_session_logout');
function dga_session_logout() {
    // ตรวจสอบ nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_timeout_logout_nonce')) {
        wp_die(DGA_SECURITY_FAILED_MSG);
    }
    
    wp_logout();
    wp_send_json_success('Logged out successfully');
}

// โหลด scripts และ styles ในหน้า admin
add_action('admin_enqueue_scripts', 'dga_timeout_enqueue_admin_scripts');
function dga_timeout_enqueue_admin_scripts($hook) {
    // โหลดเฉพาะในหน้า plugin settings
    if ($hook == 'toplevel_page_dga-session-timeout') {
        wp_enqueue_script(
            'dga-timeout-admin', 
            get_stylesheet_directory_uri() . '/js/dga-timeout.js', 
            array(DGA_JQUERY_HANDLE), 
            DGA_VERSION_NUMBER, 
            true
        );
        
        wp_enqueue_style(
            'dga-timeout-admin', 
            get_stylesheet_directory_uri() . '/css/dga-timeout.css', 
            array(), 
            DGA_VERSION_NUMBER
        );
        
        // ส่งข้อมูลไปยัง JavaScript
        wp_localize_script('dga-timeout-admin', 'dga_timeout_ajax', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('dga_timeout_nonce'),
            'logout_nonce' => wp_create_nonce('dga_timeout_logout_nonce')
        ));
    }
}

// โหลด scripts สำหรับ frontend และ admin เพื่อ handle timeout
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_timeout_enqueue_scripts');
add_action('admin_enqueue_scripts', 'dga_timeout_enqueue_scripts');
function dga_timeout_enqueue_scripts() {
    if (is_user_logged_in() && get_option('dga_timeout_enabled', 0)) {
        wp_enqueue_script(
            'dga-timeout-handler', 
            get_stylesheet_directory_uri() . '/js/dga-timeout-handler.js', 
            array(DGA_JQUERY_HANDLE), 
            DGA_VERSION_NUMBER, 
            true
        );
        
        // ส่งค่า timeout ไปยัง JavaScript
        wp_localize_script('dga-timeout-handler', 'dga_timeout_config', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            'logout_nonce' => wp_create_nonce('dga_timeout_logout_nonce'),
            'timeout_minutes' => get_option('dga_timeout_minutes', 30),
            'warning_minutes' => get_option('dga_timeout_warning', 5),
            'is_admin' => is_admin() ? 'yes' : 'no'
        ));
    }
}

// Update user last activity
add_action('init', 'dga_update_user_activity');
function dga_update_user_activity() {
    if (is_user_logged_in()) {
        update_user_meta(get_current_user_id(), 'dga_last_activity', time());
    }
}

// AJAX handler สำหรับอัปเดต activity
add_action('wp_ajax_dga_update_activity', 'dga_ajax_update_activity');
function dga_ajax_update_activity() {
    if (is_user_logged_in()) {
        update_user_meta(get_current_user_id(), 'dga_last_activity', time());
        wp_send_json_success();
    }
    wp_die();
}


/**** ฟังก์ชั่น อภิธานศัพท์ *******/

/**
 * DGA Glossary with Custom Database
 * Usage: [dga_glossary]
 */

// Create database table on theme activation
add_action('after_setup_theme', 'dga_create_glossary_table');
function dga_create_glossary_table() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'dga_glossary';
    $charset_collate = $wpdb->get_charset_collate();
    
    $sql = "CREATE TABLE IF NOT EXISTS $table_name (
        id int(11) NOT NULL AUTO_INCREMENT,
        thai_term varchar(255) DEFAULT NULL,
        english_term varchar(255) DEFAULT NULL,
        description text DEFAULT NULL,
        source varchar(255) DEFAULT NULL,
        url varchar(500) DEFAULT NULL,
        created_at datetime DEFAULT CURRENT_TIMESTAMP,
        updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        INDEX idx_thai (thai_term),
        INDEX idx_english (english_term)
    ) $charset_collate;";
    
    require_once ABSPATH . 'wp-admin/includes/upgrade.php';
    dbDelta($sql);
}

// Register shortcode
add_shortcode('dga_glossary', 'dga_glossary_shortcode');

function dga_glossary_shortcode($atts) {
    // Create nonce for security
    $nonce = wp_create_nonce('dga_glossary_nonce');
    
    // Check if current user is administrator
    $is_admin = current_user_can(DGA_ADMIN_ROLE);
    
    // Enqueue scripts and styles
    wp_enqueue_style('dga-glossary', get_stylesheet_directory_uri() . '/css/dga-glossary.css', array(), DGA_VERSION_NUMBER);
    wp_enqueue_script('dga-glossary', get_stylesheet_directory_uri() . '/js/dga-glossary.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
    
    // Pass data to JavaScript
    wp_localize_script('dga-glossary', 'dga_glossary_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => $nonce,
        'is_admin' => $is_admin
    ));
    
    ob_start();
    ?>
    <div id="dga-glossary-container" data-is-admin="<?php echo $is_admin ? 'true' : 'false'; ?>">
        <!-- Add New Button for Admin -->
        <?php if ($is_admin): ?>
        <div class="dga-admin-controls">
            <button id="dga-add-new-btn" class="btn-add-new">➕ เพิ่มคำศัพท์ใหม่</button>
        </div>
        <?php endif; ?>
        
        <!-- Filter Section -->
        <div class="dga-glossary-filters">
            <div class="filter-row">
                <div class="search-container">
                    <input type="text" id="dga-search-input" placeholder="ค้นหาคำศัพท์..." />
                    <button id="dga-clear-search" class="btn-clear">ล้างค่า</button>
                </div>
                
                <!-- Selected Letter Display -->
                <div class="selected-letter-display">
                    <div class="selected-letter-box">
                        <span id="selected-letter-text">-</span>
                    </div>
                </div>
            </div>
            
            <div class="filter-row alphabet-filters">
                <div class="alphabet-group thai-alphabet">
                    <span class="alphabet-label">ไทย:</span>
                    <?php 
                    $thai_chars = array('ก','ข','ค','ฆ','ง','จ','ฉ','ช','ซ','ฌ','ญ','ฎ','ฏ','ฐ','ฑ','ฒ','ณ','ด','ต','ถ','ท','ธ','น','บ','ป','ผ','ฝ','พ','ฟ','ภ','ม','ย','ร','ล','ว','ศ','ษ','ส','ห','ฬ','อ','ฮ');
                    foreach($thai_chars as $char): ?>
                        <button class="alphabet-filter" data-char="<?php echo $char; ?>" data-type="thai"><?php echo $char; ?></button>
                    <?php endforeach; ?>
                </div>
                
                <div class="alphabet-group english-alphabet">
                    <span class="alphabet-label">English:</span>
                    <?php 
                    foreach(range('A', 'Z') as $char): ?>
                        <button class="alphabet-filter" data-char="<?php echo $char; ?>" data-type="english"><?php echo $char; ?></button>
                    <?php endforeach; ?>
                </div>
            </div>
        </div>
        
        <!-- Table Section -->
        <div class="dga-glossary-table-container">
            <table id="dga-glossary-table">
                <thead>
                    <tr>
                        <th>คำศัพท์ (ไทย)</th>
                        <th>คำศัพท์ (English)</th>
                        <th>คำอธิบาย</th>
                        <th>ที่มา</th>
                        <th>URL</th>
                        <?php if ($is_admin): ?>
                        <th>จัดการ</th>
                        <?php endif; ?>
                    </tr>
                </thead>
                <tbody id="dga-glossary-tbody">
                    <tr class="skeleton-row">
                        <td colspan="<?php echo $is_admin ? '6' : '5'; ?>">
                            <div class="skeleton-loader">กำลังโหลดข้อมูล...</div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <!-- Pagination Section -->
        <div id="dga-glossary-pagination" class="pagination-container"></div>
        
        <!-- Add/Edit Modal -->
        <?php if ($is_admin): ?>
        <div id="dga-modal" class="dga-modal">
            <div class="modal-content">
                <span class="modal-close">&times;</span>
                <h3 id="modal-title">เพิ่มคำศัพท์ใหม่</h3>
                <form id="dga-glossary-form">
                    <div class="form-group">
                        <label>คำศัพท์ (ไทย):</label>
                        <input type="text" id="modal-thai" name="thai_term" />
                    </div>
                    <div class="form-group">
                        <label>คำศัพท์ (English):</label>
                        <input type="text" id="modal-english" name="english_term" />
                    </div>
                    <div class="form-group">
                        <label>คำอธิบาย:</label>
                        <textarea id="modal-description" name="description" rows="4"></textarea>
                    </div>
                    <div class="form-group">
                        <label>ที่มา:</label>
                        <input type="text" id="modal-source" name="source" />
                    </div>
                    <div class="form-group">
                        <label>URL:</label>
                        <input type="url" id="modal-url" name="url" placeholder="https://..." />
                    </div>
                    <input type="hidden" id="modal-id" name="id" value="" />
                    <div class="form-buttons">
                        <button type=DGA_SUBMIT_TYPE class="btn-submit">บันทึก</button>
                        <button type=DGA_BUTTON_TYPE class="btn-cancel">ยกเลิก</button>
                    </div>
                </form>
            </div>
        </div>
        <?php endif; ?>
    </div>
    
    <?php if ($is_admin): ?>
    <style>
    /* Modal Styles */
    .dga-admin-controls { margin-bottom: 20px; }
    .btn-add-new {
        padding: 10px 20px;
        background: #52c41a;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }
    .btn-add-new:hover { background: #389e0d; }
    .dga-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
    }
    .modal-content {
        background: white;
        margin: 5% auto;
        padding: 20px;
        width: 90%;
        max-width: 600px;
        border-radius: 10px;
        position: relative;
    }
    .modal-close {
        position: absolute;
        right: 20px;
        top: 10px;
        font-size: 28px;
        cursor: pointer;
        color: #999;
    }
    .modal-close:hover { color: #333; }
    .form-group {
        margin-bottom: 15px;
    }
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    .form-group input, .form-group textarea {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    .form-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 20px;
    }
    .btn-submit, .btn-cancel {
        padding: 8px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    .btn-submit {
        background: #1890ff;
        color: white;
    }
    .btn-cancel {
        background: #f5f5f5;
        color: #666;
    }
    .btn-delete {
        padding: 5px 10px;
        background: #ff4d4f;
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 12px;
    }
    </style>
    <?php endif; ?>
    
    <?php
    return ob_get_clean();
}

// AJAX Handler for fetching glossary data
add_action('wp_ajax_dga_fetch_glossary', 'dga_fetch_glossary_data');
add_action('wp_ajax_nopriv_dga_fetch_glossary', 'dga_fetch_glossary_data');

function dga_fetch_glossary_data() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_glossary_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'dga_glossary';
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $letter = isset($_POST['letter']) ? sanitize_text_field($_POST['letter']) : '';
    $letter_type = isset($_POST['letter_type']) ? sanitize_text_field($_POST['letter_type']) : '';
    
    $per_page = 10;
    $offset = ($page - 1) * $per_page;
    
    // Build WHERE clause
    $where_clauses = array("1=1");
    $where_values = array();
    
    // Search filter
    if (!empty($search)) {
        $where_clauses[] = "(thai_term LIKE %s OR english_term LIKE %s OR description LIKE %s OR source LIKE %s)";
        $search_param = '%' . $wpdb->esc_like($search) . '%';
        $where_values[] = $search_param;
        $where_values[] = $search_param;
        $where_values[] = $search_param;
        $where_values[] = $search_param;
    }
    
    // Letter filter - filter based on letter type
    if (!empty($letter) && !empty($letter_type)) {
        if ($letter_type === 'thai') {
            $where_clauses[] = "thai_term LIKE %s";
        } else {
            $where_clauses[] = "english_term LIKE %s";
        }
        $where_values[] = $letter . '%';
    }
    
    $where_sql = implode(' AND ', $where_clauses);
    
    // Get total count
    $count_sql = "SELECT COUNT(*) FROM $table_name WHERE $where_sql";
    if (!empty($where_values)) {
        $count_sql = $wpdb->prepare($count_sql, $where_values);
    }
    $total_posts = $wpdb->get_var($count_sql);
    
    // Get data
    $data_sql = "SELECT * FROM $table_name WHERE $where_sql ORDER BY thai_term ASC, english_term ASC LIMIT %d OFFSET %d";
    $sql_values = array_merge($where_values, array($per_page, $offset));
    $query = $wpdb->prepare($data_sql, $sql_values);
    $results = $wpdb->get_results($query, ARRAY_A);
    
    // Format results
    $formatted_results = array();
    foreach ($results as $row) {
        $formatted_results[] = array(
            'id' => $row['id'],
            'thai' => $row['thai_term'],
            'english' => $row['english_term'],
            'content' => mb_substr($row['description'], 0, 200, 'UTF-8') . (mb_strlen($row['description'], 'UTF-8') > 200 ? '...' : ''),
            'source' => $row['source'],
            'url' => $row['url'],
            'full_description' => $row['description']
        );
    }
    
    $total_pages = ceil($total_posts / $per_page);
    
    wp_send_json(array(
        DGA_SUCCESS_STATUS => true,
        'data' => $formatted_results,
        'pagination' => array(
            'current_page' => $page,
            'total_pages' => $total_pages,
            'total_posts' => $total_posts
        )
    ));
}

// AJAX Handler for updating glossary terms
add_action('wp_ajax_dga_update_glossary_term', 'dga_update_glossary_term');

function dga_update_glossary_term() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_glossary_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check if user is administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการแก้ไขข้อมูล'
        ));
        wp_die();
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'dga_glossary';
    
    $id = intval($_POST[DGA_POST_ID_FIELD]);
    $field = sanitize_text_field($_POST[DGA_FIELD_KEY]);
    $value = sanitize_text_field($_POST['value']);
    
    $field_map = array(
        'thai' => 'thai_term',
        'english' => 'english_term'
    );
    
    if (isset($field_map[$field])) {
        $result = $wpdb->update(
            $table_name,
            array($field_map[$field] => $value),
            array('id' => $id)
        );
        
        if ($result !== false) {
            wp_send_json(array(
                DGA_SUCCESS_STATUS => true,
                DGA_MESSAGE_KEY => 'บันทึกข้อมูลสำเร็จ'
            ));
        } else {
            wp_send_json(array(
                DGA_SUCCESS_STATUS => false,
                DGA_MESSAGE_KEY => 'ไม่สามารถบันทึกข้อมูลได้'
            ));
        }
    } else {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => 'ไม่สามารถแก้ไขฟิลด์นี้ได้'
        ));
    }
}

// AJAX Handler for saving glossary entry
add_action('wp_ajax_dga_save_glossary_entry', 'dga_save_glossary_entry');

function dga_save_glossary_entry() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_glossary_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check if user is administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการเพิ่มข้อมูล'
        ));
        wp_die();
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'dga_glossary';
    
    $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
    $data = array(
        'thai_term' => sanitize_text_field($_POST['thai_term']),
        'english_term' => sanitize_text_field($_POST['english_term']),
        'description' => sanitize_textarea_field($_POST['description']),
        'source' => sanitize_text_field($_POST['source']),
        'url' => esc_url_raw($_POST['url'])
    );
    
    if ($id > 0) {
        // Update existing entry
        $result = $wpdb->update($table_name, $data, array('id' => $id));
        $message = 'อัพเดตข้อมูลสำเร็จ';
    } else {
        // Insert new entry
        $result = $wpdb->insert($table_name, $data);
        $message = 'เพิ่มข้อมูลสำเร็จ';
    }
    
    if ($result !== false) {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => true,
            DGA_MESSAGE_KEY => $message
        ));
    } else {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => 'เกิดข้อผิดพลาดในการบันทึกข้อมูล'
        ));
    }
}

// AJAX Handler for deleting glossary entry
add_action('wp_ajax_dga_delete_glossary_entry', 'dga_delete_glossary_entry');

function dga_delete_glossary_entry() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_glossary_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    // Check if user is administrator
    if (!current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => 'คุณไม่มีสิทธิ์ในการลบข้อมูล'
        ));
        wp_die();
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'dga_glossary';
    
    $id = intval($_POST['id']);
    
    $result = $wpdb->delete($table_name, array('id' => $id));
    
    if ($result !== false) {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => true,
            DGA_MESSAGE_KEY => 'ลบข้อมูลสำเร็จ'
        ));
    } else {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => 'ไม่สามารถลบข้อมูลได้'
        ));
    }
}

// AJAX Handler for getting single glossary entry
add_action('wp_ajax_dga_get_glossary_entry', 'dga_get_glossary_entry');

function dga_get_glossary_entry() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_glossary_nonce')) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => DGA_SECURITY_FAILED_MSG));
        wp_die();
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'dga_glossary';
    
    $id = intval($_POST['id']);
    
    $entry = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table_name WHERE id = %d", $id), ARRAY_A);
    
    if ($entry) {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => true,
            'data' => $entry
        ));
    } else {
        wp_send_json(array(
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => 'ไม่พบข้อมูล'
        ));
    }
}


/**** ฟังก์ชั่น FAQs ********/

// สร้าง Custom Post Type สำหรับ FAQ
function dga_create_faq_post_type() {
    $args = array(
        'labels' => array(
            DGA_NAME_FIELD => 'FAQs',
            'singular_name' => 'FAQ',
            'add_new' => 'เพิ่ม FAQ ใหม่',
            'add_new_item' => 'เพิ่ม FAQ ใหม่',
            'edit_item' => 'แก้ไข FAQ',
            'new_item' => 'FAQ ใหม่',
            'view_item' => 'ดู FAQ',
            'search_items' => 'ค้นหา FAQ',
            'not_found' => 'ไม่พบ FAQ',
            'not_found_in_trash' => 'ไม่พบ FAQ ในถังขยะ'
        ),
        'public' => true,
        'has_archive' => true,
        'rewrite' => array('slug' => 'faq'),
        'supports' => array(DGA_TITLE_FIELD, 'custom-fields'),
        'show_in_rest' => true,
        'menu_icon' => 'dashicons-editor-help'
    );
    
    register_post_type('faq', $args);
}
add_action('init', 'dga_create_faq_post_type');

// ลงทะเบียน Shortcode
function dga_faqs_shortcode($atts) {
    $atts = shortcode_atts(array(
        'per_page' => 20
    ), $atts);
    
    ob_start();
    ?>
    <div id="dga-faqs-container" data-per-page="<?php echo esc_attr($atts['per_page']); ?>">
        <!-- Search Box -->
        <div class="dga-faqs-search">
            <input type="text" id="dga-faqs-search-input" placeholder="ค้นหาคำถาม...">
            <button id="dga-faqs-search-btn">
                <span class="dashicons dashicons-search"></span>
            </button>
        </div>
        
        <!-- FAQs List -->
        <div id="dga-faqs-list">
            <!-- FAQs จะถูกโหลดด้วย AJAX -->
        </div>
        
        <!-- Pagination -->
        <div id="dga-faqs-pagination">
            <!-- Pagination จะถูกสร้างด้วย JavaScript -->
        </div>
    </div>
    
    <!-- Modal Popup -->
    <div id="dga-faq-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h3>เพิ่มคำถามใหม่</h3>
            <form id="dga-faqs-modal-form">
                <div class="dga-form-group">
                    <label for="dga-modal-question">คำถาม</label>
                    <input type="text" id="dga-modal-question" placeholder="กรอกคำถามของคุณ" required>
                </div>
                <div class="dga-form-group">
                    <label for="dga-modal-answer">คำตอบ</label>
                    <textarea id="dga-modal-answer" placeholder="กรอกคำตอบของคุณ" rows="5" required></textarea>
                </div>
                <div class="dga-modal-buttons">
                    <button type=DGA_SUBMIT_TYPE class="dga-btn-primary">เพิ่มคำถาม</button>
                    <button type=DGA_BUTTON_TYPE class="dga-btn-secondary dga-modal-cancel">ยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Edit Modal Popup -->
    <div id="dga-faq-edit-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h3>แก้ไขคำถาม</h3>
            <form id="dga-faqs-edit-form">
                <input type="hidden" id="dga-edit-faq-id">
                <div class="dga-form-group">
                    <label for="dga-edit-question">คำถาม</label>
                    <input type="text" id="dga-edit-question" placeholder="กรอกคำถามของคุณ" required>
                </div>
                <div class="dga-form-group">
                    <label for="dga-edit-answer">คำตอบ</label>
                    <textarea id="dga-edit-answer" placeholder="กรอกคำตอบของคุณ" rows="5" required></textarea>
                </div>
                <div class="dga-modal-buttons">
                    <button type=DGA_SUBMIT_TYPE class="dga-btn-primary">บันทึกการแก้ไข</button>
                    <button type=DGA_BUTTON_TYPE class="dga-btn-secondary dga-modal-cancel">ยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Delete Confirmation Dialog -->
    <div id="dga-delete-confirm" class="dga-modal">
        <div class="dga-modal-content dga-confirm-dialog">
            <div class="dga-confirm-icon">
                <span class="dashicons dashicons-warning"></span>
            </div>
            <h3>ยืนยันการลบคำถาม</h3>
            <p>คุณต้องการลบคำถามนี้ใช่หรือไม่?</p>
            <div class="dga-confirm-details">
                <strong>คำถาม:</strong> <span id="dga-delete-question-text"></span>
            </div>
            <div class="dga-modal-buttons">
                <button type=DGA_BUTTON_TYPE class="dga-btn-danger" id="dga-confirm-delete">ลบคำถาม</button>
                <button type=DGA_BUTTON_TYPE class="dga-btn-secondary dga-modal-cancel">ยกเลิก</button>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('dga_faqs', 'dga_faqs_shortcode');

// Shortcode สำหรับปุ่มเพิ่มคำถาม
function dga_faq_add_button_shortcode($atts) {
    $atts = shortcode_atts(array(
        'text' => 'เพิ่มคำถาม',
        'class' => '',
        'style' => ''
    ), $atts);
    
    $button_class = 'dga-add-faq-btn ' . esc_attr($atts['class']);
    $button_style = !empty($atts['style']) ? 'style="' . esc_attr($atts['style']) . '"' : '';
    
    return sprintf(
        '<button class="%s" %s>%s</button>',
        $button_class,
        $button_style,
        esc_html($atts['text'])
    );
}
add_shortcode('dga-faq-add', 'dga_faq_add_button_shortcode');

// Enqueue Scripts และ Styles
function dga_faqs_enqueue_scripts() {
    global $post;
    
    if (is_a($post, 'WP_Post') && (has_shortcode($post->post_content, 'dga_faqs') || has_shortcode($post->post_content, 'dga-faq-add'))) {
        wp_enqueue_style('dga-faqs-style', get_stylesheet_directory_uri() . '/css/dga-faqs.css', array(), DGA_VERSION_NUMBER);
        wp_enqueue_script('dga-faqs-script', get_stylesheet_directory_uri() . '/js/dga-faqs.js', array(DGA_JQUERY_HANDLE), DGA_VERSION_NUMBER, true);
        
        // ใช้ helper function ตรวจสอบ admin
        $is_admin = dga_is_user_admin();
        
        wp_localize_script('dga-faqs-script', 'dga_faqs_ajax', array(
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('dga_faqs_nonce'),
            'is_admin' => $is_admin,
            'user_logged_in' => is_user_logged_in(),
            'debug' => array(
                'capabilities' => is_user_logged_in() ? $current_user->allcaps : array(),
                'roles' => is_user_logged_in() ? $current_user->roles : array()
            )
        ));
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_faqs_enqueue_scripts');

// AJAX Handler - โหลด FAQs
function dga_load_faqs() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 20;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    
    $args = array(
        DGA_POST_TYPE_FIELD => 'faq',
        DGA_POSTS_PER_PAGE => $per_page,
        DGA_PAGED_PARAMETER => $page,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    if (!empty($search)) {
        $args['s'] = $search;
    }
    
    $query = new WP_Query($args);
    $faqs = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            $faqs[] = array(
                'id' => $post_id,
                'question' => get_the_title(),
                'answer' => get_post_meta($post_id, 'faq_details', true),
                'likes' => intval(get_post_meta($post_id, 'faq_good', true)),
                'user_liked' => dga_check_user_liked($post_id)
            );
        }
    }
    
    wp_send_json_success(array(
        'faqs' => $faqs,
        'total_pages' => $query->max_num_pages,
        'current_page' => $page
    ));
}
add_action('wp_ajax_dga_load_faqs', 'dga_load_faqs');
add_action('wp_ajax_nopriv_dga_load_faqs', 'dga_load_faqs');

// AJAX Handler - เพิ่ม FAQ
function dga_add_faq() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    $question = sanitize_text_field($_POST['question']);
    $answer = sanitize_textarea_field($_POST['answer']);
    
    if (empty($question) || empty($answer)) {
        wp_send_json_error('กรุณากรอกข้อมูลให้ครบถ้วน');
    }
    
    $post_data = array(
        'post_title' => $question,
        DGA_POST_TYPE_FIELD => 'faq',
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS
    );
    
    $post_id = wp_insert_post($post_data);
    
    if ($post_id) {
        update_post_meta($post_id, 'faq_details', $answer);
        update_post_meta($post_id, 'faq_good', 0);
        
        // อัพเดต slug ให้เป็น post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));
        
        wp_send_json_success('เพิ่มคำถามสำเร็จ');
    } else {
        wp_send_json_error('เกิดข้อผิดพลาดในการเพิ่มคำถาม');
    }
}
add_action('wp_ajax_dga_add_faq', 'dga_add_faq');
add_action('wp_ajax_nopriv_dga_add_faq', 'dga_add_faq');

// AJAX Handler - แก้ไข FAQ
function dga_update_faq() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    // ตรวจสอบว่าเป็น Administrator
    if (!is_user_logged_in() || !current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error('คุณไม่มีสิทธิ์ในการแก้ไขคำถาม');
    }
    
    $faq_id = intval($_POST['faq_id']);
    $question = sanitize_text_field($_POST['question']);
    $answer = sanitize_textarea_field($_POST['answer']);
    
    if (empty($question) || empty($answer)) {
        wp_send_json_error('กรุณากรอกข้อมูลให้ครบถ้วน');
    }
    
    // อัพเดตคำถาม
    $updated = wp_update_post(array(
        'ID' => $faq_id,
        'post_title' => $question
    ));
    
    if ($updated) {
        update_post_meta($faq_id, 'faq_details', $answer);
        wp_send_json_success('แก้ไขคำถามสำเร็จ');
    } else {
        wp_send_json_error('เกิดข้อผิดพลาดในการแก้ไขคำถาม');
    }
}
add_action('wp_ajax_dga_update_faq', 'dga_update_faq');
add_action('wp_ajax_nopriv_dga_update_faq', 'dga_update_faq');

// AJAX Handler - ลบ FAQ
function dga_delete_faq() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    // ตรวจสอบว่าเป็น Administrator
    if (!is_user_logged_in() || !current_user_can(DGA_ADMIN_ROLE)) {
        wp_send_json_error('คุณไม่มีสิทธิ์ในการลบคำถาม');
    }
    
    $faq_id = intval($_POST['faq_id']);
    
    if (!$faq_id) {
        wp_send_json_error('ไม่พบคำถามที่ต้องการลบ');
    }
    
    $deleted = wp_trash_post($faq_id);
    
    if ($deleted) {
        wp_send_json_success('ลบคำถามสำเร็จ');
    } else {
        wp_send_json_error('เกิดข้อผิดพลาดในการลบคำถาม');
    }
}
add_action('wp_ajax_dga_delete_faq', 'dga_delete_faq');
add_action('wp_ajax_nopriv_dga_delete_faq', 'dga_delete_faq');

// AJAX Handler - Toggle Like
function dga_toggle_like() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    $faq_id = intval($_POST['faq_id']);
    
    // ตรวจสอบว่าผู้ใช้ลงคะแนนวันนี้แล้วหรือยัง
    if (dga_check_daily_limit($faq_id)) {
        wp_send_json_error('คุณได้ลงคะแนนสำหรับคำถามนี้ในวันนี้แล้ว');
    }
    
    $current_likes = intval(get_post_meta($faq_id, 'faq_good', true));
    $user_liked = dga_check_user_liked($faq_id);
    
    if ($user_liked) {
        // Unlike
        $new_likes = $current_likes - 1;
        dga_remove_user_like($faq_id);
    } else {
        // Like
        $new_likes = $current_likes + 1;
        dga_add_user_like($faq_id);
    }
    
    update_post_meta($faq_id, 'faq_good', $new_likes);
    
    wp_send_json_success(array(
        'likes' => $new_likes,
        'user_liked' => !$user_liked
    ));
}
add_action('wp_ajax_dga_toggle_like', 'dga_toggle_like');
add_action('wp_ajax_nopriv_dga_toggle_like', 'dga_toggle_like');

// Helper function to check if user is administrator
function dga_is_user_admin() {
    if (!is_user_logged_in()) {
        return false;
    }
    
    $current_user = wp_get_current_user();
    
    // Check multiple ways to ensure user is admin
    if (current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return true;
    }
    
    if (current_user_can(DGA_ADMIN_ROLE)) {
        return true;
    }
    
    if (in_array(DGA_ADMIN_ROLE, (array) $current_user->roles)) {
        return true;
    }
    
    // Check if user is Super Admin in multisite
    if (is_multisite() && is_super_admin()) {
        return true;
    }
    
    return false;
}
function dga_check_user_liked($faq_id) {
    $session_key = 'dga_faq_likes_' . dga_get_session_id();
    $likes = get_transient($session_key);
    
    if (!is_array($likes)) {
        $likes = array();
    }
    
    return isset($likes[$faq_id]) && $likes[$faq_id];
}

function dga_add_user_like($faq_id) {
    $session_key = 'dga_faq_likes_' . dga_get_session_id();
    $likes = get_transient($session_key);
    
    if (!is_array($likes)) {
        $likes = array();
    }
    
    $likes[$faq_id] = true;
    set_transient($session_key, $likes, DAY_IN_SECONDS);
}

function dga_remove_user_like($faq_id) {
    $session_key = 'dga_faq_likes_' . dga_get_session_id();
    $likes = get_transient($session_key);
    
    if (!is_array($likes)) {
        $likes = array();
    }
    
    unset($likes[$faq_id]);
    set_transient($session_key, $likes, DAY_IN_SECONDS);
}

function dga_check_daily_limit($faq_id) {
    $limit_key = 'dga_faq_daily_' . dga_get_session_id() . '_' . $faq_id;
    $today = date('Y-m-d');
    $last_action = get_transient($limit_key);
    
    if ($last_action === $today) {
        return true;
    }
    
    set_transient($limit_key, $today, DAY_IN_SECONDS);
    return false;
}

function dga_get_session_id() {
    if (!session_id()) {
        session_start();
    }
    
    if (!isset($_SESSION['dga_faq_session'])) {
        $_SESSION['dga_faq_session'] = uniqid();
    }
    
    return $_SESSION['dga_faq_session'];
}


/***** ฟังก์ชั่น CARD ITEM ข่าวสารหน้าแรก ********/


// Enqueue styles and scripts
function dga_news_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Check for child theme CSS
    if (is_child_theme()) {
        $child_style_path = get_stylesheet_directory() . '/css/dga-news-loop.css';
        $child_style_uri = get_stylesheet_directory_uri() . '/css/dga-news-loop.css';
        
        if (file_exists($child_style_path)) {
            wp_enqueue_style('dga-news-style', $child_style_uri, array(), $theme_version);
        } else {
            wp_enqueue_style('dga-news-style', get_template_directory_uri() . '/css/dga-news-loop.css', array(), $theme_version);
        }
        
        // Check for child theme JS
        $child_script_path = get_stylesheet_directory() . '/js/dga-news-loop.js';
        $child_script_uri = get_stylesheet_directory_uri() . '/js/dga-news-loop.js';
        
        if (file_exists($child_script_path)) {
            wp_enqueue_script('dga-news-script', $child_script_uri, array(DGA_JQUERY_HANDLE), $theme_version, true);
        } else {
            wp_enqueue_script('dga-news-script', get_template_directory_uri() . '/js/dga-news-loop.js', array(DGA_JQUERY_HANDLE), $theme_version, true);
        }
    } else {
        wp_enqueue_style('dga-news-style', get_template_directory_uri() . '/css/dga-news-loop.css', array(), $theme_version);
        wp_enqueue_script('dga-news-script', get_template_directory_uri() . '/js/dga-news-loop.js', array(DGA_JQUERY_HANDLE), $theme_version, true);
    }
    
    // Setup AJAX 
    wp_localize_script('dga-news-script', 'dga_news_ajax', array(
        DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga-news-nonce')
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_news_enqueue_assets');

// News post loop shortcode
function dga_news_loops($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        DGA_POSTS_PER_PAGE => 8,
        DGA_POST_TYPE_FIELD => 'article',
        DGA_TAXONOMY_FIELD => '',
        'term' => 'stdnews',
    ), $atts);
    
    // Build tax query if term is provided
    $tax_query = array();
    if (!empty($atts['term'])) {
        $taxonomy = !empty($atts[DGA_TAXONOMY_FIELD]) ? sanitize_text_field($atts[DGA_TAXONOMY_FIELD]) : 'category';
        $tax_query[] = array(
            DGA_TAXONOMY_FIELD => $taxonomy,
            DGA_FIELD_KEY => 'slug',
            'terms' => $atts['term']
        );
    }
    
    // Setup query arguments
    $query_args = array(
        DGA_POST_TYPE_FIELD => $atts[DGA_POST_TYPE_FIELD],
        DGA_POSTS_PER_PAGE => $atts[DGA_POSTS_PER_PAGE],
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    // Add tax_query if we have term
    if (!empty($tax_query)) {
        $query_args['tax_query'] = $tax_query;
    }
    
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="dga-news-container" data-post-type="<?php echo esc_attr($atts[DGA_POST_TYPE_FIELD]); ?>" data-taxonomy="<?php echo esc_attr($taxonomy); ?>" data-term="<?php echo esc_attr($atts['term']); ?>" data-posts-per-page="<?php echo esc_attr($atts[DGA_POSTS_PER_PAGE]); ?>">
            <div class="dga-news-carousel">
                <?php $count = 0; while ($query->have_posts()) : $query->the_post(); $count++; ?>
                    <article class="dga-news-item <?php echo ($count === 1) ? 'dga-news-active' : ''; ?>">
                        <a href="<?php the_permalink(); ?>" class="dga-news-link">
                            <div class="dga-news-image">
                                <?php if (has_post_thumbnail()) : ?>
                                    <?php the_post_thumbnail('medium', array('class' => 'dga-news-thumbnail')); ?>
                                <?php else : ?>
                                    <div class="dga-news-no-image"></div>
                                <?php endif; ?>
                                <?php
                                    // Get all taxonomies for this post
                                    $post_taxonomies = get_object_taxonomies(get_post_type());
                                    $first_term = null;

                                    // Loop through taxonomies to find the first term
                                    foreach ($post_taxonomies as $taxonomy) {
                                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                                        if (!empty($terms) && !is_wp_error($terms)) {
                                            $first_term = $terms[0];
                                            break; // ใช้ term แรกที่เจอ
                                        }
                                    }

                                    // Display the term name if found
                                    if ($first_term) : ?>
                                        <span class="dga-news-badge"><?php echo esc_html($first_term->name); ?></span>
                                    <?php endif; ?>
                            </div>
                            <div class="dga-news-content">
                                <h3 class="dga-news-title"><?php the_title(); ?></h3>
                                <div class="dga-news-meta">
                                    <span class="dga-news-time"><?php echo human_time_diff(get_the_time('U'), current_time('timestamp')); ?> ที่แล้ว</span>
                                    <span class="dga-news-separator">•</span>
                                    <span class="dga-news-readmore">อ่านต่อ</span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>
        </div>
    <?php else: ?>
        <div class="dga-news-empty">ไม่พบโพสต์ที่เกี่ยวข้อง</div>
    <?php endif;
    
    wp_reset_postdata();
    
    return ob_get_clean();
}
add_shortcode('dga-news-postloop', 'dga_news_loops');

// Navigation shortcode
function dga_navigator($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'target' => '.dga-news-container', // CSS selector of the target carousel
    ), $atts);
    
    ob_start();
    ?>
    <div class="dga-news-navigator" data-target="<?php echo esc_attr($atts['target']); ?>">
        <button type=DGA_BUTTON_TYPE class="dga-nav-prev" aria-label="ก่อนหน้า">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
        </button>
        <button type=DGA_BUTTON_TYPE class="dga-nav-next" aria-label="ถัดไป">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
        </button>
    </div>
    <?php
    
    return ob_get_clean();
}
add_shortcode('dga-news-navigator', 'dga_navigator');

// AJAX function to load more posts
function dga_load_more_posts() {
    check_ajax_referer('dga-news-nonce', 'nonce');
    
    $post_type = isset($_POST[DGA_POST_TYPE_FIELD]) ? sanitize_text_field($_POST[DGA_POST_TYPE_FIELD]) : 'article';
    $taxonomy = isset($_POST[DGA_TAXONOMY_FIELD]) ? sanitize_text_field($_POST[DGA_TAXONOMY_FIELD]) : 'category';
    $term = isset($_POST['term']) ? sanitize_text_field($_POST['term']) : 'stdnews';
    $posts_per_page = isset($_POST[DGA_POSTS_PER_PAGE]) ? intval($_POST[DGA_POSTS_PER_PAGE]) : 8;
    $offset = isset($_POST['offset']) ? intval($_POST['offset']) : 0;
    
    // Build tax query if term is provided
    $tax_query = array();
    if (!empty($term)) {
        $tax_query[] = array(
            DGA_TAXONOMY_FIELD => $taxonomy,
            DGA_FIELD_KEY => 'slug',
            'terms' => $term
        );
    }
    
    // Setup query arguments
    $query_args = array(
        DGA_POST_TYPE_FIELD => $post_type,
        DGA_POSTS_PER_PAGE => $posts_per_page,
        'offset' => $offset,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC'
    );
    
    // Add tax_query if we have term
    if (!empty($tax_query)) {
        $query_args['tax_query'] = $tax_query;
    }
    
    $query = new WP_Query($query_args);
    $posts_html = '';
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            ob_start();
            ?>
            <article class="dga-news-item">
                <a href="<?php the_permalink(); ?>" class="dga-news-link">
                    <div class="dga-news-image">
                        <?php if (has_post_thumbnail()) : ?>
                            <?php the_post_thumbnail('medium', array('class' => 'dga-news-thumbnail')); ?>
                        <?php else : ?>
                            <div class="dga-news-no-image"></div>
                        <?php endif; ?>
                        <?php
                            // Get all taxonomies for this post
                            $post_taxonomies = get_object_taxonomies(get_post_type());
                            $first_term = null;

                            // Loop through taxonomies to find the first term
                            foreach ($post_taxonomies as $taxonomy) {
                                $terms = get_the_terms(get_the_ID(), $taxonomy);
                                if (!empty($terms) && !is_wp_error($terms)) {
                                    $first_term = $terms[0];
                                    break; // ใช้ term แรกที่เจอ
                                }
                            }

                            // Display the term name if found
                            if ($first_term) : ?>
                                <span class="dga-news-badge"><?php echo esc_html($first_term->name); ?></span>
                            <?php endif; ?>
                    </div>
                    <div class="dga-news-content">
                        <h3 class="dga-news-title"><?php the_title(); ?></h3>
                        <div class="dga-news-meta">
                            <span class="dga-news-time"><?php echo human_time_diff(get_the_time('U'), current_time('timestamp')); ?> ที่แล้ว</span>
                            <span class="dga-news-separator">•</span>
                            <span class="dga-news-readmore">อ่านต่อ</span>
                        </div>
                    </div>
                </a>
            </article>
            <?php
            $posts_html .= ob_get_clean();
        }
        
        wp_reset_postdata();
        
        wp_send_json_success(array(
            'posts' => $posts_html,
            'has_more' => $query->max_num_pages > ($offset / $posts_per_page) + 1
        ));
    } else {
        wp_send_json_error(array(DGA_MESSAGE_KEY => 'ไม่พบโพสต์เพิ่มเติม'));
    }
    
    wp_die();
}
add_action('wp_ajax_dga_load_more_posts', 'dga_load_more_posts');
add_action('wp_ajax_nopriv_dga_load_more_posts', 'dga_load_more_posts');



/**** ฟังก์ชั่น PDF PREVIEW *********/


class PDF_Viewer_Shortcode {
    
    private static $instance = null;
    private $assets_loaded = false;
    
    public static function get_instance() {
        return self::$instance ?: self::$instance = new self();
    }
    
    public function __construct() {
        add_shortcode('pdf_viewer', [$this, 'render_shortcode']);
        add_action(DGA_ENQUEUE_SCRIPTS_HOOK, [$this, 'conditional_enqueue']);
        add_action('elementor/frontend/after_enqueue_scripts', [$this, 'elementor_enqueue']);
    }
    
    /**
     * Render PDF viewer shortcode
     */
    public function render_shortcode($atts) {
        $atts = shortcode_atts([
            'url' => '',
            'width' => '100%',
            'height' => '600px',
            'class' => '',
            'download' => 'true',
            'fullscreen' => 'true'
        ], $atts, 'pdf_viewer');
        
        // Security: Sanitize inputs
        $url = sanitize_url($atts['url']);
        $width = sanitize_text_field($atts['width']);
        $height = sanitize_text_field($atts['height']);
        $class = sanitize_html_class($atts['class']);
        $download = $atts['download'] === 'true';
        $fullscreen = $atts['fullscreen'] === 'true';
        
        if (!$url) return '<p>PDF URL is required.</p>';
        
        // Validate URL format
        if (!filter_var($url, FILTER_VALIDATE_URL) && !$this->is_relative_path($url)) {
            return '<p>Invalid PDF URL provided.</p>';
        }
        
        $this->load_assets();
        
        $unique_id = 'pdf-viewer-' . wp_rand(1000, 9999);
        $wrapper_class = 'pdf-viewer-wrapper ' . $class;
        
        ob_start();
        ?>
        <div class="<?php echo esc_attr($wrapper_class); ?>" 
             data-pdf-url="<?php echo esc_url($url); ?>"
             data-width="<?php echo esc_attr($width); ?>"
             data-height="<?php echo esc_attr($height); ?>"
             data-download="<?php echo $download ? 'true' : 'false'; ?>"
             data-fullscreen="<?php echo $fullscreen ? 'true' : 'false'; ?>">
            
            <div id="<?php echo esc_attr($unique_id); ?>" class="pdf-viewer-container">
                <div class="pdf-loading">
                    <span>Loading PDF...</span>
                </div>
                
                <?php if ($fullscreen): ?>
                <div class="pdf-header">
                    <button class="pdf-fullscreen-btn" 
                            type=DGA_BUTTON_TYPE 
                            title="Toggle Fullscreen"
                            aria-label="Toggle fullscreen mode">
                        <span class="fullscreen-icon">⛶</span>
                        <span class="fullscreen-text">Fullscreen</span>
                    </button>
                </div>
                <?php endif; ?>
                
                <iframe class="pdf-iframe" 
                        src="<?php echo esc_url($this->get_viewer_url($url, $download)); ?>"
                        width="<?php echo esc_attr($width); ?>"
                        height="<?php echo esc_attr($height); ?>"
                        frameborder="0"
                        title="PDF Viewer"
                        allowfullscreen>
                    <p>Your browser doesn't support PDF viewing. 
                       <a href="<?php echo esc_url($url); ?>" target="_blank">Download PDF</a>
                    </p>
                </iframe>
                
                <?php if ($download): ?>
                <div class="pdf-controls">
                    <a href="<?php echo esc_url($url); ?>" 
                       class="pdf-download-btn" 
                       download 
                       target="_blank">
                        Download PDF
                    </a>
                </div>
                <?php endif; ?>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Generate viewer URL with fallback options
     */
    private function get_viewer_url($url, $download = true) {
        // For external URLs, use Google Docs viewer as fallback
        if (filter_var($url, FILTER_VALIDATE_URL)) {
            return "https://docs.google.com/viewer?url=" . urlencode($url) . "&embedded=true";
        }
        
        // For local files, serve directly
        return $url . ($download ? '' : '#toolbar=0');
    }
    
    /**
     * Check if path is relative
     */
    private function is_relative_path($path) {
        return strpos($path, '/') === 0 || strpos($path, './') === 0;
    }
    
    /**
     * Conditional asset loading
     */
    public function conditional_enqueue() {
        global $post;
        
        if (!is_admin() && $post && has_shortcode($post->post_content, 'pdf_viewer')) {
            $this->load_assets();
        }
    }
    
    /**
     * Elementor compatibility
     */
    public function elementor_enqueue() {
        if (class_exists('\Elementor\Plugin') && \Elementor\Plugin::$instance->editor->is_edit_mode()) {
            $this->load_assets();
        }
    }
    
    /**
     * Load CSS and JS assets
     */
    private function load_assets() {
        if ($this->assets_loaded) return;
        
        $version = get_theme_mod('cache_bust', DGA_VERSION_NUMBER);
        
        // Determine asset path (theme vs plugin)
        $css_url = get_stylesheet_directory_uri() . '/css/pdf-viewer.css';
        $js_url = get_stylesheet_directory_uri() . '/js/pdf-viewer.js';
        
        // Fallback to plugin directory if in plugin
        if (!file_exists(get_stylesheet_directory() . '/css/pdf-viewer.css')) {
            $css_url = plugin_dir_url(__FILE__) . 'assets/css/pdf-viewer.css';
            $js_url = plugin_dir_url(__FILE__) . 'assets/js/pdf-viewer.js';
        }
        
        wp_enqueue_style('pdf-viewer-css', $css_url, [], $version);
        wp_enqueue_script('pdf-viewer-js', $js_url, [DGA_JQUERY_HANDLE], $version, true);
        
        // Localize script
        wp_localize_script('pdf-viewer-js', 'pdfViewerConfig', [
            DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('pdf_viewer_nonce'),
            'loading_text' => __('Loading PDF...', 'textdomain'),
            'error_text' => __('Error loading PDF', 'textdomain')
        ]);
        
        $this->assets_loaded = true;
    }
}

// Initialize
PDF_Viewer_Shortcode::get_instance();



/***** ฟังก์ชั่นแสดงวันที่โพสแบบไทย และนับจำนวน (Enhanced with Admin Edit) *******/

// 1. เริ่ม Session เพื่อใช้ติดตามผู้เข้าชม
if (!function_exists('dga_start_session_zxk429')) {
    function dga_start_session_zxk429() {
        if (!session_id() && !headers_sent()) {
            session_start();
        }
    }
    add_action('init', 'dga_start_session_zxk429', 1);
}

// 2. ฟังก์ชันสำหรับ Enqueue CSS และ JavaScript
if (!function_exists('dga_enqueue_scripts_zxk429')) {
    function dga_enqueue_scripts_zxk429() {
        // ลงทะเบียน CSS
        wp_register_style(
            'dga-style-handle-zxk429',
            get_stylesheet_directory_uri() . '/css/dga-thai-date-zxk429.css',
            [],
            '1.2.0'
        );

        // ลงทะเบียน JavaScript
        wp_register_script(
            'dga-script-handle-zxk429',
            get_stylesheet_directory_uri() . '/js/dga-thai-date-zxk429.js',
            [], 
            '1.2.0',
            true
        );

        // ส่งข้อมูลจาก PHP ไปยัง JavaScript
        wp_localize_script(
            'dga-script-handle-zxk429',
            'dga_ajax_obj',
            [
                DGA_AJAX_URL_KEY => admin_url(DGA_ADMIN_AJAX_URL),
                'nonce'    => wp_create_nonce('dga_view_count_nonce_zxk429'),
                'edit_nonce' => wp_create_nonce('dga_edit_count_nonce_zxk429'),
                'is_admin' => current_user_can(DGA_ADMIN_ROLE) ? 'true' : 'false',
                'user_logged_in' => is_user_logged_in() ? 'true' : 'false',
                'strings' => [
                    'edit_hint' => __('คลิกเพื่อแก้ไขจำนวน', DGA_TEXT_DOMAIN),
                    'save_text' => __('บันทึก', DGA_TEXT_DOMAIN),
                    'cancel_text' => __('ยกเลิก', DGA_TEXT_DOMAIN),
                    'invalid_number' => __('กรุณาใส่ตัวเลขที่ถูกต้อง', DGA_TEXT_DOMAIN),
                    'save_success' => __('บันทึกสำเร็จ', DGA_TEXT_DOMAIN),
                    'save_error' => __('เกิดข้อผิดพลาดในการบันทึก', DGA_TEXT_DOMAIN)
                ]
            ]
        );
    }
    add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_enqueue_scripts_zxk429');
}

// 3. ฟังก์ชันหลักสำหรับ Shortcode [dga_thai_date]
if (!function_exists('dga_thai_date_zxk429')) {
    function dga_thai_date_zxk429($atts) {
        // ตรวจสอบว่าอยู่ในหน้า single post หรือไม่
        if (!is_single()) {
            return '';
        }

        // Enqueue script และ style เฉพาะเมื่อมีการใช้ shortcode นี้
        wp_enqueue_style('dga-style-handle-zxk429');
        wp_enqueue_script('dga-script-handle-zxk429');

        $post_id = get_the_ID();

        // --- ส่วนจัดการวันที่ ---
        $day   = get_the_date('j', $post_id);
        $month = get_the_date('F', $post_id);
        $year  = (int)get_the_date('Y', $post_id) + 543;

        // ฟังก์ชันย่อยสำหรับแปลงเดือนอังกฤษเป็นไทย
        $months_en = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        $months_th = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'];
        $thai_month = str_replace($months_en, $months_th, $month);
        $formatted_date = sprintf('%s / %s / %d', $day, $thai_month, $year);

        // --- ส่วนจัดการยอดวิว ---
        $view_count = (int)get_post_meta($post_id, '_post_view_count_zxk429', true);
        $is_admin = current_user_can(DGA_ADMIN_ROLE);

        // สร้าง HTML Output
        ob_start();
        ?>
        <div class="dga-container-zxk429" data-postid="<?php echo esc_attr($post_id); ?>" role="group" aria-label="<?php _e('ข้อมูลโพสต์', DGA_TEXT_DOMAIN); ?>">
            <span class="dga-date-zxk429" aria-label="<?php _e('วันที่เผยแพร่', DGA_TEXT_DOMAIN); ?>">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar3" viewBox="0 0 16 16" aria-hidden="true">
                    <path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/>
                    <path d="M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                </svg>
                <?php echo esc_html($formatted_date); ?>
            </span>
            <span class="dga-views-zxk429" aria-label="<?php _e('จำนวนผู้เข้าชม', DGA_TEXT_DOMAIN); ?>">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16" aria-hidden="true">
                    <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
                    <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
                </svg>
                <span class="dga-view-count-zxk429 <?php echo $is_admin ? 'dga-editable-zxk429' : ''; ?>" 
                      aria-live="polite" 
                      data-original-count="<?php echo esc_attr($view_count); ?>"
                      data-is-admin="<?php echo $is_admin ? 'true' : 'false'; ?>"
                      <?php if ($is_admin): ?>
                      title="<?php _e('คลิกเพื่อแก้ไขจำนวน', DGA_TEXT_DOMAIN); ?>"
                      tabindex="0"
                      role=DGA_BUTTON_TYPE
                      aria-label="<?php _e('จำนวนผู้เข้าชม สามารถแก้ไขได้', DGA_TEXT_DOMAIN); ?>"
                      <?php endif; ?>>
                    <?php echo esc_html(number_format($view_count)); ?>
                </span>
                <span class="dga-view-text-zxk429"><?php _e(' ครั้ง', DGA_TEXT_DOMAIN); ?></span>
            </span>
            <?php if ($is_admin): ?>
            <small class="dga-admin-indicator-zxk429" style="color: #666; font-size: 0.8em; margin-left: 10px;">
                <?php _e('[Admin Mode]', DGA_TEXT_DOMAIN); ?>
            </small>
            <?php endif; ?>
        </div>
        <?php
        return ob_get_clean();
    }
    add_shortcode('dga_thai_date', 'dga_thai_date_zxk429');
}

// 4. ฟังก์ชันจัดการ AJAX request เพื่อเพิ่มยอดวิว
if (!function_exists('dga_increment_post_view_zxk429')) {
    function dga_increment_post_view_zxk429() {
        // ตรวจสอบ Nonce เพื่อความปลอดภัย
        check_ajax_referer('dga_view_count_nonce_zxk429', 'nonce');

        // ตรวจสอบและ Sanitize post ID
        if (!isset($_POST[DGA_POST_ID_FIELD])) {
            wp_send_json_error(__('Missing post ID.', DGA_TEXT_DOMAIN));
        }
        $post_id = absint($_POST[DGA_POST_ID_FIELD]);

        // ตรวจสอบว่าเคยนับวิวสำหรับโพสต์นี้ใน session นี้แล้วหรือยัง
        $session_key = 'viewed_post_' . $post_id;
        
        if (!isset($_SESSION[$session_key])) {
            $count = (int)get_post_meta($post_id, '_post_view_count_zxk429', true);
            $new_count = $count + 1;
            update_post_meta($post_id, '_post_view_count_zxk429', $new_count);

            // บันทึกไว้ใน session ว่านับวิวโพสต์นี้แล้ว
            $_SESSION[$session_key] = true;

            // ส่งค่าใหม่กลับไป
            wp_send_json_success([
                'new_count' => number_format($new_count),
                'raw_count' => $new_count
            ]);
        } else {
            // ถ้าเคยนับแล้ว ก็ไม่ต้องทำอะไร ส่งค่าเดิมกลับไป
            $current_count = (int)get_post_meta($post_id, '_post_view_count_zxk429', true);
            wp_send_json_success([
                'new_count' => number_format($current_count),
                'raw_count' => $current_count,
                'already_counted' => true
            ]);
        }
    }
    add_action('wp_ajax_dga_increment_view', 'dga_increment_post_view_zxk429');
    add_action('wp_ajax_nopriv_dga_increment_view', 'dga_increment_post_view_zxk429');
}

// 5. ฟังก์ชันจัดการ AJAX request เพื่อแก้ไขยอดวิว (สำหรับ Admin เท่านั้น)
if (!function_exists('dga_edit_post_view_zxk429')) {
    function dga_edit_post_view_zxk429() {
        // ตรวจสอบสิทธิ์ Administrator
        if (!current_user_can(DGA_ADMIN_ROLE)) {
            wp_send_json_error([
                DGA_MESSAGE_KEY => __('Access denied. Admin privileges required.', DGA_TEXT_DOMAIN),
                'is_admin' => false
            ]);
        }

        // ตรวจสอบ Nonce เพื่อความปลอดภัย
        if (!check_ajax_referer('dga_edit_count_nonce_zxk429', 'edit_nonce', false)) {
            wp_send_json_error(__('Security check failed.', DGA_TEXT_DOMAIN));
        }

        // ตรวจสอบและ Sanitize ข้อมูล
        if (!isset($_POST[DGA_POST_ID_FIELD]) || !isset($_POST['new_count'])) {
            wp_send_json_error(__('Missing required data.', DGA_TEXT_DOMAIN));
        }

        $post_id = absint($_POST[DGA_POST_ID_FIELD]);
        $new_count = absint($_POST['new_count']);

        // ตรวจสอบว่า post มีอยู่จริง
        if (!get_post($post_id)) {
            wp_send_json_error(__('Post not found.', DGA_TEXT_DOMAIN));
        }

        // อัพเดทจำนวนวิว
        update_post_meta($post_id, '_post_view_count_zxk429', $new_count);

        // ล้าง session ของ post นี้เพื่อให้สามารถนับต่อได้
        $session_key = 'viewed_post_' . $post_id;
        if (isset($_SESSION[$session_key])) {
            unset($_SESSION[$session_key]);
        }

        // ส่งค่าใหม่กลับไป
        wp_send_json_success([
            'new_count' => number_format($new_count),
            'raw_count' => $new_count,
            DGA_MESSAGE_KEY => __('จำนวนผู้เข้าชมถูกอัพเดทเรียบร้อยแล้ว', DGA_TEXT_DOMAIN)
        ]);
    }
    add_action('wp_ajax_dga_edit_view_count', 'dga_edit_post_view_zxk429');
}

// 6. เพิ่มฟังก์ชันสำหรับตรวจสอบสถานะ Admin (สำหรับ debug)
if (!function_exists('dga_check_admin_status_zxk429')) {
    function dga_check_admin_status_zxk429() {
        check_ajax_referer('dga_view_count_nonce_zxk429', 'nonce');
        
        wp_send_json_success([
            'is_admin' => current_user_can(DGA_ADMIN_ROLE),
            'is_logged_in' => is_user_logged_in(),
            'user_id' => get_current_user_id(),
            'user_roles' => wp_get_current_user()->roles
        ]);
    }
    add_action('wp_ajax_dga_check_admin_status', 'dga_check_admin_status_zxk429');
    add_action('wp_ajax_nopriv_dga_check_admin_status', 'dga_check_admin_status_zxk429');
}


/***** ฟังก์ชั่นแสดง Post List ******/


// Enqueue scripts and styles
function dga_post_list_enqueue_assets_xy34() {
    wp_enqueue_script(
        'dga-post-list-js-xy34',
        get_stylesheet_directory_uri() . '/js/dga-post-list2.js',
        array(),
        DGA_VERSION_NUMBER,
        true
    );
    
    wp_enqueue_style(
        'dga-post-list-css-xy34',
        get_stylesheet_directory_uri() . '/css/dga-post-list2.css',
        array(),
        DGA_VERSION_NUMBER
    );
    
    // Localize script for AJAX
    wp_localize_script('dga-post-list-js-xy34', 'dgaPostList', array(
        'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('dga_post_list_nonce'),
        'loading_text' => __('กำลังโหลดข้อมูล...', DGA_TEXT_DOMAIN),
        'error_text' => __('ไม่สามารถโหลดข้อมูลได้ กรุณาลองใหม่อีกครั้ง', DGA_TEXT_DOMAIN),
        'no_posts_text' => __('ไม่พบรายการโพส', DGA_TEXT_DOMAIN)
    ));
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_post_list_enqueue_assets_xy34');

// Register shortcode
function dga_post_list_shortcode_xy34($atts) {
    $atts = shortcode_atts(array(
        DGA_POST_TYPE_FIELD => 'post',
        DGA_POSTS_PER_PAGE => 4,
        DGA_ORDERBY_FIELD_VALUE => 'date',
        DGA_ORDER_FIELD => 'DESC',
        'view_type' => 'list', // 'list' or 'card'
        'offset' => 0
    ), $atts, 'dga_post_list');
    
    // Sanitize attributes
    $post_type = sanitize_text_field($atts[DGA_POST_TYPE_FIELD]);
    $posts_per_page = absint($atts[DGA_POSTS_PER_PAGE]);
    $orderby = sanitize_text_field($atts[DGA_ORDERBY_FIELD_VALUE]);
    $order = sanitize_text_field($atts[DGA_ORDER_FIELD]);
    $view_type = in_array($atts['view_type'], ['list', 'card']) ? sanitize_text_field($atts['view_type']) : 'list';
    $offset = absint($atts['offset']);
    
    // Generate unique ID for this instance
    $instance_id = 'dga-post-list-' . uniqid();
    
    ob_start();
    ?>
    <div class="dga-post-list-container-xy34 dga-view-<?php echo esc_attr($view_type); ?>-xy34" 
         id="<?php echo esc_attr($instance_id); ?>"
         data-post-type="<?php echo esc_attr($post_type); ?>"
         data-posts-per-page="<?php echo esc_attr($posts_per_page); ?>"
         data-orderby="<?php echo esc_attr($orderby); ?>"
         data-order="<?php echo esc_attr($order); ?>"
         data-view-type="<?php echo esc_attr($view_type); ?>"
         data-offset="<?php echo esc_attr($offset); ?>"
         role="region"
         aria-label="<?php esc_attr_e('รายการโพส', DGA_TEXT_DOMAIN); ?>">
        
        <!-- Screen reader announcement area -->
        <div class="sr-only-xy34" aria-live="polite" aria-atomic="true" id="<?php echo esc_attr($instance_id); ?>-status"></div>
        
        <!-- View Type Indicator (hidden, for styling purposes) -->
        <div class="dga-view-indicator-xy34" data-view="<?php echo esc_attr($view_type); ?>" style="display: none;"></div>
        
        <!-- Main content area -->
        <div class="dga-post-grid-xy34" 
             role="list" 
             aria-label="<?php esc_attr_e('รายการโพส', DGA_TEXT_DOMAIN); ?>">
            
            <!-- Initial skeleton loading -->
            <?php for ($i = 0; $i < $posts_per_page; $i++) : ?>
            <div class="dga-post-card-skeleton-xy34" role="listitem" aria-hidden="true">
                <div class="dga-skeleton-image-xy34"></div>
                <div class="dga-skeleton-content-xy34">
                    <div class="dga-skeleton-title-xy34"></div>
                    <div class="dga-skeleton-meta-xy34"></div>
                </div>
            </div>
            <?php endfor; ?>
        </div>
        
        <!-- Error message container -->
        <div class="dga-error-message-xy34" role="alert" style="display: none;"></div>
        
        <!-- Loading indicator for screen readers -->
        <div class="dga-loading-indicator-xy34 sr-only-xy34" aria-live="polite">
            <?php _e('กำลังโหลดข้อมูล...', DGA_TEXT_DOMAIN); ?>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('dga_post_list', 'dga_post_list_shortcode_xy34');

// AJAX handler for loading posts
function dga_load_posts_ajax_xy34() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_post_list_nonce')) {
        wp_die(__('ข้อมูลไม่ถูกต้อง', DGA_TEXT_DOMAIN));
    }
    
    // Sanitize input
    $post_type = sanitize_text_field($_POST[DGA_POST_TYPE_FIELD]);
    $posts_per_page = absint($_POST[DGA_POSTS_PER_PAGE]);
    $orderby = sanitize_text_field($_POST[DGA_ORDERBY_FIELD_VALUE]);
    $order = sanitize_text_field($_POST[DGA_ORDER_FIELD]);
    $view_type = sanitize_text_field($_POST['view_type']);
    $offset = absint($_POST['offset']);
    
    // Query posts
    $args = array(
        DGA_POST_TYPE_FIELD => $post_type,
        DGA_POSTS_PER_PAGE => $posts_per_page,
        DGA_ORDERBY_FIELD_VALUE => $orderby,
        DGA_ORDER_FIELD => $order,
        DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
        'offset' => $offset,
        'meta_query' => array(
            'relation' => 'OR',
            array(
                'key' => '_thumbnail_id',
                'compare' => 'EXISTS'
            ),
            array(
                'key' => '_thumbnail_id',
                'compare' => 'NOT EXISTS'
            )
        )
    );
    
    $posts = get_posts($args);
    $response = array();
    
    if ($posts) {
        foreach ($posts as $post) {
            setup_postdata($post);
            
            $featured_image = '';
            if (has_post_thumbnail($post->ID)) {
                $featured_image = get_the_post_thumbnail_url($post->ID, $view_type === 'card' ? 'medium' : 'thumbnail');
            }
            
            $response[] = array(
                'id' => $post->ID,
                DGA_TITLE_FIELD => get_the_title($post->ID),
                'permalink' => get_permalink($post->ID),
                'featured_image' => $featured_image,
                'excerpt' => get_the_excerpt($post->ID),
                'date' => get_the_date('', $post->ID),
                'author' => get_the_author_meta('display_name', $post->post_author),
                'categories' => wp_get_post_categories($post->ID, array(DGA_FIELDS_PARAMETER => 'names'))
            );
        }
        wp_reset_postdata();
        
        wp_send_json_success($response);
    } else {
        wp_send_json_error(__('ไม่พบรายการโพส', DGA_TEXT_DOMAIN));
    }
}
add_action('wp_ajax_dga_load_posts', 'dga_load_posts_ajax_xy34');
add_action('wp_ajax_nopriv_dga_load_posts', 'dga_load_posts_ajax_xy34');




/****** ฟังก์ชั่นเพิ่ม Field ลงใน ACF GROUP พร้อม CKAN Harvest รองรับ Multiple API Types *****/

// Register ACF Modern Manager assets
function register_acf_modern_manager_mfs582() {
    wp_register_script(
        'acf-modern-manager-js-mfs582',
        get_stylesheet_directory_uri() . '/js/acf-modern-manager-mfs582.js',
        [],
        filemtime(get_stylesheet_directory() . '/js/acf-modern-manager-mfs582.js'),
        true
    );
    
    wp_register_style(
        'acf-modern-manager-css-mfs582',
        get_stylesheet_directory_uri() . '/css/acf-modern-manager-mfs582.css',
        [],
        filemtime(get_stylesheet_directory() . '/css/acf-modern-manager-mfs582.css')
    );

    // Register CKAN Harvest assets
    wp_register_script(
        'ckan-harvest-js-khv739',
        get_stylesheet_directory_uri() . '/js/ckan-harvest-khv739.js',
        ['acf-modern-manager-js-mfs582'],
        filemtime(get_stylesheet_directory() . '/js/ckan-harvest-khv739.js'),
        true
    );
    
    wp_register_style(
        'ckan-harvest-css-khv739',
        get_stylesheet_directory_uri() . '/css/ckan-harvest-khv739.css',
        ['acf-modern-manager-css-mfs582'],
        filemtime(get_stylesheet_directory() . '/css/ckan-harvest-khv739.css')
    );

    add_shortcode('manage_acf_fields_modern', 'render_acf_modern_ui_mfs582');
}
add_action('init', 'register_acf_modern_manager_mfs582');

/**
 * Render the Modern ACF Manager UI with CKAN Harvest
 */
function render_acf_modern_ui_mfs582() {
    // Configuration
    $target_group_key = 'group_67d8242433935';
    
    // Security check
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        return '<div class="acf-access-denied-mfs582">
            <svg viewBox="0 0 24 24" width="36" height="36">
                <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
            </svg>
            <p>' . __('คุณไม่มีสิทธิ์ใช้งานเครื่องมือนี้', DGA_TEXT_DOMAIN) . '</p>
        </div>';
    }

    // Enqueue all assets
    wp_enqueue_script('acf-modern-manager-js-mfs582');
    wp_enqueue_style('acf-modern-manager-css-mfs582');
    wp_enqueue_script('ckan-harvest-js-khv739');
    wp_enqueue_style('ckan-harvest-css-khv739');

    // Localize ACF script
    wp_localize_script('acf-modern-manager-js-mfs582', 'acfModernData', [
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('acf_modern_nonce_mfs582'),
        'groupKey' => $target_group_key,
        'strings' => [
            'addField' => __('เพิ่ม Field ใหม่', DGA_TEXT_DOMAIN),
            'editField' => __('แก้ไข Field', DGA_TEXT_DOMAIN),
            'fieldLabel' => __('ชื่อ Field', DGA_TEXT_DOMAIN),
            'fieldName' => __('Metadata Name', DGA_TEXT_DOMAIN),
            'fieldNameHelp' => __('ใช้ตัวอักษรพิมพ์เล็ก, ตัวเลข และ underscore เท่านั้น', DGA_TEXT_DOMAIN),
            'save' => __('บันทึก', DGA_TEXT_DOMAIN),
            'cancel' => __('ยกเลิก', DGA_TEXT_DOMAIN),
            'delete' => __('ลบ', DGA_TEXT_DOMAIN),
            'confirmDelete' => __('คุณแน่ใจหรือไม่ว่าต้องการลบ Field นี้?', DGA_TEXT_DOMAIN),
            'deleteWarning' => __('การกระทำนี้ไม่สามารถย้อนกลับได้', DGA_TEXT_DOMAIN),
            'nameChangeWarning' => __('คำเตือน: การเปลี่ยน Metadata Name อาจทำให้ข้อมูลเดิมหายไป', DGA_TEXT_DOMAIN),
            'noFields' => __('ยังไม่มี Fields ในกลุ่มนี้', DGA_TEXT_DOMAIN),
            DGA_SUCCESS_STATUS => __('ดำเนินการสำเร็จ', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'saving' => __('กำลังบันทึก...', DGA_TEXT_DOMAIN),
            'deleting' => __('กำลังลบ...', DGA_TEXT_DOMAIN),
            'searchPlaceholder' => __('ค้นหา field...', DGA_TEXT_DOMAIN),
            'fieldType' => __('ประเภท', DGA_TEXT_DOMAIN),
            'textField' => __('Text Field', DGA_TEXT_DOMAIN)
        ]
    ]);

    // Localize CKAN Harvest script
    wp_localize_script('ckan-harvest-js-khv739', 'ckanHarvestData', [
        'ajaxUrl' => admin_url(DGA_ADMIN_AJAX_URL),
        DGA_NONCE_KEY => wp_create_nonce('ckan_harvest_nonce_khv739'),
        'endpoints' => get_option('ckan_harvest_endpoints_khv739', []),
        'lastRun' => get_option('ckan_harvest_last_run_khv739', ''),
        'totalDatasets' => get_option('ckan_harvest_total_datasets_khv739', 0),
        'strings' => [
            DGA_TITLE_FIELD => __('CKAN Data Harvester', DGA_TEXT_DOMAIN),
            'addEndpoint' => __('เพิ่ม Endpoint', DGA_TEXT_DOMAIN),
            'endpointUrl' => __('API Endpoint URL', DGA_TEXT_DOMAIN),
            'apiType' => __('ประเภท API', DGA_TEXT_DOMAIN),
            'apiTypeCkan' => __('CKAN Standard API', DGA_TEXT_DOMAIN),
            'apiTypeCustom' => __('Custom REST API', DGA_TEXT_DOMAIN),
            'apiTypeMofGov' => __('MOF DataServices API', DGA_TEXT_DOMAIN),
            'dataPath' => __('Data Path (JSON)', DGA_TEXT_DOMAIN),
            'dataPathHelp' => __('ระบุ path ไปยังข้อมูล เช่น data.results หรือ result', DGA_TEXT_DOMAIN),
            'updateFrequency' => __('Update Frequency', DGA_TEXT_DOMAIN),
            'fieldMapping' => __('Field Mapping', DGA_TEXT_DOMAIN),
            'runNow' => __('Run Harvester Now', DGA_TEXT_DOMAIN),
            'lastRun' => __('Last Run', DGA_TEXT_DOMAIN),
            'totalDatasets' => __('Total Datasets', DGA_TEXT_DOMAIN),
            'autoMap' => __('Auto-Map Fields', DGA_TEXT_DOMAIN),
            'detectStructure' => __('ตรวจจับโครงสร้าง', DGA_TEXT_DOMAIN),
            'save' => __('บันทึก', DGA_TEXT_DOMAIN),
            'delete' => __('ลบ', DGA_TEXT_DOMAIN),
            'harvesting' => __('กำลังดึงข้อมูล...', DGA_TEXT_DOMAIN),
            DGA_SUCCESS_STATUS => __('ดึงข้อมูลสำเร็จ', DGA_TEXT_DOMAIN),
            DGA_ERROR_STATUS => __(DGA_ERROR_MESSAGE_TH, DGA_TEXT_DOMAIN),
            'confirmDelete' => __('ยืนยันการลบ Endpoint นี้?', DGA_TEXT_DOMAIN),
            'noEndpoints' => __('ยังไม่มี Endpoints ที่กำหนด', DGA_TEXT_DOMAIN),
            'hourly' => __('ทุกชั่วโมง', DGA_TEXT_DOMAIN),
            'twiceDaily' => __('วันละ 2 ครั้ง', DGA_TEXT_DOMAIN),
            'daily' => __('ทุกวัน', DGA_TEXT_DOMAIN),
            'weekly' => __('ทุกสัปดาห์', DGA_TEXT_DOMAIN),
            'monthly' => __('ทุกเดือน', DGA_TEXT_DOMAIN),
            'never' => __('ไม่มี', DGA_TEXT_DOMAIN),
            DGA_STATUS_FIELD => __('สถานะ', DGA_TEXT_DOMAIN),
            'active' => __('Active', DGA_TEXT_DOMAIN),
            'inactive' => __('Inactive', DGA_TEXT_DOMAIN),
            'testConnection' => __('ทดสอบการเชื่อมต่อ', DGA_TEXT_DOMAIN),
            'mappingHelp' => __('จับคู่ fields จาก API กับ ACF fields', DGA_TEXT_DOMAIN),
            'uniqueField' => __('Unique Identifier Field', DGA_TEXT_DOMAIN),
            'uniqueFieldHelp' => __('ฟิลด์ที่ใช้ระบุความเป็นเอกลักษณ์ของข้อมูล', DGA_TEXT_DOMAIN),
            'titleField' => __('Title Field', DGA_TEXT_DOMAIN),
            'titleFieldHelp' => __('ฟิลด์ที่จะใช้เป็นหัวข้อโพส', DGA_TEXT_DOMAIN),
            'contentField' => __('Content Field', DGA_TEXT_DOMAIN),
            'contentFieldHelp' => __('ฟิลด์ที่จะใช้เป็นเนื้อหาโพส', DGA_TEXT_DOMAIN)
        ]
    ]);

    // Get field group and fields
    $field_group = acf_get_field_group($target_group_key);
    $fields = acf_get_fields($field_group);
    
    ob_start();
    ?>
    
    <div class="acf-modern-wrapper-mfs582">
        <!-- Header -->
        <div class="acf-header-mfs582">
            <div class="acf-header-content-mfs582">
                <h1 class="acf-title-mfs582">
                    <svg class="acf-icon-mfs582" viewBox="0 0 24 24" width="20" height="20">
                        <path fill="currentColor" d="M22 11v-1l-8-7-7 6V3H5v4L2 10v1h2v9h7v-5h4v5h7v-9h2zm-10-3a2 2 0 012 2 2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2z"/>
                    </svg>
                    <?php echo esc_html(sprintf(__('จัดการ %s Fields', DGA_TEXT_DOMAIN), $field_group[DGA_TITLE_FIELD] ?? 'ACF')); ?>
                </h1>
                <div class="acf-stats-mfs582">
                    <div class="acf-stat-item-mfs582">
                        <span class="acf-stat-number-mfs582"><?php echo count($fields); ?></span>
                        <span class="acf-stat-label-mfs582"><?php _e('Fields', DGA_TEXT_DOMAIN); ?></span>
                    </div>
                    <button class="acf-btn-primary-mfs582" id="add-field-btn">
                        <svg viewBox="0 0 24 24" width="16" height="16">
                            <path fill="currentColor" d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        <?php _e('เพิ่ม Field', DGA_TEXT_DOMAIN); ?>
                    </button>
                    <button class="acf-btn-primary-mfs582 ckan-harvest-btn-khv739" id="ckan-harvest-btn">
                        <svg viewBox="0 0 24 24" width="16" height="16">
                            <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                        <?php _e('CKAN Harvest', DGA_TEXT_DOMAIN); ?>
                    </button>
                </div>
            </div>
        </div>

        <!-- Search Bar -->
        <div class="acf-search-bar-mfs582">
            <svg class="acf-search-icon-mfs582" viewBox="0 0 24 24" width="16" height="16">
                <path fill="currentColor" d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
            </svg>
            <input type="text" class="acf-search-input-mfs582" placeholder="<?php echo esc_attr(__('ค้นหา field...', DGA_TEXT_DOMAIN)); ?>">
        </div>

        <!-- Toast Container -->
        <div class="acf-toast-container-mfs582" id="acf-toast-container"></div>

        <!-- Fields Grid -->
        <div class="acf-fields-grid-mfs582">
            <?php if (!empty($fields)) : ?>
                <?php foreach ($fields as $field) : ?>
                    <div class="acf-field-card-mfs582" data-field-key="<?php echo esc_attr($field['key']); ?>">
                        <div class="acf-card-header-mfs582">
                            <div class="acf-field-title-mfs582">
                                <span class="acf-field-label-mfs582"><?php echo esc_html($field[DGA_LABEL_FIELD]); ?></span>
                                <span class="acf-field-type-badge-mfs582"><?php echo esc_html($field['type']); ?></span>
                            </div>
                            <div class="acf-field-actions-mfs582">
                                <button class="acf-btn-icon-mfs582 acf-btn-edit-mfs582"
                                        data-key="<?php echo esc_attr($field['key']); ?>"
                                        data-label="<?php echo esc_attr($field[DGA_LABEL_FIELD]); ?>"
                                        data-name="<?php echo esc_attr($field['name']); ?>"
                                        title="<?php _e('แก้ไข', DGA_TEXT_DOMAIN); ?>">
                                    <svg viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                                    </svg>
                                </button>
                                <button class="acf-btn-icon-mfs582 acf-btn-delete-mfs582"
                                        data-key="<?php echo esc_attr($field['key']); ?>"
                                        data-label="<?php echo esc_attr($field[DGA_LABEL_FIELD]); ?>"
                                        title="<?php _e('ลบ', DGA_TEXT_DOMAIN); ?>">
                                    <svg viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="acf-card-body-mfs582">
                            <div class="acf-field-info-mfs582">
                                <div class="acf-info-row-mfs582">
                                    <span class="acf-info-label-mfs582"><?php _e('Name:', DGA_TEXT_DOMAIN); ?></span>
                                    <span class="acf-info-value-mfs582 acf-field-name-mfs582"><?php echo esc_html($field['name']); ?></span>
                                </div>
                                <div class="acf-info-row-mfs582">
                                    <span class="acf-info-label-mfs582"><?php _e('Key:', DGA_TEXT_DOMAIN); ?></span>
                                    <span class="acf-info-value-mfs582 acf-field-key-text-mfs582"><?php echo esc_html($field['key']); ?></span>
                                </div>
                                <?php if (!empty($field['instructions'])) : ?>
                                <div class="acf-info-row-mfs582">
                                    <span class="acf-info-label-mfs582"><?php _e('Instructions:', DGA_TEXT_DOMAIN); ?></span>
                                    <span class="acf-info-value-mfs582"><?php echo esc_html($field['instructions']); ?></span>
                                </div>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                <?php endforeach; ?>
            <?php else : ?>
                <div class="acf-empty-state-mfs582">
                    <svg viewBox="0 0 24 24" width="48" height="48">
                        <path fill="currentColor" d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 14H7v-2h5v2zm5-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                    <p><?php _e('ยังไม่มี Fields ในกลุ่มนี้', DGA_TEXT_DOMAIN); ?></p>
                    <button class="acf-btn-primary-mfs582" id="add-first-field-btn">
                        <svg viewBox="0 0 24 24" width="16" height="16">
                            <path fill="currentColor" d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        <?php _e('เพิ่ม Field แรก', DGA_TEXT_DOMAIN); ?>
                    </button>
                </div>
            <?php endif; ?>
        </div>

        <!-- Modal Template -->
        <div class="acf-modal-mfs582" id="acf-field-modal">
            <div class="acf-modal-backdrop-mfs582"></div>
            <div class="acf-modal-content-mfs582">
                <div class="acf-modal-header-mfs582">
                    <h3 class="acf-modal-title-mfs582"></h3>
                    <button class="acf-modal-close-mfs582">
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                        </svg>
                    </button>
                </div>
                <div class="acf-modal-body-mfs582">
                    <form id="acf-field-form-mfs582">
                        <input type="hidden" id="field-key-mfs582" name="field_key">
                        
                        <div class="acf-form-group-mfs582">
                            <label class="acf-label-mfs582"><?php _e('ชื่อ Field', DGA_TEXT_DOMAIN); ?></label>
                            <input type="text" 
                                   class="acf-input-mfs582" 
                                   id="field-label-mfs582" 
                                   name="field_label" 
                                   required>
                        </div>
                        
                        <div class="acf-form-group-mfs582">
                            <label class="acf-label-mfs582"><?php _e('Metadata Name', DGA_TEXT_DOMAIN); ?></label>
                            <input type="text" 
                                   class="acf-input-mfs582" 
                                   id="field-name-mfs582" 
                                   name="field_name" 
                                   pattern="[a-z0-9_]+" 
                                   required>
                            <small class="acf-help-text-mfs582"><?php _e('ใช้ตัวอักษรพิมพ์เล็ก, ตัวเลข และ underscore เท่านั้น', DGA_TEXT_DOMAIN); ?></small>
                        </div>
                    </form>
                </div>
                <div class="acf-modal-footer-mfs582">
                    <button class="acf-btn-mfs582 acf-btn-secondary-mfs582" id="modal-cancel-btn">
                        <?php _e('ยกเลิก', DGA_TEXT_DOMAIN); ?>
                    </button>
                    <button class="acf-btn-mfs582 acf-btn-primary-mfs582" id="modal-save-btn">
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/>
                        </svg>
                        <?php _e('บันทึก', DGA_TEXT_DOMAIN); ?>
                    </button>
                </div>
            </div>
        </div>

        <!-- CKAN Harvest Modal -->
        <div class="ckan-modal-khv739" id="ckan-harvest-modal">
            <div class="ckan-modal-backdrop-khv739"></div>
            <div class="ckan-modal-content-khv739">
                <div class="ckan-modal-header-khv739">
                    <h2 class="ckan-modal-title-khv739">
                        <svg viewBox="0 0 24 24" width="20" height="20">
                            <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                        <?php _e('CKAN Data Harvester', DGA_TEXT_DOMAIN); ?>
                    </h2>
                    <button class="ckan-modal-close-khv739" id="ckan-modal-close">
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                        </svg>
                    </button>
                </div>
                
                <div class="ckan-modal-body-khv739">
                    <!-- Stats Cards -->
                    <div class="ckan-stats-grid-khv739">
                        <div class="ckan-stat-card-khv739">
                            <div class="ckan-stat-icon-khv739">
                                <svg viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M13 2.05v3.03c3.39.49 6 3.39 6 6.92 0 .9-.18 1.75-.48 2.54l2.6 1.53c.56-1.24.88-2.62.88-4.07 0-5.18-3.95-9.45-9-9.95zM12 19c-3.87 0-7-3.13-7-7 0-3.53 2.61-6.43 6-6.92V2.05c-5.06.5-9 4.76-9 9.95 0 5.52 4.47 10 9.99 10 3.31 0 6.24-1.61 8.06-4.09l-2.6-1.53C16.17 17.98 14.21 19 12 19z"/>
                                </svg>
                            </div>
                            <div class="ckan-stat-info-khv739">
                                <div class="ckan-stat-label-khv739"><?php _e('Last Run', DGA_TEXT_DOMAIN); ?></div>
                                <div class="ckan-stat-value-khv739" id="ckan-last-run">-</div>
                            </div>
                        </div>
                        
                        <div class="ckan-stat-card-khv739">
                            <div class="ckan-stat-icon-khv739">
                                <svg viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
                                </svg>
                            </div>
                            <div class="ckan-stat-info-khv739">
                                <div class="ckan-stat-label-khv739"><?php _e('Total Datasets', DGA_TEXT_DOMAIN); ?></div>
                                <div class="ckan-stat-value-khv739" id="ckan-total-datasets">0</div>
                            </div>
                        </div>
                        
                        <div class="ckan-stat-card-khv739">
                            <button class="ckan-run-now-btn-khv739" id="ckan-run-harvester">
                                <svg viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M8 5v14l11-7z"/>
                                </svg>
                                <?php _e('Run Harvester Now', DGA_TEXT_DOMAIN); ?>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Endpoints Section -->
                    <div class="ckan-section-khv739">
                        <div class="ckan-section-header-khv739">
                            <h3><?php _e('API Endpoints', DGA_TEXT_DOMAIN); ?></h3>
                            <button class="ckan-btn-add-khv739" id="ckan-add-endpoint">
                                <svg viewBox="0 0 24 24" width="16" height="16">
                                    <path fill="currentColor" d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                </svg>
                                <?php _e('เพิ่ม Endpoint', DGA_TEXT_DOMAIN); ?>
                            </button>
                        </div>
                        
                        <div class="ckan-endpoints-list-khv739" id="ckan-endpoints-list">
                            <!-- Endpoints will be populated here -->
                        </div>
                    </div>
                    
                    <!-- Field Mapping Section -->
                    <div class="ckan-section-khv739">
                        <div class="ckan-section-header-khv739">
                            <h3><?php _e('Field Mapping', DGA_TEXT_DOMAIN); ?></h3>
                            <button class="ckan-btn-automap-khv739" id="ckan-automap-fields">
                                <svg viewBox="0 0 24 24" width="16" height="16">
                                    <path fill="currentColor" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                </svg>
                                <?php _e('Auto-Map Fields', DGA_TEXT_DOMAIN); ?>
                            </button>
                        </div>
                        
                        <div class="ckan-mapping-container-khv739" id="ckan-field-mapping">
                            <!-- Field mapping will be populated here -->
                        </div>
                    </div>
                    
                    <!-- Harvest Log -->
                    <div class="ckan-section-khv739">
                        <div class="ckan-section-header-khv739">
                            <h3><?php _e('Harvest Log', DGA_TEXT_DOMAIN); ?></h3>
                        </div>
                        <div class="ckan-log-container-khv739" id="ckan-harvest-log">
                            <!-- Log entries will appear here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <?php
    return ob_get_clean();
}

/**
 * AJAX Handler for ACF field actions
 */
function handle_acf_modern_actions_mfs582() {
    // Security checks
    check_ajax_referer('acf_modern_nonce_mfs582', 'nonce');
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่มีสิทธิ์ดำเนินการ', DGA_TEXT_DOMAIN)]);
    }

    // Get and validate input
    $group_key = sanitize_text_field($_POST['group_key']);
    $field_group = acf_get_field_group($group_key);

    if (!$field_group) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่พบ Field Group', DGA_TEXT_DOMAIN)]);
    }

    // Load existing fields
    $field_group[DGA_FIELDS_PARAMETER] = acf_get_fields($field_group);
    
    $action = isset($_POST['sub_action']) ? sanitize_text_field($_POST['sub_action']) : '';

    switch ($action) {
        case 'add':
        case 'update':
            $label = isset($_POST[DGA_LABEL_FIELD]) ? sanitize_text_field($_POST[DGA_LABEL_FIELD]) : '';
            $name = isset($_POST['name']) ? sanitize_key($_POST['name']) : '';

            if (empty($label) || empty($name)) {
                wp_send_json_error([DGA_MESSAGE_KEY => __('กรุณากรอกข้อมูลให้ครบถ้วน', DGA_TEXT_DOMAIN)]);
            }

            if ($action === 'add') {
                $new_field = [
                    'key' => 'field_' . uniqid(),
                    DGA_LABEL_FIELD => $label,
                    DGA_NAME_FIELD => $name,
                    DGA_TYPE_FIELD => 'text',
                    'prefix' => 'acf',
                    'instructions' => '',
                    'required' => 0,
                    'conditional_logic' => 0,
                    'wrapper' => ['width' => '', 'class' => '', 'id' => ''],
                    'default_value' => '',
                    'placeholder' => '',
                    'prepend' => '',
                    'append' => '',
                    'maxlength' => '',
                ];
                $field_group[DGA_FIELDS_PARAMETER][] = $new_field;
                $message = __('เพิ่ม Field สำเร็จ', DGA_TEXT_DOMAIN);
                $response_data = $new_field;
            } else {
                $key_to_update = isset($_POST['key']) ? sanitize_text_field($_POST['key']) : '';
                $field_found = false;
                
                foreach ($field_group[DGA_FIELDS_PARAMETER] as &$field) {
                    if ($field['key'] === $key_to_update) {
                        $field[DGA_LABEL_FIELD] = $label;
                        $field['name'] = $name;
                        $field_found = true;
                        $response_data = $field;
                        break;
                    }
                }
                
                if (!$field_found) {
                    wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่พบ Field ที่ต้องการแก้ไข', DGA_TEXT_DOMAIN)]);
                }
                $message = __('แก้ไข Field สำเร็จ', DGA_TEXT_DOMAIN);
            }

            acf_import_field_group($field_group);
            wp_send_json_success([DGA_MESSAGE_KEY => $message, DGA_FIELD_KEY => $response_data]);
            break;

        case 'delete':
            $key_to_delete = isset($_POST['key']) ? sanitize_text_field($_POST['key']) : '';
            
            if (empty($key_to_delete)) {
                wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่พบ Field key', DGA_TEXT_DOMAIN)]);
            }

            $field_group[DGA_FIELDS_PARAMETER] = array_filter($field_group[DGA_FIELDS_PARAMETER], function($field) use ($key_to_delete) {
                return $field['key'] !== $key_to_delete;
            });
            
            $field_group[DGA_FIELDS_PARAMETER] = array_values($field_group[DGA_FIELDS_PARAMETER]);
            
            acf_import_field_group($field_group);
            wp_send_json_success([DGA_MESSAGE_KEY => __('ลบ Field สำเร็จ', DGA_TEXT_DOMAIN)]);
            break;

        default:
            wp_send_json_error([DGA_MESSAGE_KEY => __('Action ไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }
}
add_action('wp_ajax_handle_acf_modern_actions_mfs582', 'handle_acf_modern_actions_mfs582');

/**
 * AJAX Handler for CKAN Harvest operations
 */
/**
 * Refactored AJAX handler with reduced cognitive complexity
 * Complexity reduced from 26 to ~5
 */
function handle_ckan_harvest_actions_khv739() {
    // Security validation
    if (!validate_ckan_harvest_request_khv739()) {
        return;
    }
    
    $action = isset($_POST['sub_action']) ? sanitize_text_field($_POST['sub_action']) : '';
    
    // Dispatch to appropriate handler
    dispatch_ckan_harvest_action_khv739($action);
}

/**
 * Validate CKAN harvest request security
 */
function validate_ckan_harvest_request_khv739() {
    check_ajax_referer('ckan_harvest_nonce_khv739', 'nonce');
    
    if (!current_user_can(DGA_MANAGE_OPTIONS_CAP)) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่มีสิทธิ์ดำเนินการ', DGA_TEXT_DOMAIN)]);
        return false;
    }
    
    return true;
}

/**
 * Dispatch to appropriate action handler
 */
function dispatch_ckan_harvest_action_khv739($action) {
    $handlers = array(
        'save_endpoint' => 'handle_save_endpoint_khv739',
        'detect_structure' => 'handle_detect_structure_khv739',
        'fetch_json_structure' => 'handle_fetch_json_structure_khv739',
        'save_endpoint_mapping' => 'handle_save_endpoint_mapping_khv739',
        'delete_endpoint' => 'handle_delete_endpoint_khv739',
        'run_harvest' => 'handle_run_harvest_khv739',
        'test_endpoint' => 'handle_test_endpoint_khv739',
        'get_endpoints' => 'handle_get_endpoints_khv739',
        'automap_fields' => 'handle_automap_fields_khv739',
        'save_mapping' => 'handle_save_mapping_khv739'
    );
    
    if (isset($handlers[$action]) && function_exists($handlers[$action])) {
        call_user_func($handlers[$action]);
    } else {
        wp_send_json_error([DGA_MESSAGE_KEY => __('Action ไม่ถูกต้อง', DGA_TEXT_DOMAIN)]);
    }
}

/**
 * Handle save endpoint action
 */
function handle_save_endpoint_khv739() {
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    
    // Check if updating existing endpoint
    $endpoint_id = isset($_POST['endpoint_id']) ? sanitize_text_field($_POST['endpoint_id']) : uniqid('endpoint_');
    $existing_index = find_endpoint_index_khv739($endpoints, $endpoint_id);
    
    $endpoint_data = build_endpoint_data_khv739($endpoint_id, $existing_index, $endpoints);
    
    // Update or add endpoint
    if ($existing_index >= 0) {
        $endpoints[$existing_index] = $endpoint_data;
    } else {
        $endpoints[] = $endpoint_data;
    }
    
    update_option('ckan_harvest_endpoints_khv739', $endpoints);
    
    // Schedule cron if needed
    schedule_endpoint_cron_khv739($endpoint_data);
    
    wp_send_json_success([
        DGA_MESSAGE_KEY => __('Endpoint บันทึกสำเร็จ', DGA_TEXT_DOMAIN),
        'endpoint' => $endpoint_data
    ]);
}

/**
 * Find endpoint index by ID
 */
function find_endpoint_index_khv739($endpoints, $endpoint_id) {
    foreach ($endpoints as $index => $ep) {
        if ($ep['id'] === $endpoint_id) {
            return $index;
        }
    }
    return -1;
}

/**
 * Build endpoint data from POST parameters
 */
function build_endpoint_data_khv739($endpoint_id, $existing_index, $endpoints) {
    return [
        'id' => $endpoint_id,
        'url' => esc_url_raw($_POST['url']),
        'api_type' => sanitize_text_field($_POST['api_type'] ?? 'ckan'),
        'data_path' => sanitize_text_field($_POST['data_path'] ?? ''),
        'unique_field' => sanitize_text_field($_POST['unique_field'] ?? 'id'),
        'title_field' => sanitize_text_field($_POST['title_field'] ?? DGA_TITLE_FIELD),
        'content_field' => sanitize_text_field($_POST['content_field'] ?? 'notes'),
        'frequency' => sanitize_text_field($_POST['frequency']),
        'active' => isset($_POST['active']) ? filter_var($_POST['active'], FILTER_VALIDATE_BOOLEAN) : true,
        'field_mapping' => isset($_POST['field_mapping']) ? json_decode(stripslashes($_POST['field_mapping']), true) : [],
        'created' => $existing_index >= 0 ? $endpoints[$existing_index]['created'] : current_time('mysql'),
        'modified' => current_time('mysql')
    ];
}

/**
 * Schedule endpoint cron job
 */
function schedule_endpoint_cron_khv739($endpoint_data) {
    wp_clear_scheduled_hook('ckan_harvest_cron_khv739', [$endpoint_data['id']]);
    if ($endpoint_data['frequency'] !== 'never' && $endpoint_data['active']) {
        wp_schedule_event(time(), $endpoint_data['frequency'], 'ckan_harvest_cron_khv739', [$endpoint_data['id']]);
    }
}

/**
 * Handle detect structure action
 */
function handle_detect_structure_khv739() {
    $url = esc_url_raw($_POST['url']);
    $api_type = sanitize_text_field($_POST['api_type'] ?? 'auto');
    
    $structure = detect_api_structure_khv739($url, $api_type);
    
    if ($structure) {
        wp_send_json_success($structure);
    } else {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่สามารถตรวจจับโครงสร้างได้', DGA_TEXT_DOMAIN)]);
    }
}

/**
 * Handle fetch JSON structure action
 */
function handle_fetch_json_structure_khv739() {
    $url = esc_url_raw($_POST['url']);
    $api_type = sanitize_text_field($_POST['api_type'] ?? 'ckan');
    
    // Get API response
    $response = fetch_api_response_khv739($url);
    if (is_wp_error($response)) {
        wp_send_json_error([DGA_MESSAGE_KEY => $response->get_error_message()]);
        return;
    }
    
    $data = json_decode($response, true);
    if (!$data) {
        wp_send_json_error([DGA_MESSAGE_KEY => __('Invalid JSON response', DGA_TEXT_DOMAIN)]);
        return;
    }
    
    // Extract sample data
    $result = extract_sample_data_khv739($data, $api_type);
    
    if ($result['sample_data']) {
        wp_send_json_success($result);
    } else {
        wp_send_json_error([DGA_MESSAGE_KEY => __('Could not extract data structure', DGA_TEXT_DOMAIN)]);
    }
}

/**
 * Fetch API response with error handling
 */
function fetch_api_response_khv739($url) {
    $response = wp_remote_get($url, [
        'timeout' => 15,
        'sslverify' => false,
        'headers' => [
            'Accept' => 'application/json'
        ]
    ]);
    
    if (is_wp_error($response)) {
        return $response;
    }
    
    return wp_remote_retrieve_body($response);
}

/**
 * Extract sample data from API response
 */
function extract_sample_data_khv739($data, $api_type) {
    $sample_data = null;
    $total_count = 0;
    
    if ($api_type === 'ckan' && isset($data['result'])) {
        $result = extract_ckan_sample_data_khv739($data['result']);
        $sample_data = $result['sample'];
        $total_count = $result['count'];
    } elseif (isset($data['data'])) {
        $result = extract_data_array_sample_khv739($data['data']);
        $sample_data = $result['sample'];
        $total_count = $result['count'];
    } elseif (is_array($data) && isset($data[0])) {
        $sample_data = $data[0];
        $total_count = count($data);
    } else {
        // For single object responses
        $sample_data = $data;
        $total_count = 1;
    }
    
    return [
        'sample_data' => $sample_data,
        'total_count' => $total_count,
        'api_type' => $api_type
    ];
}

/**
 * Extract sample data from CKAN result
 */
function extract_ckan_sample_data_khv739($result) {
    if (isset($result['results'])) {
        return [
            'sample' => $result['results'][0] ?? null,
            'count' => count($result['results'])
        ];
    } elseif (is_array($result)) {
        return [
            'sample' => $result[0] ?? null,
            'count' => count($result)
        ];
    }
    return ['sample' => null, 'count' => 0];
}

/**
 * Extract sample data from data array
 */
function extract_data_array_sample_khv739($data) {
    if (is_array($data)) {
        return [
            'sample' => $data[0] ?? $data,
            'count' => isset($data[0]) ? count($data) : 1
        ];
    }
    return ['sample' => null, 'count' => 0];
}

/**
 * Handle save endpoint mapping action
 */
function handle_save_endpoint_mapping_khv739() {
    $endpoint_id = sanitize_text_field($_POST['endpoint_id']);
    $field_mapping = json_decode(stripslashes($_POST['field_mapping']), true);
    $unique_field = sanitize_text_field($_POST['unique_field'] ?? 'id');
    $title_field = sanitize_text_field($_POST['title_field'] ?? DGA_TITLE_FIELD);
    $content_field = sanitize_text_field($_POST['content_field'] ?? '');
    
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    
    update_endpoint_mapping_khv739($endpoints, $endpoint_id, $field_mapping, $unique_field, $title_field, $content_field);
    
    update_option('ckan_harvest_endpoints_khv739', $endpoints);
    
    wp_send_json_success([DGA_MESSAGE_KEY => __('Field mapping saved successfully', DGA_TEXT_DOMAIN)]);
}

/**
 * Update endpoint mapping data
 */
function update_endpoint_mapping_khv739(&$endpoints, $endpoint_id, $field_mapping, $unique_field, $title_field, $content_field) {
    foreach ($endpoints as &$endpoint) {
        if ($endpoint['id'] === $endpoint_id) {
            $endpoint['field_mapping'] = $field_mapping;
            $endpoint['unique_field'] = $unique_field;
            $endpoint['title_field'] = $title_field;
            $endpoint['content_field'] = $content_field;
            $endpoint['modified'] = current_time('mysql');
            break;
        }
    }
}

/**
 * Handle delete endpoint action
 */
function handle_delete_endpoint_khv739() {
    $endpoint_id = sanitize_text_field($_POST['endpoint_id']);
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    
    $endpoints = array_filter($endpoints, function($ep) use ($endpoint_id) {
        return $ep['id'] !== $endpoint_id;
    });
    
    update_option('ckan_harvest_endpoints_khv739', array_values($endpoints));
    
    // Clear scheduled cron
    wp_clear_scheduled_hook('ckan_harvest_cron_khv739', [$endpoint_id]);
    
    wp_send_json_success([DGA_MESSAGE_KEY => __('ลบ Endpoint สำเร็จ', DGA_TEXT_DOMAIN)]);
}

/**
 * Handle run harvest action
 */
function handle_run_harvest_khv739() {
    $results = ckan_harvest_run_all_khv739();
    wp_send_json_success($results);
}

/**
 * Handle test endpoint action
 */
function handle_test_endpoint_khv739() {
    $url = esc_url_raw($_POST['url']);
    $api_type = sanitize_text_field($_POST['api_type'] ?? 'ckan');
    
    $test_result = test_api_endpoint_khv739($url, $api_type);
    
    if ($test_result[DGA_SUCCESS_STATUS]) {
        wp_send_json_success($test_result);
    } else {
        wp_send_json_error($test_result);
    }
}

/**
 * Handle get endpoints action
 */
function handle_get_endpoints_khv739() {
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    wp_send_json_success(['endpoints' => $endpoints]);
}

/**
 * Handle automap fields action
 */
function handle_automap_fields_khv739() {
    $endpoint_url = esc_url_raw($_POST['endpoint_url']);
    $api_type = sanitize_text_field($_POST['api_type'] ?? 'ckan');
    $data_path = sanitize_text_field($_POST['data_path'] ?? '');
    $target_group_key = isset($_POST['group_key']) ? sanitize_text_field($_POST['group_key']) : 'group_67d8242433935';
    
    // Get ACF fields
    $field_group = acf_get_field_group($target_group_key);
    $acf_fields = acf_get_fields($field_group);
    
    // Fetch sample data
    $sample_data = fetch_api_sample_data_khv739($endpoint_url, $api_type, $data_path);
    
    if ($sample_data) {
        $mapping = ckan_auto_map_fields_khv739($sample_data, $acf_fields);
        
        wp_send_json_success([
            'mapping' => $mapping,
            'api_fields' => array_keys($sample_data),
            'acf_fields' => $acf_fields
        ]);
    } else {
        wp_send_json_error([DGA_MESSAGE_KEY => __('ไม่สามารถดึงข้อมูลตัวอย่างได้', DGA_TEXT_DOMAIN)]);
    }
}

/**
 * Handle save mapping action
 */
function handle_save_mapping_khv739() {
    $endpoint_id = sanitize_text_field($_POST['endpoint_id']);
    $mapping = json_decode(stripslashes($_POST['mapping']), true);
    
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    
    update_endpoint_field_mapping_khv739($endpoints, $endpoint_id, $mapping);
    
    update_option('ckan_harvest_endpoints_khv739', $endpoints);
    
    wp_send_json_success([DGA_MESSAGE_KEY => __('บันทึก Field Mapping สำเร็จ', DGA_TEXT_DOMAIN)]);
}

/**
 * Update endpoint field mapping
 */
function update_endpoint_field_mapping_khv739(&$endpoints, $endpoint_id, $mapping) {
    foreach ($endpoints as &$endpoint) {
        if ($endpoint['id'] === $endpoint_id) {
            $endpoint['field_mapping'] = $mapping;
            $endpoint['modified'] = current_time('mysql');
            break;
        }
    }
}

// The rest of the old switch statement has been broken down into helper functions above
// Below is the continuation from where the switch was removed
        case 'save_endpoint':
add_action('wp_ajax_handle_ckan_harvest_actions_khv739', 'handle_ckan_harvest_actions_khv739');

/**
 * Detect API structure automatically
 */
function detect_api_structure_khv739($url, $api_type = 'auto') {
    $response = wp_remote_get($url, [
        'timeout' => 15,
        'sslverify' => false,
        'headers' => [
            'Accept' => 'application/json'
        ]
    ]);
    
    if (is_wp_error($response)) {
        return false;
    }
    
    $body = wp_remote_retrieve_body($response);
    $data = json_decode($body, true);
    
    if (!$data) {
        return false;
    }
    
    $structure = [
        'api_type' => $api_type,
        'data_path' => '',
        'sample_fields' => [],
        'detected_type' => 'unknown',
        'total_items' => 0
    ];
    
    // Try to detect CKAN structure
    if (isset($data[DGA_SUCCESS_STATUS]) && isset($data['result'])) {
        $structure['detected_type'] = 'ckan';
        $structure['api_type'] = 'ckan';
        
        if (isset($data['result']['results'])) {
            $structure['data_path'] = 'result.results';
            $structure['total_items'] = count($data['result']['results']);
            if (!empty($data['result']['results'][0])) {
                $structure['sample_fields'] = array_keys($data['result']['results'][0]);
            }
        } elseif (is_array($data['result'])) {
            $structure['data_path'] = 'result';
            $structure['total_items'] = count($data['result']);
            if (!empty($data['result'][0])) {
                $structure['sample_fields'] = array_keys($data['result'][0]);
            }
        }
    }
    // Try to detect MOF DataServices structure
    elseif (isset($data['data']) || isset($data['result']) || isset($data['items'])) {
        $structure['detected_type'] = 'mof_gov';
        $structure['api_type'] = 'mof_gov';
        
        // Check different possible data paths
        $possible_paths = ['data', 'result', 'items', 'records', 'response'];
        foreach ($possible_paths as $path) {
            if (isset($data[$path]) && is_array($data[$path])) {
                $structure['data_path'] = $path;
                $structure['total_items'] = count($data[$path]);
                if (!empty($data[$path][0])) {
                    $structure['sample_fields'] = array_keys($data[$path][0]);
                }
                break;
            }
        }
    }
    // Direct array response
    elseif (is_array($data) && isset($data[0])) {
        $structure['detected_type'] = 'custom';
        $structure['api_type'] = 'custom';
        $structure['data_path'] = '';
        $structure['total_items'] = count($data);
        $structure['sample_fields'] = array_keys($data[0]);
    }
    
    return $structure;
}

/**
 * Test API endpoint
 */
function test_api_endpoint_khv739($url, $api_type) {
    $response = wp_remote_get($url, [
        'timeout' => 15,
        'sslverify' => false,
        'headers' => [
            'Accept' => 'application/json'
        ]
    ]);
    
    if (is_wp_error($response)) {
        return [
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => $response->get_error_message()
        ];
    }
    
    $status_code = wp_remote_retrieve_response_code($response);
    $body = wp_remote_retrieve_body($response);
    $data = json_decode($body, true);
    
    if ($status_code !== 200) {
        return [
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => sprintf(__('API returned status code %d', DGA_TEXT_DOMAIN), $status_code)
        ];
    }
    
    if (!$data) {
        return [
            DGA_SUCCESS_STATUS => false,
            DGA_MESSAGE_KEY => __('Invalid JSON response', DGA_TEXT_DOMAIN)
        ];
    }
    
    $structure = detect_api_structure_khv739($url, $api_type);
    
    return [
        DGA_SUCCESS_STATUS => true,
        DGA_MESSAGE_KEY => __('เชื่อมต่อสำเร็จ', DGA_TEXT_DOMAIN),
        'structure' => $structure
    ];
}

/**
 * Fetch sample data from API
 */
function fetch_api_sample_data_khv739($url, $api_type, $data_path = '') {
    $response = wp_remote_get($url, [
        'timeout' => 15,
        'sslverify' => false,
        'headers' => [
            'Accept' => 'application/json'
        ]
    ]);
    
    if (is_wp_error($response)) {
        return null;
    }
    
    $body = wp_remote_retrieve_body($response);
    $data = json_decode($body, true);
    
    if (!$data) {
        return null;
    }
    
    // Navigate to data using path
    if (!empty($data_path)) {
        $paths = explode('.', $data_path);
        foreach ($paths as $path) {
            if (isset($data[$path])) {
                $data = $data[$path];
            } else {
                return null;
            }
        }
    }
    
    // Get first item if array
    if (is_array($data) && isset($data[0])) {
        return $data[0];
    }
    
    return $data;
}

/**
 * Run CKAN Harvest for all endpoints
 */
function ckan_harvest_run_all_khv739() {
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    $total_imported = 0;
    $total_updated = 0;
    $errors = [];
    
    foreach ($endpoints as $endpoint) {
        if (!$endpoint['active']) continue;
        
        try {
            $result = ckan_harvest_endpoint_khv739($endpoint);
            $total_imported += $result['imported'];
            $total_updated += $result['updated'];
        } catch (Exception $e) {
            $errors[] = sprintf(__('Error harvesting %s: %s', DGA_TEXT_DOMAIN), $endpoint['url'], $e->getMessage());
        }
    }
    
    // Update stats
    update_option('ckan_harvest_last_run_khv739', current_time('mysql'));
    $current_total = wp_count_posts('ckan')->publish;
    update_option('ckan_harvest_total_datasets_khv739', $current_total);
    
    return [
        DGA_MESSAGE_KEY => sprintf(__('นำเข้าใหม่ %d รายการ, อัปเดต %d รายการ', DGA_TEXT_DOMAIN), $total_imported, $total_updated),
        'imported' => $total_imported,
        'updated' => $total_updated,
        DGA_TOTAL_FIELD_KEY => $current_total,
        'errors' => $errors,
        'timestamp' => current_time('mysql')
    ];
}

/**
 * Harvest data from a single endpoint (supports multiple API types)
 */
function ckan_harvest_endpoint_khv739($endpoint) {
    $imported = 0;
    $updated = 0;
    
    // Fetch data from API
    $response = wp_remote_get($endpoint['url'], [
        'timeout' => 30,
        'sslverify' => false,
        'headers' => [
            'Accept' => 'application/json'
        ]
    ]);
    
    if (is_wp_error($response)) {
        throw new Exception($response->get_error_message());
    }
    
    $body = wp_remote_retrieve_body($response);
    $data = json_decode($body, true);
    
    if (!$data) {
        throw new Exception(__('Invalid JSON response', DGA_TEXT_DOMAIN));
    }
    
    // Navigate to actual data using data_path
    $datasets = $data;
    if (!empty($endpoint['data_path'])) {
        $paths = explode('.', $endpoint['data_path']);
        foreach ($paths as $path) {
            if (isset($datasets[$path])) {
                $datasets = $datasets[$path];
            } else {
                throw new Exception(sprintf(__('Data path "%s" not found', DGA_TEXT_DOMAIN), $endpoint['data_path']));
            }
        }
    }
    
    // Handle different API response structures
    if ($endpoint['api_type'] === 'ckan' && isset($data['result'])) {
        if (isset($data['result']['results'])) {
            $datasets = $data['result']['results'];
        } elseif (is_array($data['result'])) {
            $datasets = $data['result'];
        }
    }
    
    // Ensure datasets is array
    if (!is_array($datasets)) {
        $datasets = [$datasets];
    }
    
    // Get field configurations
    $unique_field = $endpoint['unique_field'] ?? 'id';
    $title_field = $endpoint['title_field'] ?? DGA_TITLE_FIELD;
    $content_field = $endpoint['content_field'] ?? 'notes';
    
    foreach ($datasets as $dataset) {
        if (!is_array($dataset)) continue;
        
        // Get unique identifier - support nested fields
        $unique_id = get_nested_value_khv739($dataset, $unique_field) ?? uniqid('dataset_');
        
        // Check if post exists
        $existing_posts = get_posts([
            DGA_POST_TYPE_FIELD => 'ckan',
            'meta_key' => 'ckan_dataset_id',
            'meta_value' => $unique_id,
            DGA_POSTS_PER_PAGE => 1,
            DGA_POST_STATUS_FIELD => 'any'
        ]);
        
        // Prepare post data - support nested fields
        $post_title = get_nested_value_khv739($dataset, $title_field) ?? 
                     $dataset['name'] ?? 
                     $dataset[DGA_TITLE_FIELD] ?? 
                     'Dataset ' . $unique_id;
                     
        $post_content = get_nested_value_khv739($dataset, $content_field) ?? 
                       $dataset['description'] ?? 
                       $dataset['notes'] ?? 
                       '';
        
        $post_data = [
            'post_title' => wp_strip_all_tags($post_title),
            'post_content' => wp_kses_post($post_content),
            DGA_POST_STATUS_FIELD => DGA_PUBLISH_STATUS,
            DGA_POST_TYPE_FIELD => 'ckan'
        ];
        
        if (!empty($existing_posts)) {
            // Update existing post
            $post_data['ID'] = $existing_posts[0]->ID;
            $post_id = wp_update_post($post_data);
            if ($post_id && !is_wp_error($post_id)) {
                $updated++;
            }
        } else {
            // Create new post
            $post_id = wp_insert_post($post_data);
            if ($post_id && !is_wp_error($post_id)) {
                $imported++;
            }
        }
        
        if ($post_id && !is_wp_error($post_id)) {
            // Update meta fields
            update_post_meta($post_id, 'ckan_dataset_id', $unique_id);
            
            // Update ACF fields based on mapping - support nested fields
            if (!empty($endpoint['field_mapping'])) {
                foreach ($endpoint['field_mapping'] as $api_field => $acf_field) {
                    if (!empty($acf_field)) {
                        $field_value = get_nested_value_khv739($dataset, $api_field);
                        
                        if ($field_value !== null) {
                            // Handle array/object values
                            if (is_array($field_value) || is_object($field_value)) {
                                $field_value = wp_json_encode($field_value);
                            }
                            
                            update_field($acf_field, $field_value, $post_id);
                        }
                    }
                }
            }
            
            // Store raw data and metadata
            update_post_meta($post_id, 'ckan_raw_data', wp_json_encode($dataset));
            update_post_meta($post_id, 'ckan_source_endpoint', $endpoint['url']);
            update_post_meta($post_id, 'ckan_api_type', $endpoint['api_type']);
            update_post_meta($post_id, 'ckan_last_updated', current_time('mysql'));
            
            // Store additional metadata if available
            if (isset($dataset['organization'])) {
                update_post_meta($post_id, 'ckan_organization', 
                    is_array($dataset['organization']) ? 
                    ($dataset['organization'][DGA_TITLE_FIELD] ?? '') : 
                    $dataset['organization']
                );
            }
            
            if (isset($dataset['license_title'])) {
                update_post_meta($post_id, 'ckan_license', $dataset['license_title']);
            }
            
            if (isset($dataset['tags'])) {
                update_post_meta($post_id, 'ckan_tags', wp_json_encode($dataset['tags']));
            }
        }
    }
    
    return [
        'imported' => $imported,
        'updated' => $updated
    ];
}

/**
 * Get nested value from array using dot notation
 */
function get_nested_value_khv739($array, $path) {
    if (empty($path)) return null;
    
    $keys = explode('.', $path);
    $value = $array;
    
    foreach ($keys as $key) {
        if (is_array($value) && isset($value[$key])) {
            $value = $value[$key];
        } else {
            return null;
        }
    }
    
    return $value;
}

/**
 * Auto-map fields to ACF fields (improved)
 */
function ckan_auto_map_fields_khv739($sample_data, $acf_fields) {
    $mapping = [];
    $api_fields = array_keys($sample_data);
    
    // Common field mappings (expanded)
    $common_mappings = [
        DGA_TITLE_FIELD => [DGA_TITLE_FIELD, 'name', 'heading', 'subject', 'ชื่อ'],
        'description' => ['description', 'content', 'text', 'notes', 'detail', 'คำอธิบาย', 'รายละเอียด'],
        'author' => ['author', 'creator', 'owner', 'publisher', 'ผู้สร้าง'],
        'date' => ['date', 'created', 'modified', 'updated', 'created_at', 'updated_at', 'วันที่'],
        'tags' => ['tags', 'keywords', 'categories', 'หมวดหมู่'],
        'url' => ['url', 'link', 'source', 'href', 'ลิงก์'],
        'license' => ['license', 'license_title', 'สัญญาอนุญาต'],
        'organization' => ['organization', 'org', 'publisher', 'agency', 'หน่วยงาน'],
        'amount' => ['amount', 'value', 'price', 'cost', 'จำนวนเงิน', 'มูลค่า'],
        'year' => ['year', 'fiscal_year', 'budget_year', 'ปี', 'ปีงบประมาณ'],
        'code' => ['code', 'id', 'identifier', 'รหัส'],
        DGA_STATUS_FIELD => [DGA_STATUS_FIELD, 'state', 'สถานะ']
    ];
    
    foreach ($api_fields as $api_field) {
        $api_lower = strtolower($api_field);
        
        // Try exact match first
        foreach ($acf_fields as $acf_field) {
            if (strtolower($acf_field['name']) === $api_lower) {
                $mapping[$api_field] = $acf_field['name'];
                break;
            }
        }
        
        // If no exact match, try common mappings
        if (!isset($mapping[$api_field])) {
            foreach ($common_mappings as $common_key => $variations) {
                foreach ($variations as $variation) {
                    if (strpos($api_lower, $variation) !== false || strpos($variation, $api_lower) !== false) {
                        foreach ($acf_fields as $acf_field) {
                            $acf_lower = strtolower($acf_field['name']);
                            if (strpos($acf_lower, $common_key) !== false || 
                                strpos($acf_lower, $variation) !== false) {
                                $mapping[$api_field] = $acf_field['name'];
                                break 3;
                            }
                        }
                    }
                }
            }
        }
        
        // If still no match, try similarity
        if (!isset($mapping[$api_field])) {
            foreach ($acf_fields as $acf_field) {
                similar_text($api_lower, strtolower($acf_field['name']), $percent);
                
                if ($percent > 60) { // Lower threshold for better matching
                    $mapping[$api_field] = $acf_field['name'];
                    break;
                }
            }
        }
    }
    
    return $mapping;
}

/**
 * Register CKAN post type if not exists
 */
function register_ckan_post_type_khv739() {
    if (!post_type_exists('ckan')) {
        register_post_type('ckan', [
            'labels' => [
                DGA_NAME_FIELD => __('CKAN Datasets', DGA_TEXT_DOMAIN),
                'singular_name' => __('CKAN Dataset', DGA_TEXT_DOMAIN),
                'add_new' => __('Add New Dataset', DGA_TEXT_DOMAIN),
                'add_new_item' => __('Add New Dataset', DGA_TEXT_DOMAIN),
                'edit_item' => __('Edit Dataset', DGA_TEXT_DOMAIN),
                'new_item' => __('New Dataset', DGA_TEXT_DOMAIN),
                'view_item' => __('View Dataset', DGA_TEXT_DOMAIN),
                'search_items' => __('Search Datasets', DGA_TEXT_DOMAIN),
                'not_found' => __('No datasets found', DGA_TEXT_DOMAIN),
                'not_found_in_trash' => __('No datasets found in trash', DGA_TEXT_DOMAIN),
            ],
            'public' => true,
            'has_archive' => true,
            'supports' => [DGA_TITLE_FIELD, 'editor', 'custom-fields', 'thumbnail'],
            'menu_icon' => 'dashicons-database',
            'show_in_rest' => true,
            'rewrite' => ['slug' => 'ckan-dataset'],
        ]);
    }
}
add_action('init', 'register_ckan_post_type_khv739');

/**
 * Register cron schedules
 */
function ckan_harvest_cron_schedules_khv739($schedules) {
    if (!isset($schedules['monthly'])) {
        $schedules['monthly'] = [
            'interval' => 2592000, // 30 days
            'display' => __('Monthly', DGA_TEXT_DOMAIN)
        ];
    }
    
    if (!isset($schedules['twicedaily'])) {
        $schedules['twicedaily'] = [
            'interval' => 43200, // 12 hours
            'display' => __('Twice Daily', DGA_TEXT_DOMAIN)
        ];
    }
    
    return $schedules;
}
add_filter('cron_schedules', 'ckan_harvest_cron_schedules_khv739');

/**
 * Cron job handler
 */
function ckan_harvest_cron_handler_khv739($endpoint_id) {
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    
    foreach ($endpoints as $endpoint) {
        if ($endpoint['id'] === $endpoint_id && $endpoint['active']) {
            try {
                ckan_harvest_endpoint_khv739($endpoint);
                
                // Log successful cron run
                $log = get_option('ckan_harvest_cron_log_khv739', []);
                $log[] = [
                    'endpoint_id' => $endpoint_id,
                    'url' => $endpoint['url'],
                    DGA_STATUS_FIELD => DGA_SUCCESS_STATUS,
                    'timestamp' => current_time('mysql')
                ];
                
                // Keep only last 100 log entries
                $log = array_slice($log, -100);
                update_option('ckan_harvest_cron_log_khv739', $log);
                
            } catch (Exception $e) {
                // Log error
                $log = get_option('ckan_harvest_cron_log_khv739', []);
                $log[] = [
                    'endpoint_id' => $endpoint_id,
                    'url' => $endpoint['url'],
                    DGA_STATUS_FIELD => DGA_ERROR_STATUS,
                    DGA_MESSAGE_KEY => $e->getMessage(),
                    'timestamp' => current_time('mysql')
                ];
                
                $log = array_slice($log, -100);
                update_option('ckan_harvest_cron_log_khv739', $log);
            }
            break;
        }
    }
}
add_action('ckan_harvest_cron_khv739', 'ckan_harvest_cron_handler_khv739');

/**
 * Clean up on deactivation
 */
function ckan_harvest_deactivation_khv739() {
    // Clear all scheduled cron jobs
    $endpoints = get_option('ckan_harvest_endpoints_khv739', []);
    foreach ($endpoints as $endpoint) {
        wp_clear_scheduled_hook('ckan_harvest_cron_khv739', [$endpoint['id']]);
    }
}
register_deactivation_hook(__FILE__, 'ckan_harvest_deactivation_khv739');




/******** ฟังก์ชั่นแสดงรายชื่อหน่วยงานจาก Taxonomy *********/


// Enqueue scripts and styles
function dga_stax_corg_enqueue_scripts_qhx728() {
    global $post;
    
    // Check if shortcode is present in the post content
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'dga_corg_table')) {
        // Enqueue JavaScript
        wp_enqueue_script(
            'dga-stax-corg-js',
            get_stylesheet_directory_uri() . '/js/dga-stax-corg.js',
            array(),
            DGA_VERSION_NUMBER,
            true
        );
        
        // Localize script with AJAX data
        wp_localize_script('dga-stax-corg-js', 'dgaCorgAjax', array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('dga_corg_nonce'),
            'loading_text' => __('Loading...', DGA_TEXT_DOMAIN),
            'error_text' => __('Error loading data. Please try again.', DGA_TEXT_DOMAIN),
            'no_results' => __('No results found.', DGA_TEXT_DOMAIN)
        ));
        
        // Enqueue CSS
        wp_enqueue_style(
            'dga-stax-corg-css',
            get_stylesheet_directory_uri() . '/css/dga-stax-corg.css',
            array(),
            DGA_VERSION_NUMBER
        );
    }
}
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_stax_corg_enqueue_scripts_qhx728');

// Register shortcode
function dga_corg_table_shortcode_qhx728($atts) {
    // Shortcode attributes
    $atts = shortcode_atts(array(
        'per_page' => 10,
        'show_search' => 'true',
        'show_count' => 'true',
        'show_description' => 'true',
        DGA_ORDERBY_FIELD_VALUE => 'name',
        DGA_ORDER_FIELD => 'ASC'
    ), $atts, 'dga_corg_table');
    
    // Start output buffer
    ob_start();
    ?>
    <div class="dga-corg-wrapper-qhx728" data-per-page="<?php echo esc_attr($atts['per_page']); ?>">
        <!-- Search and Filter Section -->
        <?php if ($atts['show_search'] === 'true') : ?>
        <div class="dga-corg-controls-qhx728">
            <div class="dga-search-box-qhx728">
                <label for="dga-corg-search" class="screen-reader-text">
                    <?php _e('Search terms', DGA_TEXT_DOMAIN); ?>
                </label>
                <input 
                    type="text" 
                    id="dga-corg-search" 
                    class="dga-corg-search-qhx728" 
                    placeholder="<?php esc_attr_e('Search terms...', DGA_TEXT_DOMAIN); ?>"
                    aria-label="<?php esc_attr_e('Search taxonomy terms', DGA_TEXT_DOMAIN); ?>"
                >
            </div>
            
            <div class="dga-sort-box-qhx728">
                <label for="dga-corg-sort"><?php _e('Sort by:', DGA_TEXT_DOMAIN); ?></label>
                <select id="dga-corg-sort" class="dga-corg-sort-qhx728" aria-label="<?php esc_attr_e('Sort options', DGA_TEXT_DOMAIN); ?>">
                    <option value="name-asc"><?php _e('Name (A-Z)', DGA_TEXT_DOMAIN); ?></option>
                    <option value="name-desc"><?php _e('Name (Z-A)', DGA_TEXT_DOMAIN); ?></option>
                    <?php if ($atts['show_count'] === 'true') : ?>
                    <option value="count-desc"><?php _e('Count (High to Low)', DGA_TEXT_DOMAIN); ?></option>
                    <option value="count-asc"><?php _e('Count (Low to High)', DGA_TEXT_DOMAIN); ?></option>
                    <?php endif; ?>
                </select>
            </div>
        </div>
        <?php endif; ?>
        
        <!-- Loading Indicator -->
        <div class="dga-loading-qhx728" style="display: none;" role="status" aria-live="polite">
            <span class="dga-spinner-qhx728"></span>
            <span><?php _e('Loading...', DGA_TEXT_DOMAIN); ?></span>
        </div>
        
        <!-- Table Container -->
        <div class="dga-table-container-qhx728">
            <table class="dga-corg-table-qhx728" 
                   data-show-count="<?php echo esc_attr($atts['show_count']); ?>"
                   data-show-description="<?php echo esc_attr($atts['show_description']); ?>"
                   aria-label="<?php esc_attr_e('Taxonomy terms table', DGA_TEXT_DOMAIN); ?>">
                <thead>
                    <tr>
                        <th scope="col"><?php _e('Name', DGA_TEXT_DOMAIN); ?></th>
                        <th scope="col"><?php _e('Slug', DGA_TEXT_DOMAIN); ?></th>
                        <?php if ($atts['show_description'] === 'true') : ?>
                        <th scope="col"><?php _e('Description', DGA_TEXT_DOMAIN); ?></th>
                        <?php endif; ?>
                        <?php if ($atts['show_count'] === 'true') : ?>
                        <th scope="col"><?php _e('Count', DGA_TEXT_DOMAIN); ?></th>
                        <?php endif; ?>
                        <th scope="col"><?php _e('Actions', DGA_TEXT_DOMAIN); ?></th>
                    </tr>
                </thead>
                <tbody id="dga-corg-tbody">
                    <!-- Content loaded via AJAX -->
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        <div class="dga-pagination-qhx728" id="dga-corg-pagination" role="navigation" aria-label="<?php esc_attr_e('Table pagination', DGA_TEXT_DOMAIN); ?>">
            <!-- Pagination loaded via AJAX -->
        </div>
    </div>
    <?php
    
    return ob_get_clean();
}
add_shortcode('dga_corg_table', 'dga_corg_table_shortcode_qhx728');

// AJAX handler for loading terms
function dga_load_corg_terms_ajax_qhx728() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_corg_nonce')) {
        wp_die(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }
    
    // Get and sanitize parameters
    $page = isset($_POST['page']) ? absint($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? absint($_POST['per_page']) : 10;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $orderby = isset($_POST[DGA_ORDERBY_FIELD_VALUE]) ? sanitize_text_field($_POST[DGA_ORDERBY_FIELD_VALUE]) : 'name';
    $order = isset($_POST[DGA_ORDER_FIELD]) ? sanitize_text_field($_POST[DGA_ORDER_FIELD]) : 'ASC';
    $show_count = isset($_POST['show_count']) ? filter_var($_POST['show_count'], FILTER_VALIDATE_BOOLEAN) : true;
    $show_description = isset($_POST['show_description']) ? filter_var($_POST['show_description'], FILTER_VALIDATE_BOOLEAN) : true;
    
    // Validate orderby and order
    $allowed_orderby = array('name', 'count', 'slug');
    $allowed_order = array('ASC', 'DESC');
    
    if (!in_array($orderby, $allowed_orderby)) {
        $orderby = 'name';
    }
    if (!in_array($order, $allowed_order)) {
        $order = 'ASC';
    }
    
    // Build query arguments
    $args = array(
        DGA_TAXONOMY_FIELD => 'corg',
        DGA_HIDE_EMPTY_FIELD => false,
        DGA_ORDERBY_FIELD_VALUE => $orderby,
        DGA_ORDER_FIELD => $order
    );
    
    // Add search if provided
    if (!empty($search)) {
        $args['search'] = $search;
    }
    
    // Get all terms for pagination calculation
    $all_terms = get_terms($args);
    
    if (is_wp_error($all_terms)) {
        wp_send_json_error(array(DGA_MESSAGE_KEY => __('Error loading terms', DGA_TEXT_DOMAIN)));
        return;
    }
    
    $total_terms = count($all_terms);
    $total_pages = ceil($total_terms / $per_page);
    
    // Calculate offset
    $offset = ($page - 1) * $per_page;
    
    // Get paginated terms
    $args['number'] = $per_page;
    $args['offset'] = $offset;
    $terms = get_terms($args);
    
    // Build response HTML
    $html = '';
    
    if (!empty($terms) && !is_wp_error($terms)) {
        foreach ($terms as $term) {
            $html .= '<tr>';
            $html .= '<td data-label="' . esc_attr__('Name', DGA_TEXT_DOMAIN) . '">';
            $html .= '<strong>' . esc_html($term->name) . '</strong>';
            $html .= '</td>';
            
            $html .= '<td data-label="' . esc_attr__('Slug', DGA_TEXT_DOMAIN) . '">';
            $html .= esc_html($term->slug);
            $html .= '</td>';
            
            if ($show_description) {
                $html .= '<td data-label="' . esc_attr__('Description', DGA_TEXT_DOMAIN) . '">';
                $html .= !empty($term->description) ? esc_html($term->description) : '-';
                $html .= '</td>';
            }
            
            if ($show_count) {
                $html .= '<td data-label="' . esc_attr__('Count', DGA_TEXT_DOMAIN) . '">';
                $html .= '<span class="dga-count-badge-qhx728">' . esc_html($term->count) . '</span>';
                $html .= '</td>';
            }
            
            $html .= '<td data-label="' . esc_attr__('Actions', DGA_TEXT_DOMAIN) . '">';
            $html .= '<a href="' . esc_url(get_term_link($term)) . '" class="dga-btn-view-qhx728" aria-label="' . esc_attr(sprintf(__('View %s', DGA_TEXT_DOMAIN), $term->name)) . '">';
            $html .= __('View', DGA_TEXT_DOMAIN);
            $html .= '</a>';
            $html .= '</td>';
            
            $html .= '</tr>';
        }
    } else {
        $colspan = 3;
        if ($show_description) $colspan++;
        if ($show_count) $colspan++;
        
        $html .= '<tr>';
        $html .= '<td colspan="' . $colspan . '" class="dga-no-results-qhx728">';
        $html .= __('No terms found.', DGA_TEXT_DOMAIN);
        $html .= '</td>';
        $html .= '</tr>';
    }
    
    // Build pagination HTML
    $pagination_html = '';
    
    if ($total_pages > 1) {
        $pagination_html .= '<div class="dga-pagination-info-qhx728">';
        $pagination_html .= sprintf(
            __('Showing %1$d-%2$d of %3$d terms', DGA_TEXT_DOMAIN),
            $offset + 1,
            min($offset + $per_page, $total_terms),
            $total_terms
        );
        $pagination_html .= '</div>';
        
        $pagination_html .= '<div class="dga-pagination-buttons-qhx728">';
        
        // Previous button
        if ($page > 1) {
            $pagination_html .= '<button class="dga-page-btn-qhx728" data-page="' . ($page - 1) . '" aria-label="' . esc_attr__('Previous page', DGA_TEXT_DOMAIN) . '">';
            $pagination_html .= __('Previous', DGA_TEXT_DOMAIN);
            $pagination_html .= '</button>';
        }
        
        // Page numbers
        for ($i = 1; $i <= $total_pages; $i++) {
            if ($i == $page) {
                $pagination_html .= '<span class="dga-page-current-qhx728" aria-current="page">' . $i . '</span>';
            } else {
                $pagination_html .= '<button class="dga-page-btn-qhx728" data-page="' . $i . '" aria-label="' . sprintf(esc_attr__('Go to page %d', DGA_TEXT_DOMAIN), $i) . '">' . $i . '</button>';
            }
        }
        
        // Next button
        if ($page < $total_pages) {
            $pagination_html .= '<button class="dga-page-btn-qhx728" data-page="' . ($page + 1) . '" aria-label="' . esc_attr__('Next page', DGA_TEXT_DOMAIN) . '">';
            $pagination_html .= __('Next', DGA_TEXT_DOMAIN);
            $pagination_html .= '</button>';
        }
        
        $pagination_html .= '</div>';
    }
    
    // Send response
    wp_send_json_success(array(
        'html' => $html,
        'pagination' => $pagination_html,
        DGA_TOTAL_FIELD_KEY => $total_terms,
        'pages' => $total_pages
    ));
}
add_action('wp_ajax_dga_load_corg_terms', 'dga_load_corg_terms_ajax_qhx728');
add_action('wp_ajax_nopriv_dga_load_corg_terms', 'dga_load_corg_terms_ajax_qhx728');



/******** ฟังก์ชั่นแสดง SiteMap ที่อ่านจาก MainMenu Wordpress **********/


// Register shortcode and AJAX handlers
add_action('init', 'dga_sitemap_init_xkp492');
function dga_sitemap_init_xkp492() {
    add_shortcode('dga_sitemap', 'dga_sitemap_shortcode_xkp492');
    
    // AJAX handlers
    add_action('wp_ajax_dga_get_sitemap', 'dga_ajax_get_sitemap_xkp492');
    add_action('wp_ajax_nopriv_dga_get_sitemap', 'dga_ajax_get_sitemap_xkp492');
}

// Enqueue scripts and styles
add_action(DGA_ENQUEUE_SCRIPTS_HOOK, 'dga_sitemap_enqueue_assets_xkp492');
function dga_sitemap_enqueue_assets_xkp492() {
    if (has_shortcode(get_post()->post_content, 'dga_sitemap')) {
        // Enqueue CSS
        wp_enqueue_style(
            'dga-sitemap-style',
            get_stylesheet_directory_uri() . '/css/dga-new-sitemap.css',
            array(),
            DGA_THEME_VERSION
        );
        
        // Enqueue JavaScript
        wp_enqueue_script(
            'dga-sitemap-script',
            get_stylesheet_directory_uri() . '/js/dga-new-sitemap.js',
            array(),
            DGA_THEME_VERSION,
            true
        );
        
        // Localize script with AJAX data
        wp_localize_script('dga-sitemap-script', 'dgaSitemapAjax', array(
            'ajaxurl' => admin_url(DGA_ADMIN_AJAX_URL),
            DGA_NONCE_KEY => wp_create_nonce('dga_sitemap_nonce'),
            'loading_text' => __('Loading sitemap...', DGA_TEXT_DOMAIN),
            'error_text' => __('Error loading sitemap. Please try again.', DGA_TEXT_DOMAIN),
            'auto_expand' => 'true' // Auto expand on load
        ));
    }
}

// Shortcode function - Enhanced
function dga_sitemap_shortcode_xkp492($atts) {
    $atts = shortcode_atts(array(
        'menu' => 'primary',
        DGA_TITLE_FIELD => __('Site Map', DGA_TEXT_DOMAIN),
        'show_search' => 'yes',
        'auto_expand' => 'yes', // New attribute for auto-expand
        'show_level_indicators' => 'yes' // Show level badges
    ), $atts);
    
    $output = '<div class="dga-sitemap-container-xkp492" ';
    $output .= 'data-menu="' . esc_attr($atts['menu']) . '" ';
    $output .= 'data-auto-expand="' . esc_attr($atts['auto_expand']) . '" ';
    $output .= 'data-show-indicators="' . esc_attr($atts['show_level_indicators']) . '">';
    
    // Header section
    $output .= '<div class="dga-sitemap-header-xkp492">';
    $output .= '<h2 class="dga-sitemap-title-xkp492">' . esc_html($atts[DGA_TITLE_FIELD]) . '</h2>';
    
    // Search box
    if ($atts['show_search'] === 'yes') {
        $output .= '<div class="dga-sitemap-search-xkp492">';
        $output .= '<input type="text" class="dga-sitemap-search-input-xkp492" ';
        $output .= 'placeholder="' . esc_attr__('Search sitemap...', DGA_TEXT_DOMAIN) . '" ';
        $output .= 'aria-label="' . esc_attr__('Search sitemap', DGA_TEXT_DOMAIN) . '">';
        $output .= '<span class="dga-search-icon-xkp492" aria-hidden="true">🔍</span>';
        $output .= '</div>';
    }
    
    $output .= '</div>'; // Close header
    
    // Level legend
    if ($atts['show_level_indicators'] === 'yes') {
        $output .= '<div class="dga-level-legend-xkp492">';
        $output .= '<span class="dga-legend-title-xkp492">' . __('Menu Levels:', DGA_TEXT_DOMAIN) . '</span>';
        $output .= '<span class="dga-legend-item-xkp492 dga-legend-0-xkp492">' . __('Main', DGA_TEXT_DOMAIN) . '</span>';
        $output .= '<span class="dga-legend-item-xkp492 dga-legend-1-xkp492">' . __('Level 1', DGA_TEXT_DOMAIN) . '</span>';
        $output .= '<span class="dga-legend-item-xkp492 dga-legend-2-xkp492">' . __('Level 2', DGA_TEXT_DOMAIN) . '</span>';
        $output .= '<span class="dga-legend-item-xkp492 dga-legend-3-xkp492">' . __('Level 3', DGA_TEXT_DOMAIN) . '</span>';
        $output .= '</div>';
    }
    
    // Loading indicator
    $output .= '<div class="dga-sitemap-loading-xkp492">';
    $output .= '<div class="dga-loading-spinner-xkp492"></div>';
    $output .= '<span>' . __('Loading sitemap...', DGA_TEXT_DOMAIN) . '</span>';
    $output .= '</div>';
    
    // Sitemap content container
    $output .= '<div class="dga-sitemap-content-xkp492" role="navigation" aria-label="' . esc_attr__('Site Map Navigation', DGA_TEXT_DOMAIN) . '"></div>';
    
    $output .= '</div>'; // Close container
    
    return $output;
}

// AJAX handler remains the same but with additional item count
function dga_ajax_get_sitemap_xkp492() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_sitemap_nonce')) {
        wp_die(__(DGA_SECURITY_FAILED_MSG, DGA_TEXT_DOMAIN));
    }
    
    $menu_location = isset($_POST['menu']) ? sanitize_text_field($_POST['menu']) : 'primary';
    
    // Get menu locations
    $locations = get_nav_menu_locations();
    $menu_id = isset($locations[$menu_location]) ? $locations[$menu_location] : 0;
    
    if (!$menu_id) {
        // Try to get menu by name
        $menu = wp_get_nav_menu_object($menu_location);
        $menu_id = $menu ? $menu->term_id : 0;
    }
    
    if (!$menu_id) {
        wp_send_json_error(__('Menu not found', DGA_TEXT_DOMAIN));
    }
    
    // Get menu items
    $menu_items = wp_get_nav_menu_items($menu_id);
    
    if (!$menu_items) {
        wp_send_json_error(__('No menu items found', DGA_TEXT_DOMAIN));
    }
    
    // Build hierarchical menu structure with counts
    $menu_tree = dga_build_menu_tree_xkp492($menu_items);
    
    wp_send_json_success($menu_tree);
}

// Enhanced build hierarchical menu structure
function dga_build_menu_tree_xkp492($menu_items, $parent_id = 0, $level = 0) {
    $tree = array();
    
    // Maximum 4 levels deep
    if ($level >= 4) {
        return $tree;
    }
    
    foreach ($menu_items as $item) {
        if ($item->menu_item_parent == $parent_id) {
            $children = dga_build_menu_tree_xkp492($menu_items, $item->ID, $level + 1);
            $node = array(
                'id' => $item->ID,
                DGA_TITLE_FIELD => $item->title,
                'url' => $item->url,
                'target' => !empty($item->target) ? $item->target : '_self',
                'classes' => implode(' ', (array) $item->classes),
                'level' => $level,
                'children' => $children,
                'child_count' => count($children) // Add child count for display
            );
            $tree[] = $node;
        }
    }
    
    return $tree;
}


/****** ฟังก์ชั่นแสดงค่าจาก มรด. และ มสพร. ใน PostType "news" ***********/


function add_news_doc_columns_wp19($columns) {
    // To place columns at a specific position, we can slice the array.
    // Here we add them before the 'date' column for better visibility.
    $new_columns = [];
    foreach ($columns as $key => $value) {
        if ($key == 'date') {
            // Add our custom columns here
            $new_columns['doc_mspr'] = __('เลขที่เอกสาร มสพร.', DGA_TEXT_DOMAIN);
            $new_columns['doc_mrd']  = __('เลขที่เอกสาร มรด.', DGA_TEXT_DOMAIN);
        }
        $new_columns[$key] = $value;
    }
    return $new_columns;
}
add_filter('manage_news_posts_columns', 'add_news_doc_columns_wp19');


/**
 * Displays the content for the custom columns.
 * แสดงข้อมูลสำหรับคอลัมน์ที่เพิ่มเข้ามาใหม่
 *
 * @param string $column  The name of the column to display.
 * @param int    $post_id The ID of the current post.
 */
function display_news_doc_columns_content_wp19($column, $post_id) {
    switch ($column) {
        // Case for 'มสพร.' column
        case 'doc_mspr':
            $doc_num_1 = get_post_meta($post_id, 'at_docnum_1', true);
            if (!empty($doc_num_1)) {
                echo esc_html($doc_num_1);
            } else {
                echo '—'; // Display a dash if empty
            }
            break;

        // Case for 'มรด.' column
        case 'doc_mrd':
            $doc_num_2 = get_post_meta($post_id, 'at_docnum_2', true);
            if (!empty($doc_num_2)) {
                echo esc_html($doc_num_2);
            } else {
                echo '—'; // Display a dash if empty
            }
            break;
    }
}
add_action('manage_news_posts_custom_column', 'display_news_doc_columns_content_wp19', 10, 2);



/******** ฟังก์ชั่นนับจำนวน มรด. ***********/

/**
 * Creates the [dga_mld_count] shortcode.
 *
 * This shortcode counts and displays the number of published posts
 * of the 'news' post type that have a non-empty value
 * in the 'at_docnum_2' custom field.
 *
 * @return string The total post count.
 */
function dga_mld_count_shortcode_fx47() {
    // Arguments for the database query.
    $args_qy98 = array(
        DGA_POST_TYPE_FIELD      => 'news',       // Target the 'news' post type.
        DGA_POST_STATUS_FIELD    => DGA_PUBLISH_STATUS,    // Only count publicly visible posts.
        DGA_POSTS_PER_PAGE => -1,           // Ensure we check all posts.
        DGA_FIELDS_PARAMETER         => 'ids',        // Performance: Only fetch post IDs, not full post objects.
        'meta_query'     => array(
            array(
                'key'     => 'at_docnum_2', // The custom field key.
                'compare' => 'EXISTS',      // Check if the field exists.
            ),
             array(
                'key'     => 'at_docnum_2', // The same custom field key.
                'value'   => '',            // The value to compare against.
                'compare' => '!=',          // Check if the field value is NOT empty.
            ),
        ),
    );

    // Execute the query.
    $news_query_js12 = new WP_Query( $args_qy98 );

    // Get the total number of posts found by the query.
    $post_count_rk33 = $news_query_js12->found_posts;
    
    // Although we are not looping, it's good practice to reset post data.
    wp_reset_postdata();

    // Return the count as an integer.
    return absint( $post_count_rk33 );
}
add_shortcode( 'dga_mld_count', 'dga_mld_count_shortcode_fx47' );
