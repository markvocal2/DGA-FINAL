/* CSS Best Practices for SonarQube Compliance */

/* 1. Use CSS Custom Properties (Variables) Effectively */
:root {
  /* Color Palette */
  --color-primary: #1e3a8a;
  --color-secondary: #fb923c;
  --color-text-primary: #1f2937;
  --color-background: #ffffff;
  --color-border: #e5e7eb;
  
  /* Spacing and Dimensions */
  --spacing-small: 0.5rem;
  --spacing-medium: 1rem;
  --spacing-large: 1.5rem;
  
  /* Typography */
  --font-size-base: 1rem;
  --font-size-small: 0.875rem;
  
  /* Transitions */
  --transition-speed: 0.2s;
}

/* 2. Improve Accessibility */
*, 
*::before, 
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* 3. Use Semantic and Descriptive Selectors */
.component-container {
  max-width: 1200px;
  margin-inline: auto;
  padding-inline: var(--spacing-medium);
  font-family: 
    system-ui, 
    -apple-system, 
    "Segoe UI", 
    Roboto, 
    "Helvetica Neue", 
    Arial, 
    sans-serif;
}

/* 4. Implement Responsive Design */
.component-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: var(--spacing-large);
}

/* 5. Enhance Focus and Interaction States */
.component-item {
  background-color: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  transition: 
    transform var(--transition-speed) ease,
    box-shadow var(--transition-speed) ease;
}

.component-item:hover,
.component-item:focus-within {
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* 6. Improve Button and Interactive Element Styles */
.component-button {
  display: inline-block;
  padding: var(--spacing-small) var(--spacing-medium);
  background-color: var(--color-primary);
  color: white;
  border: none;
  border-radius: 0.375rem;
  font-size: var(--font-size-base);
  cursor: pointer;
  transition: background-color var(--transition-speed) ease;
}

.component-button:hover,
.component-button:focus {
  background-color: color-mix(in srgb, var(--color-primary) 90%, white);
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* 7. Handle Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: none !important;
  }
}

/* 8. Implement Print Styles */
@media print {
  .component-container {
    max-width: none;
    margin: 0;
    padding: 0;
  }
  
  .component-item {
    break-inside: avoid;
    page-break-inside: avoid;
    border: 1px solid #000;
  }
}

/* 9. High Contrast Mode Support */
@media (prefers-contrast: high) {
  .component-button {
    border: 2px solid var(--color-text-primary);
    outline: 2px solid var(--color-text-primary);
  }
}

/* 10. Avoid Duplicating Selectors */
.component-input {
  width: 100%;
  padding: var(--spacing-small);
  border: 1px solid var(--color-border);
  border-radius: 0.375rem;
  font-size: var(--font-size-base);
  transition: 
    border-color var(--transition-speed) ease,
    box-shadow var(--transition-speed) ease;
}

.component-input:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(30, 58, 138, 0.1);
  outline: none;
}

/* Additional Accessibility Improvements */
[role="button"],
[role="link"],
button,
input,
select,
textarea {
  touch-action: manipulation;
}

/* Ensure proper text contrast */
.text-content {
  color: var(--color-text-primary);
  line-height: 1.5;
}

/* Scalable Typography */
html {
  font-size: 16px;
}

@media screen and (max-width: 768px) {
  html {
    font-size: 14px;
  }
}

/* Performance Optimization */
.lazy-load {
  opacity: 0;
  transition: opacity var(--transition-speed) ease;
}

.lazy-load.loaded {
  opacity: 1;
}
